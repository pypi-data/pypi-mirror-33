Metadata-Version: 2.1
Name: grout
Version: 1.0.0
Summary: A flexible schema framework for geospatial data.
Home-page: https://github.com/azavea/grout
Author: Azavea, Inc.
Author-email: info@azavea.com
License: MIT
Description: # Grout 
        
        [![Build Status](https://travis-ci.org/azavea/grout.svg?branch=develop)](https://travis-ci.org/azavea/grout)
        
        ## Developing
        
        **Grout is under heavy development in tandem with
        [DRIVER](https://github.com/WorldBank-Transport/DRIVER) and
        [djsonb](https://github.com/azavea/djsonb); currently the best way
        to develop on Grout is to set up a DRIVER VM and use that.**
        
        ## Testing
        
        ### Requirements
        
        - [Docker](http://docs.docker.com/installation/ubuntulinux/)
        - [docker-compose](https://docs.docker.com/compose/install/)
        
        ### Running tests
        
        Use the `scripts/test` script to run tests:
        
        ```
        ./scripts/test
        ```
        
        This will run a matrix of tests for **every supported version of Python and
        Django**. If you're developing locally and you just want to run tests once, you
        can specify the version you want to run: 
        
        ```
        # Only run tests for Python 2.7 and Django 1.8
        ./scripts/test app py27-django18
        ```
        
        For a list of available versions, see the `envlist` directive in the [`tox.ini`
        file](./tox.ini). 
        
        To clean up stopped containers and virtualenvs, use the `clean` script:
        
        ```
        ./scripts/clean
        ```
        
        ### Notes on test execution
        
        - You might see duplicate key errors from the db container; these are generated
        deliberately by the test suite and can be safely ignored.
        
        - If your tests crash and leave a `test_postgres` database lying around that prevents you
        from running further tests, the simplest solution is to run `docker-compose rm db`, which
        will delete the database container and refresh it from the base image. You can
        also delete the database container in a shell prompt when running
        `./scripts/test` again after a crash.
        
Keywords: gis jsonschema
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Topic :: Database
Classifier: Topic :: Database :: Database Engines/Servers
Classifier: Topic :: Database :: Front-Ends
Classifier: Topic :: Internet :: WWW/HTTP
Classifier: Topic :: Internet :: WWW/HTTP :: Dynamic Content
Classifier: Topic :: Internet :: WWW/HTTP :: WSGI
Classifier: Topic :: Internet :: WWW/HTTP :: WSGI :: Server
Classifier: Topic :: Software Development :: Libraries
Classifier: Topic :: Software Development :: Libraries :: Application Frameworks
Classifier: Environment :: Web Environment
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3.4
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
Classifier: Framework :: Django
Classifier: Framework :: Django :: 1.8
Classifier: Framework :: Django :: 1.11
Classifier: Framework :: Django :: 2.0
Classifier: Operating System :: OS Independent
Requires-Python: >=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*
Description-Content-Type: text/markdown
