# coding: utf-8

"""
    qTest Manager API Version 8.6 - 9.1

    qTest Manager API Version 8.6 - 9.1

    OpenAPI spec version: 8.6 - 9.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class LoggedUser(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, links=None, id=None, user_name=None, first_name=None, last_name=None, client_id=None, client_name=None, client_site=None, timezone_offset=None, avatar=None, access_admin_page=False, client_site_name=None, package_type=None, applications=None, support_links=None):
        """
        LoggedUser - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'links': 'list[Link]',
            'id': 'int',
            'user_name': 'str',
            'first_name': 'str',
            'last_name': 'str',
            'client_id': 'int',
            'client_name': 'str',
            'client_site': 'str',
            'timezone_offset': 'str',
            'avatar': 'str',
            'access_admin_page': 'bool',
            'client_site_name': 'str',
            'package_type': 'str',
            'applications': 'list[AppDetail]',
            'support_links': 'dict(str, str)'
        }

        self.attribute_map = {
            'links': 'links',
            'id': 'id',
            'user_name': 'user_name',
            'first_name': 'first_name',
            'last_name': 'last_name',
            'client_id': 'client_id',
            'client_name': 'client_name',
            'client_site': 'client_site',
            'timezone_offset': 'timezone_offset',
            'avatar': 'avatar',
            'access_admin_page': 'access_admin_page',
            'client_site_name': 'client_site_name',
            'package_type': 'package_type',
            'applications': 'applications',
            'support_links': 'support_links'
        }

        self._links = links
        self._id = id
        self._user_name = user_name
        self._first_name = first_name
        self._last_name = last_name
        self._client_id = client_id
        self._client_name = client_name
        self._client_site = client_site
        self._timezone_offset = timezone_offset
        self._avatar = avatar
        self._access_admin_page = access_admin_page
        self._client_site_name = client_site_name
        self._package_type = package_type
        self._applications = applications
        self._support_links = support_links

    @property
    def links(self):
        """
        Gets the links of this LoggedUser.

        :return: The links of this LoggedUser.
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """
        Sets the links of this LoggedUser.

        :param links: The links of this LoggedUser.
        :type: list[Link]
        """

        self._links = links

    @property
    def id(self):
        """
        Gets the id of this LoggedUser.
        ID of the User

        :return: The id of this LoggedUser.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this LoggedUser.
        ID of the User

        :param id: The id of this LoggedUser.
        :type: int
        """

        self._id = id

    @property
    def user_name(self):
        """
        Gets the user_name of this LoggedUser.
        Login email of the User

        :return: The user_name of this LoggedUser.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """
        Sets the user_name of this LoggedUser.
        Login email of the User

        :param user_name: The user_name of this LoggedUser.
        :type: str
        """

        self._user_name = user_name

    @property
    def first_name(self):
        """
        Gets the first_name of this LoggedUser.
        First name

        :return: The first_name of this LoggedUser.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """
        Sets the first_name of this LoggedUser.
        First name

        :param first_name: The first_name of this LoggedUser.
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """
        Gets the last_name of this LoggedUser.
        Last name

        :return: The last_name of this LoggedUser.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """
        Sets the last_name of this LoggedUser.
        Last name

        :param last_name: The last_name of this LoggedUser.
        :type: str
        """

        self._last_name = last_name

    @property
    def client_id(self):
        """
        Gets the client_id of this LoggedUser.
        ID of qTest site that User logged in

        :return: The client_id of this LoggedUser.
        :rtype: int
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """
        Sets the client_id of this LoggedUser.
        ID of qTest site that User logged in

        :param client_id: The client_id of this LoggedUser.
        :type: int
        """

        self._client_id = client_id

    @property
    def client_name(self):
        """
        Gets the client_name of this LoggedUser.
        qTest instance client site name

        :return: The client_name of this LoggedUser.
        :rtype: str
        """
        return self._client_name

    @client_name.setter
    def client_name(self, client_name):
        """
        Sets the client_name of this LoggedUser.
        qTest instance client site name

        :param client_name: The client_name of this LoggedUser.
        :type: str
        """

        self._client_name = client_name

    @property
    def client_site(self):
        """
        Gets the client_site of this LoggedUser.
        URL of qTest instance

        :return: The client_site of this LoggedUser.
        :rtype: str
        """
        return self._client_site

    @client_site.setter
    def client_site(self, client_site):
        """
        Sets the client_site of this LoggedUser.
        URL of qTest instance

        :param client_site: The client_site of this LoggedUser.
        :type: str
        """

        self._client_site = client_site

    @property
    def timezone_offset(self):
        """
        Gets the timezone_offset of this LoggedUser.
        Timezone setting of User

        :return: The timezone_offset of this LoggedUser.
        :rtype: str
        """
        return self._timezone_offset

    @timezone_offset.setter
    def timezone_offset(self, timezone_offset):
        """
        Sets the timezone_offset of this LoggedUser.
        Timezone setting of User

        :param timezone_offset: The timezone_offset of this LoggedUser.
        :type: str
        """

        self._timezone_offset = timezone_offset

    @property
    def avatar(self):
        """
        Gets the avatar of this LoggedUser.
        URL to User's Avatar

        :return: The avatar of this LoggedUser.
        :rtype: str
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar):
        """
        Sets the avatar of this LoggedUser.
        URL to User's Avatar

        :param avatar: The avatar of this LoggedUser.
        :type: str
        """

        self._avatar = avatar

    @property
    def access_admin_page(self):
        """
        Gets the access_admin_page of this LoggedUser.
        Can access admin page or not

        :return: The access_admin_page of this LoggedUser.
        :rtype: bool
        """
        return self._access_admin_page

    @access_admin_page.setter
    def access_admin_page(self, access_admin_page):
        """
        Sets the access_admin_page of this LoggedUser.
        Can access admin page or not

        :param access_admin_page: The access_admin_page of this LoggedUser.
        :type: bool
        """

        self._access_admin_page = access_admin_page

    @property
    def client_site_name(self):
        """
        Gets the client_site_name of this LoggedUser.
        qTest instance sub domain name

        :return: The client_site_name of this LoggedUser.
        :rtype: str
        """
        return self._client_site_name

    @client_site_name.setter
    def client_site_name(self, client_site_name):
        """
        Sets the client_site_name of this LoggedUser.
        qTest instance sub domain name

        :param client_site_name: The client_site_name of this LoggedUser.
        :type: str
        """

        self._client_site_name = client_site_name

    @property
    def package_type(self):
        """
        Gets the package_type of this LoggedUser.
        Package type

        :return: The package_type of this LoggedUser.
        :rtype: str
        """
        return self._package_type

    @package_type.setter
    def package_type(self, package_type):
        """
        Sets the package_type of this LoggedUser.
        Package type

        :param package_type: The package_type of this LoggedUser.
        :type: str
        """

        self._package_type = package_type

    @property
    def applications(self):
        """
        Gets the applications of this LoggedUser.
        List qTest products which User can access

        :return: The applications of this LoggedUser.
        :rtype: list[AppDetail]
        """
        return self._applications

    @applications.setter
    def applications(self, applications):
        """
        Sets the applications of this LoggedUser.
        List qTest products which User can access

        :param applications: The applications of this LoggedUser.
        :type: list[AppDetail]
        """

        self._applications = applications

    @property
    def support_links(self):
        """
        Gets the support_links of this LoggedUser.
        Arrays of Supports link

        :return: The support_links of this LoggedUser.
        :rtype: dict(str, str)
        """
        return self._support_links

    @support_links.setter
    def support_links(self, support_links):
        """
        Sets the support_links of this LoggedUser.
        Arrays of Supports link

        :param support_links: The support_links of this LoggedUser.
        :type: dict(str, str)
        """

        self._support_links = support_links

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, LoggedUser):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
