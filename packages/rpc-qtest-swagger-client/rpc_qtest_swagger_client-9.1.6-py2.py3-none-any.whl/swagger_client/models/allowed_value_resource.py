# coding: utf-8

"""
    qTest Manager API Version 8.6 - 9.1

    qTest Manager API Version 8.6 - 9.1

    OpenAPI spec version: 8.6 - 9.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AllowedValueResource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, links=None, value=None, label=None, order=None, is_default=False, is_active=False, color=None):
        """
        AllowedValueResource - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'links': 'list[Link]',
            'value': 'int',
            'label': 'str',
            'order': 'int',
            'is_default': 'bool',
            'is_active': 'bool',
            'color': 'str'
        }

        self.attribute_map = {
            'links': 'links',
            'value': 'value',
            'label': 'label',
            'order': 'order',
            'is_default': 'is_default',
            'is_active': 'is_active',
            'color': 'color'
        }

        self._links = links
        self._value = value
        self._label = label
        self._order = order
        self._is_default = is_default
        self._is_active = is_active
        self._color = color

    @property
    def links(self):
        """
        Gets the links of this AllowedValueResource.

        :return: The links of this AllowedValueResource.
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """
        Sets the links of this AllowedValueResource.

        :param links: The links of this AllowedValueResource.
        :type: list[Link]
        """

        self._links = links

    @property
    def value(self):
        """
        Gets the value of this AllowedValueResource.
        Value of AllowedValue

        :return: The value of this AllowedValueResource.
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value):
        """
        Sets the value of this AllowedValueResource.
        Value of AllowedValue

        :param value: The value of this AllowedValueResource.
        :type: int
        """

        self._value = value

    @property
    def label(self):
        """
        Gets the label of this AllowedValueResource.
        Label of AllowedValue

        :return: The label of this AllowedValueResource.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """
        Sets the label of this AllowedValueResource.
        Label of AllowedValue

        :param label: The label of this AllowedValueResource.
        :type: str
        """

        self._label = label

    @property
    def order(self):
        """
        Gets the order of this AllowedValueResource.
        Display order of AllowedValue

        :return: The order of this AllowedValueResource.
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """
        Sets the order of this AllowedValueResource.
        Display order of AllowedValue

        :param order: The order of this AllowedValueResource.
        :type: int
        """

        self._order = order

    @property
    def is_default(self):
        """
        Gets the is_default of this AllowedValueResource.
        Is default value or not

        :return: The is_default of this AllowedValueResource.
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """
        Sets the is_default of this AllowedValueResource.
        Is default value or not

        :param is_default: The is_default of this AllowedValueResource.
        :type: bool
        """

        self._is_default = is_default

    @property
    def is_active(self):
        """
        Gets the is_active of this AllowedValueResource.
        Is active or not

        :return: The is_active of this AllowedValueResource.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """
        Sets the is_active of this AllowedValueResource.
        Is active or not

        :param is_active: The is_active of this AllowedValueResource.
        :type: bool
        """

        self._is_active = is_active

    @property
    def color(self):
        """
        Gets the color of this AllowedValueResource.
        Color of AllowedValue if Field is Test Run's Status 

        :return: The color of this AllowedValueResource.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """
        Sets the color of this AllowedValueResource.
        Color of AllowedValue if Field is Test Run's Status 

        :param color: The color of this AllowedValueResource.
        :type: str
        """

        self._color = color

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AllowedValueResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
