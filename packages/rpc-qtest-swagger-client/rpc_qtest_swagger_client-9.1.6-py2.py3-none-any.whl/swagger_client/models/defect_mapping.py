# coding: utf-8

"""
    qTest Manager API Version 8.6 - 9.1

    qTest Manager API Version 8.6 - 9.1

    OpenAPI spec version: 8.6 - 9.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DefectMapping(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, type_id=None, type=None, type_label=None, project_id=None, project=None, project_label=None, fields=None):
        """
        DefectMapping - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'type_id': 'int',
            'type': 'str',
            'type_label': 'str',
            'project_id': 'int',
            'project': 'str',
            'project_label': 'str',
            'fields': 'list[DefectFieldMapping]'
        }

        self.attribute_map = {
            'type_id': 'type_id',
            'type': 'type',
            'type_label': 'type_label',
            'project_id': 'project_id',
            'project': 'project',
            'project_label': 'project_label',
            'fields': 'fields'
        }

        self._type_id = type_id
        self._type = type
        self._type_label = type_label
        self._project_id = project_id
        self._project = project
        self._project_label = project_label
        self._fields = fields

    @property
    def type_id(self):
        """
        Gets the type_id of this DefectMapping.

        :return: The type_id of this DefectMapping.
        :rtype: int
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """
        Sets the type_id of this DefectMapping.

        :param type_id: The type_id of this DefectMapping.
        :type: int
        """

        self._type_id = type_id

    @property
    def type(self):
        """
        Gets the type of this DefectMapping.

        :return: The type of this DefectMapping.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this DefectMapping.

        :param type: The type of this DefectMapping.
        :type: str
        """

        self._type = type

    @property
    def type_label(self):
        """
        Gets the type_label of this DefectMapping.

        :return: The type_label of this DefectMapping.
        :rtype: str
        """
        return self._type_label

    @type_label.setter
    def type_label(self, type_label):
        """
        Sets the type_label of this DefectMapping.

        :param type_label: The type_label of this DefectMapping.
        :type: str
        """

        self._type_label = type_label

    @property
    def project_id(self):
        """
        Gets the project_id of this DefectMapping.

        :return: The project_id of this DefectMapping.
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """
        Sets the project_id of this DefectMapping.

        :param project_id: The project_id of this DefectMapping.
        :type: int
        """

        self._project_id = project_id

    @property
    def project(self):
        """
        Gets the project of this DefectMapping.

        :return: The project of this DefectMapping.
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """
        Sets the project of this DefectMapping.

        :param project: The project of this DefectMapping.
        :type: str
        """

        self._project = project

    @property
    def project_label(self):
        """
        Gets the project_label of this DefectMapping.

        :return: The project_label of this DefectMapping.
        :rtype: str
        """
        return self._project_label

    @project_label.setter
    def project_label(self, project_label):
        """
        Sets the project_label of this DefectMapping.

        :param project_label: The project_label of this DefectMapping.
        :type: str
        """

        self._project_label = project_label

    @property
    def fields(self):
        """
        Gets the fields of this DefectMapping.

        :return: The fields of this DefectMapping.
        :rtype: list[DefectFieldMapping]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """
        Sets the fields of this DefectMapping.

        :param fields: The fields of this DefectMapping.
        :type: list[DefectFieldMapping]
        """

        self._fields = fields

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DefectMapping):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
