# coding: utf-8

"""
    qTest Manager API Version 8.6 - 9.1

    qTest Manager API Version 8.6 - 9.1

    OpenAPI spec version: 8.6 - 9.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ProjectResource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, links=None, id=None, name=None, description=None, status_id=None, start_date=None, end_date=None, admins=None, sample=False, user_profile=None, defect_tracking_systems=None, x_explorer_access_level=None, date_format=None, automation=False):
        """
        ProjectResource - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'links': 'list[Link]',
            'id': 'int',
            'name': 'str',
            'description': 'str',
            'status_id': 'int',
            'start_date': 'datetime',
            'end_date': 'datetime',
            'admins': 'list[str]',
            'sample': 'bool',
            'user_profile': 'UserProfile',
            'defect_tracking_systems': 'list[DefectTrackingSystem]',
            'x_explorer_access_level': 'int',
            'date_format': 'str',
            'automation': 'bool'
        }

        self.attribute_map = {
            'links': 'links',
            'id': 'id',
            'name': 'name',
            'description': 'description',
            'status_id': 'status_id',
            'start_date': 'start_date',
            'end_date': 'end_date',
            'admins': 'admins',
            'sample': 'sample',
            'user_profile': 'user_profile',
            'defect_tracking_systems': 'defect_tracking_systems',
            'x_explorer_access_level': 'x_explorer_access_level',
            'date_format': 'date_format',
            'automation': 'automation'
        }

        self._links = links
        self._id = id
        self._name = name
        self._description = description
        self._status_id = status_id
        self._start_date = start_date
        self._end_date = end_date
        self._admins = admins
        self._sample = sample
        self._user_profile = user_profile
        self._defect_tracking_systems = defect_tracking_systems
        self._x_explorer_access_level = x_explorer_access_level
        self._date_format = date_format
        self._automation = automation

    @property
    def links(self):
        """
        Gets the links of this ProjectResource.

        :return: The links of this ProjectResource.
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """
        Sets the links of this ProjectResource.

        :param links: The links of this ProjectResource.
        :type: list[Link]
        """

        self._links = links

    @property
    def id(self):
        """
        Gets the id of this ProjectResource.
        ID of the Project

        :return: The id of this ProjectResource.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ProjectResource.
        ID of the Project

        :param id: The id of this ProjectResource.
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this ProjectResource.
        Name of the Project

        :return: The name of this ProjectResource.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ProjectResource.
        Name of the Project

        :param name: The name of this ProjectResource.
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this ProjectResource.
        Description of the Project

        :return: The description of this ProjectResource.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this ProjectResource.
        Description of the Project

        :param description: The description of this ProjectResource.
        :type: str
        """

        self._description = description

    @property
    def status_id(self):
        """
        Gets the status_id of this ProjectResource.
        Status of the Project

        :return: The status_id of this ProjectResource.
        :rtype: int
        """
        return self._status_id

    @status_id.setter
    def status_id(self, status_id):
        """
        Sets the status_id of this ProjectResource.
        Status of the Project

        :param status_id: The status_id of this ProjectResource.
        :type: int
        """

        self._status_id = status_id

    @property
    def start_date(self):
        """
        Gets the start_date of this ProjectResource.
        Start date of the Project

        :return: The start_date of this ProjectResource.
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """
        Sets the start_date of this ProjectResource.
        Start date of the Project

        :param start_date: The start_date of this ProjectResource.
        :type: datetime
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """
        Gets the end_date of this ProjectResource.
        End date of the Project

        :return: The end_date of this ProjectResource.
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """
        Sets the end_date of this ProjectResource.
        End date of the Project

        :param end_date: The end_date of this ProjectResource.
        :type: datetime
        """

        self._end_date = end_date

    @property
    def admins(self):
        """
        Gets the admins of this ProjectResource.
        Arrays of admin user

        :return: The admins of this ProjectResource.
        :rtype: list[str]
        """
        return self._admins

    @admins.setter
    def admins(self, admins):
        """
        Sets the admins of this ProjectResource.
        Arrays of admin user

        :param admins: The admins of this ProjectResource.
        :type: list[str]
        """

        self._admins = admins

    @property
    def sample(self):
        """
        Gets the sample of this ProjectResource.
        Is sample or not

        :return: The sample of this ProjectResource.
        :rtype: bool
        """
        return self._sample

    @sample.setter
    def sample(self, sample):
        """
        Sets the sample of this ProjectResource.
        Is sample or not

        :param sample: The sample of this ProjectResource.
        :type: bool
        """

        self._sample = sample

    @property
    def user_profile(self):
        """
        Gets the user_profile of this ProjectResource.
        Arrays of User Profile in Project

        :return: The user_profile of this ProjectResource.
        :rtype: UserProfile
        """
        return self._user_profile

    @user_profile.setter
    def user_profile(self, user_profile):
        """
        Sets the user_profile of this ProjectResource.
        Arrays of User Profile in Project

        :param user_profile: The user_profile of this ProjectResource.
        :type: UserProfile
        """

        self._user_profile = user_profile

    @property
    def defect_tracking_systems(self):
        """
        Gets the defect_tracking_systems of this ProjectResource.
        Arrays of External Defect Tracking Connection

        :return: The defect_tracking_systems of this ProjectResource.
        :rtype: list[DefectTrackingSystem]
        """
        return self._defect_tracking_systems

    @defect_tracking_systems.setter
    def defect_tracking_systems(self, defect_tracking_systems):
        """
        Sets the defect_tracking_systems of this ProjectResource.
        Arrays of External Defect Tracking Connection

        :param defect_tracking_systems: The defect_tracking_systems of this ProjectResource.
        :type: list[DefectTrackingSystem]
        """

        self._defect_tracking_systems = defect_tracking_systems

    @property
    def x_explorer_access_level(self):
        """
        Gets the x_explorer_access_level of this ProjectResource.
        Can access Explorer

        :return: The x_explorer_access_level of this ProjectResource.
        :rtype: int
        """
        return self._x_explorer_access_level

    @x_explorer_access_level.setter
    def x_explorer_access_level(self, x_explorer_access_level):
        """
        Sets the x_explorer_access_level of this ProjectResource.
        Can access Explorer

        :param x_explorer_access_level: The x_explorer_access_level of this ProjectResource.
        :type: int
        """

        self._x_explorer_access_level = x_explorer_access_level

    @property
    def date_format(self):
        """
        Gets the date_format of this ProjectResource.
        Client date time format

        :return: The date_format of this ProjectResource.
        :rtype: str
        """
        return self._date_format

    @date_format.setter
    def date_format(self, date_format):
        """
        Sets the date_format of this ProjectResource.
        Client date time format

        :param date_format: The date_format of this ProjectResource.
        :type: str
        """

        self._date_format = date_format

    @property
    def automation(self):
        """
        Gets the automation of this ProjectResource.
        Automation enabled or not

        :return: The automation of this ProjectResource.
        :rtype: bool
        """
        return self._automation

    @automation.setter
    def automation(self, automation):
        """
        Sets the automation of this ProjectResource.
        Automation enabled or not

        :param automation: The automation of this ProjectResource.
        :type: bool
        """

        self._automation = automation

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ProjectResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
