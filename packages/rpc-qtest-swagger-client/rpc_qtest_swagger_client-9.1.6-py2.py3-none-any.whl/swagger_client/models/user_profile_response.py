# coding: utf-8

"""
    qTest Manager API Version 8.6 - 9.1

    qTest Manager API Version 8.6 - 9.1

    OpenAPI spec version: 8.6 - 9.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class UserProfileResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, user_profiles=None, admin_profiles=None, total_user_profiles=None, total_admin_profiles=None):
        """
        UserProfileResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'user_profiles': 'list[Profile]',
            'admin_profiles': 'list[Profile]',
            'total_user_profiles': 'int',
            'total_admin_profiles': 'int'
        }

        self.attribute_map = {
            'user_profiles': 'user_profiles',
            'admin_profiles': 'admin_profiles',
            'total_user_profiles': 'total_user_profiles',
            'total_admin_profiles': 'total_admin_profiles'
        }

        self._user_profiles = user_profiles
        self._admin_profiles = admin_profiles
        self._total_user_profiles = total_user_profiles
        self._total_admin_profiles = total_admin_profiles

    @property
    def user_profiles(self):
        """
        Gets the user_profiles of this UserProfileResponse.
        Arrays of User Profile

        :return: The user_profiles of this UserProfileResponse.
        :rtype: list[Profile]
        """
        return self._user_profiles

    @user_profiles.setter
    def user_profiles(self, user_profiles):
        """
        Sets the user_profiles of this UserProfileResponse.
        Arrays of User Profile

        :param user_profiles: The user_profiles of this UserProfileResponse.
        :type: list[Profile]
        """

        self._user_profiles = user_profiles

    @property
    def admin_profiles(self):
        """
        Gets the admin_profiles of this UserProfileResponse.
        Arrays of Admin Profile

        :return: The admin_profiles of this UserProfileResponse.
        :rtype: list[Profile]
        """
        return self._admin_profiles

    @admin_profiles.setter
    def admin_profiles(self, admin_profiles):
        """
        Sets the admin_profiles of this UserProfileResponse.
        Arrays of Admin Profile

        :param admin_profiles: The admin_profiles of this UserProfileResponse.
        :type: list[Profile]
        """

        self._admin_profiles = admin_profiles

    @property
    def total_user_profiles(self):
        """
        Gets the total_user_profiles of this UserProfileResponse.
        Total User Profile

        :return: The total_user_profiles of this UserProfileResponse.
        :rtype: int
        """
        return self._total_user_profiles

    @total_user_profiles.setter
    def total_user_profiles(self, total_user_profiles):
        """
        Sets the total_user_profiles of this UserProfileResponse.
        Total User Profile

        :param total_user_profiles: The total_user_profiles of this UserProfileResponse.
        :type: int
        """

        self._total_user_profiles = total_user_profiles

    @property
    def total_admin_profiles(self):
        """
        Gets the total_admin_profiles of this UserProfileResponse.
        Total Admin Profile

        :return: The total_admin_profiles of this UserProfileResponse.
        :rtype: int
        """
        return self._total_admin_profiles

    @total_admin_profiles.setter
    def total_admin_profiles(self, total_admin_profiles):
        """
        Sets the total_admin_profiles of this UserProfileResponse.
        Total Admin Profile

        :param total_admin_profiles: The total_admin_profiles of this UserProfileResponse.
        :type: int
        """

        self._total_admin_profiles = total_admin_profiles

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, UserProfileResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
