# coding: utf-8

"""
    qTest Manager API Version 8.6 - 9.1

    qTest Manager API Version 8.6 - 9.1

    OpenAPI spec version: 8.6 - 9.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ArtifactSearchParams(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, object_type=None, fields=None, query=None):
        """
        ArtifactSearchParams - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'object_type': 'str',
            'fields': 'list[str]',
            'query': 'str'
        }

        self.attribute_map = {
            'object_type': 'object_type',
            'fields': 'fields',
            'query': 'query'
        }

        self._object_type = object_type
        self._fields = fields
        self._query = query

    @property
    def object_type(self):
        """
        Gets the object_type of this ArtifactSearchParams.
        Its value can be requirements, test-cases, test-runs, or defects

        :return: The object_type of this ArtifactSearchParams.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this ArtifactSearchParams.
        Its value can be requirements, test-cases, test-runs, or defects

        :param object_type: The object_type of this ArtifactSearchParams.
        :type: str
        """
        if object_type is None:
            raise ValueError("Invalid value for `object_type`, must not be `None`")

        self._object_type = object_type

    @property
    def fields(self):
        """
        Gets the fields of this ArtifactSearchParams.
        fields: specify which object fields you want to include in the response. If you omit it or specify an asterisk (*), all fields are included

        :return: The fields of this ArtifactSearchParams.
        :rtype: list[str]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """
        Sets the fields of this ArtifactSearchParams.
        fields: specify which object fields you want to include in the response. If you omit it or specify an asterisk (*), all fields are included

        :param fields: The fields of this ArtifactSearchParams.
        :type: list[str]
        """

        self._fields = fields

    @property
    def query(self):
        """
        Gets the query of this ArtifactSearchParams.
        Represent text as Data Query

        :return: The query of this ArtifactSearchParams.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """
        Sets the query of this ArtifactSearchParams.
        Represent text as Data Query

        :param query: The query of this ArtifactSearchParams.
        :type: str
        """

        self._query = query

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ArtifactSearchParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
