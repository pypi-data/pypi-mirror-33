# coding: utf-8

"""
    qTest Manager API Version 8.6 - 9.1

    qTest Manager API Version 8.6 - 9.1

    OpenAPI spec version: 8.6 - 9.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class HistoryResource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, created=None, description=None, links=None, id=None, author_id=None, linked_object=None, changes=None):
        """
        HistoryResource - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'created': 'datetime',
            'description': 'str',
            'links': 'list[Link]',
            'id': 'int',
            'author_id': 'int',
            'linked_object': 'LinkedObject',
            'changes': 'list[HistoryChange]'
        }

        self.attribute_map = {
            'created': 'created',
            'description': 'description',
            'links': 'links',
            'id': 'id',
            'author_id': 'author_id',
            'linked_object': 'linked_object',
            'changes': 'changes'
        }

        self._created = created
        self._description = description
        self._links = links
        self._id = id
        self._author_id = author_id
        self._linked_object = linked_object
        self._changes = changes

    @property
    def created(self):
        """
        Gets the created of this HistoryResource.

        :return: The created of this HistoryResource.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this HistoryResource.

        :param created: The created of this HistoryResource.
        :type: datetime
        """

        self._created = created

    @property
    def description(self):
        """
        Gets the description of this HistoryResource.

        :return: The description of this HistoryResource.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this HistoryResource.

        :param description: The description of this HistoryResource.
        :type: str
        """

        self._description = description

    @property
    def links(self):
        """
        Gets the links of this HistoryResource.

        :return: The links of this HistoryResource.
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """
        Sets the links of this HistoryResource.

        :param links: The links of this HistoryResource.
        :type: list[Link]
        """

        self._links = links

    @property
    def id(self):
        """
        Gets the id of this HistoryResource.

        :return: The id of this HistoryResource.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this HistoryResource.

        :param id: The id of this HistoryResource.
        :type: int
        """

        self._id = id

    @property
    def author_id(self):
        """
        Gets the author_id of this HistoryResource.

        :return: The author_id of this HistoryResource.
        :rtype: int
        """
        return self._author_id

    @author_id.setter
    def author_id(self, author_id):
        """
        Sets the author_id of this HistoryResource.

        :param author_id: The author_id of this HistoryResource.
        :type: int
        """

        self._author_id = author_id

    @property
    def linked_object(self):
        """
        Gets the linked_object of this HistoryResource.

        :return: The linked_object of this HistoryResource.
        :rtype: LinkedObject
        """
        return self._linked_object

    @linked_object.setter
    def linked_object(self, linked_object):
        """
        Sets the linked_object of this HistoryResource.

        :param linked_object: The linked_object of this HistoryResource.
        :type: LinkedObject
        """

        self._linked_object = linked_object

    @property
    def changes(self):
        """
        Gets the changes of this HistoryResource.

        :return: The changes of this HistoryResource.
        :rtype: list[HistoryChange]
        """
        return self._changes

    @changes.setter
    def changes(self, changes):
        """
        Sets the changes of this HistoryResource.

        :param changes: The changes of this HistoryResource.
        :type: list[HistoryChange]
        """

        self._changes = changes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, HistoryResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
