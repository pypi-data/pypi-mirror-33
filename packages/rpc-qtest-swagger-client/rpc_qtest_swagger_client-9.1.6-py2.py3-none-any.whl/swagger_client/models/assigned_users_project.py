# coding: utf-8

"""
    qTest Manager API Version 8.6 - 9.1

    qTest Manager API Version 8.6 - 9.1

    OpenAPI spec version: 8.6 - 9.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AssignedUsersProject(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, project_id=None, profile=None, user_ids=None):
        """
        AssignedUsersProject - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'project_id': 'int',
            'profile': 'Profile',
            'user_ids': 'list[int]'
        }

        self.attribute_map = {
            'project_id': 'project_id',
            'profile': 'profile',
            'user_ids': 'user_ids'
        }

        self._project_id = project_id
        self._profile = profile
        self._user_ids = user_ids

    @property
    def project_id(self):
        """
        Gets the project_id of this AssignedUsersProject.
        ID of the Project

        :return: The project_id of this AssignedUsersProject.
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """
        Sets the project_id of this AssignedUsersProject.
        ID of the Project

        :param project_id: The project_id of this AssignedUsersProject.
        :type: int
        """

        self._project_id = project_id

    @property
    def profile(self):
        """
        Gets the profile of this AssignedUsersProject.
        Profile object which contains profile id

        :return: The profile of this AssignedUsersProject.
        :rtype: Profile
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """
        Sets the profile of this AssignedUsersProject.
        Profile object which contains profile id

        :param profile: The profile of this AssignedUsersProject.
        :type: Profile
        """

        self._profile = profile

    @property
    def user_ids(self):
        """
        Gets the user_ids of this AssignedUsersProject.
        Array User ID

        :return: The user_ids of this AssignedUsersProject.
        :rtype: list[int]
        """
        return self._user_ids

    @user_ids.setter
    def user_ids(self, user_ids):
        """
        Sets the user_ids of this AssignedUsersProject.
        Array User ID

        :param user_ids: The user_ids of this AssignedUsersProject.
        :type: list[int]
        """

        self._user_ids = user_ids

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AssignedUsersProject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
