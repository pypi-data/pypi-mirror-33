# coding: utf-8

"""
    qTest Manager API Version 8.6 - 9.1

    qTest Manager API Version 8.6 - 9.1

    OpenAPI spec version: 8.6 - 9.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AttachmentResource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, links=None, name=None, content_type=None, data=None, id=None, web_url=None, created_date=None, author=None, artifact_id=None):
        """
        AttachmentResource - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'links': 'list[Link]',
            'name': 'str',
            'content_type': 'str',
            'data': 'str',
            'id': 'int',
            'web_url': 'str',
            'created_date': 'datetime',
            'author': 'AttachmentAuthor',
            'artifact_id': 'int'
        }

        self.attribute_map = {
            'links': 'links',
            'name': 'name',
            'content_type': 'content_type',
            'data': 'data',
            'id': 'id',
            'web_url': 'web_url',
            'created_date': 'created_date',
            'author': 'author',
            'artifact_id': 'artifact_id'
        }

        self._links = links
        self._name = name
        self._content_type = content_type
        self._data = data
        self._id = id
        self._web_url = web_url
        self._created_date = created_date
        self._author = author
        self._artifact_id = artifact_id

    @property
    def links(self):
        """
        Gets the links of this AttachmentResource.

        :return: The links of this AttachmentResource.
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """
        Sets the links of this AttachmentResource.

        :param links: The links of this AttachmentResource.
        :type: list[Link]
        """

        self._links = links

    @property
    def name(self):
        """
        Gets the name of this AttachmentResource.
        Attachment name

        :return: The name of this AttachmentResource.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this AttachmentResource.
        Attachment name

        :param name: The name of this AttachmentResource.
        :type: str
        """

        self._name = name

    @property
    def content_type(self):
        """
        Gets the content_type of this AttachmentResource.
        Attachment content type

        :return: The content_type of this AttachmentResource.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """
        Sets the content_type of this AttachmentResource.
        Attachment content type

        :param content_type: The content_type of this AttachmentResource.
        :type: str
        """

        self._content_type = content_type

    @property
    def data(self):
        """
        Gets the data of this AttachmentResource.

        :return: The data of this AttachmentResource.
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """
        Sets the data of this AttachmentResource.

        :param data: The data of this AttachmentResource.
        :type: str
        """

        self._data = data

    @property
    def id(self):
        """
        Gets the id of this AttachmentResource.
        ID of the Attachment

        :return: The id of this AttachmentResource.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this AttachmentResource.
        ID of the Attachment

        :param id: The id of this AttachmentResource.
        :type: int
        """

        self._id = id

    @property
    def web_url(self):
        """
        Gets the web_url of this AttachmentResource.
        Web URL to Attachment

        :return: The web_url of this AttachmentResource.
        :rtype: str
        """
        return self._web_url

    @web_url.setter
    def web_url(self, web_url):
        """
        Sets the web_url of this AttachmentResource.
        Web URL to Attachment

        :param web_url: The web_url of this AttachmentResource.
        :type: str
        """

        self._web_url = web_url

    @property
    def created_date(self):
        """
        Gets the created_date of this AttachmentResource.
        The date Attachment was created

        :return: The created_date of this AttachmentResource.
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """
        Sets the created_date of this AttachmentResource.
        The date Attachment was created

        :param created_date: The created_date of this AttachmentResource.
        :type: datetime
        """

        self._created_date = created_date

    @property
    def author(self):
        """
        Gets the author of this AttachmentResource.
        Who create Attachment

        :return: The author of this AttachmentResource.
        :rtype: AttachmentAuthor
        """
        return self._author

    @author.setter
    def author(self, author):
        """
        Sets the author of this AttachmentResource.
        Who create Attachment

        :param author: The author of this AttachmentResource.
        :type: AttachmentAuthor
        """

        self._author = author

    @property
    def artifact_id(self):
        """
        Gets the artifact_id of this AttachmentResource.
        Artifact ID which Attachment linked to

        :return: The artifact_id of this AttachmentResource.
        :rtype: int
        """
        return self._artifact_id

    @artifact_id.setter
    def artifact_id(self, artifact_id):
        """
        Sets the artifact_id of this AttachmentResource.
        Artifact ID which Attachment linked to

        :param artifact_id: The artifact_id of this AttachmentResource.
        :type: int
        """

        self._artifact_id = artifact_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AttachmentResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
