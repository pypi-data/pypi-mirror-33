# coding: utf-8

"""
    qTest Manager API Version 8.6 - 9.1

    qTest Manager API Version 8.6 - 9.1

    OpenAPI spec version: 8.6 - 9.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CommentQueryParams(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, start=None, end=None, object_type=None, fields=None, object=None, author=None):
        """
        CommentQueryParams - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'start': 'datetime',
            'end': 'datetime',
            'object_type': 'str',
            'fields': 'list[str]',
            'object': 'int',
            'author': 'int'
        }

        self.attribute_map = {
            'start': 'start',
            'end': 'end',
            'object_type': 'object_type',
            'fields': 'fields',
            'object': 'object',
            'author': 'author'
        }

        self._start = start
        self._end = end
        self._object_type = object_type
        self._fields = fields
        self._object = object
        self._author = author

    @property
    def start(self):
        """
        Gets the start of this CommentQueryParams.
        StartDate with format: yyyy-MM-dd'T'HH:mm:ss.SSSZ or yyyy-MM-dd'T'HH:mm:ssZZ\"

        :return: The start of this CommentQueryParams.
        :rtype: datetime
        """
        return self._start

    @start.setter
    def start(self, start):
        """
        Sets the start of this CommentQueryParams.
        StartDate with format: yyyy-MM-dd'T'HH:mm:ss.SSSZ or yyyy-MM-dd'T'HH:mm:ssZZ\"

        :param start: The start of this CommentQueryParams.
        :type: datetime
        """

        self._start = start

    @property
    def end(self):
        """
        Gets the end of this CommentQueryParams.
        EndDate with format: yyyy-MM-dd'T'HH:mm:ss.SSSZ or yyyy-MM-dd'T'HH:mm:ssZZ\"

        :return: The end of this CommentQueryParams.
        :rtype: datetime
        """
        return self._end

    @end.setter
    def end(self, end):
        """
        Sets the end of this CommentQueryParams.
        EndDate with format: yyyy-MM-dd'T'HH:mm:ss.SSSZ or yyyy-MM-dd'T'HH:mm:ssZZ\"

        :param end: The end of this CommentQueryParams.
        :type: datetime
        """

        self._end = end

    @property
    def object_type(self):
        """
        Gets the object_type of this CommentQueryParams.
        Only support comments for object types: [requirements, defects, test-cases, test-runs]

        :return: The object_type of this CommentQueryParams.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this CommentQueryParams.
        Only support comments for object types: [requirements, defects, test-cases, test-runs]

        :param object_type: The object_type of this CommentQueryParams.
        :type: str
        """
        if object_type is None:
            raise ValueError("Invalid value for `object_type`, must not be `None`")

        self._object_type = object_type

    @property
    def fields(self):
        """
        Gets the fields of this CommentQueryParams.
        Specify which object fields you want to include in the response. If you omit it or specify an asterisk (*), all fields are included

        :return: The fields of this CommentQueryParams.
        :rtype: list[str]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """
        Sets the fields of this CommentQueryParams.
        Specify which object fields you want to include in the response. If you omit it or specify an asterisk (*), all fields are included

        :param fields: The fields of this CommentQueryParams.
        :type: list[str]
        """

        self._fields = fields

    @property
    def object(self):
        """
        Gets the object of this CommentQueryParams.
        Id of the object from which you want to retrieve comments

        :return: The object of this CommentQueryParams.
        :rtype: int
        """
        return self._object

    @object.setter
    def object(self, object):
        """
        Sets the object of this CommentQueryParams.
        Id of the object from which you want to retrieve comments

        :param object: The object of this CommentQueryParams.
        :type: int
        """

        self._object = object

    @property
    def author(self):
        """
        Gets the author of this CommentQueryParams.
        Id of the user who made the comments

        :return: The author of this CommentQueryParams.
        :rtype: int
        """
        return self._author

    @author.setter
    def author(self, author):
        """
        Sets the author of this CommentQueryParams.
        Id of the user who made the comments

        :param author: The author of this CommentQueryParams.
        :type: int
        """

        self._author = author

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CommentQueryParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
