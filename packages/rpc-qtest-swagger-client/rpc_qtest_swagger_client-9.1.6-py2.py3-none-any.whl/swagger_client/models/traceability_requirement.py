# coding: utf-8

"""
    qTest Manager API Version 8.6 - 9.1

    qTest Manager API Version 8.6 - 9.1

    OpenAPI spec version: 8.6 - 9.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TraceabilityRequirement(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, order=None, requirements=None, children=None, root=False):
        """
        TraceabilityRequirement - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'order': 'int',
            'requirements': 'list[dict(str, object)]',
            'children': 'list[TraceabilityRequirement]',
            'root': 'bool'
        }

        self.attribute_map = {
            'order': 'order',
            'requirements': 'requirements',
            'children': 'children',
            'root': 'root'
        }

        self._order = order
        self._requirements = requirements
        self._children = children
        self._root = root

    @property
    def order(self):
        """
        Gets the order of this TraceabilityRequirement.
        Order

        :return: The order of this TraceabilityRequirement.
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """
        Sets the order of this TraceabilityRequirement.
        Order

        :param order: The order of this TraceabilityRequirement.
        :type: int
        """

        self._order = order

    @property
    def requirements(self):
        """
        Gets the requirements of this TraceabilityRequirement.
        Arrays of Requirement data

        :return: The requirements of this TraceabilityRequirement.
        :rtype: list[dict(str, object)]
        """
        return self._requirements

    @requirements.setter
    def requirements(self, requirements):
        """
        Sets the requirements of this TraceabilityRequirement.
        Arrays of Requirement data

        :param requirements: The requirements of this TraceabilityRequirement.
        :type: list[dict(str, object)]
        """

        self._requirements = requirements

    @property
    def children(self):
        """
        Gets the children of this TraceabilityRequirement.
        Arrays of TraceabilityRequirement

        :return: The children of this TraceabilityRequirement.
        :rtype: list[TraceabilityRequirement]
        """
        return self._children

    @children.setter
    def children(self, children):
        """
        Sets the children of this TraceabilityRequirement.
        Arrays of TraceabilityRequirement

        :param children: The children of this TraceabilityRequirement.
        :type: list[TraceabilityRequirement]
        """

        self._children = children

    @property
    def root(self):
        """
        Gets the root of this TraceabilityRequirement.
        Is root Requirement Module or not

        :return: The root of this TraceabilityRequirement.
        :rtype: bool
        """
        return self._root

    @root.setter
    def root(self, root):
        """
        Sets the root of this TraceabilityRequirement.
        Is root Requirement Module or not

        :param root: The root of this TraceabilityRequirement.
        :type: bool
        """

        self._root = root

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TraceabilityRequirement):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
