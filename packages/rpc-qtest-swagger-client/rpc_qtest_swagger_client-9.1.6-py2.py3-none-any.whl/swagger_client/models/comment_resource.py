# coding: utf-8

"""
    qTest Manager API Version 8.6 - 9.1

    qTest Manager API Version 8.6 - 9.1

    OpenAPI spec version: 8.6 - 9.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CommentResource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, created=None, updated=None, user_id=None, links=None, id=None, content=None):
        """
        CommentResource - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'created': 'datetime',
            'updated': 'datetime',
            'user_id': 'int',
            'links': 'list[Link]',
            'id': 'int',
            'content': 'str'
        }

        self.attribute_map = {
            'created': 'created',
            'updated': 'updated',
            'user_id': 'userId',
            'links': 'links',
            'id': 'id',
            'content': 'content'
        }

        self._created = created
        self._updated = updated
        self._user_id = user_id
        self._links = links
        self._id = id
        self._content = content

    @property
    def created(self):
        """
        Gets the created of this CommentResource.
        Created date of Comment

        :return: The created of this CommentResource.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this CommentResource.
        Created date of Comment

        :param created: The created of this CommentResource.
        :type: datetime
        """

        self._created = created

    @property
    def updated(self):
        """
        Gets the updated of this CommentResource.
        Last updated date of Comment

        :return: The updated of this CommentResource.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """
        Sets the updated of this CommentResource.
        Last updated date of Comment

        :param updated: The updated of this CommentResource.
        :type: datetime
        """

        self._updated = updated

    @property
    def user_id(self):
        """
        Gets the user_id of this CommentResource.
        ID of the User who create this Comment

        :return: The user_id of this CommentResource.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """
        Sets the user_id of this CommentResource.
        ID of the User who create this Comment

        :param user_id: The user_id of this CommentResource.
        :type: int
        """

        self._user_id = user_id

    @property
    def links(self):
        """
        Gets the links of this CommentResource.

        :return: The links of this CommentResource.
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """
        Sets the links of this CommentResource.

        :param links: The links of this CommentResource.
        :type: list[Link]
        """

        self._links = links

    @property
    def id(self):
        """
        Gets the id of this CommentResource.
        ID of the Comment

        :return: The id of this CommentResource.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this CommentResource.
        ID of the Comment

        :param id: The id of this CommentResource.
        :type: int
        """

        self._id = id

    @property
    def content(self):
        """
        Gets the content of this CommentResource.
        Comment text

        :return: The content of this CommentResource.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """
        Sets the content of this CommentResource.
        Comment text

        :param content: The content of this CommentResource.
        :type: str
        """

        self._content = content

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CommentResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
