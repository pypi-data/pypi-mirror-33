# coding: utf-8

"""
    qTest Manager API Version 8.6 - 9.1

    qTest Manager API Version 8.6 - 9.1

    OpenAPI spec version: 8.6 - 9.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TestStepResource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, links=None, id=None, description=None, expected=None, order=None, group=None, called_test_case_name=None, root_called_test_case_id=None, called_test_case=None, parent_test_step_id=None, called_test_case_id=None):
        """
        TestStepResource - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'links': 'list[Link]',
            'id': 'int',
            'description': 'str',
            'expected': 'str',
            'order': 'int',
            'group': 'int',
            'called_test_case_name': 'str',
            'root_called_test_case_id': 'int',
            'called_test_case': 'TestCaseWithCustomFieldResource',
            'parent_test_step_id': 'int',
            'called_test_case_id': 'int'
        }

        self.attribute_map = {
            'links': 'links',
            'id': 'id',
            'description': 'description',
            'expected': 'expected',
            'order': 'order',
            'group': 'group',
            'called_test_case_name': 'called_test_case_name',
            'root_called_test_case_id': 'root_called_test_case_id',
            'called_test_case': 'called_test_case',
            'parent_test_step_id': 'parent_test_step_id',
            'called_test_case_id': 'called_test_case_id'
        }

        self._links = links
        self._id = id
        self._description = description
        self._expected = expected
        self._order = order
        self._group = group
        self._called_test_case_name = called_test_case_name
        self._root_called_test_case_id = root_called_test_case_id
        self._called_test_case = called_test_case
        self._parent_test_step_id = parent_test_step_id
        self._called_test_case_id = called_test_case_id

    @property
    def links(self):
        """
        Gets the links of this TestStepResource.

        :return: The links of this TestStepResource.
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """
        Sets the links of this TestStepResource.

        :param links: The links of this TestStepResource.
        :type: list[Link]
        """

        self._links = links

    @property
    def id(self):
        """
        Gets the id of this TestStepResource.

        :return: The id of this TestStepResource.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this TestStepResource.

        :param id: The id of this TestStepResource.
        :type: int
        """

        self._id = id

    @property
    def description(self):
        """
        Gets the description of this TestStepResource.

        :return: The description of this TestStepResource.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this TestStepResource.

        :param description: The description of this TestStepResource.
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def expected(self):
        """
        Gets the expected of this TestStepResource.

        :return: The expected of this TestStepResource.
        :rtype: str
        """
        return self._expected

    @expected.setter
    def expected(self, expected):
        """
        Sets the expected of this TestStepResource.

        :param expected: The expected of this TestStepResource.
        :type: str
        """
        if expected is None:
            raise ValueError("Invalid value for `expected`, must not be `None`")

        self._expected = expected

    @property
    def order(self):
        """
        Gets the order of this TestStepResource.

        :return: The order of this TestStepResource.
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """
        Sets the order of this TestStepResource.

        :param order: The order of this TestStepResource.
        :type: int
        """
        if order is not None and order < 1:
            raise ValueError("Invalid value for `order`, must be a value greater than or equal to `1`")

        self._order = order

    @property
    def group(self):
        """
        Gets the group of this TestStepResource.

        :return: The group of this TestStepResource.
        :rtype: int
        """
        return self._group

    @group.setter
    def group(self, group):
        """
        Sets the group of this TestStepResource.

        :param group: The group of this TestStepResource.
        :type: int
        """

        self._group = group

    @property
    def called_test_case_name(self):
        """
        Gets the called_test_case_name of this TestStepResource.

        :return: The called_test_case_name of this TestStepResource.
        :rtype: str
        """
        return self._called_test_case_name

    @called_test_case_name.setter
    def called_test_case_name(self, called_test_case_name):
        """
        Sets the called_test_case_name of this TestStepResource.

        :param called_test_case_name: The called_test_case_name of this TestStepResource.
        :type: str
        """

        self._called_test_case_name = called_test_case_name

    @property
    def root_called_test_case_id(self):
        """
        Gets the root_called_test_case_id of this TestStepResource.

        :return: The root_called_test_case_id of this TestStepResource.
        :rtype: int
        """
        return self._root_called_test_case_id

    @root_called_test_case_id.setter
    def root_called_test_case_id(self, root_called_test_case_id):
        """
        Sets the root_called_test_case_id of this TestStepResource.

        :param root_called_test_case_id: The root_called_test_case_id of this TestStepResource.
        :type: int
        """

        self._root_called_test_case_id = root_called_test_case_id

    @property
    def called_test_case(self):
        """
        Gets the called_test_case of this TestStepResource.

        :return: The called_test_case of this TestStepResource.
        :rtype: TestCaseWithCustomFieldResource
        """
        return self._called_test_case

    @called_test_case.setter
    def called_test_case(self, called_test_case):
        """
        Sets the called_test_case of this TestStepResource.

        :param called_test_case: The called_test_case of this TestStepResource.
        :type: TestCaseWithCustomFieldResource
        """

        self._called_test_case = called_test_case

    @property
    def parent_test_step_id(self):
        """
        Gets the parent_test_step_id of this TestStepResource.

        :return: The parent_test_step_id of this TestStepResource.
        :rtype: int
        """
        return self._parent_test_step_id

    @parent_test_step_id.setter
    def parent_test_step_id(self, parent_test_step_id):
        """
        Sets the parent_test_step_id of this TestStepResource.

        :param parent_test_step_id: The parent_test_step_id of this TestStepResource.
        :type: int
        """

        self._parent_test_step_id = parent_test_step_id

    @property
    def called_test_case_id(self):
        """
        Gets the called_test_case_id of this TestStepResource.

        :return: The called_test_case_id of this TestStepResource.
        :rtype: int
        """
        return self._called_test_case_id

    @called_test_case_id.setter
    def called_test_case_id(self, called_test_case_id):
        """
        Sets the called_test_case_id of this TestStepResource.

        :param called_test_case_id: The called_test_case_id of this TestStepResource.
        :type: int
        """

        self._called_test_case_id = called_test_case_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TestStepResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
