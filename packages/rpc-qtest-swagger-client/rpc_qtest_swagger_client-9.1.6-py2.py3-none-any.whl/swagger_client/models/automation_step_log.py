# coding: utf-8

"""
    qTest Manager API Version 8.6 - 9.1

    qTest Manager API Version 8.6 - 9.1

    OpenAPI spec version: 8.6 - 9.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AutomationStepLog(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, test_step_log_id=None, actual_result=None, status=None):
        """
        AutomationStepLog - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'test_step_log_id': 'int',
            'actual_result': 'str',
            'status': 'str'
        }

        self.attribute_map = {
            'test_step_log_id': 'test_step_log_id',
            'actual_result': 'actual_result',
            'status': 'status'
        }

        self._test_step_log_id = test_step_log_id
        self._actual_result = actual_result
        self._status = status

    @property
    def test_step_log_id(self):
        """
        Gets the test_step_log_id of this AutomationStepLog.

        :return: The test_step_log_id of this AutomationStepLog.
        :rtype: int
        """
        return self._test_step_log_id

    @test_step_log_id.setter
    def test_step_log_id(self, test_step_log_id):
        """
        Sets the test_step_log_id of this AutomationStepLog.

        :param test_step_log_id: The test_step_log_id of this AutomationStepLog.
        :type: int
        """
        if test_step_log_id is None:
            raise ValueError("Invalid value for `test_step_log_id`, must not be `None`")

        self._test_step_log_id = test_step_log_id

    @property
    def actual_result(self):
        """
        Gets the actual_result of this AutomationStepLog.

        :return: The actual_result of this AutomationStepLog.
        :rtype: str
        """
        return self._actual_result

    @actual_result.setter
    def actual_result(self, actual_result):
        """
        Sets the actual_result of this AutomationStepLog.

        :param actual_result: The actual_result of this AutomationStepLog.
        :type: str
        """

        self._actual_result = actual_result

    @property
    def status(self):
        """
        Gets the status of this AutomationStepLog.

        :return: The status of this AutomationStepLog.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this AutomationStepLog.

        :param status: The status of this AutomationStepLog.
        :type: str
        """

        self._status = status

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AutomationStepLog):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
