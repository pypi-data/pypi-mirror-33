# coding: utf-8

"""
    qTest Manager API Version 8.6 - 9.1

    qTest Manager API Version 8.6 - 9.1

    OpenAPI spec version: 8.6 - 9.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class UserResourceExtension(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, links=None, id=None, username=None, email=None, password=None, first_name=None, last_name=None, status=None, avatar=None, external_username=None, authentication_system=None, timezone_offset=None, country_name=None):
        """
        UserResourceExtension - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'links': 'list[Link]',
            'id': 'int',
            'username': 'str',
            'email': 'str',
            'password': 'str',
            'first_name': 'str',
            'last_name': 'str',
            'status': 'int',
            'avatar': 'str',
            'external_username': 'str',
            'authentication_system': 'str',
            'timezone_offset': 'str',
            'country_name': 'str'
        }

        self.attribute_map = {
            'links': 'links',
            'id': 'id',
            'username': 'username',
            'email': 'email',
            'password': 'password',
            'first_name': 'first_name',
            'last_name': 'last_name',
            'status': 'status',
            'avatar': 'avatar',
            'external_username': 'external_username',
            'authentication_system': 'authentication_system',
            'timezone_offset': 'timezone_offset',
            'country_name': 'country_name'
        }

        self._links = links
        self._id = id
        self._username = username
        self._email = email
        self._password = password
        self._first_name = first_name
        self._last_name = last_name
        self._status = status
        self._avatar = avatar
        self._external_username = external_username
        self._authentication_system = authentication_system
        self._timezone_offset = timezone_offset
        self._country_name = country_name

    @property
    def links(self):
        """
        Gets the links of this UserResourceExtension.
        Link to resource

        :return: The links of this UserResourceExtension.
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """
        Sets the links of this UserResourceExtension.
        Link to resource

        :param links: The links of this UserResourceExtension.
        :type: list[Link]
        """

        self._links = links

    @property
    def id(self):
        """
        Gets the id of this UserResourceExtension.
        ID of the User

        :return: The id of this UserResourceExtension.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this UserResourceExtension.
        ID of the User

        :param id: The id of this UserResourceExtension.
        :type: int
        """

        self._id = id

    @property
    def username(self):
        """
        Gets the username of this UserResourceExtension.
        Login username of the User

        :return: The username of this UserResourceExtension.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """
        Sets the username of this UserResourceExtension.
        Login username of the User

        :param username: The username of this UserResourceExtension.
        :type: str
        """

        self._username = username

    @property
    def email(self):
        """
        Gets the email of this UserResourceExtension.
        Contact email of the User

        :return: The email of this UserResourceExtension.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this UserResourceExtension.
        Contact email of the User

        :param email: The email of this UserResourceExtension.
        :type: str
        """

        self._email = email

    @property
    def password(self):
        """
        Gets the password of this UserResourceExtension.
        Password of the User

        :return: The password of this UserResourceExtension.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """
        Sets the password of this UserResourceExtension.
        Password of the User

        :param password: The password of this UserResourceExtension.
        :type: str
        """

        self._password = password

    @property
    def first_name(self):
        """
        Gets the first_name of this UserResourceExtension.
        First name of the User

        :return: The first_name of this UserResourceExtension.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """
        Sets the first_name of this UserResourceExtension.
        First name of the User

        :param first_name: The first_name of this UserResourceExtension.
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """
        Gets the last_name of this UserResourceExtension.
        Last name of the User

        :return: The last_name of this UserResourceExtension.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """
        Sets the last_name of this UserResourceExtension.
        Last name of the User

        :param last_name: The last_name of this UserResourceExtension.
        :type: str
        """

        self._last_name = last_name

    @property
    def status(self):
        """
        Gets the status of this UserResourceExtension.
        Status of the User

        :return: The status of this UserResourceExtension.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this UserResourceExtension.
        Status of the User

        :param status: The status of this UserResourceExtension.
        :type: int
        """

        self._status = status

    @property
    def avatar(self):
        """
        Gets the avatar of this UserResourceExtension.
        Avatar URL of the User

        :return: The avatar of this UserResourceExtension.
        :rtype: str
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar):
        """
        Sets the avatar of this UserResourceExtension.
        Avatar URL of the User

        :param avatar: The avatar of this UserResourceExtension.
        :type: str
        """

        self._avatar = avatar

    @property
    def external_username(self):
        """
        Gets the external_username of this UserResourceExtension.
        External username, could be LDAP username or SSO username

        :return: The external_username of this UserResourceExtension.
        :rtype: str
        """
        return self._external_username

    @external_username.setter
    def external_username(self, external_username):
        """
        Sets the external_username of this UserResourceExtension.
        External username, could be LDAP username or SSO username

        :param external_username: The external_username of this UserResourceExtension.
        :type: str
        """

        self._external_username = external_username

    @property
    def authentication_system(self):
        """
        Gets the authentication_system of this UserResourceExtension.
        Name of Login provider, could be LDAP or SSO

        :return: The authentication_system of this UserResourceExtension.
        :rtype: str
        """
        return self._authentication_system

    @authentication_system.setter
    def authentication_system(self, authentication_system):
        """
        Sets the authentication_system of this UserResourceExtension.
        Name of Login provider, could be LDAP or SSO

        :param authentication_system: The authentication_system of this UserResourceExtension.
        :type: str
        """

        self._authentication_system = authentication_system

    @property
    def timezone_offset(self):
        """
        Gets the timezone_offset of this UserResourceExtension.
        Timezone offset of the User

        :return: The timezone_offset of this UserResourceExtension.
        :rtype: str
        """
        return self._timezone_offset

    @timezone_offset.setter
    def timezone_offset(self, timezone_offset):
        """
        Sets the timezone_offset of this UserResourceExtension.
        Timezone offset of the User

        :param timezone_offset: The timezone_offset of this UserResourceExtension.
        :type: str
        """

        self._timezone_offset = timezone_offset

    @property
    def country_name(self):
        """
        Gets the country_name of this UserResourceExtension.
        Country name of timezone

        :return: The country_name of this UserResourceExtension.
        :rtype: str
        """
        return self._country_name

    @country_name.setter
    def country_name(self, country_name):
        """
        Sets the country_name of this UserResourceExtension.
        Country name of timezone

        :param country_name: The country_name of this UserResourceExtension.
        :type: str
        """

        self._country_name = country_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, UserResourceExtension):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
