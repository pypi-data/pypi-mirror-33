# coding: utf-8

"""
    qTest Manager API Version 8.6 - 9.1

    qTest Manager API Version 8.6 - 9.1

    OpenAPI spec version: 8.6 - 9.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AdminProfile(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, user_id=None, create_project=False, edit_project=False, archive_project=False, list_project=False, manage_client_user=False, edit_user_profile=False, view_user_profile=False, manage_client_info=False, manage_system_conf=False, site_level_field=False):
        """
        AdminProfile - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'user_id': 'int',
            'create_project': 'bool',
            'edit_project': 'bool',
            'archive_project': 'bool',
            'list_project': 'bool',
            'manage_client_user': 'bool',
            'edit_user_profile': 'bool',
            'view_user_profile': 'bool',
            'manage_client_info': 'bool',
            'manage_system_conf': 'bool',
            'site_level_field': 'bool'
        }

        self.attribute_map = {
            'user_id': 'user_id',
            'create_project': 'create_project',
            'edit_project': 'edit_project',
            'archive_project': 'archive_project',
            'list_project': 'list_project',
            'manage_client_user': 'manage_client_user',
            'edit_user_profile': 'edit_user_profile',
            'view_user_profile': 'view_user_profile',
            'manage_client_info': 'manage_client_info',
            'manage_system_conf': 'manage_system_conf',
            'site_level_field': 'site_level_field'
        }

        self._user_id = user_id
        self._create_project = create_project
        self._edit_project = edit_project
        self._archive_project = archive_project
        self._list_project = list_project
        self._manage_client_user = manage_client_user
        self._edit_user_profile = edit_user_profile
        self._view_user_profile = view_user_profile
        self._manage_client_info = manage_client_info
        self._manage_system_conf = manage_system_conf
        self._site_level_field = site_level_field

    @property
    def user_id(self):
        """
        Gets the user_id of this AdminProfile.
        ID of the user

        :return: The user_id of this AdminProfile.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """
        Sets the user_id of this AdminProfile.
        ID of the user

        :param user_id: The user_id of this AdminProfile.
        :type: int
        """

        self._user_id = user_id

    @property
    def create_project(self):
        """
        Gets the create_project of this AdminProfile.
        Has permission on create Project

        :return: The create_project of this AdminProfile.
        :rtype: bool
        """
        return self._create_project

    @create_project.setter
    def create_project(self, create_project):
        """
        Sets the create_project of this AdminProfile.
        Has permission on create Project

        :param create_project: The create_project of this AdminProfile.
        :type: bool
        """

        self._create_project = create_project

    @property
    def edit_project(self):
        """
        Gets the edit_project of this AdminProfile.
        Has permission on edit Project

        :return: The edit_project of this AdminProfile.
        :rtype: bool
        """
        return self._edit_project

    @edit_project.setter
    def edit_project(self, edit_project):
        """
        Sets the edit_project of this AdminProfile.
        Has permission on edit Project

        :param edit_project: The edit_project of this AdminProfile.
        :type: bool
        """

        self._edit_project = edit_project

    @property
    def archive_project(self):
        """
        Gets the archive_project of this AdminProfile.
        Has permission on archive Project

        :return: The archive_project of this AdminProfile.
        :rtype: bool
        """
        return self._archive_project

    @archive_project.setter
    def archive_project(self, archive_project):
        """
        Sets the archive_project of this AdminProfile.
        Has permission on archive Project

        :param archive_project: The archive_project of this AdminProfile.
        :type: bool
        """

        self._archive_project = archive_project

    @property
    def list_project(self):
        """
        Gets the list_project of this AdminProfile.
        Has permission on view Project

        :return: The list_project of this AdminProfile.
        :rtype: bool
        """
        return self._list_project

    @list_project.setter
    def list_project(self, list_project):
        """
        Sets the list_project of this AdminProfile.
        Has permission on view Project

        :param list_project: The list_project of this AdminProfile.
        :type: bool
        """

        self._list_project = list_project

    @property
    def manage_client_user(self):
        """
        Gets the manage_client_user of this AdminProfile.
        Has permission on Invite/Edit Users

        :return: The manage_client_user of this AdminProfile.
        :rtype: bool
        """
        return self._manage_client_user

    @manage_client_user.setter
    def manage_client_user(self, manage_client_user):
        """
        Sets the manage_client_user of this AdminProfile.
        Has permission on Invite/Edit Users

        :param manage_client_user: The manage_client_user of this AdminProfile.
        :type: bool
        """

        self._manage_client_user = manage_client_user

    @property
    def edit_user_profile(self):
        """
        Gets the edit_user_profile of this AdminProfile.
        Has permission on edit Profiles

        :return: The edit_user_profile of this AdminProfile.
        :rtype: bool
        """
        return self._edit_user_profile

    @edit_user_profile.setter
    def edit_user_profile(self, edit_user_profile):
        """
        Sets the edit_user_profile of this AdminProfile.
        Has permission on edit Profiles

        :param edit_user_profile: The edit_user_profile of this AdminProfile.
        :type: bool
        """

        self._edit_user_profile = edit_user_profile

    @property
    def view_user_profile(self):
        """
        Gets the view_user_profile of this AdminProfile.
        Has permission on view Profiles

        :return: The view_user_profile of this AdminProfile.
        :rtype: bool
        """
        return self._view_user_profile

    @view_user_profile.setter
    def view_user_profile(self, view_user_profile):
        """
        Sets the view_user_profile of this AdminProfile.
        Has permission on view Profiles

        :param view_user_profile: The view_user_profile of this AdminProfile.
        :type: bool
        """

        self._view_user_profile = view_user_profile

    @property
    def manage_client_info(self):
        """
        Gets the manage_client_info of this AdminProfile.
        Has permission on update Company's information

        :return: The manage_client_info of this AdminProfile.
        :rtype: bool
        """
        return self._manage_client_info

    @manage_client_info.setter
    def manage_client_info(self, manage_client_info):
        """
        Sets the manage_client_info of this AdminProfile.
        Has permission on update Company's information

        :param manage_client_info: The manage_client_info of this AdminProfile.
        :type: bool
        """

        self._manage_client_info = manage_client_info

    @property
    def manage_system_conf(self):
        """
        Gets the manage_system_conf of this AdminProfile.
        Has permission on manage System configuration

        :return: The manage_system_conf of this AdminProfile.
        :rtype: bool
        """
        return self._manage_system_conf

    @manage_system_conf.setter
    def manage_system_conf(self, manage_system_conf):
        """
        Sets the manage_system_conf of this AdminProfile.
        Has permission on manage System configuration

        :param manage_system_conf: The manage_system_conf of this AdminProfile.
        :type: bool
        """

        self._manage_system_conf = manage_system_conf

    @property
    def site_level_field(self):
        """
        Gets the site_level_field of this AdminProfile.
        Has permission on manage site level field setting

        :return: The site_level_field of this AdminProfile.
        :rtype: bool
        """
        return self._site_level_field

    @site_level_field.setter
    def site_level_field(self, site_level_field):
        """
        Sets the site_level_field of this AdminProfile.
        Has permission on manage site level field setting

        :param site_level_field: The site_level_field of this AdminProfile.
        :type: bool
        """

        self._site_level_field = site_level_field

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AdminProfile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
