# coding: utf-8

"""
    qTest Manager API Version 8.6 - 9.1

    qTest Manager API Version 8.6 - 9.1

    OpenAPI spec version: 8.6 - 9.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DefectTrackingSystem(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, defect_mappings=None, connection_name=None, url=None, system_name=None, active=False, id=None):
        """
        DefectTrackingSystem - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'defect_mappings': 'list[DefectMapping]',
            'connection_name': 'str',
            'url': 'str',
            'system_name': 'str',
            'active': 'bool',
            'id': 'int'
        }

        self.attribute_map = {
            'defect_mappings': 'defect_mappings',
            'connection_name': 'connection_name',
            'url': 'url',
            'system_name': 'system_name',
            'active': 'active',
            'id': 'id'
        }

        self._defect_mappings = defect_mappings
        self._connection_name = connection_name
        self._url = url
        self._system_name = system_name
        self._active = active
        self._id = id

    @property
    def defect_mappings(self):
        """
        Gets the defect_mappings of this DefectTrackingSystem.

        :return: The defect_mappings of this DefectTrackingSystem.
        :rtype: list[DefectMapping]
        """
        return self._defect_mappings

    @defect_mappings.setter
    def defect_mappings(self, defect_mappings):
        """
        Sets the defect_mappings of this DefectTrackingSystem.

        :param defect_mappings: The defect_mappings of this DefectTrackingSystem.
        :type: list[DefectMapping]
        """

        self._defect_mappings = defect_mappings

    @property
    def connection_name(self):
        """
        Gets the connection_name of this DefectTrackingSystem.
        Name of Integration Connection

        :return: The connection_name of this DefectTrackingSystem.
        :rtype: str
        """
        return self._connection_name

    @connection_name.setter
    def connection_name(self, connection_name):
        """
        Sets the connection_name of this DefectTrackingSystem.
        Name of Integration Connection

        :param connection_name: The connection_name of this DefectTrackingSystem.
        :type: str
        """

        self._connection_name = connection_name

    @property
    def url(self):
        """
        Gets the url of this DefectTrackingSystem.
        URL to Integration Connection

        :return: The url of this DefectTrackingSystem.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this DefectTrackingSystem.
        URL to Integration Connection

        :param url: The url of this DefectTrackingSystem.
        :type: str
        """

        self._url = url

    @property
    def system_name(self):
        """
        Gets the system_name of this DefectTrackingSystem.
        System name of Integration Connection

        :return: The system_name of this DefectTrackingSystem.
        :rtype: str
        """
        return self._system_name

    @system_name.setter
    def system_name(self, system_name):
        """
        Sets the system_name of this DefectTrackingSystem.
        System name of Integration Connection

        :param system_name: The system_name of this DefectTrackingSystem.
        :type: str
        """

        self._system_name = system_name

    @property
    def active(self):
        """
        Gets the active of this DefectTrackingSystem.
        Status of Integration Connection

        :return: The active of this DefectTrackingSystem.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """
        Sets the active of this DefectTrackingSystem.
        Status of Integration Connection

        :param active: The active of this DefectTrackingSystem.
        :type: bool
        """

        self._active = active

    @property
    def id(self):
        """
        Gets the id of this DefectTrackingSystem.
        ID of Integration Connection

        :return: The id of this DefectTrackingSystem.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this DefectTrackingSystem.
        ID of Integration Connection

        :param id: The id of this DefectTrackingSystem.
        :type: int
        """

        self._id = id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DefectTrackingSystem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
