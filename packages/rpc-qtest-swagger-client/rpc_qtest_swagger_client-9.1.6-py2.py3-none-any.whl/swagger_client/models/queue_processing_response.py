# coding: utf-8

"""
    qTest Manager API Version 8.6 - 9.1

    qTest Manager API Version 8.6 - 9.1

    OpenAPI spec version: 8.6 - 9.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class QueueProcessingResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, type=None, state=None, content_type=None, content=None):
        """
        QueueProcessingResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'type': 'str',
            'state': 'str',
            'content_type': 'str',
            'content': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'type': 'type',
            'state': 'state',
            'content_type': 'contentType',
            'content': 'content'
        }

        self._id = id
        self._type = type
        self._state = state
        self._content_type = content_type
        self._content = content

    @property
    def id(self):
        """
        Gets the id of this QueueProcessingResponse.
        ID of task after batch submit automation test logs

        :return: The id of this QueueProcessingResponse.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this QueueProcessingResponse.
        ID of task after batch submit automation test logs

        :param id: The id of this QueueProcessingResponse.
        :type: int
        """

        self._id = id

    @property
    def type(self):
        """
        Gets the type of this QueueProcessingResponse.
        Type of task after batch submit automation test logs

        :return: The type of this QueueProcessingResponse.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this QueueProcessingResponse.
        Type of task after batch submit automation test logs

        :param type: The type of this QueueProcessingResponse.
        :type: str
        """

        self._type = type

    @property
    def state(self):
        """
        Gets the state of this QueueProcessingResponse.
        State of task after batch submit automation test logs

        :return: The state of this QueueProcessingResponse.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this QueueProcessingResponse.
        State of task after batch submit automation test logs

        :param state: The state of this QueueProcessingResponse.
        :type: str
        """

        self._state = state

    @property
    def content_type(self):
        """
        Gets the content_type of this QueueProcessingResponse.
        Content type of task after batch submit automation test logs

        :return: The content_type of this QueueProcessingResponse.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """
        Sets the content_type of this QueueProcessingResponse.
        Content type of task after batch submit automation test logs

        :param content_type: The content_type of this QueueProcessingResponse.
        :type: str
        """

        self._content_type = content_type

    @property
    def content(self):
        """
        Gets the content of this QueueProcessingResponse.
        Data of task after batch submit automation test logs

        :return: The content of this QueueProcessingResponse.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """
        Sets the content of this QueueProcessingResponse.
        Data of task after batch submit automation test logs

        :param content: The content of this QueueProcessingResponse.
        :type: str
        """

        self._content = content

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, QueueProcessingResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
