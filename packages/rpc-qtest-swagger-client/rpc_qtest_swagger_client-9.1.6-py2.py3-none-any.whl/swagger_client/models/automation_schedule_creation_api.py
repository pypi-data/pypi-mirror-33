# coding: utf-8

"""
    qTest Manager API Version 8.6 - 9.1

    qTest Manager API Version 8.6 - 9.1

    OpenAPI spec version: 8.6 - 9.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AutomationScheduleCreationAPI(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, client_id=None, name=None, agent_id=None, start_date=None, creator=None, project_id=None, test_run_ids=None, dynamic=None):
        """
        AutomationScheduleCreationAPI - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'client_id': 'int',
            'name': 'str',
            'agent_id': 'int',
            'start_date': 'datetime',
            'creator': 'int',
            'project_id': 'int',
            'test_run_ids': 'list[int]',
            'dynamic': 'dict(str, str)'
        }

        self.attribute_map = {
            'client_id': 'clientId',
            'name': 'name',
            'agent_id': 'agentId',
            'start_date': 'startDate',
            'creator': 'creator',
            'project_id': 'projectId',
            'test_run_ids': 'testRunIds',
            'dynamic': 'dynamic'
        }

        self._client_id = client_id
        self._name = name
        self._agent_id = agent_id
        self._start_date = start_date
        self._creator = creator
        self._project_id = project_id
        self._test_run_ids = test_run_ids
        self._dynamic = dynamic

    @property
    def client_id(self):
        """
        Gets the client_id of this AutomationScheduleCreationAPI.

        :return: The client_id of this AutomationScheduleCreationAPI.
        :rtype: int
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """
        Sets the client_id of this AutomationScheduleCreationAPI.

        :param client_id: The client_id of this AutomationScheduleCreationAPI.
        :type: int
        """

        self._client_id = client_id

    @property
    def name(self):
        """
        Gets the name of this AutomationScheduleCreationAPI.
        Name of schedule

        :return: The name of this AutomationScheduleCreationAPI.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this AutomationScheduleCreationAPI.
        Name of schedule

        :param name: The name of this AutomationScheduleCreationAPI.
        :type: str
        """

        self._name = name

    @property
    def agent_id(self):
        """
        Gets the agent_id of this AutomationScheduleCreationAPI.
        ID of the agent which will execute your automation script

        :return: The agent_id of this AutomationScheduleCreationAPI.
        :rtype: int
        """
        return self._agent_id

    @agent_id.setter
    def agent_id(self, agent_id):
        """
        Sets the agent_id of this AutomationScheduleCreationAPI.
        ID of the agent which will execute your automation script

        :param agent_id: The agent_id of this AutomationScheduleCreationAPI.
        :type: int
        """
        if agent_id is None:
            raise ValueError("Invalid value for `agent_id`, must not be `None`")

        self._agent_id = agent_id

    @property
    def start_date(self):
        """
        Gets the start_date of this AutomationScheduleCreationAPI.

        :return: The start_date of this AutomationScheduleCreationAPI.
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """
        Sets the start_date of this AutomationScheduleCreationAPI.

        :param start_date: The start_date of this AutomationScheduleCreationAPI.
        :type: datetime
        """

        self._start_date = start_date

    @property
    def creator(self):
        """
        Gets the creator of this AutomationScheduleCreationAPI.

        :return: The creator of this AutomationScheduleCreationAPI.
        :rtype: int
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """
        Sets the creator of this AutomationScheduleCreationAPI.

        :param creator: The creator of this AutomationScheduleCreationAPI.
        :type: int
        """

        self._creator = creator

    @property
    def project_id(self):
        """
        Gets the project_id of this AutomationScheduleCreationAPI.

        :return: The project_id of this AutomationScheduleCreationAPI.
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """
        Sets the project_id of this AutomationScheduleCreationAPI.

        :param project_id: The project_id of this AutomationScheduleCreationAPI.
        :type: int
        """
        if project_id is None:
            raise ValueError("Invalid value for `project_id`, must not be `None`")

        self._project_id = project_id

    @property
    def test_run_ids(self):
        """
        Gets the test_run_ids of this AutomationScheduleCreationAPI.
        Arrays of Test Run ID

        :return: The test_run_ids of this AutomationScheduleCreationAPI.
        :rtype: list[int]
        """
        return self._test_run_ids

    @test_run_ids.setter
    def test_run_ids(self, test_run_ids):
        """
        Sets the test_run_ids of this AutomationScheduleCreationAPI.
        Arrays of Test Run ID

        :param test_run_ids: The test_run_ids of this AutomationScheduleCreationAPI.
        :type: list[int]
        """

        self._test_run_ids = test_run_ids

    @property
    def dynamic(self):
        """
        Gets the dynamic of this AutomationScheduleCreationAPI.
        Additions values

        :return: The dynamic of this AutomationScheduleCreationAPI.
        :rtype: dict(str, str)
        """
        return self._dynamic

    @dynamic.setter
    def dynamic(self, dynamic):
        """
        Sets the dynamic of this AutomationScheduleCreationAPI.
        Additions values

        :param dynamic: The dynamic of this AutomationScheduleCreationAPI.
        :type: dict(str, str)
        """

        self._dynamic = dynamic

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AutomationScheduleCreationAPI):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
