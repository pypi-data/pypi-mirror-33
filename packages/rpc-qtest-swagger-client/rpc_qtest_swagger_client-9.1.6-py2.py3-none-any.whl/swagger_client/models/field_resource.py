# coding: utf-8

"""
    qTest Manager API Version 8.6 - 9.1

    qTest Manager API Version 8.6 - 9.1

    OpenAPI spec version: 8.6 - 9.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class FieldResource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, instance_type=None, links=None, id=None, label=None, required=False, constrained=False, order=None, allowed_values=None, multiple=False, data_type=None, searchable=False, default_value=None, system_field=False, original_name=None, is_active=False):
        """
        FieldResource - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'instance_type': 'str',
            'links': 'list[Link]',
            'id': 'int',
            'label': 'str',
            'required': 'bool',
            'constrained': 'bool',
            'order': 'int',
            'allowed_values': 'list[AllowedValueResource]',
            'multiple': 'bool',
            'data_type': 'int',
            'searchable': 'bool',
            'default_value': 'str',
            'system_field': 'bool',
            'original_name': 'str',
            'is_active': 'bool'
        }

        self.attribute_map = {
            'instance_type': 'instanceType',
            'links': 'links',
            'id': 'id',
            'label': 'label',
            'required': 'required',
            'constrained': 'constrained',
            'order': 'order',
            'allowed_values': 'allowed_values',
            'multiple': 'multiple',
            'data_type': 'data_type',
            'searchable': 'searchable',
            'default_value': 'default_value',
            'system_field': 'system_field',
            'original_name': 'original_name',
            'is_active': 'is_active'
        }

        self._instance_type = instance_type
        self._links = links
        self._id = id
        self._label = label
        self._required = required
        self._constrained = constrained
        self._order = order
        self._allowed_values = allowed_values
        self._multiple = multiple
        self._data_type = data_type
        self._searchable = searchable
        self._default_value = default_value
        self._system_field = system_field
        self._original_name = original_name
        self._is_active = is_active

    @property
    def instance_type(self):
        """
        Gets the instance_type of this FieldResource.
        Number Data Type

        :return: The instance_type of this FieldResource.
        :rtype: str
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type):
        """
        Sets the instance_type of this FieldResource.
        Number Data Type

        :param instance_type: The instance_type of this FieldResource.
        :type: str
        """

        self._instance_type = instance_type

    @property
    def links(self):
        """
        Gets the links of this FieldResource.

        :return: The links of this FieldResource.
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """
        Sets the links of this FieldResource.

        :param links: The links of this FieldResource.
        :type: list[Link]
        """

        self._links = links

    @property
    def id(self):
        """
        Gets the id of this FieldResource.
        ID of the Field Setting

        :return: The id of this FieldResource.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this FieldResource.
        ID of the Field Setting

        :param id: The id of this FieldResource.
        :type: int
        """

        self._id = id

    @property
    def label(self):
        """
        Gets the label of this FieldResource.
        Label of the Field Setting

        :return: The label of this FieldResource.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """
        Sets the label of this FieldResource.
        Label of the Field Setting

        :param label: The label of this FieldResource.
        :type: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")

        self._label = label

    @property
    def required(self):
        """
        Gets the required of this FieldResource.
        Is required or not

        :return: The required of this FieldResource.
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """
        Sets the required of this FieldResource.
        Is required or not

        :param required: The required of this FieldResource.
        :type: bool
        """

        self._required = required

    @property
    def constrained(self):
        """
        Gets the constrained of this FieldResource.
        Constrained or not

        :return: The constrained of this FieldResource.
        :rtype: bool
        """
        return self._constrained

    @constrained.setter
    def constrained(self, constrained):
        """
        Sets the constrained of this FieldResource.
        Constrained or not

        :param constrained: The constrained of this FieldResource.
        :type: bool
        """

        self._constrained = constrained

    @property
    def order(self):
        """
        Gets the order of this FieldResource.
        Display order

        :return: The order of this FieldResource.
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """
        Sets the order of this FieldResource.
        Display order

        :param order: The order of this FieldResource.
        :type: int
        """

        self._order = order

    @property
    def allowed_values(self):
        """
        Gets the allowed_values of this FieldResource.
        Allowed values

        :return: The allowed_values of this FieldResource.
        :rtype: list[AllowedValueResource]
        """
        return self._allowed_values

    @allowed_values.setter
    def allowed_values(self, allowed_values):
        """
        Sets the allowed_values of this FieldResource.
        Allowed values

        :param allowed_values: The allowed_values of this FieldResource.
        :type: list[AllowedValueResource]
        """

        self._allowed_values = allowed_values

    @property
    def multiple(self):
        """
        Gets the multiple of this FieldResource.
        Is allowed multiple value

        :return: The multiple of this FieldResource.
        :rtype: bool
        """
        return self._multiple

    @multiple.setter
    def multiple(self, multiple):
        """
        Sets the multiple of this FieldResource.
        Is allowed multiple value

        :param multiple: The multiple of this FieldResource.
        :type: bool
        """

        self._multiple = multiple

    @property
    def data_type(self):
        """
        Gets the data_type of this FieldResource.
        Data type of the Field Setting

        :return: The data_type of this FieldResource.
        :rtype: int
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """
        Sets the data_type of this FieldResource.
        Data type of the Field Setting

        :param data_type: The data_type of this FieldResource.
        :type: int
        """
        if data_type is not None and data_type < 1:
            raise ValueError("Invalid value for `data_type`, must be a value greater than or equal to `1`")

        self._data_type = data_type

    @property
    def searchable(self):
        """
        Gets the searchable of this FieldResource.
        Allowed full text search or not

        :return: The searchable of this FieldResource.
        :rtype: bool
        """
        return self._searchable

    @searchable.setter
    def searchable(self, searchable):
        """
        Sets the searchable of this FieldResource.
        Allowed full text search or not

        :param searchable: The searchable of this FieldResource.
        :type: bool
        """

        self._searchable = searchable

    @property
    def default_value(self):
        """
        Gets the default_value of this FieldResource.
        Default value of the Field Setting

        :return: The default_value of this FieldResource.
        :rtype: str
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """
        Sets the default_value of this FieldResource.
        Default value of the Field Setting

        :param default_value: The default_value of this FieldResource.
        :type: str
        """

        self._default_value = default_value

    @property
    def system_field(self):
        """
        Gets the system_field of this FieldResource.
        Is system field or not

        :return: The system_field of this FieldResource.
        :rtype: bool
        """
        return self._system_field

    @system_field.setter
    def system_field(self, system_field):
        """
        Sets the system_field of this FieldResource.
        Is system field or not

        :param system_field: The system_field of this FieldResource.
        :type: bool
        """

        self._system_field = system_field

    @property
    def original_name(self):
        """
        Gets the original_name of this FieldResource.
        Original name of the Field Setting

        :return: The original_name of this FieldResource.
        :rtype: str
        """
        return self._original_name

    @original_name.setter
    def original_name(self, original_name):
        """
        Sets the original_name of this FieldResource.
        Original name of the Field Setting

        :param original_name: The original_name of this FieldResource.
        :type: str
        """

        self._original_name = original_name

    @property
    def is_active(self):
        """
        Gets the is_active of this FieldResource.
        Is active or disabled

        :return: The is_active of this FieldResource.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """
        Sets the is_active of this FieldResource.
        Is active or disabled

        :param is_active: The is_active of this FieldResource.
        :type: bool
        """

        self._is_active = is_active

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FieldResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
