# coding: utf-8

"""
    qTest Manager API Version 8.6 - 9.1

    qTest Manager API Version 8.6 - 9.1

    OpenAPI spec version: 8.6 - 9.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TestCycleResource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, links=None, id=None, name=None, order=None, pid=None, created_date=None, last_modified_date=None, web_url=None, description=None, target_release_id=None, target_build_id=None, test_cycles=None, test_suites=None):
        """
        TestCycleResource - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'links': 'list[Link]',
            'id': 'int',
            'name': 'str',
            'order': 'int',
            'pid': 'str',
            'created_date': 'datetime',
            'last_modified_date': 'datetime',
            'web_url': 'str',
            'description': 'str',
            'target_release_id': 'int',
            'target_build_id': 'int',
            'test_cycles': 'list[TestCycleResource]',
            'test_suites': 'list[TestSuiteWithCustomFieldResource]'
        }

        self.attribute_map = {
            'links': 'links',
            'id': 'id',
            'name': 'name',
            'order': 'order',
            'pid': 'pid',
            'created_date': 'created_date',
            'last_modified_date': 'last_modified_date',
            'web_url': 'web_url',
            'description': 'description',
            'target_release_id': 'target_release_id',
            'target_build_id': 'target_build_id',
            'test_cycles': 'test-cycles',
            'test_suites': 'test-suites'
        }

        self._links = links
        self._id = id
        self._name = name
        self._order = order
        self._pid = pid
        self._created_date = created_date
        self._last_modified_date = last_modified_date
        self._web_url = web_url
        self._description = description
        self._target_release_id = target_release_id
        self._target_build_id = target_build_id
        self._test_cycles = test_cycles
        self._test_suites = test_suites

    @property
    def links(self):
        """
        Gets the links of this TestCycleResource.

        :return: The links of this TestCycleResource.
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """
        Sets the links of this TestCycleResource.

        :param links: The links of this TestCycleResource.
        :type: list[Link]
        """

        self._links = links

    @property
    def id(self):
        """
        Gets the id of this TestCycleResource.

        :return: The id of this TestCycleResource.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this TestCycleResource.

        :param id: The id of this TestCycleResource.
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this TestCycleResource.

        :return: The name of this TestCycleResource.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this TestCycleResource.

        :param name: The name of this TestCycleResource.
        :type: str
        """
        if name is not None and len(name) > 500:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `500`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def order(self):
        """
        Gets the order of this TestCycleResource.

        :return: The order of this TestCycleResource.
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """
        Sets the order of this TestCycleResource.

        :param order: The order of this TestCycleResource.
        :type: int
        """

        self._order = order

    @property
    def pid(self):
        """
        Gets the pid of this TestCycleResource.

        :return: The pid of this TestCycleResource.
        :rtype: str
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """
        Sets the pid of this TestCycleResource.

        :param pid: The pid of this TestCycleResource.
        :type: str
        """

        self._pid = pid

    @property
    def created_date(self):
        """
        Gets the created_date of this TestCycleResource.

        :return: The created_date of this TestCycleResource.
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """
        Sets the created_date of this TestCycleResource.

        :param created_date: The created_date of this TestCycleResource.
        :type: datetime
        """

        self._created_date = created_date

    @property
    def last_modified_date(self):
        """
        Gets the last_modified_date of this TestCycleResource.

        :return: The last_modified_date of this TestCycleResource.
        :rtype: datetime
        """
        return self._last_modified_date

    @last_modified_date.setter
    def last_modified_date(self, last_modified_date):
        """
        Sets the last_modified_date of this TestCycleResource.

        :param last_modified_date: The last_modified_date of this TestCycleResource.
        :type: datetime
        """

        self._last_modified_date = last_modified_date

    @property
    def web_url(self):
        """
        Gets the web_url of this TestCycleResource.

        :return: The web_url of this TestCycleResource.
        :rtype: str
        """
        return self._web_url

    @web_url.setter
    def web_url(self, web_url):
        """
        Sets the web_url of this TestCycleResource.

        :param web_url: The web_url of this TestCycleResource.
        :type: str
        """

        self._web_url = web_url

    @property
    def description(self):
        """
        Gets the description of this TestCycleResource.

        :return: The description of this TestCycleResource.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this TestCycleResource.

        :param description: The description of this TestCycleResource.
        :type: str
        """

        self._description = description

    @property
    def target_release_id(self):
        """
        Gets the target_release_id of this TestCycleResource.

        :return: The target_release_id of this TestCycleResource.
        :rtype: int
        """
        return self._target_release_id

    @target_release_id.setter
    def target_release_id(self, target_release_id):
        """
        Sets the target_release_id of this TestCycleResource.

        :param target_release_id: The target_release_id of this TestCycleResource.
        :type: int
        """

        self._target_release_id = target_release_id

    @property
    def target_build_id(self):
        """
        Gets the target_build_id of this TestCycleResource.

        :return: The target_build_id of this TestCycleResource.
        :rtype: int
        """
        return self._target_build_id

    @target_build_id.setter
    def target_build_id(self, target_build_id):
        """
        Sets the target_build_id of this TestCycleResource.

        :param target_build_id: The target_build_id of this TestCycleResource.
        :type: int
        """

        self._target_build_id = target_build_id

    @property
    def test_cycles(self):
        """
        Gets the test_cycles of this TestCycleResource.

        :return: The test_cycles of this TestCycleResource.
        :rtype: list[TestCycleResource]
        """
        return self._test_cycles

    @test_cycles.setter
    def test_cycles(self, test_cycles):
        """
        Sets the test_cycles of this TestCycleResource.

        :param test_cycles: The test_cycles of this TestCycleResource.
        :type: list[TestCycleResource]
        """

        self._test_cycles = test_cycles

    @property
    def test_suites(self):
        """
        Gets the test_suites of this TestCycleResource.

        :return: The test_suites of this TestCycleResource.
        :rtype: list[TestSuiteWithCustomFieldResource]
        """
        return self._test_suites

    @test_suites.setter
    def test_suites(self, test_suites):
        """
        Sets the test_suites of this TestCycleResource.

        :param test_suites: The test_suites of this TestCycleResource.
        :type: list[TestSuiteWithCustomFieldResource]
        """

        self._test_suites = test_suites

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TestCycleResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
