# coding: utf-8

"""
    qTest Manager API Version 8.6 - 9.1

    qTest Manager API Version 8.6 - 9.1

    OpenAPI spec version: 8.6 - 9.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class RequirementApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def add_comment(self, project_id, id_or_key, body, **kwargs):
        """
        Adds a Comment to a Requirement
        To add a comment to a Requirement  <strong>qTest Manager version:</strong> 7.5+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_comment(project_id, id_or_key, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param str id_or_key: PID or ID of the Requirement. (required)
        :param CommentResource body: The comment's properties and its content (required)
        :return: CommentResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.add_comment_with_http_info(project_id, id_or_key, body, **kwargs)
        else:
            (data) = self.add_comment_with_http_info(project_id, id_or_key, body, **kwargs)
            return data

    def add_comment_with_http_info(self, project_id, id_or_key, body, **kwargs):
        """
        Adds a Comment to a Requirement
        To add a comment to a Requirement  <strong>qTest Manager version:</strong> 7.5+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_comment_with_http_info(project_id, id_or_key, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param str id_or_key: PID or ID of the Requirement. (required)
        :param CommentResource body: The comment's properties and its content (required)
        :return: CommentResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'id_or_key', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_comment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `add_comment`")
        # verify the required parameter 'id_or_key' is set
        if ('id_or_key' not in params) or (params['id_or_key'] is None):
            raise ValueError("Missing the required parameter `id_or_key` when calling `add_comment`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_comment`")


        collection_formats = {}

        resource_path = '/api/v3/projects/{projectId}/requirements/{idOrKey}/comments'.replace('{format}', 'json')
        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']
        if 'id_or_key' in params:
            path_params['idOrKey'] = params['id_or_key']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Authorization']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CommentResource',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_requirement(self, project_id, body, **kwargs):
        """
        Creates a Requirement
        To create a new Requirement  <strong>qTest Manager version:</strong> 4+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_requirement(project_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param RequirementResource body: <p><em>name *:</em> Requirement name</p><p><em>properties:</em> An array of field-value pairs</p> (required)
        :param int parent_id: ID of the parent Module under which the Requirement will be located
        :return: RequirementResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_requirement_with_http_info(project_id, body, **kwargs)
        else:
            (data) = self.create_requirement_with_http_info(project_id, body, **kwargs)
            return data

    def create_requirement_with_http_info(self, project_id, body, **kwargs):
        """
        Creates a Requirement
        To create a new Requirement  <strong>qTest Manager version:</strong> 4+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_requirement_with_http_info(project_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param RequirementResource body: <p><em>name *:</em> Requirement name</p><p><em>properties:</em> An array of field-value pairs</p> (required)
        :param int parent_id: ID of the parent Module under which the Requirement will be located
        :return: RequirementResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'body', 'parent_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_requirement" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `create_requirement`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_requirement`")


        collection_formats = {}

        resource_path = '/api/v3/projects/{projectId}/requirements'.replace('{format}', 'json')
        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']

        query_params = {}
        if 'parent_id' in params:
            query_params['parentId'] = params['parent_id']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Authorization']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='RequirementResource',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete(self, project_id, requirement_id, **kwargs):
        """
        Deletes a Requirement
        To delete a Requirement  <strong>qTest Manager version:</strong> 6+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete(project_id, requirement_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param int requirement_id: ID of the Requirement which needs to be deleted. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_with_http_info(project_id, requirement_id, **kwargs)
        else:
            (data) = self.delete_with_http_info(project_id, requirement_id, **kwargs)
            return data

    def delete_with_http_info(self, project_id, requirement_id, **kwargs):
        """
        Deletes a Requirement
        To delete a Requirement  <strong>qTest Manager version:</strong> 6+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_with_http_info(project_id, requirement_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param int requirement_id: ID of the Requirement which needs to be deleted. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'requirement_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `delete`")
        # verify the required parameter 'requirement_id' is set
        if ('requirement_id' not in params) or (params['requirement_id'] is None):
            raise ValueError("Missing the required parameter `requirement_id` when calling `delete`")


        collection_formats = {}

        resource_path = '/api/v3/projects/{projectId}/requirements/{requirementId}'.replace('{format}', 'json')
        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']
        if 'requirement_id' in params:
            path_params['requirementId'] = params['requirement_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='object',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_comment(self, project_id, id_or_key, comment_id, **kwargs):
        """
        Deletes a Comment of a Requirement
        To delete a comment of a Requirement  <strong>qTest Manager version:</strong> 7.5+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_comment(project_id, id_or_key, comment_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param str id_or_key: PID or ID of the Requirement whose comment you want to delete (required)
        :param int comment_id: The comment's ID (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_comment_with_http_info(project_id, id_or_key, comment_id, **kwargs)
        else:
            (data) = self.delete_comment_with_http_info(project_id, id_or_key, comment_id, **kwargs)
            return data

    def delete_comment_with_http_info(self, project_id, id_or_key, comment_id, **kwargs):
        """
        Deletes a Comment of a Requirement
        To delete a comment of a Requirement  <strong>qTest Manager version:</strong> 7.5+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_comment_with_http_info(project_id, id_or_key, comment_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param str id_or_key: PID or ID of the Requirement whose comment you want to delete (required)
        :param int comment_id: The comment's ID (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'id_or_key', 'comment_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_comment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `delete_comment`")
        # verify the required parameter 'id_or_key' is set
        if ('id_or_key' not in params) or (params['id_or_key'] is None):
            raise ValueError("Missing the required parameter `id_or_key` when calling `delete_comment`")
        # verify the required parameter 'comment_id' is set
        if ('comment_id' not in params) or (params['comment_id'] is None):
            raise ValueError("Missing the required parameter `comment_id` when calling `delete_comment`")


        collection_formats = {}

        resource_path = '/api/v3/projects/{projectId}/requirements/{idOrKey}/comments/{commentId}'.replace('{format}', 'json')
        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']
        if 'id_or_key' in params:
            path_params['idOrKey'] = params['id_or_key']
        if 'comment_id' in params:
            path_params['commentId'] = params['comment_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='object',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_comment(self, project_id, id_or_key, comment_id, **kwargs):
        """
        Gets a Comment of a Requirement
        To retrieve a comment of a Requirement  <strong>qTest Manager version:</strong> 7.5+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_comment(project_id, id_or_key, comment_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param str id_or_key: PID or ID of the Requirement whose comment you want to delete (required)
        :param int comment_id: The comment's ID (required)
        :return: CommentResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_comment_with_http_info(project_id, id_or_key, comment_id, **kwargs)
        else:
            (data) = self.get_comment_with_http_info(project_id, id_or_key, comment_id, **kwargs)
            return data

    def get_comment_with_http_info(self, project_id, id_or_key, comment_id, **kwargs):
        """
        Gets a Comment of a Requirement
        To retrieve a comment of a Requirement  <strong>qTest Manager version:</strong> 7.5+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_comment_with_http_info(project_id, id_or_key, comment_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param str id_or_key: PID or ID of the Requirement whose comment you want to delete (required)
        :param int comment_id: The comment's ID (required)
        :return: CommentResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'id_or_key', 'comment_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_comment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_comment`")
        # verify the required parameter 'id_or_key' is set
        if ('id_or_key' not in params) or (params['id_or_key'] is None):
            raise ValueError("Missing the required parameter `id_or_key` when calling `get_comment`")
        # verify the required parameter 'comment_id' is set
        if ('comment_id' not in params) or (params['comment_id'] is None):
            raise ValueError("Missing the required parameter `comment_id` when calling `get_comment`")


        collection_formats = {}

        resource_path = '/api/v3/projects/{projectId}/requirements/{idOrKey}/comments/{commentId}'.replace('{format}', 'json')
        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']
        if 'id_or_key' in params:
            path_params['idOrKey'] = params['id_or_key']
        if 'comment_id' in params:
            path_params['commentId'] = params['comment_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CommentResource',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_comments(self, project_id, id_or_key, **kwargs):
        """
        Gets all Comments of a Requirement
        To retrieve all comments of a Requirement  <strong>qTest Manager version:</strong> 7.6+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_comments(project_id, id_or_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param str id_or_key: PID or ID of the Requirement whose comments you want to retrieve (required)
        :return: PagedResourceCommentResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_comments_with_http_info(project_id, id_or_key, **kwargs)
        else:
            (data) = self.get_comments_with_http_info(project_id, id_or_key, **kwargs)
            return data

    def get_comments_with_http_info(self, project_id, id_or_key, **kwargs):
        """
        Gets all Comments of a Requirement
        To retrieve all comments of a Requirement  <strong>qTest Manager version:</strong> 7.6+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_comments_with_http_info(project_id, id_or_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param str id_or_key: PID or ID of the Requirement whose comments you want to retrieve (required)
        :return: PagedResourceCommentResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'id_or_key']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_comments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_comments`")
        # verify the required parameter 'id_or_key' is set
        if ('id_or_key' not in params) or (params['id_or_key'] is None):
            raise ValueError("Missing the required parameter `id_or_key` when calling `get_comments`")


        collection_formats = {}

        resource_path = '/api/v3/projects/{projectId}/requirements/{idOrKey}/comments'.replace('{format}', 'json')
        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']
        if 'id_or_key' in params:
            path_params['idOrKey'] = params['id_or_key']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PagedResourceCommentResource',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_public_traceability_matrix_report(self, project_id, **kwargs):
        """
        Gets Requirement Traceability Matrix Report
        To retrieve a report of Requirements with their covering Test Cases
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_public_traceability_matrix_report(project_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param int page: By default the first page is returned but you can specify any page number to retrieve requirements.
        :param int size: The result is paginated. By default, the number of requirements in each page is 20.  You can specify your custom number in this parameter and the maximum number is 999.
        :param str field_ids: ID(s) of requirement fields (system or custom fields) which you would like to retrieve.  They are separated by commas.
        :return: list[TraceabilityRequirement]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_public_traceability_matrix_report_with_http_info(project_id, **kwargs)
        else:
            (data) = self.get_public_traceability_matrix_report_with_http_info(project_id, **kwargs)
            return data

    def get_public_traceability_matrix_report_with_http_info(self, project_id, **kwargs):
        """
        Gets Requirement Traceability Matrix Report
        To retrieve a report of Requirements with their covering Test Cases
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_public_traceability_matrix_report_with_http_info(project_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param int page: By default the first page is returned but you can specify any page number to retrieve requirements.
        :param int size: The result is paginated. By default, the number of requirements in each page is 20.  You can specify your custom number in this parameter and the maximum number is 999.
        :param str field_ids: ID(s) of requirement fields (system or custom fields) which you would like to retrieve.  They are separated by commas.
        :return: list[TraceabilityRequirement]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'page', 'size', 'field_ids']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_public_traceability_matrix_report" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_public_traceability_matrix_report`")


        collection_formats = {}

        resource_path = '/api/v3/projects/{projectId}/requirements/trace-matrix-report'.replace('{format}', 'json')
        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']

        query_params = {}
        if 'page' in params:
            query_params['page'] = params['page']
        if 'size' in params:
            query_params['size'] = params['size']
        if 'field_ids' in params:
            query_params['fieldIds'] = params['field_ids']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[TraceabilityRequirement]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_requirement(self, project_id, requirement_id, **kwargs):
        """
        Gets a Requirement
        To retrieve a Requirement  <strong>qTest Manager version:</strong> 6+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_requirement(project_id, requirement_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param int requirement_id: ID of the Requirement which you want to retrieve. (required)
        :return: RequirementResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_requirement_with_http_info(project_id, requirement_id, **kwargs)
        else:
            (data) = self.get_requirement_with_http_info(project_id, requirement_id, **kwargs)
            return data

    def get_requirement_with_http_info(self, project_id, requirement_id, **kwargs):
        """
        Gets a Requirement
        To retrieve a Requirement  <strong>qTest Manager version:</strong> 6+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_requirement_with_http_info(project_id, requirement_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param int requirement_id: ID of the Requirement which you want to retrieve. (required)
        :return: RequirementResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'requirement_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_requirement" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_requirement`")
        # verify the required parameter 'requirement_id' is set
        if ('requirement_id' not in params) or (params['requirement_id'] is None):
            raise ValueError("Missing the required parameter `requirement_id` when calling `get_requirement`")


        collection_formats = {}

        resource_path = '/api/v3/projects/{projectId}/requirements/{requirementId}'.replace('{format}', 'json')
        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']
        if 'requirement_id' in params:
            path_params['requirementId'] = params['requirement_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='RequirementResource',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_requirements(self, project_id, **kwargs):
        """
        Gets multiple Requirements
        To retrieve all Requirements or Requirements under a specific Module
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_requirements(project_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param int parent_id: Specify the parent Module's ID to retrieve all of its Requirements which are located directly under the parent Module
        :param int page: By default the first page is returned but you can specify any page number to retrieve requirements.
        :param int size: The result is paginated. By the default, the number of requirements in each page is 20.  You can specify your custom number in this parameter.
        :return: list[RequirementResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_requirements_with_http_info(project_id, **kwargs)
        else:
            (data) = self.get_requirements_with_http_info(project_id, **kwargs)
            return data

    def get_requirements_with_http_info(self, project_id, **kwargs):
        """
        Gets multiple Requirements
        To retrieve all Requirements or Requirements under a specific Module
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_requirements_with_http_info(project_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param int parent_id: Specify the parent Module's ID to retrieve all of its Requirements which are located directly under the parent Module
        :param int page: By default the first page is returned but you can specify any page number to retrieve requirements.
        :param int size: The result is paginated. By the default, the number of requirements in each page is 20.  You can specify your custom number in this parameter.
        :return: list[RequirementResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'parent_id', 'page', 'size']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_requirements" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_requirements`")


        collection_formats = {}

        resource_path = '/api/v3/projects/{projectId}/requirements'.replace('{format}', 'json')
        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']

        query_params = {}
        if 'parent_id' in params:
            query_params['parentId'] = params['parent_id']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'size' in params:
            query_params['size'] = params['size']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[RequirementResource]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_comment(self, project_id, id_or_key, comment_id, body, **kwargs):
        """
        Updates a Comment of a Requirement
        To modify a comment of a Requirement  <strong>qTest Manager version:</strong> 7.5+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_comment(project_id, id_or_key, comment_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param str id_or_key: PID or ID of the Requirement whose comment you want to update (required)
        :param int comment_id: The comment's ID (required)
        :param CommentResource body: The comment's updated content (required)
        :return: CommentResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_comment_with_http_info(project_id, id_or_key, comment_id, body, **kwargs)
        else:
            (data) = self.update_comment_with_http_info(project_id, id_or_key, comment_id, body, **kwargs)
            return data

    def update_comment_with_http_info(self, project_id, id_or_key, comment_id, body, **kwargs):
        """
        Updates a Comment of a Requirement
        To modify a comment of a Requirement  <strong>qTest Manager version:</strong> 7.5+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_comment_with_http_info(project_id, id_or_key, comment_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param str id_or_key: PID or ID of the Requirement whose comment you want to update (required)
        :param int comment_id: The comment's ID (required)
        :param CommentResource body: The comment's updated content (required)
        :return: CommentResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'id_or_key', 'comment_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_comment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `update_comment`")
        # verify the required parameter 'id_or_key' is set
        if ('id_or_key' not in params) or (params['id_or_key'] is None):
            raise ValueError("Missing the required parameter `id_or_key` when calling `update_comment`")
        # verify the required parameter 'comment_id' is set
        if ('comment_id' not in params) or (params['comment_id'] is None):
            raise ValueError("Missing the required parameter `comment_id` when calling `update_comment`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_comment`")


        collection_formats = {}

        resource_path = '/api/v3/projects/{projectId}/requirements/{idOrKey}/comments/{commentId}'.replace('{format}', 'json')
        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']
        if 'id_or_key' in params:
            path_params['idOrKey'] = params['id_or_key']
        if 'comment_id' in params:
            path_params['commentId'] = params['comment_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Authorization']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CommentResource',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_requirement(self, project_id, requirement_id, body, **kwargs):
        """
        Updates a Requirement
        To update properties of an Requirement or to move it to other parent Module
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_requirement(project_id, requirement_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param int requirement_id: ID of the Requirement which needs to be updated. (required)
        :param RequirementResource body: <strong>name: *</strong> Requirement name.  <strong>properties:</strong> An array of field-value pairs (required)
        :param int parent_id: ID of the parent Module to which the Requirement will be moved to
        :return: RequirementResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_requirement_with_http_info(project_id, requirement_id, body, **kwargs)
        else:
            (data) = self.update_requirement_with_http_info(project_id, requirement_id, body, **kwargs)
            return data

    def update_requirement_with_http_info(self, project_id, requirement_id, body, **kwargs):
        """
        Updates a Requirement
        To update properties of an Requirement or to move it to other parent Module
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_requirement_with_http_info(project_id, requirement_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param int requirement_id: ID of the Requirement which needs to be updated. (required)
        :param RequirementResource body: <strong>name: *</strong> Requirement name.  <strong>properties:</strong> An array of field-value pairs (required)
        :param int parent_id: ID of the parent Module to which the Requirement will be moved to
        :return: RequirementResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'requirement_id', 'body', 'parent_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_requirement" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `update_requirement`")
        # verify the required parameter 'requirement_id' is set
        if ('requirement_id' not in params) or (params['requirement_id'] is None):
            raise ValueError("Missing the required parameter `requirement_id` when calling `update_requirement`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_requirement`")


        collection_formats = {}

        resource_path = '/api/v3/projects/{projectId}/requirements/{requirementId}'.replace('{format}', 'json')
        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']
        if 'requirement_id' in params:
            path_params['requirementId'] = params['requirement_id']

        query_params = {}
        if 'parent_id' in params:
            query_params['parentId'] = params['parent_id']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Authorization']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='RequirementResource',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
