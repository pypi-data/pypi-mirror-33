# coding: utf-8

"""
    qTest Manager API Version 8.6 - 9.1

    qTest Manager API Version 8.6 - 9.1

    OpenAPI spec version: 8.6 - 9.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class TestcaseApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def add_comment(self, project_id, id_or_key, body, **kwargs):
        """
        Adds a Comment to a Test Case
        To add a Comment to a Test Case  <strong>qTest Manager version:</strong> 7.5+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_comment(project_id, id_or_key, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param str id_or_key: PID or ID of the Test Case (required)
        :param CommentResource body: The comment's properties and its content (required)
        :return: CommentResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.add_comment_with_http_info(project_id, id_or_key, body, **kwargs)
        else:
            (data) = self.add_comment_with_http_info(project_id, id_or_key, body, **kwargs)
            return data

    def add_comment_with_http_info(self, project_id, id_or_key, body, **kwargs):
        """
        Adds a Comment to a Test Case
        To add a Comment to a Test Case  <strong>qTest Manager version:</strong> 7.5+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_comment_with_http_info(project_id, id_or_key, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param str id_or_key: PID or ID of the Test Case (required)
        :param CommentResource body: The comment's properties and its content (required)
        :return: CommentResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'id_or_key', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_comment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `add_comment`")
        # verify the required parameter 'id_or_key' is set
        if ('id_or_key' not in params) or (params['id_or_key'] is None):
            raise ValueError("Missing the required parameter `id_or_key` when calling `add_comment`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_comment`")


        collection_formats = {}

        resource_path = '/api/v3/projects/{projectId}/test-cases/{idOrKey}/comments'.replace('{format}', 'json')
        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']
        if 'id_or_key' in params:
            path_params['idOrKey'] = params['id_or_key']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Authorization']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CommentResource',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def add_test_step(self, project_id, test_case_id, body, **kwargs):
        """
        Creates a Test Step
        To add a Test Step to a Test Case's latest version  <strong>qTest Manager version:</strong> 6+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_test_step(project_id, test_case_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param int test_case_id: ID of the Test Case (required)
        :param TestStepResource body: Given resource to add a test step. (required)
        :return: TestStepResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.add_test_step_with_http_info(project_id, test_case_id, body, **kwargs)
        else:
            (data) = self.add_test_step_with_http_info(project_id, test_case_id, body, **kwargs)
            return data

    def add_test_step_with_http_info(self, project_id, test_case_id, body, **kwargs):
        """
        Creates a Test Step
        To add a Test Step to a Test Case's latest version  <strong>qTest Manager version:</strong> 6+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_test_step_with_http_info(project_id, test_case_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param int test_case_id: ID of the Test Case (required)
        :param TestStepResource body: Given resource to add a test step. (required)
        :return: TestStepResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'test_case_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_test_step" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `add_test_step`")
        # verify the required parameter 'test_case_id' is set
        if ('test_case_id' not in params) or (params['test_case_id'] is None):
            raise ValueError("Missing the required parameter `test_case_id` when calling `add_test_step`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_test_step`")


        collection_formats = {}

        resource_path = '/api/v3/projects/{projectId}/test-cases/{testCaseId}/test-steps'.replace('{format}', 'json')
        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']
        if 'test_case_id' in params:
            path_params['testCaseId'] = params['test_case_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Authorization']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TestStepResource',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def approve_test_case(self, project_id, test_case_id, **kwargs):
        """
        Approves a Test Case
        To approve a Test Case  <strong>qTest Manager version:</strong> 7.4+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.approve_test_case(project_id, test_case_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param int test_case_id: ID of the Test Case (required)
        :return: TestCaseWithCustomFieldResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.approve_test_case_with_http_info(project_id, test_case_id, **kwargs)
        else:
            (data) = self.approve_test_case_with_http_info(project_id, test_case_id, **kwargs)
            return data

    def approve_test_case_with_http_info(self, project_id, test_case_id, **kwargs):
        """
        Approves a Test Case
        To approve a Test Case  <strong>qTest Manager version:</strong> 7.4+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.approve_test_case_with_http_info(project_id, test_case_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param int test_case_id: ID of the Test Case (required)
        :return: TestCaseWithCustomFieldResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'test_case_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method approve_test_case" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `approve_test_case`")
        # verify the required parameter 'test_case_id' is set
        if ('test_case_id' not in params) or (params['test_case_id'] is None):
            raise ValueError("Missing the required parameter `test_case_id` when calling `approve_test_case`")


        collection_formats = {}

        resource_path = '/api/v3/projects/{projectId}/test-cases/{testCaseId}/approve'.replace('{format}', 'json')
        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']
        if 'test_case_id' in params:
            path_params['testCaseId'] = params['test_case_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TestCaseWithCustomFieldResource',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_test_case(self, project_id, body, **kwargs):
        """
        Creates a Test Case
        To create a Test Case  <strong>qTest Manager version:</strong> 4+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_test_case(project_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param TestCaseWithCustomFieldResource body: Test Case properties, Test Steps, Attachments and other information to create a Test Case.  If <em>parent_id</em> is omitted, the Test Case will be created under \"Created via API\" Module (required)
        :param str agent_id:
        :return: TestCaseWithCustomFieldResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_test_case_with_http_info(project_id, body, **kwargs)
        else:
            (data) = self.create_test_case_with_http_info(project_id, body, **kwargs)
            return data

    def create_test_case_with_http_info(self, project_id, body, **kwargs):
        """
        Creates a Test Case
        To create a Test Case  <strong>qTest Manager version:</strong> 4+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_test_case_with_http_info(project_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param TestCaseWithCustomFieldResource body: Test Case properties, Test Steps, Attachments and other information to create a Test Case.  If <em>parent_id</em> is omitted, the Test Case will be created under \"Created via API\" Module (required)
        :param str agent_id:
        :return: TestCaseWithCustomFieldResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'body', 'agent_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_test_case" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `create_test_case`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_test_case`")


        collection_formats = {}

        resource_path = '/api/v3/projects/{projectId}/test-cases'.replace('{format}', 'json')
        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']

        query_params = {}
        if 'agent_id' in params:
            query_params['agentId'] = params['agent_id']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Authorization']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TestCaseWithCustomFieldResource',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_comment(self, project_id, id_or_key, comment_id, **kwargs):
        """
        Deletes a Comment of a Test Case
        To delete a comment of a Test Case  <strong>qTest Manager version:</strong> 7.5+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_comment(project_id, id_or_key, comment_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param str id_or_key: PID or ID of the Test Case (required)
        :param int comment_id: ID of the comment. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_comment_with_http_info(project_id, id_or_key, comment_id, **kwargs)
        else:
            (data) = self.delete_comment_with_http_info(project_id, id_or_key, comment_id, **kwargs)
            return data

    def delete_comment_with_http_info(self, project_id, id_or_key, comment_id, **kwargs):
        """
        Deletes a Comment of a Test Case
        To delete a comment of a Test Case  <strong>qTest Manager version:</strong> 7.5+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_comment_with_http_info(project_id, id_or_key, comment_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param str id_or_key: PID or ID of the Test Case (required)
        :param int comment_id: ID of the comment. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'id_or_key', 'comment_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_comment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `delete_comment`")
        # verify the required parameter 'id_or_key' is set
        if ('id_or_key' not in params) or (params['id_or_key'] is None):
            raise ValueError("Missing the required parameter `id_or_key` when calling `delete_comment`")
        # verify the required parameter 'comment_id' is set
        if ('comment_id' not in params) or (params['comment_id'] is None):
            raise ValueError("Missing the required parameter `comment_id` when calling `delete_comment`")


        collection_formats = {}

        resource_path = '/api/v3/projects/{projectId}/test-cases/{idOrKey}/comments/{commentId}'.replace('{format}', 'json')
        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']
        if 'id_or_key' in params:
            path_params['idOrKey'] = params['id_or_key']
        if 'comment_id' in params:
            path_params['commentId'] = params['comment_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='object',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_test_case(self, project_id, test_case_id, **kwargs):
        """
        Deletes a Test Case
        To delete Test Case  <strong>qTest Manager version:</strong> 6+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_test_case(project_id, test_case_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param int test_case_id: ID of the Test Case which needs to be deleted. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_test_case_with_http_info(project_id, test_case_id, **kwargs)
        else:
            (data) = self.delete_test_case_with_http_info(project_id, test_case_id, **kwargs)
            return data

    def delete_test_case_with_http_info(self, project_id, test_case_id, **kwargs):
        """
        Deletes a Test Case
        To delete Test Case  <strong>qTest Manager version:</strong> 6+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_test_case_with_http_info(project_id, test_case_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param int test_case_id: ID of the Test Case which needs to be deleted. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'test_case_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_test_case" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `delete_test_case`")
        # verify the required parameter 'test_case_id' is set
        if ('test_case_id' not in params) or (params['test_case_id'] is None):
            raise ValueError("Missing the required parameter `test_case_id` when calling `delete_test_case`")


        collection_formats = {}

        resource_path = '/api/v3/projects/{projectId}/test-cases/{testCaseId}'.replace('{format}', 'json')
        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']
        if 'test_case_id' in params:
            path_params['testCaseId'] = params['test_case_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_test_step(self, project_id, test_case_id, step_id, **kwargs):
        """
        Deletes a Test Step
        To delete a test step of a Test Case  <strong>qTest Manager version:</strong> 6+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_test_step(project_id, test_case_id, step_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param int test_case_id: ID of the Test Case (required)
        :param int step_id: ID of the Test Step (required)
        :param bool update_version: If you specify updateVersion=true, the test case version will be updated when the test step deleted.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_test_step_with_http_info(project_id, test_case_id, step_id, **kwargs)
        else:
            (data) = self.delete_test_step_with_http_info(project_id, test_case_id, step_id, **kwargs)
            return data

    def delete_test_step_with_http_info(self, project_id, test_case_id, step_id, **kwargs):
        """
        Deletes a Test Step
        To delete a test step of a Test Case  <strong>qTest Manager version:</strong> 6+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_test_step_with_http_info(project_id, test_case_id, step_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param int test_case_id: ID of the Test Case (required)
        :param int step_id: ID of the Test Step (required)
        :param bool update_version: If you specify updateVersion=true, the test case version will be updated when the test step deleted.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'test_case_id', 'step_id', 'update_version']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_test_step" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `delete_test_step`")
        # verify the required parameter 'test_case_id' is set
        if ('test_case_id' not in params) or (params['test_case_id'] is None):
            raise ValueError("Missing the required parameter `test_case_id` when calling `delete_test_step`")
        # verify the required parameter 'step_id' is set
        if ('step_id' not in params) or (params['step_id'] is None):
            raise ValueError("Missing the required parameter `step_id` when calling `delete_test_step`")


        collection_formats = {}

        resource_path = '/api/v3/projects/{projectId}/test-cases/{testCaseId}/test-steps/{stepId}'.replace('{format}', 'json')
        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']
        if 'test_case_id' in params:
            path_params['testCaseId'] = params['test_case_id']
        if 'step_id' in params:
            path_params['stepId'] = params['step_id']

        query_params = {}
        if 'update_version' in params:
            query_params['updateVersion'] = params['update_version']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='object',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_comment(self, project_id, id_or_key, comment_id, **kwargs):
        """
        Gets a Comment of a Test Case
        To retrieve a comment of a Test Case  <strong>qTest Manager version:</strong> 7.5+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_comment(project_id, id_or_key, comment_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param str id_or_key: PID or ID of the Test Case (required)
        :param int comment_id: ID of the comment. (required)
        :return: CommentResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_comment_with_http_info(project_id, id_or_key, comment_id, **kwargs)
        else:
            (data) = self.get_comment_with_http_info(project_id, id_or_key, comment_id, **kwargs)
            return data

    def get_comment_with_http_info(self, project_id, id_or_key, comment_id, **kwargs):
        """
        Gets a Comment of a Test Case
        To retrieve a comment of a Test Case  <strong>qTest Manager version:</strong> 7.5+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_comment_with_http_info(project_id, id_or_key, comment_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param str id_or_key: PID or ID of the Test Case (required)
        :param int comment_id: ID of the comment. (required)
        :return: CommentResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'id_or_key', 'comment_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_comment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_comment`")
        # verify the required parameter 'id_or_key' is set
        if ('id_or_key' not in params) or (params['id_or_key'] is None):
            raise ValueError("Missing the required parameter `id_or_key` when calling `get_comment`")
        # verify the required parameter 'comment_id' is set
        if ('comment_id' not in params) or (params['comment_id'] is None):
            raise ValueError("Missing the required parameter `comment_id` when calling `get_comment`")


        collection_formats = {}

        resource_path = '/api/v3/projects/{projectId}/test-cases/{idOrKey}/comments/{commentId}'.replace('{format}', 'json')
        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']
        if 'id_or_key' in params:
            path_params['idOrKey'] = params['id_or_key']
        if 'comment_id' in params:
            path_params['commentId'] = params['comment_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CommentResource',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_comments(self, project_id, id_or_key, **kwargs):
        """
        Gets all Comments of a Test Case
        To retrieve all comments of a Test Case  <strong>qTest Manager version:</strong> 7.5+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_comments(project_id, id_or_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param str id_or_key: PID or ID of the Test Case whose comments you want to retrieve (required)
        :param int page: By default the first page is returned but you can specify any page number to retrieve objects
        :param int page_size: The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter
        :return: PagedResourceCommentResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_comments_with_http_info(project_id, id_or_key, **kwargs)
        else:
            (data) = self.get_comments_with_http_info(project_id, id_or_key, **kwargs)
            return data

    def get_comments_with_http_info(self, project_id, id_or_key, **kwargs):
        """
        Gets all Comments of a Test Case
        To retrieve all comments of a Test Case  <strong>qTest Manager version:</strong> 7.5+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_comments_with_http_info(project_id, id_or_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param str id_or_key: PID or ID of the Test Case whose comments you want to retrieve (required)
        :param int page: By default the first page is returned but you can specify any page number to retrieve objects
        :param int page_size: The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter
        :return: PagedResourceCommentResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'id_or_key', 'page', 'page_size']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_comments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_comments`")
        # verify the required parameter 'id_or_key' is set
        if ('id_or_key' not in params) or (params['id_or_key'] is None):
            raise ValueError("Missing the required parameter `id_or_key` when calling `get_comments`")


        collection_formats = {}

        resource_path = '/api/v3/projects/{projectId}/test-cases/{idOrKey}/comments'.replace('{format}', 'json')
        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']
        if 'id_or_key' in params:
            path_params['idOrKey'] = params['id_or_key']

        query_params = {}
        if 'page' in params:
            query_params['page'] = params['page']
        if 'page_size' in params:
            query_params['pageSize'] = params['page_size']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PagedResourceCommentResource',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_test_case(self, project_id, test_case_id, **kwargs):
        """
        Gets a Test Case
        To retrieve a Test Case  <strong>qTest Manager version:</strong> 6+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_test_case(project_id, test_case_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param int test_case_id: ID of the Test Case (required)
        :param int version_id: ID of the Test Case version
        :param str expand: By default, Test Steps are excluded from the response. Specify <em>expand=teststep</em> to include Test Steps
        :return: TestCaseWithCustomFieldResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_test_case_with_http_info(project_id, test_case_id, **kwargs)
        else:
            (data) = self.get_test_case_with_http_info(project_id, test_case_id, **kwargs)
            return data

    def get_test_case_with_http_info(self, project_id, test_case_id, **kwargs):
        """
        Gets a Test Case
        To retrieve a Test Case  <strong>qTest Manager version:</strong> 6+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_test_case_with_http_info(project_id, test_case_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param int test_case_id: ID of the Test Case (required)
        :param int version_id: ID of the Test Case version
        :param str expand: By default, Test Steps are excluded from the response. Specify <em>expand=teststep</em> to include Test Steps
        :return: TestCaseWithCustomFieldResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'test_case_id', 'version_id', 'expand']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_test_case" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_test_case`")
        # verify the required parameter 'test_case_id' is set
        if ('test_case_id' not in params) or (params['test_case_id'] is None):
            raise ValueError("Missing the required parameter `test_case_id` when calling `get_test_case`")


        collection_formats = {}

        resource_path = '/api/v3/projects/{projectId}/test-cases/{testCaseId}'.replace('{format}', 'json')
        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']
        if 'test_case_id' in params:
            path_params['testCaseId'] = params['test_case_id']

        query_params = {}
        if 'version_id' in params:
            query_params['versionId'] = params['version_id']
        if 'expand' in params:
            query_params['expand'] = params['expand']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TestCaseWithCustomFieldResource',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_test_case_0(self, project_id, test_case_id, version_id, **kwargs):
        """
        Gets a version of a Test Case
        To retrieve a specific version of a Test Case  <strong>qTest Manager version:</strong> 4+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_test_case_0(project_id, test_case_id, version_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param int test_case_id: ID of the Test Case (required)
        :param int version_id: ID of the Test Case version (required)
        :return: TestCaseWithCustomFieldResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_test_case_0_with_http_info(project_id, test_case_id, version_id, **kwargs)
        else:
            (data) = self.get_test_case_0_with_http_info(project_id, test_case_id, version_id, **kwargs)
            return data

    def get_test_case_0_with_http_info(self, project_id, test_case_id, version_id, **kwargs):
        """
        Gets a version of a Test Case
        To retrieve a specific version of a Test Case  <strong>qTest Manager version:</strong> 4+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_test_case_0_with_http_info(project_id, test_case_id, version_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param int test_case_id: ID of the Test Case (required)
        :param int version_id: ID of the Test Case version (required)
        :return: TestCaseWithCustomFieldResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'test_case_id', 'version_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_test_case_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_test_case_0`")
        # verify the required parameter 'test_case_id' is set
        if ('test_case_id' not in params) or (params['test_case_id'] is None):
            raise ValueError("Missing the required parameter `test_case_id` when calling `get_test_case_0`")
        # verify the required parameter 'version_id' is set
        if ('version_id' not in params) or (params['version_id'] is None):
            raise ValueError("Missing the required parameter `version_id` when calling `get_test_case_0`")


        collection_formats = {}

        resource_path = '/api/v3/projects/{projectId}/test-cases/{testCaseId}/versions/{versionId}'.replace('{format}', 'json')
        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']
        if 'test_case_id' in params:
            path_params['testCaseId'] = params['test_case_id']
        if 'version_id' in params:
            path_params['versionId'] = params['version_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TestCaseWithCustomFieldResource',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_test_cases(self, project_id, page, size, **kwargs):
        """
        Gets multiple Test Cases
        To retrieve all Test Cases or Test Cases which are located directly under a Module
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_test_cases(project_id, page, size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param int page: By default the first page is returned. However, you can specify any page number to retrieve test cases. (required)
        :param int size: The result is paginated. By the default, the number of requirements in each page is 20.  You can specify your custom number in this parameter. (required)
        :param int parent_id: Module ID
        :param bool expand_props: By default, Test Case properties are included in the response. specify <em>expandProps=false</em> to exclude them
        :param bool expand_steps: By default, Test Steps are excluded from the response body. Input <em>expandSteps=true</em> to include Test Steps
        :return: list[TestCaseWithCustomFieldResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_test_cases_with_http_info(project_id, page, size, **kwargs)
        else:
            (data) = self.get_test_cases_with_http_info(project_id, page, size, **kwargs)
            return data

    def get_test_cases_with_http_info(self, project_id, page, size, **kwargs):
        """
        Gets multiple Test Cases
        To retrieve all Test Cases or Test Cases which are located directly under a Module
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_test_cases_with_http_info(project_id, page, size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param int page: By default the first page is returned. However, you can specify any page number to retrieve test cases. (required)
        :param int size: The result is paginated. By the default, the number of requirements in each page is 20.  You can specify your custom number in this parameter. (required)
        :param int parent_id: Module ID
        :param bool expand_props: By default, Test Case properties are included in the response. specify <em>expandProps=false</em> to exclude them
        :param bool expand_steps: By default, Test Steps are excluded from the response body. Input <em>expandSteps=true</em> to include Test Steps
        :return: list[TestCaseWithCustomFieldResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'page', 'size', 'parent_id', 'expand_props', 'expand_steps']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_test_cases" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_test_cases`")
        # verify the required parameter 'page' is set
        if ('page' not in params) or (params['page'] is None):
            raise ValueError("Missing the required parameter `page` when calling `get_test_cases`")
        # verify the required parameter 'size' is set
        if ('size' not in params) or (params['size'] is None):
            raise ValueError("Missing the required parameter `size` when calling `get_test_cases`")


        collection_formats = {}

        resource_path = '/api/v3/projects/{projectId}/test-cases'.replace('{format}', 'json')
        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']

        query_params = {}
        if 'parent_id' in params:
            query_params['parentId'] = params['parent_id']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'size' in params:
            query_params['size'] = params['size']
        if 'expand_props' in params:
            query_params['expandProps'] = params['expand_props']
        if 'expand_steps' in params:
            query_params['expandSteps'] = params['expand_steps']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[TestCaseWithCustomFieldResource]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_test_step(self, project_id, test_case_id, step_id, **kwargs):
        """
        Gets a Test Step
        To retrieve a Test Step of a Test Case's latest version  <strong>qTest Manager version:</strong> 6+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_test_step(project_id, test_case_id, step_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param int test_case_id: ID of the Test Case (required)
        :param int step_id: ID of the test step. (required)
        :return: TestStepResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_test_step_with_http_info(project_id, test_case_id, step_id, **kwargs)
        else:
            (data) = self.get_test_step_with_http_info(project_id, test_case_id, step_id, **kwargs)
            return data

    def get_test_step_with_http_info(self, project_id, test_case_id, step_id, **kwargs):
        """
        Gets a Test Step
        To retrieve a Test Step of a Test Case's latest version  <strong>qTest Manager version:</strong> 6+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_test_step_with_http_info(project_id, test_case_id, step_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param int test_case_id: ID of the Test Case (required)
        :param int step_id: ID of the test step. (required)
        :return: TestStepResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'test_case_id', 'step_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_test_step" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_test_step`")
        # verify the required parameter 'test_case_id' is set
        if ('test_case_id' not in params) or (params['test_case_id'] is None):
            raise ValueError("Missing the required parameter `test_case_id` when calling `get_test_step`")
        # verify the required parameter 'step_id' is set
        if ('step_id' not in params) or (params['step_id'] is None):
            raise ValueError("Missing the required parameter `step_id` when calling `get_test_step`")


        collection_formats = {}

        resource_path = '/api/v3/projects/{projectId}/test-cases/{testCaseId}/test-steps/{stepId}'.replace('{format}', 'json')
        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']
        if 'test_case_id' in params:
            path_params['testCaseId'] = params['test_case_id']
        if 'step_id' in params:
            path_params['stepId'] = params['step_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TestStepResource',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_test_steps(self, project_id, test_case_id, **kwargs):
        """
        Gets Test Steps of a Test Case
        To retrieve all Test Steps of a Test Case's latest version  <strong>qTest Manager version:</strong> 6+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_test_steps(project_id, test_case_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param int test_case_id: ID of the Test Case (required)
        :return: list[TestStepResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_test_steps_with_http_info(project_id, test_case_id, **kwargs)
        else:
            (data) = self.get_test_steps_with_http_info(project_id, test_case_id, **kwargs)
            return data

    def get_test_steps_with_http_info(self, project_id, test_case_id, **kwargs):
        """
        Gets Test Steps of a Test Case
        To retrieve all Test Steps of a Test Case's latest version  <strong>qTest Manager version:</strong> 6+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_test_steps_with_http_info(project_id, test_case_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param int test_case_id: ID of the Test Case (required)
        :return: list[TestStepResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'test_case_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_test_steps" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_test_steps`")
        # verify the required parameter 'test_case_id' is set
        if ('test_case_id' not in params) or (params['test_case_id'] is None):
            raise ValueError("Missing the required parameter `test_case_id` when calling `get_test_steps`")


        collection_formats = {}

        resource_path = '/api/v3/projects/{projectId}/test-cases/{testCaseId}/test-steps'.replace('{format}', 'json')
        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']
        if 'test_case_id' in params:
            path_params['testCaseId'] = params['test_case_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[TestStepResource]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_test_steps_by_version(self, project_id, test_case_id, version_id, **kwargs):
        """
        Gets Test Steps of a Test Case version
        To retrieve all Test Steps of a specific Test Case version
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_test_steps_by_version(project_id, test_case_id, version_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param int test_case_id: ID of the Test Case (required)
        :param int version_id: ID of the Test Case version (required)
        :param str expand: Specify <em>expand=calledteststep</em> to include Test Steps of the called Test Cases
        :return: list[TestStepResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_test_steps_by_version_with_http_info(project_id, test_case_id, version_id, **kwargs)
        else:
            (data) = self.get_test_steps_by_version_with_http_info(project_id, test_case_id, version_id, **kwargs)
            return data

    def get_test_steps_by_version_with_http_info(self, project_id, test_case_id, version_id, **kwargs):
        """
        Gets Test Steps of a Test Case version
        To retrieve all Test Steps of a specific Test Case version
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_test_steps_by_version_with_http_info(project_id, test_case_id, version_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param int test_case_id: ID of the Test Case (required)
        :param int version_id: ID of the Test Case version (required)
        :param str expand: Specify <em>expand=calledteststep</em> to include Test Steps of the called Test Cases
        :return: list[TestStepResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'test_case_id', 'version_id', 'expand']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_test_steps_by_version" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_test_steps_by_version`")
        # verify the required parameter 'test_case_id' is set
        if ('test_case_id' not in params) or (params['test_case_id'] is None):
            raise ValueError("Missing the required parameter `test_case_id` when calling `get_test_steps_by_version`")
        # verify the required parameter 'version_id' is set
        if ('version_id' not in params) or (params['version_id'] is None):
            raise ValueError("Missing the required parameter `version_id` when calling `get_test_steps_by_version`")


        collection_formats = {}

        resource_path = '/api/v3/projects/{projectId}/test-cases/{testCaseId}/versions/{versionId}/test-steps'.replace('{format}', 'json')
        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']
        if 'test_case_id' in params:
            path_params['testCaseId'] = params['test_case_id']
        if 'version_id' in params:
            path_params['versionId'] = params['version_id']

        query_params = {}
        if 'expand' in params:
            query_params['expand'] = params['expand']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[TestStepResource]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_versions(self, project_id, test_case_id, **kwargs):
        """
        Gets all versions of a Test Case
        To retrieve all versions of a Test Case  <strong>qTest Manager version:</strong> 7.4+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_versions(project_id, test_case_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param int test_case_id: ID of the test case (required)
        :return: list[TestCaseWithCustomFieldResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_versions_with_http_info(project_id, test_case_id, **kwargs)
        else:
            (data) = self.get_versions_with_http_info(project_id, test_case_id, **kwargs)
            return data

    def get_versions_with_http_info(self, project_id, test_case_id, **kwargs):
        """
        Gets all versions of a Test Case
        To retrieve all versions of a Test Case  <strong>qTest Manager version:</strong> 7.4+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_versions_with_http_info(project_id, test_case_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param int test_case_id: ID of the test case (required)
        :return: list[TestCaseWithCustomFieldResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'test_case_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_versions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_versions`")
        # verify the required parameter 'test_case_id' is set
        if ('test_case_id' not in params) or (params['test_case_id'] is None):
            raise ValueError("Missing the required parameter `test_case_id` when calling `get_versions`")


        collection_formats = {}

        resource_path = '/api/v3/projects/{projectId}/test-cases/{testCaseId}/versions'.replace('{format}', 'json')
        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']
        if 'test_case_id' in params:
            path_params['testCaseId'] = params['test_case_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[TestCaseWithCustomFieldResource]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_comment(self, project_id, id_or_key, comment_id, body, **kwargs):
        """
        Updates a Comment of a Test Case
        To modify a comment of a Test Case  <strong>qTest Manager version:</strong> 7.5+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_comment(project_id, id_or_key, comment_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param str id_or_key: PID or ID of the Test Case (required)
        :param int comment_id: ID of the comment. (required)
        :param CommentResource body: The comment's updated content (required)
        :return: CommentResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_comment_with_http_info(project_id, id_or_key, comment_id, body, **kwargs)
        else:
            (data) = self.update_comment_with_http_info(project_id, id_or_key, comment_id, body, **kwargs)
            return data

    def update_comment_with_http_info(self, project_id, id_or_key, comment_id, body, **kwargs):
        """
        Updates a Comment of a Test Case
        To modify a comment of a Test Case  <strong>qTest Manager version:</strong> 7.5+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_comment_with_http_info(project_id, id_or_key, comment_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param str id_or_key: PID or ID of the Test Case (required)
        :param int comment_id: ID of the comment. (required)
        :param CommentResource body: The comment's updated content (required)
        :return: CommentResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'id_or_key', 'comment_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_comment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `update_comment`")
        # verify the required parameter 'id_or_key' is set
        if ('id_or_key' not in params) or (params['id_or_key'] is None):
            raise ValueError("Missing the required parameter `id_or_key` when calling `update_comment`")
        # verify the required parameter 'comment_id' is set
        if ('comment_id' not in params) or (params['comment_id'] is None):
            raise ValueError("Missing the required parameter `comment_id` when calling `update_comment`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_comment`")


        collection_formats = {}

        resource_path = '/api/v3/projects/{projectId}/test-cases/{idOrKey}/comments/{commentId}'.replace('{format}', 'json')
        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']
        if 'id_or_key' in params:
            path_params['idOrKey'] = params['id_or_key']
        if 'comment_id' in params:
            path_params['commentId'] = params['comment_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Authorization']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CommentResource',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_test_case(self, project_id, test_case_id, body, **kwargs):
        """
        Updates a Test Case
        To update a Test Case  <strong>qTest Manager version:</strong> 6+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_test_case(project_id, test_case_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param int test_case_id: ID of the Test Case which needs to be updated. (required)
        :param TestCaseWithCustomFieldResource body: Test Case properties, Test Steps and other information to update the Test Case (required)
        :return: TestCaseWithCustomFieldResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_test_case_with_http_info(project_id, test_case_id, body, **kwargs)
        else:
            (data) = self.update_test_case_with_http_info(project_id, test_case_id, body, **kwargs)
            return data

    def update_test_case_with_http_info(self, project_id, test_case_id, body, **kwargs):
        """
        Updates a Test Case
        To update a Test Case  <strong>qTest Manager version:</strong> 6+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_test_case_with_http_info(project_id, test_case_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param int test_case_id: ID of the Test Case which needs to be updated. (required)
        :param TestCaseWithCustomFieldResource body: Test Case properties, Test Steps and other information to update the Test Case (required)
        :return: TestCaseWithCustomFieldResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'test_case_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_test_case" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `update_test_case`")
        # verify the required parameter 'test_case_id' is set
        if ('test_case_id' not in params) or (params['test_case_id'] is None):
            raise ValueError("Missing the required parameter `test_case_id` when calling `update_test_case`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_test_case`")


        collection_formats = {}

        resource_path = '/api/v3/projects/{projectId}/test-cases/{testCaseId}'.replace('{format}', 'json')
        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']
        if 'test_case_id' in params:
            path_params['testCaseId'] = params['test_case_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Authorization']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TestCaseWithCustomFieldResource',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_test_step(self, project_id, test_case_id, step_id, body, **kwargs):
        """
        Update a Test Step
        To update a Test Step of a Test Case's latest version  <strong>qTest Manager version:</strong> 6+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_test_step(project_id, test_case_id, step_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param int test_case_id: ID of the Test Case (required)
        :param int step_id: ID of the Test Step (required)
        :param TestStepResource body: Updated content of the Test Step (required)
        :return: TestStepResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_test_step_with_http_info(project_id, test_case_id, step_id, body, **kwargs)
        else:
            (data) = self.update_test_step_with_http_info(project_id, test_case_id, step_id, body, **kwargs)
            return data

    def update_test_step_with_http_info(self, project_id, test_case_id, step_id, body, **kwargs):
        """
        Update a Test Step
        To update a Test Step of a Test Case's latest version  <strong>qTest Manager version:</strong> 6+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_test_step_with_http_info(project_id, test_case_id, step_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param int test_case_id: ID of the Test Case (required)
        :param int step_id: ID of the Test Step (required)
        :param TestStepResource body: Updated content of the Test Step (required)
        :return: TestStepResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'test_case_id', 'step_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_test_step" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `update_test_step`")
        # verify the required parameter 'test_case_id' is set
        if ('test_case_id' not in params) or (params['test_case_id'] is None):
            raise ValueError("Missing the required parameter `test_case_id` when calling `update_test_step`")
        # verify the required parameter 'step_id' is set
        if ('step_id' not in params) or (params['step_id'] is None):
            raise ValueError("Missing the required parameter `step_id` when calling `update_test_step`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_test_step`")


        collection_formats = {}

        resource_path = '/api/v3/projects/{projectId}/test-cases/{testCaseId}/test-steps/{stepId}'.replace('{format}', 'json')
        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']
        if 'test_case_id' in params:
            path_params['testCaseId'] = params['test_case_id']
        if 'step_id' in params:
            path_params['stepId'] = params['step_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Authorization']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TestStepResource',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
