# coding: utf-8

"""
    qTest Manager API Version 8.6 - 9.1

    qTest Manager API Version 8.6 - 9.1

    OpenAPI spec version: 8.6 - 9.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class ObjectlinkApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def find(self, project_id, type, **kwargs):
        """
        Gets associated objects of given objects
        To retrieve associated objects of given objects  <strong>qTest Manager version:</strong> 7.5+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.find(project_id, type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param str type: Valid values include <em>releases</em>, <em>builds</em>, <em>requirements</em>,<em>test-cases</em>, <em>test-runs</em>, <em>test-logs</em>, <em>test-steps</em> or <em>defects</em> (required)
        :param list[int] ids: IDs of objects whose links you want to retrieve
        :param list[str] pids: In case of <em>type=defects</em>, you can specify a list of external defect id in this parameters.  It cannot be used for other types
        :param bool t_rof_sharedprojects:
        :return: list[LinkedArtifactContainer]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.find_with_http_info(project_id, type, **kwargs)
        else:
            (data) = self.find_with_http_info(project_id, type, **kwargs)
            return data

    def find_with_http_info(self, project_id, type, **kwargs):
        """
        Gets associated objects of given objects
        To retrieve associated objects of given objects  <strong>qTest Manager version:</strong> 7.5+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.find_with_http_info(project_id, type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param str type: Valid values include <em>releases</em>, <em>builds</em>, <em>requirements</em>,<em>test-cases</em>, <em>test-runs</em>, <em>test-logs</em>, <em>test-steps</em> or <em>defects</em> (required)
        :param list[int] ids: IDs of objects whose links you want to retrieve
        :param list[str] pids: In case of <em>type=defects</em>, you can specify a list of external defect id in this parameters.  It cannot be used for other types
        :param bool t_rof_sharedprojects:
        :return: list[LinkedArtifactContainer]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'type', 'ids', 'pids', 't_rof_sharedprojects']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `find`")
        # verify the required parameter 'type' is set
        if ('type' not in params) or (params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `find`")


        collection_formats = {}

        resource_path = '/api/v3/projects/{projectId}/linked-artifacts'.replace('{format}', 'json')
        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']

        query_params = {}
        if 'type' in params:
            query_params['type'] = params['type']
        if 'ids' in params:
            query_params['ids'] = params['ids']
            collection_formats['ids'] = 'multi'
        if 'pids' in params:
            query_params['pids'] = params['pids']
            collection_formats['pids'] = 'multi'
        if 't_rof_sharedprojects' in params:
            query_params['TRofSharedprojects'] = params['t_rof_sharedprojects']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[LinkedArtifactContainer]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def link_artifacts(self, project_id, object_type, type, body, object_id, **kwargs):
        """
        Creates links between objects
        To add associated objects to another object
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.link_artifacts(project_id, object_type, type, body, object_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param str object_type: the object type of the source object. Valid values include requirements, builds, test-steps, test-logs, releases (required)
        :param str type: The object type of the associated objects which are being added to the source object.   Valid values include releases, builds, requirements, test-cases, test-runs, test-logs, test-steps or defects (required)
        :param list[int] body: A JSONArray of associated object IDs which are being added to the source object (required)
        :param int object_id: ID of the source object (required)
        :return: list[LinkedArtifactContainer]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.link_artifacts_with_http_info(project_id, object_type, type, body, object_id, **kwargs)
        else:
            (data) = self.link_artifacts_with_http_info(project_id, object_type, type, body, object_id, **kwargs)
            return data

    def link_artifacts_with_http_info(self, project_id, object_type, type, body, object_id, **kwargs):
        """
        Creates links between objects
        To add associated objects to another object
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.link_artifacts_with_http_info(project_id, object_type, type, body, object_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param str object_type: the object type of the source object. Valid values include requirements, builds, test-steps, test-logs, releases (required)
        :param str type: The object type of the associated objects which are being added to the source object.   Valid values include releases, builds, requirements, test-cases, test-runs, test-logs, test-steps or defects (required)
        :param list[int] body: A JSONArray of associated object IDs which are being added to the source object (required)
        :param int object_id: ID of the source object (required)
        :return: list[LinkedArtifactContainer]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'object_type', 'type', 'body', 'object_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method link_artifacts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `link_artifacts`")
        # verify the required parameter 'object_type' is set
        if ('object_type' not in params) or (params['object_type'] is None):
            raise ValueError("Missing the required parameter `object_type` when calling `link_artifacts`")
        # verify the required parameter 'type' is set
        if ('type' not in params) or (params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `link_artifacts`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `link_artifacts`")
        # verify the required parameter 'object_id' is set
        if ('object_id' not in params) or (params['object_id'] is None):
            raise ValueError("Missing the required parameter `object_id` when calling `link_artifacts`")


        collection_formats = {}

        resource_path = '/api/v3/projects/{projectId}/{objectType}/{objectId}/link'.replace('{format}', 'json')
        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']
        if 'object_type' in params:
            path_params['objectType'] = params['object_type']
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']

        query_params = {}
        if 'type' in params:
            query_params['type'] = params['type']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Authorization']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[LinkedArtifactContainer]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def unlink_artifacts(self, project_id, object_type, type, body, object_id, **kwargs):
        """
        Removes links between objects
        To remove associated objects from another object
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.unlink_artifacts(project_id, object_type, type, body, object_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param str object_type: The object type of the source object. Valid values include requirements, builds, test-steps, test-logs, releases (required)
        :param str type: The object type of the associated objects which are being added to the source object.   Valid values include releases, builds, requirements, test-cases, test-runs, test-logs, test-steps or defects (required)
        :param list[int] body: A JSONArray of associated object IDs which are being removed from the source object (required)
        :param int object_id: ID of the source object (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.unlink_artifacts_with_http_info(project_id, object_type, type, body, object_id, **kwargs)
        else:
            (data) = self.unlink_artifacts_with_http_info(project_id, object_type, type, body, object_id, **kwargs)
            return data

    def unlink_artifacts_with_http_info(self, project_id, object_type, type, body, object_id, **kwargs):
        """
        Removes links between objects
        To remove associated objects from another object
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.unlink_artifacts_with_http_info(project_id, object_type, type, body, object_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param str object_type: The object type of the source object. Valid values include requirements, builds, test-steps, test-logs, releases (required)
        :param str type: The object type of the associated objects which are being added to the source object.   Valid values include releases, builds, requirements, test-cases, test-runs, test-logs, test-steps or defects (required)
        :param list[int] body: A JSONArray of associated object IDs which are being removed from the source object (required)
        :param int object_id: ID of the source object (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'object_type', 'type', 'body', 'object_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unlink_artifacts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `unlink_artifacts`")
        # verify the required parameter 'object_type' is set
        if ('object_type' not in params) or (params['object_type'] is None):
            raise ValueError("Missing the required parameter `object_type` when calling `unlink_artifacts`")
        # verify the required parameter 'type' is set
        if ('type' not in params) or (params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `unlink_artifacts`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `unlink_artifacts`")
        # verify the required parameter 'object_id' is set
        if ('object_id' not in params) or (params['object_id'] is None):
            raise ValueError("Missing the required parameter `object_id` when calling `unlink_artifacts`")


        collection_formats = {}

        resource_path = '/api/v3/projects/{projectId}/{objectType}/{objectId}/link'.replace('{format}', 'json')
        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']
        if 'object_type' in params:
            path_params['objectType'] = params['object_type']
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']

        query_params = {}
        if 'type' in params:
            query_params['type'] = params['type']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Authorization']

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='object',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
