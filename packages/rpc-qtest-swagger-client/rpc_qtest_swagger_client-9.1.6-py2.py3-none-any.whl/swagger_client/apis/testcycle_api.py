# coding: utf-8

"""
    qTest Manager API Version 8.6 - 9.1

    qTest Manager API Version 8.6 - 9.1

    OpenAPI spec version: 8.6 - 9.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class TestcycleApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create_cycle(self, project_id, body, **kwargs):
        """
        Create a Test Cycle
        To create a Test Cycle  <strong>qTest Manager version:</strong> 6+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_cycle(project_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param TestCycleResource body: Given resource to create a test cycle. (required)
        :param int parent_id: ID of the Release or Test Cycle under which the newly created Test Cycle will be located.   Use 0 (zero) to create the Test Cycle under the root
        :param str parent_type: The artifact type of the parent folder. Valid values include <em>release</em>, <em>test-cycle</em> or <em>root</em>
        :return: TestCycleResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_cycle_with_http_info(project_id, body, **kwargs)
        else:
            (data) = self.create_cycle_with_http_info(project_id, body, **kwargs)
            return data

    def create_cycle_with_http_info(self, project_id, body, **kwargs):
        """
        Create a Test Cycle
        To create a Test Cycle  <strong>qTest Manager version:</strong> 6+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_cycle_with_http_info(project_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param TestCycleResource body: Given resource to create a test cycle. (required)
        :param int parent_id: ID of the Release or Test Cycle under which the newly created Test Cycle will be located.   Use 0 (zero) to create the Test Cycle under the root
        :param str parent_type: The artifact type of the parent folder. Valid values include <em>release</em>, <em>test-cycle</em> or <em>root</em>
        :return: TestCycleResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'body', 'parent_id', 'parent_type']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_cycle" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `create_cycle`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_cycle`")


        collection_formats = {}

        resource_path = '/api/v3/projects/{projectId}/test-cycles'.replace('{format}', 'json')
        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']

        query_params = {}
        if 'parent_id' in params:
            query_params['parentId'] = params['parent_id']
        if 'parent_type' in params:
            query_params['parentType'] = params['parent_type']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Authorization']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TestCycleResource',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_cycle(self, project_id, test_cycle_id, **kwargs):
        """
        Deletes a Test Cycle
        To delete a Test Cycle  <strong>qTest Manager version:</strong> 6+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_cycle(project_id, test_cycle_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param int test_cycle_id: ID of the Test Cycle which needs to be deleted. (required)
        :param bool force: The Test Cycle can only be deleted if it contains no children. Specify <em>force=true</em> to delete the Test Cycle and its children
        :return: Message
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_cycle_with_http_info(project_id, test_cycle_id, **kwargs)
        else:
            (data) = self.delete_cycle_with_http_info(project_id, test_cycle_id, **kwargs)
            return data

    def delete_cycle_with_http_info(self, project_id, test_cycle_id, **kwargs):
        """
        Deletes a Test Cycle
        To delete a Test Cycle  <strong>qTest Manager version:</strong> 6+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_cycle_with_http_info(project_id, test_cycle_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param int test_cycle_id: ID of the Test Cycle which needs to be deleted. (required)
        :param bool force: The Test Cycle can only be deleted if it contains no children. Specify <em>force=true</em> to delete the Test Cycle and its children
        :return: Message
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'test_cycle_id', 'force']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_cycle" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `delete_cycle`")
        # verify the required parameter 'test_cycle_id' is set
        if ('test_cycle_id' not in params) or (params['test_cycle_id'] is None):
            raise ValueError("Missing the required parameter `test_cycle_id` when calling `delete_cycle`")


        collection_formats = {}

        resource_path = '/api/v3/projects/{projectId}/test-cycles/{testCycleId}'.replace('{format}', 'json')
        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']
        if 'test_cycle_id' in params:
            path_params['testCycleId'] = params['test_cycle_id']

        query_params = {}
        if 'force' in params:
            query_params['force'] = params['force']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Message',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_test_cycle(self, project_id, test_cycle_id, **kwargs):
        """
        Gets a Test Cycle
        To retrieve a Test Cycle  <strong>qTest Manager version:</strong> 6+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_test_cycle(project_id, test_cycle_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param int test_cycle_id: ID of the Test Cycle which you want to retrieve. (required)
        :param str expand: Specify <em>expand=descendants</em> to include its sub and grand-sub Test Cycles and Test Suites in the response
        :return: TestCycleResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_test_cycle_with_http_info(project_id, test_cycle_id, **kwargs)
        else:
            (data) = self.get_test_cycle_with_http_info(project_id, test_cycle_id, **kwargs)
            return data

    def get_test_cycle_with_http_info(self, project_id, test_cycle_id, **kwargs):
        """
        Gets a Test Cycle
        To retrieve a Test Cycle  <strong>qTest Manager version:</strong> 6+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_test_cycle_with_http_info(project_id, test_cycle_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param int test_cycle_id: ID of the Test Cycle which you want to retrieve. (required)
        :param str expand: Specify <em>expand=descendants</em> to include its sub and grand-sub Test Cycles and Test Suites in the response
        :return: TestCycleResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'test_cycle_id', 'expand']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_test_cycle" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_test_cycle`")
        # verify the required parameter 'test_cycle_id' is set
        if ('test_cycle_id' not in params) or (params['test_cycle_id'] is None):
            raise ValueError("Missing the required parameter `test_cycle_id` when calling `get_test_cycle`")


        collection_formats = {}

        resource_path = '/api/v3/projects/{projectId}/test-cycles/{testCycleId}'.replace('{format}', 'json')
        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']
        if 'test_cycle_id' in params:
            path_params['testCycleId'] = params['test_cycle_id']

        query_params = {}
        if 'expand' in params:
            query_params['expand'] = params['expand']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TestCycleResource',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_test_cycles(self, project_id, **kwargs):
        """
        Gets multiple Test Cycles
        To retrieve Test Cycles which are located directly under root or a Release/Test Cycle
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_test_cycles(project_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param int parent_id: ID of the Release or Test Cycle which directly contains the Test Cycles you are retrieving. Input 0 (zero) to get Test Cycles directly under root
        :param str parent_type: The artifact type of the parent folder. Valid values include <em>release</em>, <em>test-cycle</em> or <em>root</em>
        :param str expand: Specify <em>expand=descendants</em> to retrieve the Test Cycles' sub and grand-sub Cycles/Suites
        :return: list[TestCycleResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_test_cycles_with_http_info(project_id, **kwargs)
        else:
            (data) = self.get_test_cycles_with_http_info(project_id, **kwargs)
            return data

    def get_test_cycles_with_http_info(self, project_id, **kwargs):
        """
        Gets multiple Test Cycles
        To retrieve Test Cycles which are located directly under root or a Release/Test Cycle
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_test_cycles_with_http_info(project_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param int parent_id: ID of the Release or Test Cycle which directly contains the Test Cycles you are retrieving. Input 0 (zero) to get Test Cycles directly under root
        :param str parent_type: The artifact type of the parent folder. Valid values include <em>release</em>, <em>test-cycle</em> or <em>root</em>
        :param str expand: Specify <em>expand=descendants</em> to retrieve the Test Cycles' sub and grand-sub Cycles/Suites
        :return: list[TestCycleResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'parent_id', 'parent_type', 'expand']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_test_cycles" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_test_cycles`")


        collection_formats = {}

        resource_path = '/api/v3/projects/{projectId}/test-cycles'.replace('{format}', 'json')
        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']

        query_params = {}
        if 'parent_id' in params:
            query_params['parentId'] = params['parent_id']
        if 'parent_type' in params:
            query_params['parentType'] = params['parent_type']
        if 'expand' in params:
            query_params['expand'] = params['expand']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[TestCycleResource]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_cycle(self, project_id, test_cycle_id, body, **kwargs):
        """
        Updates a Test Cycle
        To update a Test Cycle or move it to another container  <strong>qTest Manager version:</strong> 6+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_cycle(project_id, test_cycle_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param int test_cycle_id: ID of the Test Cycle which needs to be updated. (required)
        :param TestCycleResource body: The Test Cycle's updated properties (required)
        :param int parent_id: ID of a Release or parent Test Cycle which the updated Test Cycle will be moved to. Input 0 (zero) to move the Test Cycle to under root
        :param str parent_type: The artifact type of the parent folder to which the Test Cycle will be moved to. Valid values include <em>release</em>, <em>test-cycle</em> or <em>root</em>
        :return: TestCycleResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_cycle_with_http_info(project_id, test_cycle_id, body, **kwargs)
        else:
            (data) = self.update_cycle_with_http_info(project_id, test_cycle_id, body, **kwargs)
            return data

    def update_cycle_with_http_info(self, project_id, test_cycle_id, body, **kwargs):
        """
        Updates a Test Cycle
        To update a Test Cycle or move it to another container  <strong>qTest Manager version:</strong> 6+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_cycle_with_http_info(project_id, test_cycle_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param int test_cycle_id: ID of the Test Cycle which needs to be updated. (required)
        :param TestCycleResource body: The Test Cycle's updated properties (required)
        :param int parent_id: ID of a Release or parent Test Cycle which the updated Test Cycle will be moved to. Input 0 (zero) to move the Test Cycle to under root
        :param str parent_type: The artifact type of the parent folder to which the Test Cycle will be moved to. Valid values include <em>release</em>, <em>test-cycle</em> or <em>root</em>
        :return: TestCycleResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'test_cycle_id', 'body', 'parent_id', 'parent_type']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_cycle" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `update_cycle`")
        # verify the required parameter 'test_cycle_id' is set
        if ('test_cycle_id' not in params) or (params['test_cycle_id'] is None):
            raise ValueError("Missing the required parameter `test_cycle_id` when calling `update_cycle`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_cycle`")


        collection_formats = {}

        resource_path = '/api/v3/projects/{projectId}/test-cycles/{testCycleId}'.replace('{format}', 'json')
        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']
        if 'test_cycle_id' in params:
            path_params['testCycleId'] = params['test_cycle_id']

        query_params = {}
        if 'parent_id' in params:
            query_params['parentId'] = params['parent_id']
        if 'parent_type' in params:
            query_params['parentType'] = params['parent_type']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Authorization']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TestCycleResource',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
