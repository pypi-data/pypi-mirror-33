# coding: utf-8

"""
    qTest Manager API Version 8.6 - 9.1

    qTest Manager API Version 8.6 - 9.1

    OpenAPI spec version: 8.6 - 9.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class ReleaseApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create(self, project_id, body, **kwargs):
        """
        Creates a Release
        To create a Release  <strong>qTest Manager version:</strong> 4+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create(project_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param ReleaseWithCustomFieldResource body: The Release's properties (required)
        :return: ReleaseWithCustomFieldResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_with_http_info(project_id, body, **kwargs)
        else:
            (data) = self.create_with_http_info(project_id, body, **kwargs)
            return data

    def create_with_http_info(self, project_id, body, **kwargs):
        """
        Creates a Release
        To create a Release  <strong>qTest Manager version:</strong> 4+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_with_http_info(project_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param ReleaseWithCustomFieldResource body: The Release's properties (required)
        :return: ReleaseWithCustomFieldResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `create`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create`")


        collection_formats = {}

        resource_path = '/api/v3/projects/{projectId}/releases'.replace('{format}', 'json')
        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Authorization']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ReleaseWithCustomFieldResource',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete(self, project_id, release_id, **kwargs):
        """
        Delete a release
        To delete a Release
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete(project_id, release_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param int release_id: ID of the Release which needs to be deleted  <strong>qTest Manager version:</strong> 6+ (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_with_http_info(project_id, release_id, **kwargs)
        else:
            (data) = self.delete_with_http_info(project_id, release_id, **kwargs)
            return data

    def delete_with_http_info(self, project_id, release_id, **kwargs):
        """
        Delete a release
        To delete a Release
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_with_http_info(project_id, release_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param int release_id: ID of the Release which needs to be deleted  <strong>qTest Manager version:</strong> 6+ (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'release_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `delete`")
        # verify the required parameter 'release_id' is set
        if ('release_id' not in params) or (params['release_id'] is None):
            raise ValueError("Missing the required parameter `release_id` when calling `delete`")


        collection_formats = {}

        resource_path = '/api/v3/projects/{projectId}/releases/{releaseId}'.replace('{format}', 'json')
        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']
        if 'release_id' in params:
            path_params['releaseId'] = params['release_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='object',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get(self, project_id, release_id, **kwargs):
        """
        Gets a Release
        To retrieve a Release  <strong>qTest Manager version:</strong> 4+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get(project_id, release_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param int release_id: ID of the Release (required)
        :return: ReleaseWithCustomFieldResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_with_http_info(project_id, release_id, **kwargs)
        else:
            (data) = self.get_with_http_info(project_id, release_id, **kwargs)
            return data

    def get_with_http_info(self, project_id, release_id, **kwargs):
        """
        Gets a Release
        To retrieve a Release  <strong>qTest Manager version:</strong> 4+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_with_http_info(project_id, release_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param int release_id: ID of the Release (required)
        :return: ReleaseWithCustomFieldResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'release_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get`")
        # verify the required parameter 'release_id' is set
        if ('release_id' not in params) or (params['release_id'] is None):
            raise ValueError("Missing the required parameter `release_id` when calling `get`")


        collection_formats = {}

        resource_path = '/api/v3/projects/{projectId}/releases/{releaseId}'.replace('{format}', 'json')
        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']
        if 'release_id' in params:
            path_params['releaseId'] = params['release_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ReleaseWithCustomFieldResource',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all(self, project_id, **kwargs):
        """
        Gets multiple Releases
        To retrieve Releases in a project  <strong>qTest Manager version:</strong> 4+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all(project_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param bool include_closed: <em>includeClosed=false</em> - default value. <em>Closed</em> Releases are excluded from the response  <em>includeClosed=false</em> - Closed Release are included in the response
        :return: list[ReleaseWithCustomFieldResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_with_http_info(project_id, **kwargs)
        else:
            (data) = self.get_all_with_http_info(project_id, **kwargs)
            return data

    def get_all_with_http_info(self, project_id, **kwargs):
        """
        Gets multiple Releases
        To retrieve Releases in a project  <strong>qTest Manager version:</strong> 4+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_with_http_info(project_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param bool include_closed: <em>includeClosed=false</em> - default value. <em>Closed</em> Releases are excluded from the response  <em>includeClosed=false</em> - Closed Release are included in the response
        :return: list[ReleaseWithCustomFieldResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'include_closed']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_all`")


        collection_formats = {}

        resource_path = '/api/v3/projects/{projectId}/releases'.replace('{format}', 'json')
        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']

        query_params = {}
        if 'include_closed' in params:
            query_params['includeClosed'] = params['include_closed']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[ReleaseWithCustomFieldResource]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update(self, project_id, release_id, body, **kwargs):
        """
        Updates a Release
        To update a Release  <strong>qTest Manager version:</strong> 6+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update(project_id, release_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param int release_id: ID of the Release which needs to be updated (required)
        :param ReleaseWithCustomFieldResource body: The Release's updated properties (required)
        :return: ReleaseWithCustomFieldResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_with_http_info(project_id, release_id, body, **kwargs)
        else:
            (data) = self.update_with_http_info(project_id, release_id, body, **kwargs)
            return data

    def update_with_http_info(self, project_id, release_id, body, **kwargs):
        """
        Updates a Release
        To update a Release  <strong>qTest Manager version:</strong> 6+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_with_http_info(project_id, release_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param int release_id: ID of the Release which needs to be updated (required)
        :param ReleaseWithCustomFieldResource body: The Release's updated properties (required)
        :return: ReleaseWithCustomFieldResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'release_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `update`")
        # verify the required parameter 'release_id' is set
        if ('release_id' not in params) or (params['release_id'] is None):
            raise ValueError("Missing the required parameter `release_id` when calling `update`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update`")


        collection_formats = {}

        resource_path = '/api/v3/projects/{projectId}/releases/{releaseId}'.replace('{format}', 'json')
        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']
        if 'release_id' in params:
            path_params['releaseId'] = params['release_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Authorization']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ReleaseWithCustomFieldResource',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
