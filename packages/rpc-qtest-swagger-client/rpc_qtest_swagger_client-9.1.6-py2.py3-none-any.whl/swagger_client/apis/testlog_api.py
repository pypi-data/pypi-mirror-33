# coding: utf-8

"""
    qTest Manager API Version 8.6 - 9.1

    qTest Manager API Version 8.6 - 9.1

    OpenAPI spec version: 8.6 - 9.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class TestlogApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def get_last_run_log(self, project_id, test_run_id, **kwargs):
        """
        Gets the latest Test Log of a Test Run
        To retrieve a Test Run's latest test result  <strong>qTest Manager version:</strong> 4+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_last_run_log(project_id, test_run_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param int test_run_id: ID of the Test Run (required)
        :param str expand: Valid values include:   i)<em>testcase</em> - to expand the associated Test Case and its Test Steps in the response;   ii) <em>teststeplog.teststep</em> - to expand results of each Test Steps in the response
        :return: TestLogResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_last_run_log_with_http_info(project_id, test_run_id, **kwargs)
        else:
            (data) = self.get_last_run_log_with_http_info(project_id, test_run_id, **kwargs)
            return data

    def get_last_run_log_with_http_info(self, project_id, test_run_id, **kwargs):
        """
        Gets the latest Test Log of a Test Run
        To retrieve a Test Run's latest test result  <strong>qTest Manager version:</strong> 4+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_last_run_log_with_http_info(project_id, test_run_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param int test_run_id: ID of the Test Run (required)
        :param str expand: Valid values include:   i)<em>testcase</em> - to expand the associated Test Case and its Test Steps in the response;   ii) <em>teststeplog.teststep</em> - to expand results of each Test Steps in the response
        :return: TestLogResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'test_run_id', 'expand']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_last_run_log" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_last_run_log`")
        # verify the required parameter 'test_run_id' is set
        if ('test_run_id' not in params) or (params['test_run_id'] is None):
            raise ValueError("Missing the required parameter `test_run_id` when calling `get_last_run_log`")


        collection_formats = {}

        resource_path = '/api/v3/projects/{projectId}/test-runs/{testRunId}/test-logs/last-run'.replace('{format}', 'json')
        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']
        if 'test_run_id' in params:
            path_params['testRunId'] = params['test_run_id']

        query_params = {}
        if 'expand' in params:
            query_params['expand'] = params['expand']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TestLogResource',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_test_log(self, project_id, id, test_run_id, **kwargs):
        """
        Gets a Test Log of a Test Run
        To retrieve a specific Test Log of a Test Run
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_test_log(project_id, id, test_run_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param int id: ID of the Test Log (required)
        :param int test_run_id: ID of the Test Run (required)
        :return: TestLogResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_test_log_with_http_info(project_id, id, test_run_id, **kwargs)
        else:
            (data) = self.get_test_log_with_http_info(project_id, id, test_run_id, **kwargs)
            return data

    def get_test_log_with_http_info(self, project_id, id, test_run_id, **kwargs):
        """
        Gets a Test Log of a Test Run
        To retrieve a specific Test Log of a Test Run
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_test_log_with_http_info(project_id, id, test_run_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param int id: ID of the Test Log (required)
        :param int test_run_id: ID of the Test Run (required)
        :return: TestLogResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'id', 'test_run_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_test_log" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_test_log`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_test_log`")
        # verify the required parameter 'test_run_id' is set
        if ('test_run_id' not in params) or (params['test_run_id'] is None):
            raise ValueError("Missing the required parameter `test_run_id` when calling `get_test_log`")


        collection_formats = {}

        resource_path = '/api/v3/projects/{projectId}/test-runs/{testRunId}/test-logs/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']
        if 'id' in params:
            path_params['id'] = params['id']
        if 'test_run_id' in params:
            path_params['testRunId'] = params['test_run_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TestLogResource',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_test_logs_list(self, project_id, test_run_id, **kwargs):
        """
        Gets all Test Logs of a Test Run
        To retrieve all Test Logs of a Test Run  <strong>qTest Manager version:</strong> 7.6
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_test_logs_list(project_id, test_run_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param int test_run_id: ID of the Test Run (required)
        :param int page_size: The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter
        :param int page: By default the first page is returned but you can specify any page number to retrieve objects
        :return: TestLogListResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_test_logs_list_with_http_info(project_id, test_run_id, **kwargs)
        else:
            (data) = self.get_test_logs_list_with_http_info(project_id, test_run_id, **kwargs)
            return data

    def get_test_logs_list_with_http_info(self, project_id, test_run_id, **kwargs):
        """
        Gets all Test Logs of a Test Run
        To retrieve all Test Logs of a Test Run  <strong>qTest Manager version:</strong> 7.6
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_test_logs_list_with_http_info(project_id, test_run_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param int test_run_id: ID of the Test Run (required)
        :param int page_size: The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter
        :param int page: By default the first page is returned but you can specify any page number to retrieve objects
        :return: TestLogListResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'test_run_id', 'page_size', 'page']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_test_logs_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_test_logs_list`")
        # verify the required parameter 'test_run_id' is set
        if ('test_run_id' not in params) or (params['test_run_id'] is None):
            raise ValueError("Missing the required parameter `test_run_id` when calling `get_test_logs_list`")


        collection_formats = {}

        resource_path = '/api/v3/projects/{projectId}/test-runs/{testRunId}/test-logs'.replace('{format}', 'json')
        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']
        if 'test_run_id' in params:
            path_params['testRunId'] = params['test_run_id']

        query_params = {}
        if 'page_size' in params:
            query_params['pageSize'] = params['page_size']
        if 'page' in params:
            query_params['page'] = params['page']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TestLogListResource',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def modify_automation_log(self, project_id, body, test_run_id, id, **kwargs):
        """
        Modify an Automation Test Log
        To modify test result of a <em>automation</em> Test Run  <strong>qTest Manager version:</strong> 9.1.5+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.modify_automation_log(project_id, body, test_run_id, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param AutomationTestLog body: <em>status (required):</em> automation status values which are mapped in qTest Manager's Automation Settings  <em>exe_start_date (required):</em> the execution's starting time  <em>exe_end_date (required):</em> the execution's ending time  <em>note:</em> execution note  <em>properties:</em> array of fields and values of the Test Log that need to be updated  <em>test_step_logs:</em> a JSONArray of TestStepLog objects  <strong>NOTE:</strong> <ul><li>You can only modify test logs which were submitted by you. The project admin can modify any test logs within his project</li><li>Test Step order is required in the test_step_logs array. You cannot specify a different order from the original submitted test log</li><li>You cannot modify Test Step Description and Expected Result</li><li>You cannot modify the following fields: Test Case Version, Automation Content, CI Tools, Build Number and Build URL</li></ul> (required)
        :param int test_run_id: ID of the Test Run (required)
        :param int id: id (required)
        :param bool encode_note: encodeNote
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.modify_automation_log_with_http_info(project_id, body, test_run_id, id, **kwargs)
        else:
            (data) = self.modify_automation_log_with_http_info(project_id, body, test_run_id, id, **kwargs)
            return data

    def modify_automation_log_with_http_info(self, project_id, body, test_run_id, id, **kwargs):
        """
        Modify an Automation Test Log
        To modify test result of a <em>automation</em> Test Run  <strong>qTest Manager version:</strong> 9.1.5+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.modify_automation_log_with_http_info(project_id, body, test_run_id, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param AutomationTestLog body: <em>status (required):</em> automation status values which are mapped in qTest Manager's Automation Settings  <em>exe_start_date (required):</em> the execution's starting time  <em>exe_end_date (required):</em> the execution's ending time  <em>note:</em> execution note  <em>properties:</em> array of fields and values of the Test Log that need to be updated  <em>test_step_logs:</em> a JSONArray of TestStepLog objects  <strong>NOTE:</strong> <ul><li>You can only modify test logs which were submitted by you. The project admin can modify any test logs within his project</li><li>Test Step order is required in the test_step_logs array. You cannot specify a different order from the original submitted test log</li><li>You cannot modify Test Step Description and Expected Result</li><li>You cannot modify the following fields: Test Case Version, Automation Content, CI Tools, Build Number and Build URL</li></ul> (required)
        :param int test_run_id: ID of the Test Run (required)
        :param int id: id (required)
        :param bool encode_note: encodeNote
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'body', 'test_run_id', 'id', 'encode_note']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modify_automation_log" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `modify_automation_log`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `modify_automation_log`")
        # verify the required parameter 'test_run_id' is set
        if ('test_run_id' not in params) or (params['test_run_id'] is None):
            raise ValueError("Missing the required parameter `test_run_id` when calling `modify_automation_log`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `modify_automation_log`")


        collection_formats = {}

        resource_path = '/api/v3/projects/{projectId}/test-runs/{testRunId}/auto-test-logs/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']
        if 'test_run_id' in params:
            path_params['testRunId'] = params['test_run_id']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'encode_note' in params:
            query_params['encodeNote'] = params['encode_note']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Authorization']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='object',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def modify_test_log(self, project_id, body, test_run_id, id, **kwargs):
        """
        Modify a Manual Test Log
        To modify test result of an <em>manual</em> Test Run  <strong>qTest Manager version:</strong> 9.1.5+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.modify_test_log(project_id, body, test_run_id, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param TestLogResource body: <em>status (required):</em> Status of the Test Log as defined in the projectâs Field Settings  <em>exe_start_date (required):</em> the execution's starting time  <em>exe_end_date (required):</em> the execution's ending time  <em>note:</em> execution note  <em>properties:</em> array of fields and values of the Test Log that need to be updated  <em>test_step_logs:</em> a JSONArray of TestStepLog objects  <strong>NOTE:</strong> <ul><li>You can only modify test logs which were submitted by you. The project admin can modify any test logs within his project</li><li>Test Step order is required in the test_step_logs array. You cannot specify a different order from the original submitted test log</li><li>You cannot modify Test Step Description and Expected Result</li><li>You cannot modify the following fields: Test Case Version, CI Tools, Build Number and Build URL</li></ul> (required)
        :param int test_run_id: ID of the Test Run (required)
        :param int id: id (required)
        :return: TestLogResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.modify_test_log_with_http_info(project_id, body, test_run_id, id, **kwargs)
        else:
            (data) = self.modify_test_log_with_http_info(project_id, body, test_run_id, id, **kwargs)
            return data

    def modify_test_log_with_http_info(self, project_id, body, test_run_id, id, **kwargs):
        """
        Modify a Manual Test Log
        To modify test result of an <em>manual</em> Test Run  <strong>qTest Manager version:</strong> 9.1.5+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.modify_test_log_with_http_info(project_id, body, test_run_id, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param TestLogResource body: <em>status (required):</em> Status of the Test Log as defined in the projectâs Field Settings  <em>exe_start_date (required):</em> the execution's starting time  <em>exe_end_date (required):</em> the execution's ending time  <em>note:</em> execution note  <em>properties:</em> array of fields and values of the Test Log that need to be updated  <em>test_step_logs:</em> a JSONArray of TestStepLog objects  <strong>NOTE:</strong> <ul><li>You can only modify test logs which were submitted by you. The project admin can modify any test logs within his project</li><li>Test Step order is required in the test_step_logs array. You cannot specify a different order from the original submitted test log</li><li>You cannot modify Test Step Description and Expected Result</li><li>You cannot modify the following fields: Test Case Version, CI Tools, Build Number and Build URL</li></ul> (required)
        :param int test_run_id: ID of the Test Run (required)
        :param int id: id (required)
        :return: TestLogResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'body', 'test_run_id', 'id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modify_test_log" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `modify_test_log`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `modify_test_log`")
        # verify the required parameter 'test_run_id' is set
        if ('test_run_id' not in params) or (params['test_run_id'] is None):
            raise ValueError("Missing the required parameter `test_run_id` when calling `modify_test_log`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `modify_test_log`")


        collection_formats = {}

        resource_path = '/api/v3/projects/{projectId}/test-runs/{testRunId}/test-logs/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']
        if 'test_run_id' in params:
            path_params['testRunId'] = params['test_run_id']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Authorization']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TestLogResource',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def submit_automation_log(self, project_id, body, test_run_id, **kwargs):
        """
        Submits an Automation Test Log
        To submit test result of an Automation Test Run  <strong>qTest Manager version:</strong> 4+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.submit_automation_log(project_id, body, test_run_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param AutomationTestLogResource body: <em>status (required):</em> automation status values which are mapped in qTest Manager's Automation Settings  <em>exe_start_date (required):</em> the execution's starting time  <em>exe_end_date (required)</em> the execution's ending time  <em>name (required)</em> name of the Test Run or Test Case  <em>automation_content (required):</em> a string that uniquely identifies an Automation Test Case  <em>attachments:</em> a JSONArray of Attachment objects  <em>note:</em> execution note  <em>test_case_version_id:</em> ID of the associated Test Case's version  <em>test_step_logs:</em> a JSONArray of TestStepLog objects (required)
        :param int test_run_id: ID of the Test Run  1/ If it is greater than 0 (zero), test result will be submitted to the specific Test Run  If it is 0 (zero), test result will be submitted to a new Test Run (required)
        :param str suite_per_day: <em>suitePerDay=true</em> - the newly created Test Run will be located under a Test Suite named under the execution date specified in parameter <em>suiteDate</em>, eg: <em>Automation 2014-12-09</em>  <em>suitePerDay=false</em> - the newly created Test Run will be located under <em>Automation Test Suite</em>  <strong>IMPORTANT:</strong> In case you update an existing Test Run, its Test Suite remains unchanged
        :param str suite_date: It is required if <em>suitePerDay</em> is true. Its format is <em>\"yyyymmdd\"</em>.   The newly created Test Run will be located under a Test Suite named \"Automation yyyy-mm-dd\", eg: Automation 2014-12-09
        :param bool encode_note: Specify if the Test Log's Notes are in HTML format  <em>encodeNote=true</em> - default value. Notes are not in HTML format  <em>encodeNote=false:</em> Notes are in HTML format
        :param bool force_update_version:
        :param str agent_id:
        :param str user_id:
        :return: AutomationTestLogResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.submit_automation_log_with_http_info(project_id, body, test_run_id, **kwargs)
        else:
            (data) = self.submit_automation_log_with_http_info(project_id, body, test_run_id, **kwargs)
            return data

    def submit_automation_log_with_http_info(self, project_id, body, test_run_id, **kwargs):
        """
        Submits an Automation Test Log
        To submit test result of an Automation Test Run  <strong>qTest Manager version:</strong> 4+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.submit_automation_log_with_http_info(project_id, body, test_run_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param AutomationTestLogResource body: <em>status (required):</em> automation status values which are mapped in qTest Manager's Automation Settings  <em>exe_start_date (required):</em> the execution's starting time  <em>exe_end_date (required)</em> the execution's ending time  <em>name (required)</em> name of the Test Run or Test Case  <em>automation_content (required):</em> a string that uniquely identifies an Automation Test Case  <em>attachments:</em> a JSONArray of Attachment objects  <em>note:</em> execution note  <em>test_case_version_id:</em> ID of the associated Test Case's version  <em>test_step_logs:</em> a JSONArray of TestStepLog objects (required)
        :param int test_run_id: ID of the Test Run  1/ If it is greater than 0 (zero), test result will be submitted to the specific Test Run  If it is 0 (zero), test result will be submitted to a new Test Run (required)
        :param str suite_per_day: <em>suitePerDay=true</em> - the newly created Test Run will be located under a Test Suite named under the execution date specified in parameter <em>suiteDate</em>, eg: <em>Automation 2014-12-09</em>  <em>suitePerDay=false</em> - the newly created Test Run will be located under <em>Automation Test Suite</em>  <strong>IMPORTANT:</strong> In case you update an existing Test Run, its Test Suite remains unchanged
        :param str suite_date: It is required if <em>suitePerDay</em> is true. Its format is <em>\"yyyymmdd\"</em>.   The newly created Test Run will be located under a Test Suite named \"Automation yyyy-mm-dd\", eg: Automation 2014-12-09
        :param bool encode_note: Specify if the Test Log's Notes are in HTML format  <em>encodeNote=true</em> - default value. Notes are not in HTML format  <em>encodeNote=false:</em> Notes are in HTML format
        :param bool force_update_version:
        :param str agent_id:
        :param str user_id:
        :return: AutomationTestLogResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'body', 'test_run_id', 'suite_per_day', 'suite_date', 'encode_note', 'force_update_version', 'agent_id', 'user_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method submit_automation_log" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `submit_automation_log`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `submit_automation_log`")
        # verify the required parameter 'test_run_id' is set
        if ('test_run_id' not in params) or (params['test_run_id'] is None):
            raise ValueError("Missing the required parameter `test_run_id` when calling `submit_automation_log`")


        collection_formats = {}

        resource_path = '/api/v3/projects/{projectId}/test-runs/{testRunId}/auto-test-logs'.replace('{format}', 'json')
        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']
        if 'test_run_id' in params:
            path_params['testRunId'] = params['test_run_id']

        query_params = {}
        if 'suite_per_day' in params:
            query_params['suitePerDay'] = params['suite_per_day']
        if 'suite_date' in params:
            query_params['suiteDate'] = params['suite_date']
        if 'encode_note' in params:
            query_params['encodeNote'] = params['encode_note']
        if 'force_update_version' in params:
            query_params['forceUpdateVersion'] = params['force_update_version']
        if 'agent_id' in params:
            query_params['agentId'] = params['agent_id']
        if 'user_id' in params:
            query_params['userId'] = params['user_id']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Authorization']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='AutomationTestLogResource',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def submit_automation_test_logs(self, project_id, body, type, test_run_id, **kwargs):
        """
        Submits multiple test results
        To submit Automation Test Logs of multiple Test Runs  <strong>qTest Manager version:</strong> 8.0.2+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.submit_automation_test_logs(project_id, body, type, test_run_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param AutomationRequest body: <em>test_suite:</em> ID of the Test Suite where the submitted Test Runs will be located  <em>parent_module:</em> In case there has been no Test Case associated with the submitted Test Run, a new automation Test Case will be created. The new Test Cases are located under a module named <em>Automation</em>. If you specify an ID for parent_module, the <em>Automation</em> module will be located under the specified module. Otherwise, the <em>Automation</em> module is located directly under root  <em>execution_date (required):</em> Execution date in <em>YYYY-mm-dd</em> format  <em>test_logs (required):</em> The array of TestLog objects. The below are TestLog attributes  <em>status (required):</em> The automation result values that were mapped with Test Run Result in qTest automation settings  <em>exe_start_date (required):</em> Execution start time  <em>exe_end_date (required):</em> Execution end time  <em>name (required):</em> Test Run name  <em>automation_content (required):</em> An XML formatted string that contains the class test/ group test/ package test  <em>attachments:</em> An array of the Attachment objects  <em>note:</em> Test Log note  <em>test_step_logs:</em> An of TestStepLog objects. You can specify Test Steps' order in the requrest. It must be continous series of numbers, starting from zero, or it will throw an error. The order will be used when the Test Case is created or updated in qTest. If the order is omitted, Test Steps will be alphabetically sorted when creating or updating Test Case (required)
        :param str type: Always input <em>automation</em> for this parameter (required)
        :param int test_run_id: This should always be <strong>0 (zero)</strong> or else it will throw an exception (required)
        :param bool escape_xml: <em>escapeXml=true</em> - default value. &gt and &lt in <em>Automation Content</em> field are encoded  <em>escapeXml=false</em> - the Automation Content field is not encoded
        :param str user_id:
        :return: QueueProcessingResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.submit_automation_test_logs_with_http_info(project_id, body, type, test_run_id, **kwargs)
        else:
            (data) = self.submit_automation_test_logs_with_http_info(project_id, body, type, test_run_id, **kwargs)
            return data

    def submit_automation_test_logs_with_http_info(self, project_id, body, type, test_run_id, **kwargs):
        """
        Submits multiple test results
        To submit Automation Test Logs of multiple Test Runs  <strong>qTest Manager version:</strong> 8.0.2+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.submit_automation_test_logs_with_http_info(project_id, body, type, test_run_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param AutomationRequest body: <em>test_suite:</em> ID of the Test Suite where the submitted Test Runs will be located  <em>parent_module:</em> In case there has been no Test Case associated with the submitted Test Run, a new automation Test Case will be created. The new Test Cases are located under a module named <em>Automation</em>. If you specify an ID for parent_module, the <em>Automation</em> module will be located under the specified module. Otherwise, the <em>Automation</em> module is located directly under root  <em>execution_date (required):</em> Execution date in <em>YYYY-mm-dd</em> format  <em>test_logs (required):</em> The array of TestLog objects. The below are TestLog attributes  <em>status (required):</em> The automation result values that were mapped with Test Run Result in qTest automation settings  <em>exe_start_date (required):</em> Execution start time  <em>exe_end_date (required):</em> Execution end time  <em>name (required):</em> Test Run name  <em>automation_content (required):</em> An XML formatted string that contains the class test/ group test/ package test  <em>attachments:</em> An array of the Attachment objects  <em>note:</em> Test Log note  <em>test_step_logs:</em> An of TestStepLog objects. You can specify Test Steps' order in the requrest. It must be continous series of numbers, starting from zero, or it will throw an error. The order will be used when the Test Case is created or updated in qTest. If the order is omitted, Test Steps will be alphabetically sorted when creating or updating Test Case (required)
        :param str type: Always input <em>automation</em> for this parameter (required)
        :param int test_run_id: This should always be <strong>0 (zero)</strong> or else it will throw an exception (required)
        :param bool escape_xml: <em>escapeXml=true</em> - default value. &gt and &lt in <em>Automation Content</em> field are encoded  <em>escapeXml=false</em> - the Automation Content field is not encoded
        :param str user_id:
        :return: QueueProcessingResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'body', 'type', 'test_run_id', 'escape_xml', 'user_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method submit_automation_test_logs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `submit_automation_test_logs`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `submit_automation_test_logs`")
        # verify the required parameter 'type' is set
        if ('type' not in params) or (params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `submit_automation_test_logs`")
        # verify the required parameter 'test_run_id' is set
        if ('test_run_id' not in params) or (params['test_run_id'] is None):
            raise ValueError("Missing the required parameter `test_run_id` when calling `submit_automation_test_logs`")


        collection_formats = {}

        resource_path = '/api/v3.1/projects/{projectId}/test-runs/{testRunId}/auto-test-logs'.replace('{format}', 'json')
        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']
        if 'test_run_id' in params:
            path_params['testRunId'] = params['test_run_id']

        query_params = {}
        if 'type' in params:
            query_params['type'] = params['type']
        if 'escape_xml' in params:
            query_params['escapeXml'] = params['escape_xml']
        if 'user_id' in params:
            query_params['userId'] = params['user_id']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Authorization']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='QueueProcessingResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def submit_automation_test_logs_0(self, project_id, body, type, **kwargs):
        """
        Submits multiple test results and specifies Test Design and Test Execution tree structures
        This is the extended version of this API <strong>POST /api/v3.1/projects/{projectId}/test-runs/{testRunId}/auto-test-logs</strong>. It allows submitting multiple test logs in one API request, and creating Test Cases and Test Runs in hierarchical structure which is specified in the request body  <strong>Important:</strong> This API does not update names and locations of existing Test Cases and Test Runs
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.submit_automation_test_logs_0(project_id, body, type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param AutomationRequest body: <em>test_cycle (required):</em> PID or ID of the parent Test Cycle in qTest Manager where submitted Test Runs will be located  <em>test_logs (required):</em> The array of TestLog objects. The below are TestLog attributes  <strong>TestLog attributes:</strong>  - <em>test_case_version_id:</em> ID of the associated Test Case's version. In case the Test Run has not existed, this field should not be included or it will cause an error  - <em>status (required):</em> The automation result values that were mapped with Test Run Result in qTest automation settings  - <em>exe_start_date (required):</em> Execution start time  - <em>exe_end_date (required):</em> Execution end time  - <em>module_names (required):</em> an array of folder names which will be used when creating hierarchical structure in Test Design and Test Execution trees. In Test Design tree, the first folder will be created as a Module directly under the tree root. Other folders will be created as sub-Modules under their preceding folders in the array. In Test Execution tree, the first folder will be created as a Test Cycle directly under the parent Test Cycle which is specified in the API request. Other folders will be created as sub Test Cycles under their preceding folders in the array. If there is a folder in the tree with matching name and location, the API will not create a duplicate one  - <em>name (required):</em> It will be used when <em>creating</em> Test Cases and Test Runs as their names. It will not be used for updating Test Case and Test Run names  - <em>automation_content (required):</em> Specify a unique string to each Test Case. It acts as Test Case fingerprint. Before adding a Test Log, qTest Manager will look up Automation Content of existing Test Cases. If it can find an existing Test Case, the Test Log will be associated with that Test Case. Otherwise, a new Test Case will be created with the submitted Test Log. It is also be used when creating Test Runs. If qTest Manager finds an existing Test Run with matching Automation Content and location in Test Execution tree, it will not create a duplicate one. If there is an existing Test Run with matching Automation Content but it is located in different Test Cycles, qTest Manager will create a new Test Run in the specified folder  - <em>attachments:</em> an array of the Attachment objects  - <em>test_step_logs:</em> an array of TestStepLog objects. You can specify Test Steps' order in the request. It must be continous series of numbers, starting from zero, or it will throw an error. The order will be used when the Test Case is created or updated in qTest. If the order is omitted, Test Steps will be alphabetically sorted when creating or updating Test Case  <strong>Test Step Log attributes</strong>  - <em>description (required):</em> Description of the Test Step  - <em>expected_result (required):</em> Expected result of the Test Step  - <em>actual_result (required):</em> Actual result of the Test Step  - <em>status (required):</em> The automation result values that were mapped with Test Run Result in qTest automation settings  - <em>order:</em> Specify the order of Test Steps. It must be continous series of numbers, starting from zero, or it will throw an error. The order will be used when the Test Case is created or updated in qTest. If the order is omitted, Test Steps will be alphabetically sorted when creating or updating Test Case (required)
        :param str type: always use <em>type=automation</em> for this parameter (required)
        :param bool escape_xml: <em>escapeXml=true</em> - default value. &gt and &lt in <em>Automation Content</em> field are encoded  <em>escapeXml=false</em> - the Automation Content field is not encoded
        :param str user_id:
        :return: QueueProcessingResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.submit_automation_test_logs_0_with_http_info(project_id, body, type, **kwargs)
        else:
            (data) = self.submit_automation_test_logs_0_with_http_info(project_id, body, type, **kwargs)
            return data

    def submit_automation_test_logs_0_with_http_info(self, project_id, body, type, **kwargs):
        """
        Submits multiple test results and specifies Test Design and Test Execution tree structures
        This is the extended version of this API <strong>POST /api/v3.1/projects/{projectId}/test-runs/{testRunId}/auto-test-logs</strong>. It allows submitting multiple test logs in one API request, and creating Test Cases and Test Runs in hierarchical structure which is specified in the request body  <strong>Important:</strong> This API does not update names and locations of existing Test Cases and Test Runs
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.submit_automation_test_logs_0_with_http_info(project_id, body, type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param AutomationRequest body: <em>test_cycle (required):</em> PID or ID of the parent Test Cycle in qTest Manager where submitted Test Runs will be located  <em>test_logs (required):</em> The array of TestLog objects. The below are TestLog attributes  <strong>TestLog attributes:</strong>  - <em>test_case_version_id:</em> ID of the associated Test Case's version. In case the Test Run has not existed, this field should not be included or it will cause an error  - <em>status (required):</em> The automation result values that were mapped with Test Run Result in qTest automation settings  - <em>exe_start_date (required):</em> Execution start time  - <em>exe_end_date (required):</em> Execution end time  - <em>module_names (required):</em> an array of folder names which will be used when creating hierarchical structure in Test Design and Test Execution trees. In Test Design tree, the first folder will be created as a Module directly under the tree root. Other folders will be created as sub-Modules under their preceding folders in the array. In Test Execution tree, the first folder will be created as a Test Cycle directly under the parent Test Cycle which is specified in the API request. Other folders will be created as sub Test Cycles under their preceding folders in the array. If there is a folder in the tree with matching name and location, the API will not create a duplicate one  - <em>name (required):</em> It will be used when <em>creating</em> Test Cases and Test Runs as their names. It will not be used for updating Test Case and Test Run names  - <em>automation_content (required):</em> Specify a unique string to each Test Case. It acts as Test Case fingerprint. Before adding a Test Log, qTest Manager will look up Automation Content of existing Test Cases. If it can find an existing Test Case, the Test Log will be associated with that Test Case. Otherwise, a new Test Case will be created with the submitted Test Log. It is also be used when creating Test Runs. If qTest Manager finds an existing Test Run with matching Automation Content and location in Test Execution tree, it will not create a duplicate one. If there is an existing Test Run with matching Automation Content but it is located in different Test Cycles, qTest Manager will create a new Test Run in the specified folder  - <em>attachments:</em> an array of the Attachment objects  - <em>test_step_logs:</em> an array of TestStepLog objects. You can specify Test Steps' order in the request. It must be continous series of numbers, starting from zero, or it will throw an error. The order will be used when the Test Case is created or updated in qTest. If the order is omitted, Test Steps will be alphabetically sorted when creating or updating Test Case  <strong>Test Step Log attributes</strong>  - <em>description (required):</em> Description of the Test Step  - <em>expected_result (required):</em> Expected result of the Test Step  - <em>actual_result (required):</em> Actual result of the Test Step  - <em>status (required):</em> The automation result values that were mapped with Test Run Result in qTest automation settings  - <em>order:</em> Specify the order of Test Steps. It must be continous series of numbers, starting from zero, or it will throw an error. The order will be used when the Test Case is created or updated in qTest. If the order is omitted, Test Steps will be alphabetically sorted when creating or updating Test Case (required)
        :param str type: always use <em>type=automation</em> for this parameter (required)
        :param bool escape_xml: <em>escapeXml=true</em> - default value. &gt and &lt in <em>Automation Content</em> field are encoded  <em>escapeXml=false</em> - the Automation Content field is not encoded
        :param str user_id:
        :return: QueueProcessingResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'body', 'type', 'escape_xml', 'user_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method submit_automation_test_logs_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `submit_automation_test_logs_0`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `submit_automation_test_logs_0`")
        # verify the required parameter 'type' is set
        if ('type' not in params) or (params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `submit_automation_test_logs_0`")


        collection_formats = {}

        resource_path = '/api/v3/projects/{projectId}/auto-test-logs'.replace('{format}', 'json')
        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']

        query_params = {}
        if 'type' in params:
            query_params['type'] = params['type']
        if 'escape_xml' in params:
            query_params['escapeXml'] = params['escape_xml']
        if 'user_id' in params:
            query_params['userId'] = params['user_id']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Authorization']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='QueueProcessingResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def submit_test_log(self, project_id, body, test_run_id, **kwargs):
        """
        Submits a Manual Test Log
        To submit test result of a <em>manual</em> Test Run  <strong>qTest Manager version:</strong> 4+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.submit_test_log(project_id, body, test_run_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param ManualTestLogResource body: <em>status (required):</em> Status of the Test Log as defined in the project's Field Settings  <em>test_case_version_id:</em> ID of the associated Test Case's version.    If it is omitted, the submitted Test Log will be associated with the Test Case's latest approved version  <em>exe_start_date (required):</em> time when the test is executed  <em>exe_end_date (required):</em> time when the test is finished  <em>attachments:</em> the Test Log's attachments  <em>test_step_logs:</em > If the associated Test Case is calling Test Steps from another Test Case, the \"called_test_case_id\" and \"parent_test_step_id\" must be included in the request body (required)
        :param int test_run_id: ID of the Test Run (required)
        :return: TestLogResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.submit_test_log_with_http_info(project_id, body, test_run_id, **kwargs)
        else:
            (data) = self.submit_test_log_with_http_info(project_id, body, test_run_id, **kwargs)
            return data

    def submit_test_log_with_http_info(self, project_id, body, test_run_id, **kwargs):
        """
        Submits a Manual Test Log
        To submit test result of a <em>manual</em> Test Run  <strong>qTest Manager version:</strong> 4+
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.submit_test_log_with_http_info(project_id, body, test_run_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: ID of the project (required)
        :param ManualTestLogResource body: <em>status (required):</em> Status of the Test Log as defined in the project's Field Settings  <em>test_case_version_id:</em> ID of the associated Test Case's version.    If it is omitted, the submitted Test Log will be associated with the Test Case's latest approved version  <em>exe_start_date (required):</em> time when the test is executed  <em>exe_end_date (required):</em> time when the test is finished  <em>attachments:</em> the Test Log's attachments  <em>test_step_logs:</em > If the associated Test Case is calling Test Steps from another Test Case, the \"called_test_case_id\" and \"parent_test_step_id\" must be included in the request body (required)
        :param int test_run_id: ID of the Test Run (required)
        :return: TestLogResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'body', 'test_run_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method submit_test_log" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `submit_test_log`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `submit_test_log`")
        # verify the required parameter 'test_run_id' is set
        if ('test_run_id' not in params) or (params['test_run_id'] is None):
            raise ValueError("Missing the required parameter `test_run_id` when calling `submit_test_log`")


        collection_formats = {}

        resource_path = '/api/v3/projects/{projectId}/test-runs/{testRunId}/test-logs'.replace('{format}', 'json')
        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']
        if 'test_run_id' in params:
            path_params['testRunId'] = params['test_run_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Authorization']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TestLogResource',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def track(self, id, **kwargs):
        """
        Gets a Batch Test Log Submission job's state
        To check the state of a Batch Test Log Submission job.   When you submit test results to qTest Manager using:  <strong>POST /api/v3.1/projects/{projectId}/test-runs/{testRunId}/auto-test-logs?type=automation</strong>  or <strong>POST /api/v3/projects/{projectId}/auto-test-logs?type=automation</strong>, their response include a job ID.  You will need to use this API and the returned ID to check if the submission job has completed.  Job states include <i>IN_WAITING</i>, <i>IN_PROCESSING</i>, <i>FAILED</i>, <i>PENDING</i> and <i>SUCCESS</i>
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.track(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: The ID of the submission job.   It is included in the response of these 2 APIs:  <strong>POST /api/v3.1/projects/{projectId}/test-runs/{testRunId}/auto-test-logs?type=automation</strong>   or <strong>POST /api/v3/projects/{projectId}/auto-test-logs?type=automation</strong> (required)
        :return: QueueProcessingResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.track_with_http_info(id, **kwargs)
        else:
            (data) = self.track_with_http_info(id, **kwargs)
            return data

    def track_with_http_info(self, id, **kwargs):
        """
        Gets a Batch Test Log Submission job's state
        To check the state of a Batch Test Log Submission job.   When you submit test results to qTest Manager using:  <strong>POST /api/v3.1/projects/{projectId}/test-runs/{testRunId}/auto-test-logs?type=automation</strong>  or <strong>POST /api/v3/projects/{projectId}/auto-test-logs?type=automation</strong>, their response include a job ID.  You will need to use this API and the returned ID to check if the submission job has completed.  Job states include <i>IN_WAITING</i>, <i>IN_PROCESSING</i>, <i>FAILED</i>, <i>PENDING</i> and <i>SUCCESS</i>
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.track_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: The ID of the submission job.   It is included in the response of these 2 APIs:  <strong>POST /api/v3.1/projects/{projectId}/test-runs/{testRunId}/auto-test-logs?type=automation</strong>   or <strong>POST /api/v3/projects/{projectId}/auto-test-logs?type=automation</strong> (required)
        :return: QueueProcessingResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method track" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `track`")


        collection_formats = {}

        resource_path = '/api/v3/projects/queue-processing/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='QueueProcessingResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
