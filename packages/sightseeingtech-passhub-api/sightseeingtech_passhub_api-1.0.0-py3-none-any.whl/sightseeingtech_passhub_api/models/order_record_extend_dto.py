# coding: utf-8

"""
    PassHub API

    PassHub API documentation  # noqa: E501

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from sightseeingtech_passhub_api.models.delivery_dto import DeliveryDTO  # noqa: F401,E501
from sightseeingtech_passhub_api.models.group_entry_dto import GroupEntryDTO  # noqa: F401,E501
from sightseeingtech_passhub_api.models.user_dto import UserDTO  # noqa: F401,E501


class OrderRecordExtendDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'float',
        'cell_phone_number': 'str',
        'created': 'str',
        'created_by': 'UserDTO',
        'customer_email': 'str',
        'customer_id': 'str',
        'delivery': 'DeliveryDTO',
        'delivery_method': 'str',
        'groups': 'list[GroupEntryDTO]',
        'id': 'int',
        'is_test': 'bool',
        'is_validated': 'bool',
        'order_id': 'str',
        'originator_order_id': 'str',
        'originiator': 'str',
        'vendor_order_id': 'str'
    }

    attribute_map = {
        'amount': 'amount',
        'cell_phone_number': 'cellPhoneNumber',
        'created': 'created',
        'created_by': 'createdBy',
        'customer_email': 'customerEmail',
        'customer_id': 'customerId',
        'delivery': 'delivery',
        'delivery_method': 'deliveryMethod',
        'groups': 'groups',
        'id': 'id',
        'is_test': 'isTest',
        'is_validated': 'isValidated',
        'order_id': 'orderId',
        'originator_order_id': 'originatorOrderId',
        'originiator': 'originiator',
        'vendor_order_id': 'vendorOrderId'
    }

    def __init__(self, amount=None, cell_phone_number=None, created=None, created_by=None, customer_email=None, customer_id=None, delivery=None, delivery_method=None, groups=None, id=None, is_test=None, is_validated=None, order_id=None, originator_order_id=None, originiator=None, vendor_order_id=None):  # noqa: E501
        """OrderRecordExtendDTO - a model defined in Swagger"""  # noqa: E501

        self._amount = None
        self._cell_phone_number = None
        self._created = None
        self._created_by = None
        self._customer_email = None
        self._customer_id = None
        self._delivery = None
        self._delivery_method = None
        self._groups = None
        self._id = None
        self._is_test = None
        self._is_validated = None
        self._order_id = None
        self._originator_order_id = None
        self._originiator = None
        self._vendor_order_id = None
        self.discriminator = None

        if amount is not None:
            self.amount = amount
        if cell_phone_number is not None:
            self.cell_phone_number = cell_phone_number
        if created is not None:
            self.created = created
        if created_by is not None:
            self.created_by = created_by
        if customer_email is not None:
            self.customer_email = customer_email
        if customer_id is not None:
            self.customer_id = customer_id
        if delivery is not None:
            self.delivery = delivery
        if delivery_method is not None:
            self.delivery_method = delivery_method
        if groups is not None:
            self.groups = groups
        if id is not None:
            self.id = id
        if is_test is not None:
            self.is_test = is_test
        if is_validated is not None:
            self.is_validated = is_validated
        if order_id is not None:
            self.order_id = order_id
        if originator_order_id is not None:
            self.originator_order_id = originator_order_id
        if originiator is not None:
            self.originiator = originiator
        if vendor_order_id is not None:
            self.vendor_order_id = vendor_order_id

    @property
    def amount(self):
        """Gets the amount of this OrderRecordExtendDTO.  # noqa: E501


        :return: The amount of this OrderRecordExtendDTO.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this OrderRecordExtendDTO.


        :param amount: The amount of this OrderRecordExtendDTO.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def cell_phone_number(self):
        """Gets the cell_phone_number of this OrderRecordExtendDTO.  # noqa: E501


        :return: The cell_phone_number of this OrderRecordExtendDTO.  # noqa: E501
        :rtype: str
        """
        return self._cell_phone_number

    @cell_phone_number.setter
    def cell_phone_number(self, cell_phone_number):
        """Sets the cell_phone_number of this OrderRecordExtendDTO.


        :param cell_phone_number: The cell_phone_number of this OrderRecordExtendDTO.  # noqa: E501
        :type: str
        """

        self._cell_phone_number = cell_phone_number

    @property
    def created(self):
        """Gets the created of this OrderRecordExtendDTO.  # noqa: E501


        :return: The created of this OrderRecordExtendDTO.  # noqa: E501
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this OrderRecordExtendDTO.


        :param created: The created of this OrderRecordExtendDTO.  # noqa: E501
        :type: str
        """

        self._created = created

    @property
    def created_by(self):
        """Gets the created_by of this OrderRecordExtendDTO.  # noqa: E501


        :return: The created_by of this OrderRecordExtendDTO.  # noqa: E501
        :rtype: UserDTO
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this OrderRecordExtendDTO.


        :param created_by: The created_by of this OrderRecordExtendDTO.  # noqa: E501
        :type: UserDTO
        """

        self._created_by = created_by

    @property
    def customer_email(self):
        """Gets the customer_email of this OrderRecordExtendDTO.  # noqa: E501


        :return: The customer_email of this OrderRecordExtendDTO.  # noqa: E501
        :rtype: str
        """
        return self._customer_email

    @customer_email.setter
    def customer_email(self, customer_email):
        """Sets the customer_email of this OrderRecordExtendDTO.


        :param customer_email: The customer_email of this OrderRecordExtendDTO.  # noqa: E501
        :type: str
        """

        self._customer_email = customer_email

    @property
    def customer_id(self):
        """Gets the customer_id of this OrderRecordExtendDTO.  # noqa: E501


        :return: The customer_id of this OrderRecordExtendDTO.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this OrderRecordExtendDTO.


        :param customer_id: The customer_id of this OrderRecordExtendDTO.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    @property
    def delivery(self):
        """Gets the delivery of this OrderRecordExtendDTO.  # noqa: E501


        :return: The delivery of this OrderRecordExtendDTO.  # noqa: E501
        :rtype: DeliveryDTO
        """
        return self._delivery

    @delivery.setter
    def delivery(self, delivery):
        """Sets the delivery of this OrderRecordExtendDTO.


        :param delivery: The delivery of this OrderRecordExtendDTO.  # noqa: E501
        :type: DeliveryDTO
        """

        self._delivery = delivery

    @property
    def delivery_method(self):
        """Gets the delivery_method of this OrderRecordExtendDTO.  # noqa: E501


        :return: The delivery_method of this OrderRecordExtendDTO.  # noqa: E501
        :rtype: str
        """
        return self._delivery_method

    @delivery_method.setter
    def delivery_method(self, delivery_method):
        """Sets the delivery_method of this OrderRecordExtendDTO.


        :param delivery_method: The delivery_method of this OrderRecordExtendDTO.  # noqa: E501
        :type: str
        """
        allowed_values = ["DIGITAL", "SHIPPING"]  # noqa: E501
        if delivery_method not in allowed_values:
            raise ValueError(
                "Invalid value for `delivery_method` ({0}), must be one of {1}"  # noqa: E501
                .format(delivery_method, allowed_values)
            )

        self._delivery_method = delivery_method

    @property
    def groups(self):
        """Gets the groups of this OrderRecordExtendDTO.  # noqa: E501


        :return: The groups of this OrderRecordExtendDTO.  # noqa: E501
        :rtype: list[GroupEntryDTO]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this OrderRecordExtendDTO.


        :param groups: The groups of this OrderRecordExtendDTO.  # noqa: E501
        :type: list[GroupEntryDTO]
        """

        self._groups = groups

    @property
    def id(self):
        """Gets the id of this OrderRecordExtendDTO.  # noqa: E501


        :return: The id of this OrderRecordExtendDTO.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrderRecordExtendDTO.


        :param id: The id of this OrderRecordExtendDTO.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def is_test(self):
        """Gets the is_test of this OrderRecordExtendDTO.  # noqa: E501


        :return: The is_test of this OrderRecordExtendDTO.  # noqa: E501
        :rtype: bool
        """
        return self._is_test

    @is_test.setter
    def is_test(self, is_test):
        """Sets the is_test of this OrderRecordExtendDTO.


        :param is_test: The is_test of this OrderRecordExtendDTO.  # noqa: E501
        :type: bool
        """

        self._is_test = is_test

    @property
    def is_validated(self):
        """Gets the is_validated of this OrderRecordExtendDTO.  # noqa: E501


        :return: The is_validated of this OrderRecordExtendDTO.  # noqa: E501
        :rtype: bool
        """
        return self._is_validated

    @is_validated.setter
    def is_validated(self, is_validated):
        """Sets the is_validated of this OrderRecordExtendDTO.


        :param is_validated: The is_validated of this OrderRecordExtendDTO.  # noqa: E501
        :type: bool
        """

        self._is_validated = is_validated

    @property
    def order_id(self):
        """Gets the order_id of this OrderRecordExtendDTO.  # noqa: E501


        :return: The order_id of this OrderRecordExtendDTO.  # noqa: E501
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this OrderRecordExtendDTO.


        :param order_id: The order_id of this OrderRecordExtendDTO.  # noqa: E501
        :type: str
        """

        self._order_id = order_id

    @property
    def originator_order_id(self):
        """Gets the originator_order_id of this OrderRecordExtendDTO.  # noqa: E501


        :return: The originator_order_id of this OrderRecordExtendDTO.  # noqa: E501
        :rtype: str
        """
        return self._originator_order_id

    @originator_order_id.setter
    def originator_order_id(self, originator_order_id):
        """Sets the originator_order_id of this OrderRecordExtendDTO.


        :param originator_order_id: The originator_order_id of this OrderRecordExtendDTO.  # noqa: E501
        :type: str
        """

        self._originator_order_id = originator_order_id

    @property
    def originiator(self):
        """Gets the originiator of this OrderRecordExtendDTO.  # noqa: E501


        :return: The originiator of this OrderRecordExtendDTO.  # noqa: E501
        :rtype: str
        """
        return self._originiator

    @originiator.setter
    def originiator(self, originiator):
        """Sets the originiator of this OrderRecordExtendDTO.


        :param originiator: The originiator of this OrderRecordExtendDTO.  # noqa: E501
        :type: str
        """

        self._originiator = originiator

    @property
    def vendor_order_id(self):
        """Gets the vendor_order_id of this OrderRecordExtendDTO.  # noqa: E501


        :return: The vendor_order_id of this OrderRecordExtendDTO.  # noqa: E501
        :rtype: str
        """
        return self._vendor_order_id

    @vendor_order_id.setter
    def vendor_order_id(self, vendor_order_id):
        """Sets the vendor_order_id of this OrderRecordExtendDTO.


        :param vendor_order_id: The vendor_order_id of this OrderRecordExtendDTO.  # noqa: E501
        :type: str
        """

        self._vendor_order_id = vendor_order_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderRecordExtendDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
