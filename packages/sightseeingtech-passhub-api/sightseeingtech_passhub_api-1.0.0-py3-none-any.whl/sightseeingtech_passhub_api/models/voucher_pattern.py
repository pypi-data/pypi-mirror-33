# coding: utf-8

"""
    PassHub API

    PassHub API documentation  # noqa: E501

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class VoucherPattern(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'body_length': 'int',
        'body_type': 'str',
        'pattern_product_id': 'int',
        'prefix': 'str'
    }

    attribute_map = {
        'body_length': 'bodyLength',
        'body_type': 'bodyType',
        'pattern_product_id': 'patternProductId',
        'prefix': 'prefix'
    }

    def __init__(self, body_length=None, body_type=None, pattern_product_id=None, prefix=None):  # noqa: E501
        """VoucherPattern - a model defined in Swagger"""  # noqa: E501

        self._body_length = None
        self._body_type = None
        self._pattern_product_id = None
        self._prefix = None
        self.discriminator = None

        if body_length is not None:
            self.body_length = body_length
        if body_type is not None:
            self.body_type = body_type
        if pattern_product_id is not None:
            self.pattern_product_id = pattern_product_id
        if prefix is not None:
            self.prefix = prefix

    @property
    def body_length(self):
        """Gets the body_length of this VoucherPattern.  # noqa: E501


        :return: The body_length of this VoucherPattern.  # noqa: E501
        :rtype: int
        """
        return self._body_length

    @body_length.setter
    def body_length(self, body_length):
        """Sets the body_length of this VoucherPattern.


        :param body_length: The body_length of this VoucherPattern.  # noqa: E501
        :type: int
        """

        self._body_length = body_length

    @property
    def body_type(self):
        """Gets the body_type of this VoucherPattern.  # noqa: E501


        :return: The body_type of this VoucherPattern.  # noqa: E501
        :rtype: str
        """
        return self._body_type

    @body_type.setter
    def body_type(self, body_type):
        """Sets the body_type of this VoucherPattern.


        :param body_type: The body_type of this VoucherPattern.  # noqa: E501
        :type: str
        """
        allowed_values = ["NUMERIC", "ALPHA_NUMERIC"]  # noqa: E501
        if body_type not in allowed_values:
            raise ValueError(
                "Invalid value for `body_type` ({0}), must be one of {1}"  # noqa: E501
                .format(body_type, allowed_values)
            )

        self._body_type = body_type

    @property
    def pattern_product_id(self):
        """Gets the pattern_product_id of this VoucherPattern.  # noqa: E501


        :return: The pattern_product_id of this VoucherPattern.  # noqa: E501
        :rtype: int
        """
        return self._pattern_product_id

    @pattern_product_id.setter
    def pattern_product_id(self, pattern_product_id):
        """Sets the pattern_product_id of this VoucherPattern.


        :param pattern_product_id: The pattern_product_id of this VoucherPattern.  # noqa: E501
        :type: int
        """

        self._pattern_product_id = pattern_product_id

    @property
    def prefix(self):
        """Gets the prefix of this VoucherPattern.  # noqa: E501


        :return: The prefix of this VoucherPattern.  # noqa: E501
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this VoucherPattern.


        :param prefix: The prefix of this VoucherPattern.  # noqa: E501
        :type: str
        """

        self._prefix = prefix

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VoucherPattern):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
