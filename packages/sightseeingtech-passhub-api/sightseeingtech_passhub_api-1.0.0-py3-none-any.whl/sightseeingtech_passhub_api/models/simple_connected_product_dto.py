# coding: utf-8

"""
    PassHub API

    PassHub API documentation  # noqa: E501

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from sightseeingtech_passhub_api.models.rule import Rule  # noqa: F401,E501
from sightseeingtech_passhub_api.models.user_dto import UserDTO  # noqa: F401,E501
from sightseeingtech_passhub_api.models.vendor_dto import VendorDTO  # noqa: F401,E501
from sightseeingtech_passhub_api.models.voucher_pattern import VoucherPattern  # noqa: F401,E501


class SimpleConnectedProductDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allow_recharge': 'bool',
        'country_code': 'str',
        'customer_type': 'str',
        'description': 'str',
        'id': 'int',
        'location_code': 'str',
        'location_name': 'str',
        'max_validations_in_pass': 'int',
        'modified_by': 'UserDTO',
        'modified_date': 'str',
        'name': 'str',
        'package_product_id': 'str',
        'price': 'float',
        'print_type': 'str',
        'product_id': 'str',
        'recharge_price': 'float',
        'retail_price': 'float',
        'sku': 'str',
        'sub_product_id': 'str',
        'tags': 'list[str]',
        'timezone': 'str',
        'type': 'str',
        'valid_value': 'int',
        'validation_rules': 'list[Rule]',
        'validation_tag': 'str',
        'vendor': 'VendorDTO',
        'vendor_account_id': 'str',
        'vendor_sku': 'str',
        'voucher_pattern': 'VoucherPattern',
        'voucher_type': 'str'
    }

    attribute_map = {
        'allow_recharge': 'allowRecharge',
        'country_code': 'countryCode',
        'customer_type': 'customerType',
        'description': 'description',
        'id': 'id',
        'location_code': 'locationCode',
        'location_name': 'locationName',
        'max_validations_in_pass': 'maxValidationsInPass',
        'modified_by': 'modifiedBy',
        'modified_date': 'modifiedDate',
        'name': 'name',
        'package_product_id': 'packageProductId',
        'price': 'price',
        'print_type': 'printType',
        'product_id': 'productId',
        'recharge_price': 'rechargePrice',
        'retail_price': 'retailPrice',
        'sku': 'sku',
        'sub_product_id': 'subProductId',
        'tags': 'tags',
        'timezone': 'timezone',
        'type': 'type',
        'valid_value': 'validValue',
        'validation_rules': 'validationRules',
        'validation_tag': 'validationTag',
        'vendor': 'vendor',
        'vendor_account_id': 'vendorAccountId',
        'vendor_sku': 'vendorSku',
        'voucher_pattern': 'voucherPattern',
        'voucher_type': 'voucherType'
    }

    def __init__(self, allow_recharge=None, country_code=None, customer_type=None, description=None, id=None, location_code=None, location_name=None, max_validations_in_pass=None, modified_by=None, modified_date=None, name=None, package_product_id=None, price=None, print_type=None, product_id=None, recharge_price=None, retail_price=None, sku=None, sub_product_id=None, tags=None, timezone=None, type=None, valid_value=None, validation_rules=None, validation_tag=None, vendor=None, vendor_account_id=None, vendor_sku=None, voucher_pattern=None, voucher_type=None):  # noqa: E501
        """SimpleConnectedProductDTO - a model defined in Swagger"""  # noqa: E501

        self._allow_recharge = None
        self._country_code = None
        self._customer_type = None
        self._description = None
        self._id = None
        self._location_code = None
        self._location_name = None
        self._max_validations_in_pass = None
        self._modified_by = None
        self._modified_date = None
        self._name = None
        self._package_product_id = None
        self._price = None
        self._print_type = None
        self._product_id = None
        self._recharge_price = None
        self._retail_price = None
        self._sku = None
        self._sub_product_id = None
        self._tags = None
        self._timezone = None
        self._type = None
        self._valid_value = None
        self._validation_rules = None
        self._validation_tag = None
        self._vendor = None
        self._vendor_account_id = None
        self._vendor_sku = None
        self._voucher_pattern = None
        self._voucher_type = None
        self.discriminator = None

        if allow_recharge is not None:
            self.allow_recharge = allow_recharge
        if country_code is not None:
            self.country_code = country_code
        if customer_type is not None:
            self.customer_type = customer_type
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        if location_code is not None:
            self.location_code = location_code
        if location_name is not None:
            self.location_name = location_name
        if max_validations_in_pass is not None:
            self.max_validations_in_pass = max_validations_in_pass
        if modified_by is not None:
            self.modified_by = modified_by
        if modified_date is not None:
            self.modified_date = modified_date
        if name is not None:
            self.name = name
        if package_product_id is not None:
            self.package_product_id = package_product_id
        if price is not None:
            self.price = price
        if print_type is not None:
            self.print_type = print_type
        if product_id is not None:
            self.product_id = product_id
        if recharge_price is not None:
            self.recharge_price = recharge_price
        if retail_price is not None:
            self.retail_price = retail_price
        if sku is not None:
            self.sku = sku
        if sub_product_id is not None:
            self.sub_product_id = sub_product_id
        if tags is not None:
            self.tags = tags
        if timezone is not None:
            self.timezone = timezone
        if type is not None:
            self.type = type
        if valid_value is not None:
            self.valid_value = valid_value
        if validation_rules is not None:
            self.validation_rules = validation_rules
        if validation_tag is not None:
            self.validation_tag = validation_tag
        if vendor is not None:
            self.vendor = vendor
        if vendor_account_id is not None:
            self.vendor_account_id = vendor_account_id
        if vendor_sku is not None:
            self.vendor_sku = vendor_sku
        if voucher_pattern is not None:
            self.voucher_pattern = voucher_pattern
        if voucher_type is not None:
            self.voucher_type = voucher_type

    @property
    def allow_recharge(self):
        """Gets the allow_recharge of this SimpleConnectedProductDTO.  # noqa: E501


        :return: The allow_recharge of this SimpleConnectedProductDTO.  # noqa: E501
        :rtype: bool
        """
        return self._allow_recharge

    @allow_recharge.setter
    def allow_recharge(self, allow_recharge):
        """Sets the allow_recharge of this SimpleConnectedProductDTO.


        :param allow_recharge: The allow_recharge of this SimpleConnectedProductDTO.  # noqa: E501
        :type: bool
        """

        self._allow_recharge = allow_recharge

    @property
    def country_code(self):
        """Gets the country_code of this SimpleConnectedProductDTO.  # noqa: E501


        :return: The country_code of this SimpleConnectedProductDTO.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this SimpleConnectedProductDTO.


        :param country_code: The country_code of this SimpleConnectedProductDTO.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    @property
    def customer_type(self):
        """Gets the customer_type of this SimpleConnectedProductDTO.  # noqa: E501


        :return: The customer_type of this SimpleConnectedProductDTO.  # noqa: E501
        :rtype: str
        """
        return self._customer_type

    @customer_type.setter
    def customer_type(self, customer_type):
        """Sets the customer_type of this SimpleConnectedProductDTO.


        :param customer_type: The customer_type of this SimpleConnectedProductDTO.  # noqa: E501
        :type: str
        """
        allowed_values = ["ADULT", "CHILD", "SENIOR"]  # noqa: E501
        if customer_type not in allowed_values:
            raise ValueError(
                "Invalid value for `customer_type` ({0}), must be one of {1}"  # noqa: E501
                .format(customer_type, allowed_values)
            )

        self._customer_type = customer_type

    @property
    def description(self):
        """Gets the description of this SimpleConnectedProductDTO.  # noqa: E501


        :return: The description of this SimpleConnectedProductDTO.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SimpleConnectedProductDTO.


        :param description: The description of this SimpleConnectedProductDTO.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this SimpleConnectedProductDTO.  # noqa: E501


        :return: The id of this SimpleConnectedProductDTO.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SimpleConnectedProductDTO.


        :param id: The id of this SimpleConnectedProductDTO.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def location_code(self):
        """Gets the location_code of this SimpleConnectedProductDTO.  # noqa: E501


        :return: The location_code of this SimpleConnectedProductDTO.  # noqa: E501
        :rtype: str
        """
        return self._location_code

    @location_code.setter
    def location_code(self, location_code):
        """Sets the location_code of this SimpleConnectedProductDTO.


        :param location_code: The location_code of this SimpleConnectedProductDTO.  # noqa: E501
        :type: str
        """

        self._location_code = location_code

    @property
    def location_name(self):
        """Gets the location_name of this SimpleConnectedProductDTO.  # noqa: E501


        :return: The location_name of this SimpleConnectedProductDTO.  # noqa: E501
        :rtype: str
        """
        return self._location_name

    @location_name.setter
    def location_name(self, location_name):
        """Sets the location_name of this SimpleConnectedProductDTO.


        :param location_name: The location_name of this SimpleConnectedProductDTO.  # noqa: E501
        :type: str
        """

        self._location_name = location_name

    @property
    def max_validations_in_pass(self):
        """Gets the max_validations_in_pass of this SimpleConnectedProductDTO.  # noqa: E501


        :return: The max_validations_in_pass of this SimpleConnectedProductDTO.  # noqa: E501
        :rtype: int
        """
        return self._max_validations_in_pass

    @max_validations_in_pass.setter
    def max_validations_in_pass(self, max_validations_in_pass):
        """Sets the max_validations_in_pass of this SimpleConnectedProductDTO.


        :param max_validations_in_pass: The max_validations_in_pass of this SimpleConnectedProductDTO.  # noqa: E501
        :type: int
        """

        self._max_validations_in_pass = max_validations_in_pass

    @property
    def modified_by(self):
        """Gets the modified_by of this SimpleConnectedProductDTO.  # noqa: E501


        :return: The modified_by of this SimpleConnectedProductDTO.  # noqa: E501
        :rtype: UserDTO
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """Sets the modified_by of this SimpleConnectedProductDTO.


        :param modified_by: The modified_by of this SimpleConnectedProductDTO.  # noqa: E501
        :type: UserDTO
        """

        self._modified_by = modified_by

    @property
    def modified_date(self):
        """Gets the modified_date of this SimpleConnectedProductDTO.  # noqa: E501


        :return: The modified_date of this SimpleConnectedProductDTO.  # noqa: E501
        :rtype: str
        """
        return self._modified_date

    @modified_date.setter
    def modified_date(self, modified_date):
        """Sets the modified_date of this SimpleConnectedProductDTO.


        :param modified_date: The modified_date of this SimpleConnectedProductDTO.  # noqa: E501
        :type: str
        """

        self._modified_date = modified_date

    @property
    def name(self):
        """Gets the name of this SimpleConnectedProductDTO.  # noqa: E501


        :return: The name of this SimpleConnectedProductDTO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SimpleConnectedProductDTO.


        :param name: The name of this SimpleConnectedProductDTO.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def package_product_id(self):
        """Gets the package_product_id of this SimpleConnectedProductDTO.  # noqa: E501


        :return: The package_product_id of this SimpleConnectedProductDTO.  # noqa: E501
        :rtype: str
        """
        return self._package_product_id

    @package_product_id.setter
    def package_product_id(self, package_product_id):
        """Sets the package_product_id of this SimpleConnectedProductDTO.


        :param package_product_id: The package_product_id of this SimpleConnectedProductDTO.  # noqa: E501
        :type: str
        """

        self._package_product_id = package_product_id

    @property
    def price(self):
        """Gets the price of this SimpleConnectedProductDTO.  # noqa: E501


        :return: The price of this SimpleConnectedProductDTO.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this SimpleConnectedProductDTO.


        :param price: The price of this SimpleConnectedProductDTO.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def print_type(self):
        """Gets the print_type of this SimpleConnectedProductDTO.  # noqa: E501


        :return: The print_type of this SimpleConnectedProductDTO.  # noqa: E501
        :rtype: str
        """
        return self._print_type

    @print_type.setter
    def print_type(self, print_type):
        """Sets the print_type of this SimpleConnectedProductDTO.


        :param print_type: The print_type of this SimpleConnectedProductDTO.  # noqa: E501
        :type: str
        """
        allowed_values = ["AUTO_PRINT", "NOT_PRINTABLE"]  # noqa: E501
        if print_type not in allowed_values:
            raise ValueError(
                "Invalid value for `print_type` ({0}), must be one of {1}"  # noqa: E501
                .format(print_type, allowed_values)
            )

        self._print_type = print_type

    @property
    def product_id(self):
        """Gets the product_id of this SimpleConnectedProductDTO.  # noqa: E501


        :return: The product_id of this SimpleConnectedProductDTO.  # noqa: E501
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this SimpleConnectedProductDTO.


        :param product_id: The product_id of this SimpleConnectedProductDTO.  # noqa: E501
        :type: str
        """

        self._product_id = product_id

    @property
    def recharge_price(self):
        """Gets the recharge_price of this SimpleConnectedProductDTO.  # noqa: E501


        :return: The recharge_price of this SimpleConnectedProductDTO.  # noqa: E501
        :rtype: float
        """
        return self._recharge_price

    @recharge_price.setter
    def recharge_price(self, recharge_price):
        """Sets the recharge_price of this SimpleConnectedProductDTO.


        :param recharge_price: The recharge_price of this SimpleConnectedProductDTO.  # noqa: E501
        :type: float
        """

        self._recharge_price = recharge_price

    @property
    def retail_price(self):
        """Gets the retail_price of this SimpleConnectedProductDTO.  # noqa: E501


        :return: The retail_price of this SimpleConnectedProductDTO.  # noqa: E501
        :rtype: float
        """
        return self._retail_price

    @retail_price.setter
    def retail_price(self, retail_price):
        """Sets the retail_price of this SimpleConnectedProductDTO.


        :param retail_price: The retail_price of this SimpleConnectedProductDTO.  # noqa: E501
        :type: float
        """

        self._retail_price = retail_price

    @property
    def sku(self):
        """Gets the sku of this SimpleConnectedProductDTO.  # noqa: E501


        :return: The sku of this SimpleConnectedProductDTO.  # noqa: E501
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this SimpleConnectedProductDTO.


        :param sku: The sku of this SimpleConnectedProductDTO.  # noqa: E501
        :type: str
        """

        self._sku = sku

    @property
    def sub_product_id(self):
        """Gets the sub_product_id of this SimpleConnectedProductDTO.  # noqa: E501


        :return: The sub_product_id of this SimpleConnectedProductDTO.  # noqa: E501
        :rtype: str
        """
        return self._sub_product_id

    @sub_product_id.setter
    def sub_product_id(self, sub_product_id):
        """Sets the sub_product_id of this SimpleConnectedProductDTO.


        :param sub_product_id: The sub_product_id of this SimpleConnectedProductDTO.  # noqa: E501
        :type: str
        """

        self._sub_product_id = sub_product_id

    @property
    def tags(self):
        """Gets the tags of this SimpleConnectedProductDTO.  # noqa: E501


        :return: The tags of this SimpleConnectedProductDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this SimpleConnectedProductDTO.


        :param tags: The tags of this SimpleConnectedProductDTO.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def timezone(self):
        """Gets the timezone of this SimpleConnectedProductDTO.  # noqa: E501


        :return: The timezone of this SimpleConnectedProductDTO.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this SimpleConnectedProductDTO.


        :param timezone: The timezone of this SimpleConnectedProductDTO.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def type(self):
        """Gets the type of this SimpleConnectedProductDTO.  # noqa: E501


        :return: The type of this SimpleConnectedProductDTO.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SimpleConnectedProductDTO.


        :param type: The type of this SimpleConnectedProductDTO.  # noqa: E501
        :type: str
        """
        allowed_values = ["BASIC_SINGLE", "BASIC_VALID_HOURS", "PASS_LIMITED", "PASS_UNLIMITED", "PASS_CALENDAR", "FLEXPASS", "PASS_CURRENCY"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def valid_value(self):
        """Gets the valid_value of this SimpleConnectedProductDTO.  # noqa: E501


        :return: The valid_value of this SimpleConnectedProductDTO.  # noqa: E501
        :rtype: int
        """
        return self._valid_value

    @valid_value.setter
    def valid_value(self, valid_value):
        """Sets the valid_value of this SimpleConnectedProductDTO.


        :param valid_value: The valid_value of this SimpleConnectedProductDTO.  # noqa: E501
        :type: int
        """

        self._valid_value = valid_value

    @property
    def validation_rules(self):
        """Gets the validation_rules of this SimpleConnectedProductDTO.  # noqa: E501


        :return: The validation_rules of this SimpleConnectedProductDTO.  # noqa: E501
        :rtype: list[Rule]
        """
        return self._validation_rules

    @validation_rules.setter
    def validation_rules(self, validation_rules):
        """Sets the validation_rules of this SimpleConnectedProductDTO.


        :param validation_rules: The validation_rules of this SimpleConnectedProductDTO.  # noqa: E501
        :type: list[Rule]
        """

        self._validation_rules = validation_rules

    @property
    def validation_tag(self):
        """Gets the validation_tag of this SimpleConnectedProductDTO.  # noqa: E501


        :return: The validation_tag of this SimpleConnectedProductDTO.  # noqa: E501
        :rtype: str
        """
        return self._validation_tag

    @validation_tag.setter
    def validation_tag(self, validation_tag):
        """Sets the validation_tag of this SimpleConnectedProductDTO.


        :param validation_tag: The validation_tag of this SimpleConnectedProductDTO.  # noqa: E501
        :type: str
        """

        self._validation_tag = validation_tag

    @property
    def vendor(self):
        """Gets the vendor of this SimpleConnectedProductDTO.  # noqa: E501


        :return: The vendor of this SimpleConnectedProductDTO.  # noqa: E501
        :rtype: VendorDTO
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this SimpleConnectedProductDTO.


        :param vendor: The vendor of this SimpleConnectedProductDTO.  # noqa: E501
        :type: VendorDTO
        """

        self._vendor = vendor

    @property
    def vendor_account_id(self):
        """Gets the vendor_account_id of this SimpleConnectedProductDTO.  # noqa: E501


        :return: The vendor_account_id of this SimpleConnectedProductDTO.  # noqa: E501
        :rtype: str
        """
        return self._vendor_account_id

    @vendor_account_id.setter
    def vendor_account_id(self, vendor_account_id):
        """Sets the vendor_account_id of this SimpleConnectedProductDTO.


        :param vendor_account_id: The vendor_account_id of this SimpleConnectedProductDTO.  # noqa: E501
        :type: str
        """

        self._vendor_account_id = vendor_account_id

    @property
    def vendor_sku(self):
        """Gets the vendor_sku of this SimpleConnectedProductDTO.  # noqa: E501


        :return: The vendor_sku of this SimpleConnectedProductDTO.  # noqa: E501
        :rtype: str
        """
        return self._vendor_sku

    @vendor_sku.setter
    def vendor_sku(self, vendor_sku):
        """Sets the vendor_sku of this SimpleConnectedProductDTO.


        :param vendor_sku: The vendor_sku of this SimpleConnectedProductDTO.  # noqa: E501
        :type: str
        """

        self._vendor_sku = vendor_sku

    @property
    def voucher_pattern(self):
        """Gets the voucher_pattern of this SimpleConnectedProductDTO.  # noqa: E501


        :return: The voucher_pattern of this SimpleConnectedProductDTO.  # noqa: E501
        :rtype: VoucherPattern
        """
        return self._voucher_pattern

    @voucher_pattern.setter
    def voucher_pattern(self, voucher_pattern):
        """Sets the voucher_pattern of this SimpleConnectedProductDTO.


        :param voucher_pattern: The voucher_pattern of this SimpleConnectedProductDTO.  # noqa: E501
        :type: VoucherPattern
        """

        self._voucher_pattern = voucher_pattern

    @property
    def voucher_type(self):
        """Gets the voucher_type of this SimpleConnectedProductDTO.  # noqa: E501


        :return: The voucher_type of this SimpleConnectedProductDTO.  # noqa: E501
        :rtype: str
        """
        return self._voucher_type

    @voucher_type.setter
    def voucher_type(self, voucher_type):
        """Sets the voucher_type of this SimpleConnectedProductDTO.


        :param voucher_type: The voucher_type of this SimpleConnectedProductDTO.  # noqa: E501
        :type: str
        """
        allowed_values = ["DEFAULT", "CUSTOM"]  # noqa: E501
        if voucher_type not in allowed_values:
            raise ValueError(
                "Invalid value for `voucher_type` ({0}), must be one of {1}"  # noqa: E501
                .format(voucher_type, allowed_values)
            )

        self._voucher_type = voucher_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SimpleConnectedProductDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
