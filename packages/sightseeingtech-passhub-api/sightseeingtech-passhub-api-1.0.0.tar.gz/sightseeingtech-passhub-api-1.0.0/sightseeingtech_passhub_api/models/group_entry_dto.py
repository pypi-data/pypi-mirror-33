# coding: utf-8

"""
    PassHub API

    PassHub API documentation  # noqa: E501

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from sightseeingtech_passhub_api.models.order_item import OrderItem  # noqa: F401,E501


class GroupEntryDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'group_name': 'str',
        'items': 'list[OrderItem]',
        'voucher_per_person': 'bool'
    }

    attribute_map = {
        'group_name': 'groupName',
        'items': 'items',
        'voucher_per_person': 'voucherPerPerson'
    }

    def __init__(self, group_name=None, items=None, voucher_per_person=None):  # noqa: E501
        """GroupEntryDTO - a model defined in Swagger"""  # noqa: E501

        self._group_name = None
        self._items = None
        self._voucher_per_person = None
        self.discriminator = None

        if group_name is not None:
            self.group_name = group_name
        if items is not None:
            self.items = items
        if voucher_per_person is not None:
            self.voucher_per_person = voucher_per_person

    @property
    def group_name(self):
        """Gets the group_name of this GroupEntryDTO.  # noqa: E501


        :return: The group_name of this GroupEntryDTO.  # noqa: E501
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this GroupEntryDTO.


        :param group_name: The group_name of this GroupEntryDTO.  # noqa: E501
        :type: str
        """

        self._group_name = group_name

    @property
    def items(self):
        """Gets the items of this GroupEntryDTO.  # noqa: E501


        :return: The items of this GroupEntryDTO.  # noqa: E501
        :rtype: list[OrderItem]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this GroupEntryDTO.


        :param items: The items of this GroupEntryDTO.  # noqa: E501
        :type: list[OrderItem]
        """

        self._items = items

    @property
    def voucher_per_person(self):
        """Gets the voucher_per_person of this GroupEntryDTO.  # noqa: E501


        :return: The voucher_per_person of this GroupEntryDTO.  # noqa: E501
        :rtype: bool
        """
        return self._voucher_per_person

    @voucher_per_person.setter
    def voucher_per_person(self, voucher_per_person):
        """Sets the voucher_per_person of this GroupEntryDTO.


        :param voucher_per_person: The voucher_per_person of this GroupEntryDTO.  # noqa: E501
        :type: bool
        """

        self._voucher_per_person = voucher_per_person

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GroupEntryDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
