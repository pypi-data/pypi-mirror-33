# coding: utf-8

"""
    PassHub API

    PassHub API documentation  # noqa: E501

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from sightseeingtech_passhub_api.models.address import Address  # noqa: F401,E501


class DeliveryDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'Address',
        'carrier': 'str',
        'cost': 'float',
        'error_code': 'str',
        'error_message': 'str',
        'id': 'int',
        'mode': 'str',
        'status': 'str',
        'tracking_number': 'str'
    }

    attribute_map = {
        'address': 'address',
        'carrier': 'carrier',
        'cost': 'cost',
        'error_code': 'errorCode',
        'error_message': 'errorMessage',
        'id': 'id',
        'mode': 'mode',
        'status': 'status',
        'tracking_number': 'trackingNumber'
    }

    def __init__(self, address=None, carrier=None, cost=None, error_code=None, error_message=None, id=None, mode=None, status=None, tracking_number=None):  # noqa: E501
        """DeliveryDTO - a model defined in Swagger"""  # noqa: E501

        self._address = None
        self._carrier = None
        self._cost = None
        self._error_code = None
        self._error_message = None
        self._id = None
        self._mode = None
        self._status = None
        self._tracking_number = None
        self.discriminator = None

        if address is not None:
            self.address = address
        if carrier is not None:
            self.carrier = carrier
        if cost is not None:
            self.cost = cost
        if error_code is not None:
            self.error_code = error_code
        if error_message is not None:
            self.error_message = error_message
        if id is not None:
            self.id = id
        if mode is not None:
            self.mode = mode
        if status is not None:
            self.status = status
        if tracking_number is not None:
            self.tracking_number = tracking_number

    @property
    def address(self):
        """Gets the address of this DeliveryDTO.  # noqa: E501


        :return: The address of this DeliveryDTO.  # noqa: E501
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this DeliveryDTO.


        :param address: The address of this DeliveryDTO.  # noqa: E501
        :type: Address
        """

        self._address = address

    @property
    def carrier(self):
        """Gets the carrier of this DeliveryDTO.  # noqa: E501


        :return: The carrier of this DeliveryDTO.  # noqa: E501
        :rtype: str
        """
        return self._carrier

    @carrier.setter
    def carrier(self, carrier):
        """Sets the carrier of this DeliveryDTO.


        :param carrier: The carrier of this DeliveryDTO.  # noqa: E501
        :type: str
        """
        allowed_values = ["FEDEX"]  # noqa: E501
        if carrier not in allowed_values:
            raise ValueError(
                "Invalid value for `carrier` ({0}), must be one of {1}"  # noqa: E501
                .format(carrier, allowed_values)
            )

        self._carrier = carrier

    @property
    def cost(self):
        """Gets the cost of this DeliveryDTO.  # noqa: E501


        :return: The cost of this DeliveryDTO.  # noqa: E501
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this DeliveryDTO.


        :param cost: The cost of this DeliveryDTO.  # noqa: E501
        :type: float
        """

        self._cost = cost

    @property
    def error_code(self):
        """Gets the error_code of this DeliveryDTO.  # noqa: E501


        :return: The error_code of this DeliveryDTO.  # noqa: E501
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this DeliveryDTO.


        :param error_code: The error_code of this DeliveryDTO.  # noqa: E501
        :type: str
        """

        self._error_code = error_code

    @property
    def error_message(self):
        """Gets the error_message of this DeliveryDTO.  # noqa: E501


        :return: The error_message of this DeliveryDTO.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this DeliveryDTO.


        :param error_message: The error_message of this DeliveryDTO.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    @property
    def id(self):
        """Gets the id of this DeliveryDTO.  # noqa: E501


        :return: The id of this DeliveryDTO.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeliveryDTO.


        :param id: The id of this DeliveryDTO.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def mode(self):
        """Gets the mode of this DeliveryDTO.  # noqa: E501


        :return: The mode of this DeliveryDTO.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this DeliveryDTO.


        :param mode: The mode of this DeliveryDTO.  # noqa: E501
        :type: str
        """
        allowed_values = ["FEDEX_GROUND", "FEDEX_2_DAY", "FEDEX_2_DAY_AM", "FEDEX_EXPRESS_SAVER", "STANDARD_OVERNIGHT", "FIRST_OVERNIGHT", "PRIORITY_OVERNIGHT", "INTERNATIONAL_ECONOMY", "INTERNATIONAL_FIRST", "INTERNATIONAL_PRIORITY", "GROUND_HOME_DELIVERY", "SMART_POST"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"  # noqa: E501
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def status(self):
        """Gets the status of this DeliveryDTO.  # noqa: E501


        :return: The status of this DeliveryDTO.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DeliveryDTO.


        :param status: The status of this DeliveryDTO.  # noqa: E501
        :type: str
        """
        allowed_values = ["ASSIGN_REQUIRED", "SHIPMENT_CREATION", "LABEL_PRINTING", "PICKUP_REQUIRED", "PROCESSED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def tracking_number(self):
        """Gets the tracking_number of this DeliveryDTO.  # noqa: E501


        :return: The tracking_number of this DeliveryDTO.  # noqa: E501
        :rtype: str
        """
        return self._tracking_number

    @tracking_number.setter
    def tracking_number(self, tracking_number):
        """Sets the tracking_number of this DeliveryDTO.


        :param tracking_number: The tracking_number of this DeliveryDTO.  # noqa: E501
        :type: str
        """

        self._tracking_number = tracking_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeliveryDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
