# coding: utf-8

"""
    PassHub API

    PassHub API documentation  # noqa: E501

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from sightseeingtech_passhub_api.models.validation_item_status_dto import ValidationItemStatusDTO  # noqa: F401,E501


class ValidationResultEntry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'customer_name': 'str',
        'customer_type': 'str',
        'customer_uid': 'str',
        'product_name': 'str',
        'product_sku': 'str',
        'quantity': 'int',
        'status': 'ValidationItemStatusDTO'
    }

    attribute_map = {
        'customer_name': 'customerName',
        'customer_type': 'customerType',
        'customer_uid': 'customerUid',
        'product_name': 'productName',
        'product_sku': 'productSku',
        'quantity': 'quantity',
        'status': 'status'
    }

    def __init__(self, customer_name=None, customer_type=None, customer_uid=None, product_name=None, product_sku=None, quantity=None, status=None):  # noqa: E501
        """ValidationResultEntry - a model defined in Swagger"""  # noqa: E501

        self._customer_name = None
        self._customer_type = None
        self._customer_uid = None
        self._product_name = None
        self._product_sku = None
        self._quantity = None
        self._status = None
        self.discriminator = None

        if customer_name is not None:
            self.customer_name = customer_name
        if customer_type is not None:
            self.customer_type = customer_type
        if customer_uid is not None:
            self.customer_uid = customer_uid
        if product_name is not None:
            self.product_name = product_name
        if product_sku is not None:
            self.product_sku = product_sku
        if quantity is not None:
            self.quantity = quantity
        if status is not None:
            self.status = status

    @property
    def customer_name(self):
        """Gets the customer_name of this ValidationResultEntry.  # noqa: E501


        :return: The customer_name of this ValidationResultEntry.  # noqa: E501
        :rtype: str
        """
        return self._customer_name

    @customer_name.setter
    def customer_name(self, customer_name):
        """Sets the customer_name of this ValidationResultEntry.


        :param customer_name: The customer_name of this ValidationResultEntry.  # noqa: E501
        :type: str
        """

        self._customer_name = customer_name

    @property
    def customer_type(self):
        """Gets the customer_type of this ValidationResultEntry.  # noqa: E501


        :return: The customer_type of this ValidationResultEntry.  # noqa: E501
        :rtype: str
        """
        return self._customer_type

    @customer_type.setter
    def customer_type(self, customer_type):
        """Sets the customer_type of this ValidationResultEntry.


        :param customer_type: The customer_type of this ValidationResultEntry.  # noqa: E501
        :type: str
        """
        allowed_values = ["ADULT", "CHILD", "SENIOR"]  # noqa: E501
        if customer_type not in allowed_values:
            raise ValueError(
                "Invalid value for `customer_type` ({0}), must be one of {1}"  # noqa: E501
                .format(customer_type, allowed_values)
            )

        self._customer_type = customer_type

    @property
    def customer_uid(self):
        """Gets the customer_uid of this ValidationResultEntry.  # noqa: E501


        :return: The customer_uid of this ValidationResultEntry.  # noqa: E501
        :rtype: str
        """
        return self._customer_uid

    @customer_uid.setter
    def customer_uid(self, customer_uid):
        """Sets the customer_uid of this ValidationResultEntry.


        :param customer_uid: The customer_uid of this ValidationResultEntry.  # noqa: E501
        :type: str
        """

        self._customer_uid = customer_uid

    @property
    def product_name(self):
        """Gets the product_name of this ValidationResultEntry.  # noqa: E501


        :return: The product_name of this ValidationResultEntry.  # noqa: E501
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this ValidationResultEntry.


        :param product_name: The product_name of this ValidationResultEntry.  # noqa: E501
        :type: str
        """

        self._product_name = product_name

    @property
    def product_sku(self):
        """Gets the product_sku of this ValidationResultEntry.  # noqa: E501


        :return: The product_sku of this ValidationResultEntry.  # noqa: E501
        :rtype: str
        """
        return self._product_sku

    @product_sku.setter
    def product_sku(self, product_sku):
        """Sets the product_sku of this ValidationResultEntry.


        :param product_sku: The product_sku of this ValidationResultEntry.  # noqa: E501
        :type: str
        """

        self._product_sku = product_sku

    @property
    def quantity(self):
        """Gets the quantity of this ValidationResultEntry.  # noqa: E501


        :return: The quantity of this ValidationResultEntry.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this ValidationResultEntry.


        :param quantity: The quantity of this ValidationResultEntry.  # noqa: E501
        :type: int
        """

        self._quantity = quantity

    @property
    def status(self):
        """Gets the status of this ValidationResultEntry.  # noqa: E501


        :return: The status of this ValidationResultEntry.  # noqa: E501
        :rtype: ValidationItemStatusDTO
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ValidationResultEntry.


        :param status: The status of this ValidationResultEntry.  # noqa: E501
        :type: ValidationItemStatusDTO
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ValidationResultEntry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
