# coding: utf-8

"""
    PassHub API

    PassHub API documentation  # noqa: E501

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ProductSuggestion(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'connection_type': 'str',
        'customer_type': 'str',
        'id': 'int',
        'name': 'str',
        'product_tag': 'str',
        'sku': 'str'
    }

    attribute_map = {
        'connection_type': 'connectionType',
        'customer_type': 'customerType',
        'id': 'id',
        'name': 'name',
        'product_tag': 'productTag',
        'sku': 'sku'
    }

    def __init__(self, connection_type=None, customer_type=None, id=None, name=None, product_tag=None, sku=None):  # noqa: E501
        """ProductSuggestion - a model defined in Swagger"""  # noqa: E501

        self._connection_type = None
        self._customer_type = None
        self._id = None
        self._name = None
        self._product_tag = None
        self._sku = None
        self.discriminator = None

        if connection_type is not None:
            self.connection_type = connection_type
        if customer_type is not None:
            self.customer_type = customer_type
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if product_tag is not None:
            self.product_tag = product_tag
        if sku is not None:
            self.sku = sku

    @property
    def connection_type(self):
        """Gets the connection_type of this ProductSuggestion.  # noqa: E501


        :return: The connection_type of this ProductSuggestion.  # noqa: E501
        :rtype: str
        """
        return self._connection_type

    @connection_type.setter
    def connection_type(self, connection_type):
        """Sets the connection_type of this ProductSuggestion.


        :param connection_type: The connection_type of this ProductSuggestion.  # noqa: E501
        :type: str
        """
        allowed_values = ["INCLUDE", "PASS"]  # noqa: E501
        if connection_type not in allowed_values:
            raise ValueError(
                "Invalid value for `connection_type` ({0}), must be one of {1}"  # noqa: E501
                .format(connection_type, allowed_values)
            )

        self._connection_type = connection_type

    @property
    def customer_type(self):
        """Gets the customer_type of this ProductSuggestion.  # noqa: E501


        :return: The customer_type of this ProductSuggestion.  # noqa: E501
        :rtype: str
        """
        return self._customer_type

    @customer_type.setter
    def customer_type(self, customer_type):
        """Sets the customer_type of this ProductSuggestion.


        :param customer_type: The customer_type of this ProductSuggestion.  # noqa: E501
        :type: str
        """
        allowed_values = ["ADULT", "CHILD", "SENIOR"]  # noqa: E501
        if customer_type not in allowed_values:
            raise ValueError(
                "Invalid value for `customer_type` ({0}), must be one of {1}"  # noqa: E501
                .format(customer_type, allowed_values)
            )

        self._customer_type = customer_type

    @property
    def id(self):
        """Gets the id of this ProductSuggestion.  # noqa: E501


        :return: The id of this ProductSuggestion.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProductSuggestion.


        :param id: The id of this ProductSuggestion.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ProductSuggestion.  # noqa: E501


        :return: The name of this ProductSuggestion.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProductSuggestion.


        :param name: The name of this ProductSuggestion.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def product_tag(self):
        """Gets the product_tag of this ProductSuggestion.  # noqa: E501


        :return: The product_tag of this ProductSuggestion.  # noqa: E501
        :rtype: str
        """
        return self._product_tag

    @product_tag.setter
    def product_tag(self, product_tag):
        """Sets the product_tag of this ProductSuggestion.


        :param product_tag: The product_tag of this ProductSuggestion.  # noqa: E501
        :type: str
        """

        self._product_tag = product_tag

    @property
    def sku(self):
        """Gets the sku of this ProductSuggestion.  # noqa: E501


        :return: The sku of this ProductSuggestion.  # noqa: E501
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this ProductSuggestion.


        :param sku: The sku of this ProductSuggestion.  # noqa: E501
        :type: str
        """

        self._sku = sku

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductSuggestion):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
