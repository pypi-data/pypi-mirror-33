# coding: utf-8

"""
    PassHub API

    PassHub API documentation  # noqa: E501

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from sightseeingtech_passhub_api.models.recharge_prompt_entry import RechargePromptEntry  # noqa: F401,E501


class RechargeProductGroup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entries': 'list[RechargePromptEntry]',
        'name': 'str',
        'pass_product': 'bool',
        'price': 'float',
        'product_ids': 'list[int]',
        'product_tag': 'str'
    }

    attribute_map = {
        'entries': 'entries',
        'name': 'name',
        'pass_product': 'passProduct',
        'price': 'price',
        'product_ids': 'productIds',
        'product_tag': 'productTag'
    }

    def __init__(self, entries=None, name=None, pass_product=None, price=None, product_ids=None, product_tag=None):  # noqa: E501
        """RechargeProductGroup - a model defined in Swagger"""  # noqa: E501

        self._entries = None
        self._name = None
        self._pass_product = None
        self._price = None
        self._product_ids = None
        self._product_tag = None
        self.discriminator = None

        if entries is not None:
            self.entries = entries
        if name is not None:
            self.name = name
        if pass_product is not None:
            self.pass_product = pass_product
        if price is not None:
            self.price = price
        if product_ids is not None:
            self.product_ids = product_ids
        if product_tag is not None:
            self.product_tag = product_tag

    @property
    def entries(self):
        """Gets the entries of this RechargeProductGroup.  # noqa: E501


        :return: The entries of this RechargeProductGroup.  # noqa: E501
        :rtype: list[RechargePromptEntry]
        """
        return self._entries

    @entries.setter
    def entries(self, entries):
        """Sets the entries of this RechargeProductGroup.


        :param entries: The entries of this RechargeProductGroup.  # noqa: E501
        :type: list[RechargePromptEntry]
        """

        self._entries = entries

    @property
    def name(self):
        """Gets the name of this RechargeProductGroup.  # noqa: E501


        :return: The name of this RechargeProductGroup.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RechargeProductGroup.


        :param name: The name of this RechargeProductGroup.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def pass_product(self):
        """Gets the pass_product of this RechargeProductGroup.  # noqa: E501


        :return: The pass_product of this RechargeProductGroup.  # noqa: E501
        :rtype: bool
        """
        return self._pass_product

    @pass_product.setter
    def pass_product(self, pass_product):
        """Sets the pass_product of this RechargeProductGroup.


        :param pass_product: The pass_product of this RechargeProductGroup.  # noqa: E501
        :type: bool
        """

        self._pass_product = pass_product

    @property
    def price(self):
        """Gets the price of this RechargeProductGroup.  # noqa: E501


        :return: The price of this RechargeProductGroup.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this RechargeProductGroup.


        :param price: The price of this RechargeProductGroup.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def product_ids(self):
        """Gets the product_ids of this RechargeProductGroup.  # noqa: E501


        :return: The product_ids of this RechargeProductGroup.  # noqa: E501
        :rtype: list[int]
        """
        return self._product_ids

    @product_ids.setter
    def product_ids(self, product_ids):
        """Sets the product_ids of this RechargeProductGroup.


        :param product_ids: The product_ids of this RechargeProductGroup.  # noqa: E501
        :type: list[int]
        """

        self._product_ids = product_ids

    @property
    def product_tag(self):
        """Gets the product_tag of this RechargeProductGroup.  # noqa: E501


        :return: The product_tag of this RechargeProductGroup.  # noqa: E501
        :rtype: str
        """
        return self._product_tag

    @product_tag.setter
    def product_tag(self, product_tag):
        """Sets the product_tag of this RechargeProductGroup.


        :param product_tag: The product_tag of this RechargeProductGroup.  # noqa: E501
        :type: str
        """

        self._product_tag = product_tag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RechargeProductGroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
