import concurrent.futures
import threading
import typing
from . import _base_threaded

class ThreadPooled(_base_threaded.BasePooled): ...
class Threaded(_base_threaded.BaseThreaded): ...

def threadpooled(func: typing.Optional[typing.Callable]=...) -> typing.Union[ThreadPooled, typing.Callable[..., concurrent.futures.Future]]: ...

def threaded(
    name: typing.Optional[typing.Union[str, typing.Callable]]=...,
    daemon: bool=...,
    started: bool=...
) -> typing.Union[Threaded, typing.Callable[..., threading.Thread]]: ...
