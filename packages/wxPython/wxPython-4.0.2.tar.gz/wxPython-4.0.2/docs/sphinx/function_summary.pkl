(dp1
S'wx.LogMessage'
p2
S'For all normal, informational messages.'
p3
sS'wx.DisplaySizeMM'
p4
VReturns the display size in millimeters.
p5
sS'wx.AutoBufferedPaintDCFactory'
p6
VCheck if the window is natively double buffered and will return a :ref:`wx.PaintDC`  if it is, a :ref:`wx.BufferedPaintDC`  otherwise.
p7
sS'wx.IsDragResultOk'
p8
S'Returns ``True`` if res indicates that something was done during a DnD operation, i.e.'
p9
sS'wx.LoadFileSelector'
p10
VAsk for filename to load.
p11
sS'wx.ColourDisplay'
p12
S'Returns ``True`` if the display is colour, ``False`` otherwise.'
p13
sS'wx.FileSelectorEx'
p14
VAn extended version of FileSelector.
p15
sS'wx.GetTranslation'
p16
VThis function returns the translation of `string`  in the current  ``locale()`` .
p17
sS'wx.GetUserName'
p18
S'This function returns the full user name (something like "Mr. John Smith").'
p19
sS'wx.IsPlatform64Bit'
p20
S'Returns ``True`` if the operating system the program is running under is 64 bit.'
p21
sS'wx.adv.CreateFileTipProvider'
p22
S'This function creates a :ref:`wx.adv.TipProvider`  which may be used with :ref:`wx.adv.ShowTip`.'
p23
sS'wx.GetTopLevelWindows'
p24
S"Returns a list-like object of the the application's top-level windows, (frames,dialogs, etc.)"
p25
sS'wx.HandleFatalExceptions'
p26
S'If `doIt`  is ``True``, the fatal exceptions (also known as general protection faults under Windows or segmentation violations in the Unix world) will be caught and passed to :meth:`wx.App.OnFatalException` .'
p27
sS'wx.adv.GenericAboutBox'
p28
VThis function does the same thing as :ref:`wx.adv.AboutBox`  except that it always uses the generic wxWidgets version of the dialog instead of the native one.
p29
sS'wx.DisplaySize'
p30
VReturns the display size in pixels.
p31
sS'wx.FindWindowById'
p32
S'FindWindowById(id, parent=None) . Window'
p33
sS'wx.GetApp'
p34
S'Returns the current application object.'
p35
sS'wx.GetKeyState'
p36
VFor normal keys, returns ``True`` if the specified key is currently down.
p37
sS'wx.LaunchDefaultBrowser'
p38
S"Opens the `url`  in user's default browser."
p39
sS'wx.GetFullHostName'
p40
S'Returns the ``FQDN`` (fully qualified domain host name) or an empty string on error.'
p41
sS'wx.StripMenuCodes'
p42
VStrips any menu codes from `str`  and returns the result.
p43
sS'wx.InfoMessageBox'
p44
VShows a message box with the information about the wxWidgets build used, including its version, most important build parameters and the version of the underlying GUI toolkit.
p45
sS'wx.GetClientDisplayRect'
p46
VReturns the dimensions of the work area on the display.
p47
sS'wx.SysErrorMsg'
p48
S'Returns the error message corresponding to the given system error code.'
p49
sS'wx.Now'
p50
S'Returns a string representing the current date and time.'
p51
sS'wx.LogStatus'
p52
S'Messages logged by this function will appear in the statusbar of the `frame`  or of the top level application window by default (i.e.'
p53
sS'wx.Abort'
p54
S'Exits the program immediately.'
p55
sS'wx.version'
p56
S'Returns a string containing version and port info'
p57
sS'wx.propgrid.RegisterEditor'
p58
S'Use PropertyGrid.DoRegisterEditor instead'
p59
sS'wx.LaunchDefaultApplication'
p60
S'Opens the `document`  in the application associated with the files of this type.'
p61
sS'wx.GetLocale'
p62
S'Get the current locale object (note that it may be ``None``!)'
p63
sS'wx.adv.AboutBox'
p64
VThis function shows the standard about dialog containing the information specified in `info`.
p65
sS'wx.DisplayDepth'
p66
S'Returns the depth of the display (a value of 1 denotes a monochrome display).'
p67
sS'wx.NewEventType'
p68
S'Generates a new unique event type.'
p69
sS'wx.richtext.TextAttrCollectCommonAttributes'
p70
V:param `currentStyle`:
p71
sS'wx.Usleep'
p72
S'Sleeps for the specified number of milliseconds.'
p73
sS'wx.GetTextFromUser'
p74
VPop up a dialog box with title set to `caption`,  ``message`` , and a   ``default_value`` .
p75
sS'wx.GetMousePosition'
p76
VReturns the mouse position in screen coordinates.
p77
sS'wx.LogGeneric'
p78
S'Logs a message with the given LogLevel.'
p79
sS'wx.Sleep'
p80
S'Sleeps for the specified number of seconds.'
p81
sS'wx.MilliSleep'
p82
S'Sleeps for the specified number of milliseconds.'
p83
sS'wx.BitmapFromImage'
p84
S'A compatibility wrapper for the wx.Bitmap(wx.Image) constructor'
p85
sS'wx.DateTimeFromDMY'
p86
S'Compatibility wrapper for :meth:`DateTime.FromDMY`'
p87
sS'wx.IsBusy'
p88
S'Returns ``True`` if between two :ref:`wx.BeginBusyCursor`  and :ref:`wx.EndBusyCursor`  calls.'
p89
sS'wx.html.HtmlWinParser_AddTagHandler'
p90
S''
sS'wx.richtext.RichTextSplitParaCharStyles'
p91
S'Split into paragraph and character styles.'
p92
sS'wx.richtext.RichTextTabsEq'
p93
S'Compare tabs.'
p94
sS'wx.SysErrorCode'
p95
S'Returns the error code from the last system call.'
p96
sS'wx.FileSelector'
p97
VPops up a file selector box.
p98
sS'wx.EnableTopLevelWindows'
p99
VThis function enables or disables all top level windows.
p100
sS'wx.Shutdown'
p101
S'This function shuts down or reboots the computer depending on the value of the `flags`.'
p102
sS'wx.richtext.RichTextCombineBitlists'
p103
S'Combine two bitlists.'
p104
sS'wx.InitAllImageHandlers'
p105
S'Initializes all available image handlers.'
p106
sS'wx.GetEmailAddress'
p107
S"Copies the user's email address into the supplied buffer, by concatenating the values returned by :ref:`wx.GetFullHostName`  and :ref:`wx.GetUserId`."
p108
sS'wx.richtext.RichTextModuleInit'
p109
S''
sS'wx.LogSysError'
p110
S'Mostly used by wxWidgets itself, but might be handy for logging errors after system call (API function) failure.'
p111
sS'wx.IsPlatformLittleEndian'
p112
S'Returns ``True`` if the current platform is little endian (instead of big endian).'
p113
sS'wx.FindWindowByName'
p114
VFind a window by its name (as given in a window constructor or `Create`  function call). If `parent`  is ``None``, the search will start from all top-level frames and dialog boxes; if non-NULL, the search will be limited to the given window hierarchy. The search is recursive in both cases.
p115
sS'wx.Exit'
p116
VExits application after calling :meth:`wx.App.OnExit` .
p117
sS'wx.LogDebug'
p118
S'The right functions for debug output.'
p119
sS'wx.DateTimeFromHMS'
p120
S'Compatibility wrapper for :meth:`DateTime.FromHMS`'
p121
sS'wx.BeginBusyCursor'
p122
VChanges the cursor to the given cursor for all windows in the application.
p123
sS'wx.YieldIfNeeded'
p124
S'Convenience function for wx.GetApp().Yield(True)'
p125
sS'wx.GetSingleChoice'
p126
VPops up a dialog box containing a message, OK/Cancel buttons and a single-selection listbox.
p127
sS'wx.adv.ShowTip'
p128
VThis function shows a "startup tip" to the user.
p129
sS'wx.WakeUpIdle'
p130
VThis function wakes up the (internal and platform dependent) idle system, i.e.
p131
sS'wx.richtext.RichTextHasStyle'
p132
S'Utilities'
p133
sS'wx.GetBatteryState'
p134
VReturns battery state as one of  ``BATTERY_NORMAL_STATE`` ,   ``BATTERY_LOW_STATE`` ,   ``BATTERY_CRITICAL_STATE`` ,   ``BATTERY_SHUTDOWN_STATE``   or   ``BATTERY_UNKNOWN_STATE`` .
p135
sS'wx.GetUserId'
p136
S'This function returns the "user id" also known as "login name" under Unix (i.e.'
p137
sS'wx.GetDisplaySizeMM'
p138
VReturns the display size in millimeters.
p139
sS'wx.MessageBox'
p140
VShow a general purpose message dialog.
p141
sS'wx.NewId'
p142
S'Generates an integer identifier unique to this run of the program.'
p143
sS'wx.DateTimeFromTimeT'
p144
S'Compatibility wrapper for :meth:`DateTime.FromTimeT`'
p145
sS'wx.QueueEvent'
p146
S'Queue an event for processing on the given object.'
p147
sS'wx.Execute'
p148
VExecutes another program in Unix or Windows.
p149
sS'wx.FFont'
p150
S''
sS'wx.GetFontFromUser'
p151
VShows the font selection dialog and returns the font selected by user or invalid font (use :meth:`wx.Font.IsOk`   to test whether a font is valid) if the dialog was cancelled.
p152
sS'wx.ImageFromBitmap'
p153
S'Create a :class:`Image` from a :class:`wx.Bitmap`'
p154
sS'wx.EndBusyCursor'
p155
S'Changes the cursor back to the original cursor, for all windows in the application.'
p156
sS'wx.GetProcessId'
p157
S'Returns the number uniquely identifying the current process in the system.'
p158
sS'wx.richtext.TextAttrEq'
p159
S'Compare two attribute objects.'
p160
sS'wx.GetOsDescription'
p161
S'Returns the string containing the description of the current platform in a user-readable form.'
p162
sS'wx.richtext.RichTextBitlistsEqPartial'
p163
S'Compare two bitlists.'
p164
sS'wx.PostEvent'
p165
S'In a GUI application, this function posts `event`  to the specified `dest`  object using :meth:`wx.EvtHandler.AddPendingEvent` .'
p166
sS'wx.SafeShowMessage'
p167
VThis function shows a message to the user in a safe way and should be safe to call even before the application has been initialized or if it is currently in some other strange state (for example, about to crash).
p168
sS'wx.GetDisplaySize'
p169
VReturns the display size in pixels.
p170
sS'wx.GetActiveWindow'
p171
S'Gets the currently active window (implemented for MSW and GTK only currently, always returns ``None`` in the other ports).'
p172
sS'wx.EmptyImage'
p173
S'A compatibility wrapper for the wx.Image(width, height) constructor'
p174
sS'wx.GetOsVersion'
p175
VGets the version and the operating system ``ID`` for currently running OS.
p176
sS'wx.CallAfter'
p177
S'Call the specified function after the current and pending event'
p178
sS'wx.GetPowerType'
p179
VReturns the type of power source as one of  ``POWER_SOCKET`` ,   ``POWER_BATTERY``   or   ``POWER_UNKNOWN`` .
p180
sS'wx.GetDisplayPPI'
p181
VReturns the display resolution in pixels per inch.
p182
sS'wx.SaveFileSelector'
p183
VAsk for filename to save.
p184
sS'wx.FindWindowAtPointer'
p185
S'Find the deepest window at the mouse pointer position, returning the window and current pointer position in screen coordinates.'
p186
sS'wx.EmptyBitmap'
p187
S'A compatibility wrapper for the wx.Bitmap(width, height, depth) constructor'
p188
sS'wx.richtext.RichTextDecimalToRoman'
p189
S'Convert a decimal to Roman numerals.'
p190
sS'wx.richtext.RichTextRemoveStyle'
p191
S':param `destStyle`:'
p192
sS'wx.GetLibraryVersionInfo'
p193
S'Get wxWidgets version information.'
p194
sS'wx.SafeYield'
p195
VCalls :meth:`wx.App.SafeYield` .
p196
sS'wx.Kill'
p197
VEquivalent to the Unix kill function: send the given signal `sig`  to the process with ``PID`` `pid`.
p198
sS'wx.GetStockLabel'
p199
VReturns label that should be used for given `id`  element.
p200
sS'wx.LogWarning'
p201
S"For warnings - they are also normally shown to the user, but don't interrupt the program work."
p202
sS'wx.GetMouseState'
p203
VReturns the current state of the mouse.
p204
sS'wx.ClientDisplayRect'
p205
VReturns the dimensions of the work area on the display.
p206
sS'wx.MicroSleep'
p207
S'Sleeps for the specified number of microseconds.'
p208
sS'wx.FindWindowAtPoint'
p209
VFind the deepest window at the given mouse position in screen coordinates, returning the window if found, or ``None`` if not.
p210
sS'wx.DateTimeFromJDN'
p211
S'Compatibility wrapper for :meth:`DateTime.FromJDN`'
p212
sS'wx.ImageFromStream'
p213
S'Load an image from a stream (file-like object)'
p214
sS'wx.pydate2wxdate'
p215
S'Convert a Python date or datetime to a :class:`DateTime` object'
p216
sS'wx.xrc.EmptyXmlResource'
p217
S'A compatibility wrapper for the XmlResource(flags, domain) constructor'
p218
sS'wx.GetPasswordFromUser'
p219
VSimilar to :ref:`wx.GetTextFromUser`  but the text entered in the dialog is not shown on screen but replaced with stars.
p220
sS'wx.Yield'
p221
S'Calls :meth:`wx.AppConsole.Yield` .'
p222
sS'wx.FindWindowByLabel'
p223
VFind a window by its label. Depending on the type of window, the label may be a window title or panel item label. If `parent`  is ``None``, the search will start from all top-level frames and dialog boxes; if non-NULL, the search will be limited to the given window hierarchy. The search is recursive in both cases.
p224
sS'wx.LogVerbose'
p225
S'For verbose output.'
p226
sS'wx.BitmapFromBuffer'
p227
S'A compatibility wrapper for :meth:`wx.Bitmap.FromBuffer` and :meth:`wx.Bitmap.FromBufferAndAlpha`'
p228
sS'wx.Trap'
p229
S'Generate a debugger exception meaning that the control is passed to the debugger if one is attached to the process.'
p230
sS'wx.xrc.XRCCTRL'
p231
S'Returns the child window associated with the string ``ID`` in an ``XML`` resource.'
p232
sS'wx.GetTopLevelParent'
p233
S'Returns the first top level parent of the given window, or in other words, the frame or dialog containing it, or ``None``.'
p234
sS'wx.DirSelector'
p235
VPops up a directory selector dialog.
p236
sS'wx.RegisterId'
p237
S'Ensures that Ids subsequently generated by :ref:`wx.NewId`  do not clash with the given `id`.'
p238
sS'wx.IntersectRect'
p239
S'Calculate and return the intersection of r1 and r2.  Returns None if there'
p240
sS'wx.DisableAsserts'
p241
VDisable the condition checks in the assertions.
p242
sS'wx.ImageFromDataWithAlpha'
p243
S'Compatibility wrapper for creating an image from ``RGB`` and Alpha data'
p244
sS'wx.IsMainThread'
p245
S'Returns ``True`` if the current thread is what  considers the GUI thread.'
p246
sS'wx.propgrid.PGGetDefaultImageWildcard'
p247
S':rtype: `string`'
p248
sS'wx.GetColourFromUser'
p249
VShows the colour selection dialog and returns the colour selected by user or invalid colour (use :meth:`wx.Colour.IsOk`   to test whether a colour is valid) if the dialog was cancelled.
p250
sS'wx.GetAccelFromString'
p251
S''
sS'wx.Shell'
p252
S'Executes a command in an interactive shell window.'
p253
sS'wx.SetCursor'
p254
VGlobally sets the cursor; only has an effect on Windows, Mac and GTK+.
p255
sS'wx.EmptyBitmapRGBA'
p256
S'A compatibility wrapper for :meth:`wx.Bitmap.FromRGBA`'
p257
sS'wx.EmptyIcon'
p258
S'A compatibility wrapper for the :class:`Icon` constructor'
p259
sS'wx.Bell'
p260
S'Ring the system bell.'
p261
sS'wx.LogError'
p262
S'The functions to use for error messages, i.e.'
p263
sS'wx.BitmapFromBufferRGBA'
p264
S'A compatibility wrapper for :meth:`wx.Bitmap.FromBufferRGBA`'
p265
sS'wx.ImageFromBuffer'
p266
S'Creates a :class:`Image` from the data in `dataBuffer`.  The `dataBuffer`'
p267
sS'wx.ImageFromData'
p268
S'Compatibility wrapper for creating an image from ``RGB`` data'
p269
sS'wx.richtext.RichTextApplyStyle'
p270
S'Apply one style to another.'
p271
sS'wx.LogFatalError'
p272
S'Like :ref:`wx.LogError`, but also terminates the program with the exit code 3.'
p273
sS'wx.xrc.XRCID'
p274
S'Returns a numeric ``ID`` that is equivalent to the string ``ID`` used in an ``XML`` resource.'
p275
sS'wx.MacThemeColour'
p276
S':rtype: :ref:`wx.Colour`'
p277
sS'wx.GetHomeDir'
p278
VReturn the (current) user's home directory.
p279
sS'wx.GetUserHome'
p280
S'Returns the home directory for the given user.'
p281
sS'wx.GetNumberFromUser'
p282
VShows a dialog asking the user for numeric input.
p283
sS'wx.FindMenuItemId'
p284
VFind a menu item identifier associated with the given frame's menu bar.
p285
sS'wx.GetHostName'
p286
S"Copies the current host machine's name into the supplied buffer."
p287
sS'wx.date2pydate'
p288
S'Convert a :class:`DateTime` object to a Python datetime.'
p289
s.