#
# Generated by erpcgen 1.6.0 on Fri Jun 22 11:46:18 2018.
#
# AUTOGENERATED - DO NOT EDIT
#

import erpc
from . import common, interface

# Client for Device
class DeviceService(erpc.server.Service):
    def __init__(self, handler):
        super(DeviceService, self).__init__(interface.IDevice.SERVICE_ID)
        self._handler = handler
        self._methods = {
                interface.IDevice.FIRMWARE_VERSION_ID: self._handle_firmware_version,
                interface.IDevice.SOFTWARE_RESET_ID: self._handle_software_reset,
                interface.IDevice.HARDWARE_RESET_ID: self._handle_hardware_reset,
                interface.IDevice.BTN_IS_PRESSED_ID: self._handle_btn_is_pressed,
                interface.IDevice.BTN_PRESS_TIME_ID: self._handle_btn_press_time,
                interface.IDevice.BTN_SET_INVERT_ID: self._handle_btn_set_invert,
                interface.IDevice.BTN_GET_INVERT_ID: self._handle_btn_get_invert,
                interface.IDevice.BTN_SET_ENABLED_ID: self._handle_btn_set_enabled,
                interface.IDevice.BTN_GET_ENABLED_ID: self._handle_btn_get_enabled,
                interface.IDevice.BTN_SET_CONFIG_ID: self._handle_btn_set_config,
                interface.IDevice.BTN_GET_CONFIG_ID: self._handle_btn_get_config,
                interface.IDevice.RGB_SET_COLOUR_ID: self._handle_rgb_set_colour,
                interface.IDevice.RGB_GET_COLOUR_ID: self._handle_rgb_get_colour,
                interface.IDevice.RGB_SET_TIMINGS_ID: self._handle_rgb_set_timings,
                interface.IDevice.RGB_GET_TIMINGS_ID: self._handle_rgb_get_timings,
                interface.IDevice.RGB_SET_MODE_ID: self._handle_rgb_set_mode,
                interface.IDevice.RGB_GET_MODE_ID: self._handle_rgb_get_mode,
                interface.IDevice.RGB_SET_COEFFICIENTS_ID: self._handle_rgb_set_coefficients,
                interface.IDevice.RGB_GET_COEFFICIENTS_ID: self._handle_rgb_get_coefficients,
                interface.IDevice.RGB_SET_CONFIG_ID: self._handle_rgb_set_config,
                interface.IDevice.RGB_GET_CONFIG_ID: self._handle_rgb_get_config,
                interface.IDevice.PATH_GET_STATUS_ID: self._handle_path_get_status,
                interface.IDevice.PATH_OPEN_ID: self._handle_path_open,
                interface.IDevice.PATH_CLOSE_ID: self._handle_path_close,
                interface.IDevice.PATH_SET_BARRIER_TIMEOUT_ID: self._handle_path_set_barrier_timeout,
                interface.IDevice.PATH_GET_BARRIER_TIMEOUT_ID: self._handle_path_get_barrier_timeout,
                interface.IDevice.PATH_SET_LOOPS_TIMEOUT_ID: self._handle_path_set_loops_timeout,
                interface.IDevice.PATH_GET_LOOPS_TIMEOUT_ID: self._handle_path_get_loops_timeout,
                interface.IDevice.PATH_SET_LOOPS_HOLD_ID: self._handle_path_set_loops_hold,
                interface.IDevice.PATH_GET_LOOPS_HOLD_ID: self._handle_path_get_loops_hold,
                interface.IDevice.PATH_GET_RESULT_ID: self._handle_path_get_result,
                interface.IDevice.PATH_CLEAR_RESULT_ID: self._handle_path_clear_result,
                interface.IDevice.PATH_SET_CONFIG_ID: self._handle_path_set_config,
                interface.IDevice.PATH_GET_CONFIG_ID: self._handle_path_get_config,
                interface.IDevice.BUZZER_SET_FREQUENCY_ID: self._handle_buzzer_set_frequency,
                interface.IDevice.BUZZER_GET_FREQUENCY_ID: self._handle_buzzer_get_frequency,
                interface.IDevice.BUZZER_ENABLE_ID: self._handle_buzzer_enable,
                interface.IDevice.BUZZER_ENABLE_ACK_ID: self._handle_buzzer_enable_ACK,
                interface.IDevice.BUZZER_ENABLE_NAK_ID: self._handle_buzzer_enable_NAK,
                interface.IDevice.ICOM_GET_ID: self._handle_icom_get,
                interface.IDevice.ICOM_SET_ACTIVE_LOW_ID: self._handle_icom_set_active_low,
                interface.IDevice.ICOM_GET_ACTIVE_LOW_ID: self._handle_icom_get_active_low,
                interface.IDevice.BREACH_GET_ID: self._handle_breach_get,
                interface.IDevice.BREACH_SET_ACTIVE_LOW_ID: self._handle_breach_set_active_low,
                interface.IDevice.BREACH_GET_ACTIVE_LOW_ID: self._handle_breach_get_active_low,
                interface.IDevice.GPIO_GET_ID: self._handle_gpio_get,
                interface.IDevice.GPIO_SET_ID: self._handle_gpio_set,
                interface.IDevice.GPIO_SET_DIRECTION_ID: self._handle_gpio_set_direction,
                interface.IDevice.GPIO_GET_DIRECTION_ID: self._handle_gpio_get_direction,
                interface.IDevice.GPIO_SET_ACTIVE_LOW_ID: self._handle_gpio_set_active_low,
                interface.IDevice.GPIO_GET_ACTIVE_LOW_ID: self._handle_gpio_get_active_low,
            }

    def _handle_firmware_version(self, sequence, codec):
        # Read incoming parameters.

        # Invoke user implementation of remote function.
        _result = self._handler.firmware_version()

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDevice.SERVICE_ID,
            request=interface.IDevice.FIRMWARE_VERSION_ID,
            sequence=sequence))
        _result._write(codec)

    def _handle_software_reset(self, sequence, codec):
        # Read incoming parameters.

        # Invoke user implementation of remote function.
        self._handler.software_reset()

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDevice.SERVICE_ID,
            request=interface.IDevice.SOFTWARE_RESET_ID,
            sequence=sequence))

    def _handle_hardware_reset(self, sequence, codec):
        # Read incoming parameters.

        # Invoke user implementation of remote function.
        self._handler.hardware_reset()

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDevice.SERVICE_ID,
            request=interface.IDevice.HARDWARE_RESET_ID,
            sequence=sequence))

    def _handle_btn_is_pressed(self, sequence, codec):
        # Read incoming parameters.

        # Invoke user implementation of remote function.
        _result = self._handler.btn_is_pressed()

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDevice.SERVICE_ID,
            request=interface.IDevice.BTN_IS_PRESSED_ID,
            sequence=sequence))
        codec.write_bool(_result)

    def _handle_btn_press_time(self, sequence, codec):
        # Read incoming parameters.

        # Invoke user implementation of remote function.
        _result = self._handler.btn_press_time()

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDevice.SERVICE_ID,
            request=interface.IDevice.BTN_PRESS_TIME_ID,
            sequence=sequence))
        codec.write_uint32(_result)

    def _handle_btn_set_invert(self, sequence, codec):
        # Read incoming parameters.
        enable = codec.read_bool()

        # Invoke user implementation of remote function.
        self._handler.btn_set_invert(enable)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDevice.SERVICE_ID,
            request=interface.IDevice.BTN_SET_INVERT_ID,
            sequence=sequence))

    def _handle_btn_get_invert(self, sequence, codec):
        # Read incoming parameters.

        # Invoke user implementation of remote function.
        _result = self._handler.btn_get_invert()

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDevice.SERVICE_ID,
            request=interface.IDevice.BTN_GET_INVERT_ID,
            sequence=sequence))
        codec.write_bool(_result)

    def _handle_btn_set_enabled(self, sequence, codec):
        # Read incoming parameters.
        enable = codec.read_bool()

        # Invoke user implementation of remote function.
        self._handler.btn_set_enabled(enable)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDevice.SERVICE_ID,
            request=interface.IDevice.BTN_SET_ENABLED_ID,
            sequence=sequence))

    def _handle_btn_get_enabled(self, sequence, codec):
        # Read incoming parameters.

        # Invoke user implementation of remote function.
        _result = self._handler.btn_get_enabled()

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDevice.SERVICE_ID,
            request=interface.IDevice.BTN_GET_ENABLED_ID,
            sequence=sequence))
        codec.write_bool(_result)

    def _handle_btn_set_config(self, sequence, codec):
        # Read incoming parameters.
        enable = codec.read_bool()
        invert = codec.read_bool()

        # Invoke user implementation of remote function.
        self._handler.btn_set_config(enable, invert)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDevice.SERVICE_ID,
            request=interface.IDevice.BTN_SET_CONFIG_ID,
            sequence=sequence))

    def _handle_btn_get_config(self, sequence, codec):
        # Create reference objects to pass into handler for out/inout parameters.
        enable = erpc.Reference()
        invert = erpc.Reference()

        # Read incoming parameters.

        # Invoke user implementation of remote function.
        self._handler.btn_get_config(enable, invert)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDevice.SERVICE_ID,
            request=interface.IDevice.BTN_GET_CONFIG_ID,
            sequence=sequence))
        if enable.value is None:
            raise ValueError("enable is None")
        codec.write_bool(enable.value)
        if invert.value is None:
            raise ValueError("invert is None")
        codec.write_bool(invert.value)

    def _handle_rgb_set_colour(self, sequence, codec):
        # Read incoming parameters.
        colour = common.Colour()._read(codec)

        # Invoke user implementation of remote function.
        self._handler.rgb_set_colour(colour)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDevice.SERVICE_ID,
            request=interface.IDevice.RGB_SET_COLOUR_ID,
            sequence=sequence))

    def _handle_rgb_get_colour(self, sequence, codec):
        # Create reference objects to pass into handler for out/inout parameters.
        colour = erpc.Reference()

        # Read incoming parameters.

        # Invoke user implementation of remote function.
        self._handler.rgb_get_colour(colour)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDevice.SERVICE_ID,
            request=interface.IDevice.RGB_GET_COLOUR_ID,
            sequence=sequence))
        if colour.value is None:
            raise ValueError("colour is None")
        colour.value._write(codec)

    def _handle_rgb_set_timings(self, sequence, codec):
        # Read incoming parameters.
        timings = common.Timings()._read(codec)

        # Invoke user implementation of remote function.
        self._handler.rgb_set_timings(timings)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDevice.SERVICE_ID,
            request=interface.IDevice.RGB_SET_TIMINGS_ID,
            sequence=sequence))

    def _handle_rgb_get_timings(self, sequence, codec):
        # Create reference objects to pass into handler for out/inout parameters.
        timings = erpc.Reference()

        # Read incoming parameters.

        # Invoke user implementation of remote function.
        self._handler.rgb_get_timings(timings)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDevice.SERVICE_ID,
            request=interface.IDevice.RGB_GET_TIMINGS_ID,
            sequence=sequence))
        if timings.value is None:
            raise ValueError("timings is None")
        timings.value._write(codec)

    def _handle_rgb_set_mode(self, sequence, codec):
        # Read incoming parameters.
        mode = codec.read_uint32()

        # Invoke user implementation of remote function.
        self._handler.rgb_set_mode(mode)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDevice.SERVICE_ID,
            request=interface.IDevice.RGB_SET_MODE_ID,
            sequence=sequence))

    def _handle_rgb_get_mode(self, sequence, codec):
        # Read incoming parameters.

        # Invoke user implementation of remote function.
        _result = self._handler.rgb_get_mode()

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDevice.SERVICE_ID,
            request=interface.IDevice.RGB_GET_MODE_ID,
            sequence=sequence))
        codec.write_uint32(_result)

    def _handle_rgb_set_coefficients(self, sequence, codec):
        # Read incoming parameters.
        coeffs = common.Coefficients()._read(codec)

        # Invoke user implementation of remote function.
        self._handler.rgb_set_coefficients(coeffs)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDevice.SERVICE_ID,
            request=interface.IDevice.RGB_SET_COEFFICIENTS_ID,
            sequence=sequence))

    def _handle_rgb_get_coefficients(self, sequence, codec):
        # Create reference objects to pass into handler for out/inout parameters.
        coeffs = erpc.Reference()

        # Read incoming parameters.

        # Invoke user implementation of remote function.
        self._handler.rgb_get_coefficients(coeffs)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDevice.SERVICE_ID,
            request=interface.IDevice.RGB_GET_COEFFICIENTS_ID,
            sequence=sequence))
        if coeffs.value is None:
            raise ValueError("coeffs is None")
        coeffs.value._write(codec)

    def _handle_rgb_set_config(self, sequence, codec):
        # Read incoming parameters.
        mode = codec.read_uint32()
        timings = common.Timings()._read(codec)
        colour = common.Colour()._read(codec)
        coeffs = common.Coefficients()._read(codec)

        # Invoke user implementation of remote function.
        self._handler.rgb_set_config(mode, timings, colour, coeffs)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDevice.SERVICE_ID,
            request=interface.IDevice.RGB_SET_CONFIG_ID,
            sequence=sequence))

    def _handle_rgb_get_config(self, sequence, codec):
        # Create reference objects to pass into handler for out/inout parameters.
        mode = erpc.Reference()
        timings = erpc.Reference()
        colour = erpc.Reference()
        coeffs = erpc.Reference()

        # Read incoming parameters.

        # Invoke user implementation of remote function.
        self._handler.rgb_get_config(mode, timings, colour, coeffs)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDevice.SERVICE_ID,
            request=interface.IDevice.RGB_GET_CONFIG_ID,
            sequence=sequence))
        if mode.value is None:
            raise ValueError("mode is None")
        codec.write_uint32(mode.value)
        if timings.value is None:
            raise ValueError("timings is None")
        timings.value._write(codec)
        if colour.value is None:
            raise ValueError("colour is None")
        colour.value._write(codec)
        if coeffs.value is None:
            raise ValueError("coeffs is None")
        coeffs.value._write(codec)

    def _handle_path_get_status(self, sequence, codec):
        # Create reference objects to pass into handler for out/inout parameters.
        status = erpc.Reference()

        # Read incoming parameters.

        # Invoke user implementation of remote function.
        self._handler.path_get_status(status)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDevice.SERVICE_ID,
            request=interface.IDevice.PATH_GET_STATUS_ID,
            sequence=sequence))
        if status.value is None:
            raise ValueError("status is None")
        status.value._write(codec)

    def _handle_path_open(self, sequence, codec):
        # Read incoming parameters.
        force = codec.read_bool()
        autoClose = codec.read_bool()

        # Invoke user implementation of remote function.
        self._handler.path_open(force, autoClose)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDevice.SERVICE_ID,
            request=interface.IDevice.PATH_OPEN_ID,
            sequence=sequence))

    def _handle_path_close(self, sequence, codec):
        # Read incoming parameters.

        # Invoke user implementation of remote function.
        self._handler.path_close()

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDevice.SERVICE_ID,
            request=interface.IDevice.PATH_CLOSE_ID,
            sequence=sequence))

    def _handle_path_set_barrier_timeout(self, sequence, codec):
        # Read incoming parameters.
        timeout = codec.read_uint16()

        # Invoke user implementation of remote function.
        self._handler.path_set_barrier_timeout(timeout)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDevice.SERVICE_ID,
            request=interface.IDevice.PATH_SET_BARRIER_TIMEOUT_ID,
            sequence=sequence))

    def _handle_path_get_barrier_timeout(self, sequence, codec):
        # Read incoming parameters.

        # Invoke user implementation of remote function.
        _result = self._handler.path_get_barrier_timeout()

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDevice.SERVICE_ID,
            request=interface.IDevice.PATH_GET_BARRIER_TIMEOUT_ID,
            sequence=sequence))
        codec.write_uint16(_result)

    def _handle_path_set_loops_timeout(self, sequence, codec):
        # Read incoming parameters.
        timeout = codec.read_uint16()

        # Invoke user implementation of remote function.
        self._handler.path_set_loops_timeout(timeout)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDevice.SERVICE_ID,
            request=interface.IDevice.PATH_SET_LOOPS_TIMEOUT_ID,
            sequence=sequence))

    def _handle_path_get_loops_timeout(self, sequence, codec):
        # Read incoming parameters.

        # Invoke user implementation of remote function.
        _result = self._handler.path_get_loops_timeout()

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDevice.SERVICE_ID,
            request=interface.IDevice.PATH_GET_LOOPS_TIMEOUT_ID,
            sequence=sequence))
        codec.write_uint16(_result)

    def _handle_path_set_loops_hold(self, sequence, codec):
        # Read incoming parameters.
        time = codec.read_uint16()

        # Invoke user implementation of remote function.
        self._handler.path_set_loops_hold(time)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDevice.SERVICE_ID,
            request=interface.IDevice.PATH_SET_LOOPS_HOLD_ID,
            sequence=sequence))

    def _handle_path_get_loops_hold(self, sequence, codec):
        # Read incoming parameters.

        # Invoke user implementation of remote function.
        _result = self._handler.path_get_loops_hold()

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDevice.SERVICE_ID,
            request=interface.IDevice.PATH_GET_LOOPS_HOLD_ID,
            sequence=sequence))
        codec.write_uint16(_result)

    def _handle_path_get_result(self, sequence, codec):
        # Read incoming parameters.

        # Invoke user implementation of remote function.
        _result = self._handler.path_get_result()

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDevice.SERVICE_ID,
            request=interface.IDevice.PATH_GET_RESULT_ID,
            sequence=sequence))
        codec.write_uint32(_result)

    def _handle_path_clear_result(self, sequence, codec):
        # Read incoming parameters.

        # Invoke user implementation of remote function.
        self._handler.path_clear_result()

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDevice.SERVICE_ID,
            request=interface.IDevice.PATH_CLEAR_RESULT_ID,
            sequence=sequence))

    def _handle_path_set_config(self, sequence, codec):
        # Read incoming parameters.
        barrier_timeout = codec.read_uint16()
        loops_timeout = codec.read_uint16()
        loops_hold = codec.read_uint16()

        # Invoke user implementation of remote function.
        self._handler.path_set_config(barrier_timeout, loops_timeout, loops_hold)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDevice.SERVICE_ID,
            request=interface.IDevice.PATH_SET_CONFIG_ID,
            sequence=sequence))

    def _handle_path_get_config(self, sequence, codec):
        # Create reference objects to pass into handler for out/inout parameters.
        barrier_timeout = erpc.Reference()
        loops_timeout = erpc.Reference()
        loops_hold = erpc.Reference()

        # Read incoming parameters.

        # Invoke user implementation of remote function.
        self._handler.path_get_config(barrier_timeout, loops_timeout, loops_hold)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDevice.SERVICE_ID,
            request=interface.IDevice.PATH_GET_CONFIG_ID,
            sequence=sequence))
        if barrier_timeout.value is None:
            raise ValueError("barrier_timeout is None")
        codec.write_uint16(barrier_timeout.value)
        if loops_timeout.value is None:
            raise ValueError("loops_timeout is None")
        codec.write_uint16(loops_timeout.value)
        if loops_hold.value is None:
            raise ValueError("loops_hold is None")
        codec.write_uint16(loops_hold.value)

    def _handle_buzzer_set_frequency(self, sequence, codec):
        # Read incoming parameters.
        frequency = codec.read_uint16()

        # Invoke user implementation of remote function.
        self._handler.buzzer_set_frequency(frequency)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDevice.SERVICE_ID,
            request=interface.IDevice.BUZZER_SET_FREQUENCY_ID,
            sequence=sequence))

    def _handle_buzzer_get_frequency(self, sequence, codec):
        # Read incoming parameters.

        # Invoke user implementation of remote function.
        _result = self._handler.buzzer_get_frequency()

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDevice.SERVICE_ID,
            request=interface.IDevice.BUZZER_GET_FREQUENCY_ID,
            sequence=sequence))
        codec.write_uint16(_result)

    def _handle_buzzer_enable(self, sequence, codec):
        # Read incoming parameters.
        onTime = codec.read_uint16()
        offTime = codec.read_uint16()
        repeat = codec.read_int16()

        # Invoke user implementation of remote function.
        self._handler.buzzer_enable(onTime, offTime, repeat)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDevice.SERVICE_ID,
            request=interface.IDevice.BUZZER_ENABLE_ID,
            sequence=sequence))

    def _handle_buzzer_enable_ACK(self, sequence, codec):
        # Read incoming parameters.

        # Invoke user implementation of remote function.
        self._handler.buzzer_enable_ACK()

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDevice.SERVICE_ID,
            request=interface.IDevice.BUZZER_ENABLE_ACK_ID,
            sequence=sequence))

    def _handle_buzzer_enable_NAK(self, sequence, codec):
        # Read incoming parameters.

        # Invoke user implementation of remote function.
        self._handler.buzzer_enable_NAK()

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDevice.SERVICE_ID,
            request=interface.IDevice.BUZZER_ENABLE_NAK_ID,
            sequence=sequence))

    def _handle_icom_get(self, sequence, codec):
        # Read incoming parameters.

        # Invoke user implementation of remote function.
        _result = self._handler.icom_get()

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDevice.SERVICE_ID,
            request=interface.IDevice.ICOM_GET_ID,
            sequence=sequence))
        codec.write_bool(_result)

    def _handle_icom_set_active_low(self, sequence, codec):
        # Read incoming parameters.
        active_low = codec.read_bool()

        # Invoke user implementation of remote function.
        self._handler.icom_set_active_low(active_low)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDevice.SERVICE_ID,
            request=interface.IDevice.ICOM_SET_ACTIVE_LOW_ID,
            sequence=sequence))

    def _handle_icom_get_active_low(self, sequence, codec):
        # Read incoming parameters.

        # Invoke user implementation of remote function.
        _result = self._handler.icom_get_active_low()

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDevice.SERVICE_ID,
            request=interface.IDevice.ICOM_GET_ACTIVE_LOW_ID,
            sequence=sequence))
        codec.write_bool(_result)

    def _handle_breach_get(self, sequence, codec):
        # Read incoming parameters.

        # Invoke user implementation of remote function.
        _result = self._handler.breach_get()

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDevice.SERVICE_ID,
            request=interface.IDevice.BREACH_GET_ID,
            sequence=sequence))
        codec.write_bool(_result)

    def _handle_breach_set_active_low(self, sequence, codec):
        # Read incoming parameters.
        active_low = codec.read_bool()

        # Invoke user implementation of remote function.
        self._handler.breach_set_active_low(active_low)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDevice.SERVICE_ID,
            request=interface.IDevice.BREACH_SET_ACTIVE_LOW_ID,
            sequence=sequence))

    def _handle_breach_get_active_low(self, sequence, codec):
        # Read incoming parameters.

        # Invoke user implementation of remote function.
        _result = self._handler.breach_get_active_low()

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDevice.SERVICE_ID,
            request=interface.IDevice.BREACH_GET_ACTIVE_LOW_ID,
            sequence=sequence))
        codec.write_bool(_result)

    def _handle_gpio_get(self, sequence, codec):
        # Read incoming parameters.
        idx = codec.read_uint8()

        # Invoke user implementation of remote function.
        _result = self._handler.gpio_get(idx)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDevice.SERVICE_ID,
            request=interface.IDevice.GPIO_GET_ID,
            sequence=sequence))
        codec.write_bool(_result)

    def _handle_gpio_set(self, sequence, codec):
        # Read incoming parameters.
        idx = codec.read_uint8()
        enable = codec.read_bool()

        # Invoke user implementation of remote function.
        self._handler.gpio_set(idx, enable)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDevice.SERVICE_ID,
            request=interface.IDevice.GPIO_SET_ID,
            sequence=sequence))

    def _handle_gpio_set_direction(self, sequence, codec):
        # Read incoming parameters.
        idx = codec.read_uint8()
        direction = codec.read_uint32()

        # Invoke user implementation of remote function.
        self._handler.gpio_set_direction(idx, direction)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDevice.SERVICE_ID,
            request=interface.IDevice.GPIO_SET_DIRECTION_ID,
            sequence=sequence))

    def _handle_gpio_get_direction(self, sequence, codec):
        # Read incoming parameters.
        idx = codec.read_uint8()

        # Invoke user implementation of remote function.
        _result = self._handler.gpio_get_direction(idx)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDevice.SERVICE_ID,
            request=interface.IDevice.GPIO_GET_DIRECTION_ID,
            sequence=sequence))
        codec.write_uint32(_result)

    def _handle_gpio_set_active_low(self, sequence, codec):
        # Read incoming parameters.
        idx = codec.read_uint8()
        active_low = codec.read_bool()

        # Invoke user implementation of remote function.
        self._handler.gpio_set_active_low(idx, active_low)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDevice.SERVICE_ID,
            request=interface.IDevice.GPIO_SET_ACTIVE_LOW_ID,
            sequence=sequence))

    def _handle_gpio_get_active_low(self, sequence, codec):
        # Read incoming parameters.
        idx = codec.read_uint8()

        # Invoke user implementation of remote function.
        _result = self._handler.gpio_get_active_low(idx)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDevice.SERVICE_ID,
            request=interface.IDevice.GPIO_GET_ACTIVE_LOW_ID,
            sequence=sequence))
        codec.write_bool(_result)


# Client for Client
class ClientService(erpc.server.Service):
    def __init__(self, handler):
        super(ClientService, self).__init__(interface.IClient.SERVICE_ID)
        self._handler = handler
        self._methods = {
                interface.IClient.BUTTON_CHANGED_ID: self._handle_button_changed,
                interface.IClient.VEHICLE_CHANGED_ID: self._handle_vehicle_changed,
                interface.IClient.BARRIER_CHANGED_ID: self._handle_barrier_changed,
                interface.IClient.ICOM_CHANGED_ID: self._handle_icom_changed,
                interface.IClient.BREACH_CHANGED_ID: self._handle_breach_changed,
                interface.IClient.GPIO_CHANGED_ID: self._handle_gpio_changed,
            }

    def _handle_button_changed(self, sequence, codec):
        # Read incoming parameters.
        pressed = codec.read_bool()

        # Invoke user implementation of remote function.
        self._handler.button_changed(pressed)

    def _handle_vehicle_changed(self, sequence, codec):
        # Read incoming parameters.
        status = common.PathStatus()._read(codec)

        # Invoke user implementation of remote function.
        self._handler.vehicle_changed(status)

    def _handle_barrier_changed(self, sequence, codec):
        # Read incoming parameters.
        status = common.PathStatus()._read(codec)

        # Invoke user implementation of remote function.
        self._handler.barrier_changed(status)

    def _handle_icom_changed(self, sequence, codec):
        # Read incoming parameters.
        active = codec.read_bool()

        # Invoke user implementation of remote function.
        self._handler.icom_changed(active)

    def _handle_breach_changed(self, sequence, codec):
        # Read incoming parameters.
        active = codec.read_bool()

        # Invoke user implementation of remote function.
        self._handler.breach_changed(active)

    def _handle_gpio_changed(self, sequence, codec):
        # Read incoming parameters.
        idx = codec.read_uint8()
        active = codec.read_bool()

        # Invoke user implementation of remote function.
        self._handler.gpio_changed(idx, active)


