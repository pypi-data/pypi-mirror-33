#
# Generated by erpcgen 1.6.0 on Fri Jun 22 11:46:18 2018.
#
# AUTOGENERATED - DO NOT EDIT
#

import erpc

# Abstract base class for Device
class IDevice(object):
    SERVICE_ID = 1
    FIRMWARE_VERSION_ID = 1
    SOFTWARE_RESET_ID = 2
    HARDWARE_RESET_ID = 3
    BTN_IS_PRESSED_ID = 4
    BTN_PRESS_TIME_ID = 5
    BTN_SET_INVERT_ID = 6
    BTN_GET_INVERT_ID = 7
    BTN_SET_ENABLED_ID = 8
    BTN_GET_ENABLED_ID = 9
    BTN_SET_CONFIG_ID = 10
    BTN_GET_CONFIG_ID = 11
    RGB_SET_COLOUR_ID = 12
    RGB_GET_COLOUR_ID = 13
    RGB_SET_TIMINGS_ID = 14
    RGB_GET_TIMINGS_ID = 15
    RGB_SET_MODE_ID = 16
    RGB_GET_MODE_ID = 17
    RGB_SET_COEFFICIENTS_ID = 18
    RGB_GET_COEFFICIENTS_ID = 19
    RGB_SET_CONFIG_ID = 20
    RGB_GET_CONFIG_ID = 21
    PATH_GET_STATUS_ID = 22
    PATH_OPEN_ID = 23
    PATH_CLOSE_ID = 24
    PATH_SET_BARRIER_TIMEOUT_ID = 25
    PATH_GET_BARRIER_TIMEOUT_ID = 26
    PATH_SET_LOOPS_TIMEOUT_ID = 27
    PATH_GET_LOOPS_TIMEOUT_ID = 28
    PATH_SET_LOOPS_HOLD_ID = 29
    PATH_GET_LOOPS_HOLD_ID = 30
    PATH_GET_RESULT_ID = 31
    PATH_CLEAR_RESULT_ID = 32
    PATH_SET_CONFIG_ID = 33
    PATH_GET_CONFIG_ID = 34
    BUZZER_SET_FREQUENCY_ID = 35
    BUZZER_GET_FREQUENCY_ID = 36
    BUZZER_ENABLE_ID = 37
    BUZZER_ENABLE_ACK_ID = 38
    BUZZER_ENABLE_NAK_ID = 39
    ICOM_GET_ID = 40
    ICOM_SET_ACTIVE_LOW_ID = 41
    ICOM_GET_ACTIVE_LOW_ID = 42
    BREACH_GET_ID = 43
    BREACH_SET_ACTIVE_LOW_ID = 44
    BREACH_GET_ACTIVE_LOW_ID = 45
    GPIO_GET_ID = 46
    GPIO_SET_ID = 47
    GPIO_SET_DIRECTION_ID = 48
    GPIO_GET_DIRECTION_ID = 49
    GPIO_SET_ACTIVE_LOW_ID = 50
    GPIO_GET_ACTIVE_LOW_ID = 51

    def firmware_version(self):
        raise NotImplementedError()

    def software_reset(self):
        raise NotImplementedError()

    def hardware_reset(self):
        raise NotImplementedError()

    def btn_is_pressed(self):
        raise NotImplementedError()

    def btn_press_time(self):
        raise NotImplementedError()

    def btn_set_invert(self, enable):
        raise NotImplementedError()

    def btn_get_invert(self):
        raise NotImplementedError()

    def btn_set_enabled(self, enable):
        raise NotImplementedError()

    def btn_get_enabled(self):
        raise NotImplementedError()

    def btn_set_config(self, enable, invert):
        raise NotImplementedError()

    def btn_get_config(self, enable, invert):
        raise NotImplementedError()

    def rgb_set_colour(self, colour):
        raise NotImplementedError()

    def rgb_get_colour(self, colour):
        raise NotImplementedError()

    def rgb_set_timings(self, timings):
        raise NotImplementedError()

    def rgb_get_timings(self, timings):
        raise NotImplementedError()

    def rgb_set_mode(self, mode):
        raise NotImplementedError()

    def rgb_get_mode(self):
        raise NotImplementedError()

    def rgb_set_coefficients(self, coeffs):
        raise NotImplementedError()

    def rgb_get_coefficients(self, coeffs):
        raise NotImplementedError()

    def rgb_set_config(self, mode, timings, colour, coeffs):
        raise NotImplementedError()

    def rgb_get_config(self, mode, timings, colour, coeffs):
        raise NotImplementedError()

    def path_get_status(self, status):
        raise NotImplementedError()

    def path_open(self, force, autoClose):
        raise NotImplementedError()

    def path_close(self):
        raise NotImplementedError()

    def path_set_barrier_timeout(self, timeout):
        raise NotImplementedError()

    def path_get_barrier_timeout(self):
        raise NotImplementedError()

    def path_set_loops_timeout(self, timeout):
        raise NotImplementedError()

    def path_get_loops_timeout(self):
        raise NotImplementedError()

    def path_set_loops_hold(self, time):
        raise NotImplementedError()

    def path_get_loops_hold(self):
        raise NotImplementedError()

    def path_get_result(self):
        raise NotImplementedError()

    def path_clear_result(self):
        raise NotImplementedError()

    def path_set_config(self, barrier_timeout, loops_timeout, loops_hold):
        raise NotImplementedError()

    def path_get_config(self, barrier_timeout, loops_timeout, loops_hold):
        raise NotImplementedError()

    def buzzer_set_frequency(self, frequency):
        raise NotImplementedError()

    def buzzer_get_frequency(self):
        raise NotImplementedError()

    def buzzer_enable(self, onTime, offTime, repeat):
        raise NotImplementedError()

    def buzzer_enable_ACK(self):
        raise NotImplementedError()

    def buzzer_enable_NAK(self):
        raise NotImplementedError()

    def icom_get(self):
        raise NotImplementedError()

    def icom_set_active_low(self, active_low):
        raise NotImplementedError()

    def icom_get_active_low(self):
        raise NotImplementedError()

    def breach_get(self):
        raise NotImplementedError()

    def breach_set_active_low(self, active_low):
        raise NotImplementedError()

    def breach_get_active_low(self):
        raise NotImplementedError()

    def gpio_get(self, idx):
        raise NotImplementedError()

    def gpio_set(self, idx, enable):
        raise NotImplementedError()

    def gpio_set_direction(self, idx, direction):
        raise NotImplementedError()

    def gpio_get_direction(self, idx):
        raise NotImplementedError()

    def gpio_set_active_low(self, idx, active_low):
        raise NotImplementedError()

    def gpio_get_active_low(self, idx):
        raise NotImplementedError()


# Abstract base class for Client
class IClient(object):
    SERVICE_ID = 2
    BUTTON_CHANGED_ID = 1
    VEHICLE_CHANGED_ID = 2
    BARRIER_CHANGED_ID = 3
    ICOM_CHANGED_ID = 4
    BREACH_CHANGED_ID = 5
    GPIO_CHANGED_ID = 6

    def button_changed(self, pressed):
        raise NotImplementedError()

    def vehicle_changed(self, status):
        raise NotImplementedError()

    def barrier_changed(self, status):
        raise NotImplementedError()

    def icom_changed(self, active):
        raise NotImplementedError()

    def breach_changed(self, active):
        raise NotImplementedError()

    def gpio_changed(self, idx, active):
        raise NotImplementedError()


