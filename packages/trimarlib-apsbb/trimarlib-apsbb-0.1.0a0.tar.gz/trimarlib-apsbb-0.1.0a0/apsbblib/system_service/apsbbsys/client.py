#
# Generated by erpcgen 1.6.0 on Fri Jun 22 11:46:18 2018.
#
# AUTOGENERATED - DO NOT EDIT
#

import erpc
from . import common, interface

# Client for Device
class DeviceClient(interface.IDevice):
    def __init__(self, manager):
        super(DeviceClient, self).__init__()
        self._clientManager = manager

    def firmware_version(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.FIRMWARE_VERSION_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = common.FirmwareVersion()._read(codec)
        return _result

    def software_reset(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.SOFTWARE_RESET_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)

    def hardware_reset(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.HARDWARE_RESET_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)

    def btn_is_pressed(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.BTN_IS_PRESSED_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_bool()
        return _result

    def btn_press_time(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.BTN_PRESS_TIME_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_uint32()
        return _result

    def btn_set_invert(self, enable):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.BTN_SET_INVERT_ID,
                sequence=request.sequence))
        if enable is None:
            raise ValueError("enable is None")
        codec.write_bool(enable)

        # Send request and process reply.
        self._clientManager.perform_request(request)

    def btn_get_invert(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.BTN_GET_INVERT_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_bool()
        return _result

    def btn_set_enabled(self, enable):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.BTN_SET_ENABLED_ID,
                sequence=request.sequence))
        if enable is None:
            raise ValueError("enable is None")
        codec.write_bool(enable)

        # Send request and process reply.
        self._clientManager.perform_request(request)

    def btn_get_enabled(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.BTN_GET_ENABLED_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_bool()
        return _result

    def btn_set_config(self, enable, invert):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.BTN_SET_CONFIG_ID,
                sequence=request.sequence))
        if enable is None:
            raise ValueError("enable is None")
        codec.write_bool(enable)
        if invert is None:
            raise ValueError("invert is None")
        codec.write_bool(invert)

        # Send request and process reply.
        self._clientManager.perform_request(request)

    def btn_get_config(self, enable, invert):
        assert type(enable) is erpc.Reference, "out parameter must be a Reference object"
        assert type(invert) is erpc.Reference, "out parameter must be a Reference object"

        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.BTN_GET_CONFIG_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        enable.value = codec.read_bool()
        invert.value = codec.read_bool()

    def rgb_set_colour(self, colour):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RGB_SET_COLOUR_ID,
                sequence=request.sequence))
        if colour is None:
            raise ValueError("colour is None")
        colour._write(codec)

        # Send request and process reply.
        self._clientManager.perform_request(request)

    def rgb_get_colour(self, colour):
        assert type(colour) is erpc.Reference, "out parameter must be a Reference object"

        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RGB_GET_COLOUR_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        colour.value = common.Colour()._read(codec)

    def rgb_set_timings(self, timings):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RGB_SET_TIMINGS_ID,
                sequence=request.sequence))
        if timings is None:
            raise ValueError("timings is None")
        timings._write(codec)

        # Send request and process reply.
        self._clientManager.perform_request(request)

    def rgb_get_timings(self, timings):
        assert type(timings) is erpc.Reference, "out parameter must be a Reference object"

        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RGB_GET_TIMINGS_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        timings.value = common.Timings()._read(codec)

    def rgb_set_mode(self, mode):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RGB_SET_MODE_ID,
                sequence=request.sequence))
        if mode is None:
            raise ValueError("mode is None")
        codec.write_uint32(mode)

        # Send request and process reply.
        self._clientManager.perform_request(request)

    def rgb_get_mode(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RGB_GET_MODE_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_uint32()
        return _result

    def rgb_set_coefficients(self, coeffs):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RGB_SET_COEFFICIENTS_ID,
                sequence=request.sequence))
        if coeffs is None:
            raise ValueError("coeffs is None")
        coeffs._write(codec)

        # Send request and process reply.
        self._clientManager.perform_request(request)

    def rgb_get_coefficients(self, coeffs):
        assert type(coeffs) is erpc.Reference, "out parameter must be a Reference object"

        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RGB_GET_COEFFICIENTS_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        coeffs.value = common.Coefficients()._read(codec)

    def rgb_set_config(self, mode, timings, colour, coeffs):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RGB_SET_CONFIG_ID,
                sequence=request.sequence))
        if mode is None:
            raise ValueError("mode is None")
        codec.write_uint32(mode)
        if timings is None:
            raise ValueError("timings is None")
        timings._write(codec)
        if colour is None:
            raise ValueError("colour is None")
        colour._write(codec)
        if coeffs is None:
            raise ValueError("coeffs is None")
        coeffs._write(codec)

        # Send request and process reply.
        self._clientManager.perform_request(request)

    def rgb_get_config(self, mode, timings, colour, coeffs):
        assert type(mode) is erpc.Reference, "out parameter must be a Reference object"
        assert type(timings) is erpc.Reference, "out parameter must be a Reference object"
        assert type(colour) is erpc.Reference, "out parameter must be a Reference object"
        assert type(coeffs) is erpc.Reference, "out parameter must be a Reference object"

        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RGB_GET_CONFIG_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        mode.value = codec.read_uint32()
        timings.value = common.Timings()._read(codec)
        colour.value = common.Colour()._read(codec)
        coeffs.value = common.Coefficients()._read(codec)

    def path_get_status(self, status):
        assert type(status) is erpc.Reference, "out parameter must be a Reference object"

        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.PATH_GET_STATUS_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        status.value = common.PathStatus()._read(codec)

    def path_open(self, force, autoClose):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.PATH_OPEN_ID,
                sequence=request.sequence))
        if force is None:
            raise ValueError("force is None")
        codec.write_bool(force)
        if autoClose is None:
            raise ValueError("autoClose is None")
        codec.write_bool(autoClose)

        # Send request and process reply.
        self._clientManager.perform_request(request)

    def path_close(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.PATH_CLOSE_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)

    def path_set_barrier_timeout(self, timeout):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.PATH_SET_BARRIER_TIMEOUT_ID,
                sequence=request.sequence))
        if timeout is None:
            raise ValueError("timeout is None")
        codec.write_uint16(timeout)

        # Send request and process reply.
        self._clientManager.perform_request(request)

    def path_get_barrier_timeout(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.PATH_GET_BARRIER_TIMEOUT_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_uint16()
        return _result

    def path_set_loops_timeout(self, timeout):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.PATH_SET_LOOPS_TIMEOUT_ID,
                sequence=request.sequence))
        if timeout is None:
            raise ValueError("timeout is None")
        codec.write_uint16(timeout)

        # Send request and process reply.
        self._clientManager.perform_request(request)

    def path_get_loops_timeout(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.PATH_GET_LOOPS_TIMEOUT_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_uint16()
        return _result

    def path_set_loops_hold(self, time):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.PATH_SET_LOOPS_HOLD_ID,
                sequence=request.sequence))
        if time is None:
            raise ValueError("time is None")
        codec.write_uint16(time)

        # Send request and process reply.
        self._clientManager.perform_request(request)

    def path_get_loops_hold(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.PATH_GET_LOOPS_HOLD_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_uint16()
        return _result

    def path_get_result(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.PATH_GET_RESULT_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_uint32()
        return _result

    def path_clear_result(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.PATH_CLEAR_RESULT_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)

    def path_set_config(self, barrier_timeout, loops_timeout, loops_hold):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.PATH_SET_CONFIG_ID,
                sequence=request.sequence))
        if barrier_timeout is None:
            raise ValueError("barrier_timeout is None")
        codec.write_uint16(barrier_timeout)
        if loops_timeout is None:
            raise ValueError("loops_timeout is None")
        codec.write_uint16(loops_timeout)
        if loops_hold is None:
            raise ValueError("loops_hold is None")
        codec.write_uint16(loops_hold)

        # Send request and process reply.
        self._clientManager.perform_request(request)

    def path_get_config(self, barrier_timeout, loops_timeout, loops_hold):
        assert type(barrier_timeout) is erpc.Reference, "out parameter must be a Reference object"
        assert type(loops_timeout) is erpc.Reference, "out parameter must be a Reference object"
        assert type(loops_hold) is erpc.Reference, "out parameter must be a Reference object"

        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.PATH_GET_CONFIG_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        barrier_timeout.value = codec.read_uint16()
        loops_timeout.value = codec.read_uint16()
        loops_hold.value = codec.read_uint16()

    def buzzer_set_frequency(self, frequency):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.BUZZER_SET_FREQUENCY_ID,
                sequence=request.sequence))
        if frequency is None:
            raise ValueError("frequency is None")
        codec.write_uint16(frequency)

        # Send request and process reply.
        self._clientManager.perform_request(request)

    def buzzer_get_frequency(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.BUZZER_GET_FREQUENCY_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_uint16()
        return _result

    def buzzer_enable(self, onTime, offTime, repeat):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.BUZZER_ENABLE_ID,
                sequence=request.sequence))
        if onTime is None:
            raise ValueError("onTime is None")
        codec.write_uint16(onTime)
        if offTime is None:
            raise ValueError("offTime is None")
        codec.write_uint16(offTime)
        if repeat is None:
            raise ValueError("repeat is None")
        codec.write_int16(repeat)

        # Send request and process reply.
        self._clientManager.perform_request(request)

    def buzzer_enable_ACK(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.BUZZER_ENABLE_ACK_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)

    def buzzer_enable_NAK(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.BUZZER_ENABLE_NAK_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)

    def icom_get(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.ICOM_GET_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_bool()
        return _result

    def icom_set_active_low(self, active_low):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.ICOM_SET_ACTIVE_LOW_ID,
                sequence=request.sequence))
        if active_low is None:
            raise ValueError("active_low is None")
        codec.write_bool(active_low)

        # Send request and process reply.
        self._clientManager.perform_request(request)

    def icom_get_active_low(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.ICOM_GET_ACTIVE_LOW_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_bool()
        return _result

    def breach_get(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.BREACH_GET_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_bool()
        return _result

    def breach_set_active_low(self, active_low):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.BREACH_SET_ACTIVE_LOW_ID,
                sequence=request.sequence))
        if active_low is None:
            raise ValueError("active_low is None")
        codec.write_bool(active_low)

        # Send request and process reply.
        self._clientManager.perform_request(request)

    def breach_get_active_low(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.BREACH_GET_ACTIVE_LOW_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_bool()
        return _result

    def gpio_get(self, idx):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.GPIO_GET_ID,
                sequence=request.sequence))
        if idx is None:
            raise ValueError("idx is None")
        codec.write_uint8(idx)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_bool()
        return _result

    def gpio_set(self, idx, enable):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.GPIO_SET_ID,
                sequence=request.sequence))
        if idx is None:
            raise ValueError("idx is None")
        codec.write_uint8(idx)
        if enable is None:
            raise ValueError("enable is None")
        codec.write_bool(enable)

        # Send request and process reply.
        self._clientManager.perform_request(request)

    def gpio_set_direction(self, idx, direction):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.GPIO_SET_DIRECTION_ID,
                sequence=request.sequence))
        if idx is None:
            raise ValueError("idx is None")
        codec.write_uint8(idx)
        if direction is None:
            raise ValueError("direction is None")
        codec.write_uint32(direction)

        # Send request and process reply.
        self._clientManager.perform_request(request)

    def gpio_get_direction(self, idx):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.GPIO_GET_DIRECTION_ID,
                sequence=request.sequence))
        if idx is None:
            raise ValueError("idx is None")
        codec.write_uint8(idx)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_uint32()
        return _result

    def gpio_set_active_low(self, idx, active_low):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.GPIO_SET_ACTIVE_LOW_ID,
                sequence=request.sequence))
        if idx is None:
            raise ValueError("idx is None")
        codec.write_uint8(idx)
        if active_low is None:
            raise ValueError("active_low is None")
        codec.write_bool(active_low)

        # Send request and process reply.
        self._clientManager.perform_request(request)

    def gpio_get_active_low(self, idx):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.GPIO_GET_ACTIVE_LOW_ID,
                sequence=request.sequence))
        if idx is None:
            raise ValueError("idx is None")
        codec.write_uint8(idx)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_bool()
        return _result


# Client for Client
class ClientClient(interface.IClient):
    def __init__(self, manager):
        super(ClientClient, self).__init__()
        self._clientManager = manager

    def button_changed(self, pressed):
        # Build remote function invocation message.
        request = self._clientManager.create_request(isOneway=True)
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kOnewayMessage,
                service=self.SERVICE_ID,
                request=self.BUTTON_CHANGED_ID,
                sequence=request.sequence))
        if pressed is None:
            raise ValueError("pressed is None")
        codec.write_bool(pressed)

        # Send request.
        self._clientManager.perform_request(request)

    def vehicle_changed(self, status):
        # Build remote function invocation message.
        request = self._clientManager.create_request(isOneway=True)
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kOnewayMessage,
                service=self.SERVICE_ID,
                request=self.VEHICLE_CHANGED_ID,
                sequence=request.sequence))
        if status is None:
            raise ValueError("status is None")
        status._write(codec)

        # Send request.
        self._clientManager.perform_request(request)

    def barrier_changed(self, status):
        # Build remote function invocation message.
        request = self._clientManager.create_request(isOneway=True)
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kOnewayMessage,
                service=self.SERVICE_ID,
                request=self.BARRIER_CHANGED_ID,
                sequence=request.sequence))
        if status is None:
            raise ValueError("status is None")
        status._write(codec)

        # Send request.
        self._clientManager.perform_request(request)

    def icom_changed(self, active):
        # Build remote function invocation message.
        request = self._clientManager.create_request(isOneway=True)
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kOnewayMessage,
                service=self.SERVICE_ID,
                request=self.ICOM_CHANGED_ID,
                sequence=request.sequence))
        if active is None:
            raise ValueError("active is None")
        codec.write_bool(active)

        # Send request.
        self._clientManager.perform_request(request)

    def breach_changed(self, active):
        # Build remote function invocation message.
        request = self._clientManager.create_request(isOneway=True)
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kOnewayMessage,
                service=self.SERVICE_ID,
                request=self.BREACH_CHANGED_ID,
                sequence=request.sequence))
        if active is None:
            raise ValueError("active is None")
        codec.write_bool(active)

        # Send request.
        self._clientManager.perform_request(request)

    def gpio_changed(self, idx, active):
        # Build remote function invocation message.
        request = self._clientManager.create_request(isOneway=True)
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kOnewayMessage,
                service=self.SERVICE_ID,
                request=self.GPIO_CHANGED_ID,
                sequence=request.sequence))
        if idx is None:
            raise ValueError("idx is None")
        codec.write_uint8(idx)
        if active is None:
            raise ValueError("active is None")
        codec.write_bool(active)

        # Send request.
        self._clientManager.perform_request(request)



