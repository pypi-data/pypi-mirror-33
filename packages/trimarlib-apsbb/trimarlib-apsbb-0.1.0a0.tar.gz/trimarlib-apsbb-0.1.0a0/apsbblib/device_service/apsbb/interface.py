#
# Generated by erpcgen 1.6.0 on Fri Jun 22 11:14:21 2018.
#
# AUTOGENERATED - DO NOT EDIT
#

import erpc

# Abstract base class for System
class ISystem(object):
    SERVICE_ID = 1
    SYS_FIRMWARE_VERSION_ID = 1
    SYS_RESET_ID = 2
    SYS_BOOTLOADER_ID = 3
    SYS_SET_RTC_ID = 4
    SYS_GET_RTC_ID = 5
    SYS_GET_INTERRUPT_ID = 6
    SYS_CLEAR_INTERRUPT_ID = 7

    def sys_firmware_version(self, major, minor, maintenance, crc):
        raise NotImplementedError()

    def sys_reset(self):
        raise NotImplementedError()

    def sys_bootloader(self):
        raise NotImplementedError()

    def sys_set_rtc(self, tv):
        raise NotImplementedError()

    def sys_get_rtc(self, tv):
        raise NotImplementedError()

    def sys_get_interrupt(self):
        raise NotImplementedError()

    def sys_clear_interrupt(self, mask):
        raise NotImplementedError()


# Abstract base class for Button
class IButton(object):
    SERVICE_ID = 2
    BTN_IS_PRESSED_ID = 1
    BTN_PRESS_TIME_ID = 2
    BTN_SET_INVERT_ID = 3
    BTN_GET_INVERT_ID = 4
    BTN_SET_ENABLED_ID = 5
    BTN_GET_ENABLED_ID = 6
    BTN_SET_CONFIG_ID = 7
    BTN_GET_CONFIG_ID = 8

    def btn_is_pressed(self):
        raise NotImplementedError()

    def btn_press_time(self):
        raise NotImplementedError()

    def btn_set_invert(self, enable):
        raise NotImplementedError()

    def btn_get_invert(self):
        raise NotImplementedError()

    def btn_set_enabled(self, enable):
        raise NotImplementedError()

    def btn_get_enabled(self):
        raise NotImplementedError()

    def btn_set_config(self, enable, invert):
        raise NotImplementedError()

    def btn_get_config(self, enable, invert):
        raise NotImplementedError()


# Abstract base class for RGB
class IRGB(object):
    SERVICE_ID = 3
    RGB_SET_COLOUR_ID = 1
    RGB_GET_COLOUR_ID = 2
    RGB_SET_TIMINGS_ID = 3
    RGB_GET_TIMINGS_ID = 4
    RGB_SET_MODE_ID = 5
    RGB_GET_MODE_ID = 6
    RGB_SET_COEFFICIENTS_ID = 7
    RGB_GET_COEFFICIENTS_ID = 8
    RGB_SET_CONFIG_ID = 9
    RGB_GET_CONFIG_ID = 10

    def rgb_set_colour(self, colour):
        raise NotImplementedError()

    def rgb_get_colour(self, colour):
        raise NotImplementedError()

    def rgb_set_timings(self, timings):
        raise NotImplementedError()

    def rgb_get_timings(self, timings):
        raise NotImplementedError()

    def rgb_set_mode(self, mode):
        raise NotImplementedError()

    def rgb_get_mode(self):
        raise NotImplementedError()

    def rgb_set_coefficients(self, coeffs):
        raise NotImplementedError()

    def rgb_get_coefficients(self, coeffs):
        raise NotImplementedError()

    def rgb_set_config(self, mode, timings, colour, coeffs):
        raise NotImplementedError()

    def rgb_get_config(self, mode, timings, colour, coeffs):
        raise NotImplementedError()


# Abstract base class for Path
class IPath(object):
    SERVICE_ID = 4
    PATH_GET_STATUS_ID = 1
    PATH_OPEN_ID = 2
    PATH_CLOSE_ID = 3
    PATH_SET_BARRIER_TIMEOUT_ID = 4
    PATH_GET_BARRIER_TIMEOUT_ID = 5
    PATH_SET_LOOPS_TIMEOUT_ID = 6
    PATH_GET_LOOPS_TIMEOUT_ID = 7
    PATH_SET_LOOPS_HOLD_ID = 8
    PATH_GET_LOOPS_HOLD_ID = 9
    PATH_GET_RESULT_ID = 10
    PATH_CLEAR_RESULT_ID = 11
    PATH_SET_CONFIG_ID = 12
    PATH_GET_CONFIG_ID = 13

    def path_get_status(self, status):
        raise NotImplementedError()

    def path_open(self, force, autoClose):
        raise NotImplementedError()

    def path_close(self):
        raise NotImplementedError()

    def path_set_barrier_timeout(self, timeout):
        raise NotImplementedError()

    def path_get_barrier_timeout(self):
        raise NotImplementedError()

    def path_set_loops_timeout(self, timeout):
        raise NotImplementedError()

    def path_get_loops_timeout(self):
        raise NotImplementedError()

    def path_set_loops_hold(self, time):
        raise NotImplementedError()

    def path_get_loops_hold(self):
        raise NotImplementedError()

    def path_get_result(self):
        raise NotImplementedError()

    def path_clear_result(self):
        raise NotImplementedError()

    def path_set_config(self, barrier_timeout, loops_timeout, loops_hold):
        raise NotImplementedError()

    def path_get_config(self, barrier_timeout, loops_timeout, loops_hold):
        raise NotImplementedError()


# Abstract base class for Buzzer
class IBuzzer(object):
    SERVICE_ID = 5
    BUZZER_SET_FREQUENCY_ID = 1
    BUZZER_GET_FREQUENCY_ID = 2
    BUZZER_ENABLE_ID = 3
    BUZZER_ENABLE_ACK_ID = 4
    BUZZER_ENABLE_NAK_ID = 5

    def buzzer_set_frequency(self, frequency):
        raise NotImplementedError()

    def buzzer_get_frequency(self):
        raise NotImplementedError()

    def buzzer_enable(self, onTime, offTime, repeat):
        raise NotImplementedError()

    def buzzer_enable_ACK(self):
        raise NotImplementedError()

    def buzzer_enable_NAK(self):
        raise NotImplementedError()


