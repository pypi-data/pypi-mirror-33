""" Cisco_IOS_XR_sysadmin_controllers 

This module contains a collection of YANG
definitions for Cisco IOS\-XR SysAdmin configuration.

This module defines the top level container for
all hardware devices managed in Sysadmin.

Copyright(c) 2011\-2017 by Cisco Systems, Inc.
All rights reserved.

"""
from collections import OrderedDict

from ydk.types import Entity, EntityPath, Identity, Enum, YType, YLeaf, YLeafList, YList, LeafDataList, Bits, Empty, Decimal64
from ydk.filters import YFilter
from ydk.errors import YError, YModelError
from ydk.errors.error_handler import handle_type_error as _handle_type_error



class Gaspp(Entity):
    """
    
    
    .. attribute:: asic
    
    	
    	**type**\: list of  		 :py:class:`Asic <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Gaspp.Asic>`
    
    

    """

    _prefix = 'calvados_controllers'
    _revision = '2017-01-31'

    def __init__(self):
        super(Gaspp, self).__init__()
        self._top_entity = None

        self.yang_name = "gaspp"
        self.yang_parent_name = "Cisco-IOS-XR-sysadmin-controllers"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([("asic", ("asic", Gaspp.Asic))])
        self._leafs = OrderedDict()

        self.asic = YList(self)
        self._segment_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:gaspp"

    def __setattr__(self, name, value):
        self._perform_setattr(Gaspp, [], name, value)


    class Asic(Entity):
        """
        
        
        .. attribute:: asic_name  (key)
        
        	
        	**type**\: str
        
        .. attribute:: instance
        
        	
        	**type**\: list of  		 :py:class:`Instance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Gaspp.Asic.Instance>`
        
        

        """

        _prefix = 'calvados_controllers'
        _revision = '2017-01-31'

        def __init__(self):
            super(Gaspp.Asic, self).__init__()

            self.yang_name = "asic"
            self.yang_parent_name = "gaspp"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = ['asic_name']
            self._child_classes = OrderedDict([("instance", ("instance", Gaspp.Asic.Instance))])
            self._leafs = OrderedDict([
                ('asic_name', YLeaf(YType.str, 'asic-name')),
            ])
            self.asic_name = None

            self.instance = YList(self)
            self._segment_path = lambda: "asic" + "[asic-name='" + str(self.asic_name) + "']"
            self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:gaspp/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Gaspp.Asic, ['asic_name'], name, value)


        class Instance(Entity):
            """
            
            
            .. attribute:: instance_id  (key)
            
            	
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: instance_name
            
            	
            	**type**\: str
            
            .. attribute:: address
            
            	
            	**type**\: list of  		 :py:class:`Address <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Gaspp.Asic.Instance.Address>`
            
            .. attribute:: block_name
            
            	
            	**type**\: list of  		 :py:class:`BlockName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Gaspp.Asic.Instance.BlockName>`
            
            .. attribute:: block_number
            
            	
            	**type**\: list of  		 :py:class:`BlockNumber <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Gaspp.Asic.Instance.BlockNumber>`
            
            

            """

            _prefix = 'calvados_controllers'
            _revision = '2017-01-31'

            def __init__(self):
                super(Gaspp.Asic.Instance, self).__init__()

                self.yang_name = "instance"
                self.yang_parent_name = "asic"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = ['instance_id']
                self._child_classes = OrderedDict([("address", ("address", Gaspp.Asic.Instance.Address)), ("block-name", ("block_name", Gaspp.Asic.Instance.BlockName)), ("block-number", ("block_number", Gaspp.Asic.Instance.BlockNumber))])
                self._leafs = OrderedDict([
                    ('instance_id', YLeaf(YType.uint32, 'instance-id')),
                    ('instance_name', YLeaf(YType.str, 'instance-name')),
                ])
                self.instance_id = None
                self.instance_name = None

                self.address = YList(self)
                self.block_name = YList(self)
                self.block_number = YList(self)
                self._segment_path = lambda: "instance" + "[instance-id='" + str(self.instance_id) + "']"

            def __setattr__(self, name, value):
                self._perform_setattr(Gaspp.Asic.Instance, ['instance_id', 'instance_name'], name, value)


            class Address(Entity):
                """
                
                
                .. attribute:: addr  (key)
                
                	
                	**type**\: str
                
                	**mandatory**\: True
                
                .. attribute:: size  (key)
                
                	
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: entries  (key)
                
                	
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**mandatory**\: True
                
                .. attribute:: width
                
                	
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**mandatory**\: True
                
                .. attribute:: location
                
                	
                	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Gaspp.Asic.Instance.Address.Location>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Gaspp.Asic.Instance.Address, self).__init__()

                    self.yang_name = "address"
                    self.yang_parent_name = "instance"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = ['addr','size','entries']
                    self._child_classes = OrderedDict([("location", ("location", Gaspp.Asic.Instance.Address.Location))])
                    self._leafs = OrderedDict([
                        ('addr', YLeaf(YType.str, 'addr')),
                        ('size', YLeaf(YType.uint32, 'size')),
                        ('entries', YLeaf(YType.uint32, 'entries')),
                        ('width', YLeaf(YType.uint32, 'width')),
                    ])
                    self.addr = None
                    self.size = None
                    self.entries = None
                    self.width = None

                    self.location = YList(self)
                    self._segment_path = lambda: "address" + "[addr='" + str(self.addr) + "']" + "[size='" + str(self.size) + "']" + "[entries='" + str(self.entries) + "']"

                def __setattr__(self, name, value):
                    self._perform_setattr(Gaspp.Asic.Instance.Address, ['addr', 'size', 'entries', 'width'], name, value)


                class Location(Entity):
                    """
                    
                    
                    .. attribute:: location_name  (key)
                    
                    	
                    	**type**\: str
                    
                    	**mandatory**\: True
                    
                    .. attribute:: direct_data
                    
                    	
                    	**type**\: list of  		 :py:class:`DirectData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Gaspp.Asic.Instance.Address.Location.DirectData>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Gaspp.Asic.Instance.Address.Location, self).__init__()

                        self.yang_name = "location"
                        self.yang_parent_name = "address"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['location_name']
                        self._child_classes = OrderedDict([("direct_data", ("direct_data", Gaspp.Asic.Instance.Address.Location.DirectData))])
                        self._leafs = OrderedDict([
                            ('location_name', YLeaf(YType.str, 'location_name')),
                        ])
                        self.location_name = None

                        self.direct_data = YList(self)
                        self._segment_path = lambda: "location" + "[location_name='" + str(self.location_name) + "']"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Gaspp.Asic.Instance.Address.Location, ['location_name'], name, value)


                    class DirectData(Entity):
                        """
                        
                        
                        .. attribute:: address
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        .. attribute:: name
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: value
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: size
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Gaspp.Asic.Instance.Address.Location.DirectData, self).__init__()

                            self.yang_name = "direct_data"
                            self.yang_parent_name = "location"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('address', YLeaf(YType.uint64, 'address')),
                                ('name', YLeaf(YType.str, 'name')),
                                ('value', YLeaf(YType.str, 'value')),
                                ('size', YLeaf(YType.uint32, 'size')),
                            ])
                            self.address = None
                            self.name = None
                            self.value = None
                            self.size = None
                            self._segment_path = lambda: "direct_data"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Gaspp.Asic.Instance.Address.Location.DirectData, ['address', 'name', 'value', 'size'], name, value)


            class BlockName(Entity):
                """
                
                
                .. attribute:: block_nm  (key)
                
                	
                	**type**\: str
                
                .. attribute:: block_num  (key)
                
                	
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: register_name
                
                	
                	**type**\: list of  		 :py:class:`RegisterName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Gaspp.Asic.Instance.BlockName.RegisterName>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Gaspp.Asic.Instance.BlockName, self).__init__()

                    self.yang_name = "block-name"
                    self.yang_parent_name = "instance"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = ['block_nm','block_num']
                    self._child_classes = OrderedDict([("register-name", ("register_name", Gaspp.Asic.Instance.BlockName.RegisterName))])
                    self._leafs = OrderedDict([
                        ('block_nm', YLeaf(YType.str, 'block-nm')),
                        ('block_num', YLeaf(YType.uint32, 'block-num')),
                    ])
                    self.block_nm = None
                    self.block_num = None

                    self.register_name = YList(self)
                    self._segment_path = lambda: "block-name" + "[block-nm='" + str(self.block_nm) + "']" + "[block-num='" + str(self.block_num) + "']"

                def __setattr__(self, name, value):
                    self._perform_setattr(Gaspp.Asic.Instance.BlockName, ['block_nm', 'block_num'], name, value)


                class RegisterName(Entity):
                    """
                    
                    
                    .. attribute:: name  (key)
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: register
                    
                    	
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: data
                    
                    	
                    	**type**\: list of  		 :py:class:`Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Gaspp.Asic.Instance.BlockName.RegisterName.Data>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Gaspp.Asic.Instance.BlockName.RegisterName, self).__init__()

                        self.yang_name = "register-name"
                        self.yang_parent_name = "block-name"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['name']
                        self._child_classes = OrderedDict([("data", ("data", Gaspp.Asic.Instance.BlockName.RegisterName.Data))])
                        self._leafs = OrderedDict([
                            ('name', YLeaf(YType.str, 'name')),
                            ('register', YLeaf(YType.uint32, 'register')),
                        ])
                        self.name = None
                        self.register = None

                        self.data = YList(self)
                        self._segment_path = lambda: "register-name" + "[name='" + str(self.name) + "']"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Gaspp.Asic.Instance.BlockName.RegisterName, ['name', 'register'], name, value)


                    class Data(Entity):
                        """
                        
                        
                        .. attribute:: address
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        .. attribute:: name
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: value
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: size
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Gaspp.Asic.Instance.BlockName.RegisterName.Data, self).__init__()

                            self.yang_name = "data"
                            self.yang_parent_name = "register-name"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('address', YLeaf(YType.uint64, 'address')),
                                ('name', YLeaf(YType.str, 'name')),
                                ('value', YLeaf(YType.str, 'value')),
                                ('size', YLeaf(YType.uint32, 'size')),
                            ])
                            self.address = None
                            self.name = None
                            self.value = None
                            self.size = None
                            self._segment_path = lambda: "data"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Gaspp.Asic.Instance.BlockName.RegisterName.Data, ['address', 'name', 'value', 'size'], name, value)


            class BlockNumber(Entity):
                """
                
                
                .. attribute:: block_num  (key)
                
                	
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: block_nm
                
                	
                	**type**\: str
                
                .. attribute:: register_number
                
                	
                	**type**\: list of  		 :py:class:`RegisterNumber <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Gaspp.Asic.Instance.BlockNumber.RegisterNumber>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Gaspp.Asic.Instance.BlockNumber, self).__init__()

                    self.yang_name = "block-number"
                    self.yang_parent_name = "instance"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = ['block_num']
                    self._child_classes = OrderedDict([("register-number", ("register_number", Gaspp.Asic.Instance.BlockNumber.RegisterNumber))])
                    self._leafs = OrderedDict([
                        ('block_num', YLeaf(YType.uint32, 'block-num')),
                        ('block_nm', YLeaf(YType.str, 'block-nm')),
                    ])
                    self.block_num = None
                    self.block_nm = None

                    self.register_number = YList(self)
                    self._segment_path = lambda: "block-number" + "[block-num='" + str(self.block_num) + "']"

                def __setattr__(self, name, value):
                    self._perform_setattr(Gaspp.Asic.Instance.BlockNumber, ['block_num', 'block_nm'], name, value)


                class RegisterNumber(Entity):
                    """
                    
                    
                    .. attribute:: register  (key)
                    
                    	
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: register_name
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: register_offsets
                    
                    	
                    	**type**\: list of  		 :py:class:`RegisterOffsets <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Gaspp.Asic.Instance.BlockNumber.RegisterNumber.RegisterOffsets>`
                    
                    .. attribute:: location
                    
                    	
                    	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Gaspp.Asic.Instance.BlockNumber.RegisterNumber.Location>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Gaspp.Asic.Instance.BlockNumber.RegisterNumber, self).__init__()

                        self.yang_name = "register-number"
                        self.yang_parent_name = "block-number"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['register']
                        self._child_classes = OrderedDict([("register-offsets", ("register_offsets", Gaspp.Asic.Instance.BlockNumber.RegisterNumber.RegisterOffsets)), ("location", ("location", Gaspp.Asic.Instance.BlockNumber.RegisterNumber.Location))])
                        self._leafs = OrderedDict([
                            ('register', YLeaf(YType.uint32, 'register')),
                            ('register_name', YLeaf(YType.str, 'register-name')),
                        ])
                        self.register = None
                        self.register_name = None

                        self.register_offsets = YList(self)
                        self.location = YList(self)
                        self._segment_path = lambda: "register-number" + "[register='" + str(self.register) + "']"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Gaspp.Asic.Instance.BlockNumber.RegisterNumber, ['register', 'register_name'], name, value)


                    class RegisterOffsets(Entity):
                        """
                        
                        
                        .. attribute:: reg_start  (key)
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: num_entries  (key)
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: location
                        
                        	
                        	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Gaspp.Asic.Instance.BlockNumber.RegisterNumber.RegisterOffsets.Location>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Gaspp.Asic.Instance.BlockNumber.RegisterNumber.RegisterOffsets, self).__init__()

                            self.yang_name = "register-offsets"
                            self.yang_parent_name = "register-number"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['reg_start','num_entries']
                            self._child_classes = OrderedDict([("location", ("location", Gaspp.Asic.Instance.BlockNumber.RegisterNumber.RegisterOffsets.Location))])
                            self._leafs = OrderedDict([
                                ('reg_start', YLeaf(YType.uint32, 'reg-start')),
                                ('num_entries', YLeaf(YType.uint32, 'num-entries')),
                            ])
                            self.reg_start = None
                            self.num_entries = None

                            self.location = YList(self)
                            self._segment_path = lambda: "register-offsets" + "[reg-start='" + str(self.reg_start) + "']" + "[num-entries='" + str(self.num_entries) + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Gaspp.Asic.Instance.BlockNumber.RegisterNumber.RegisterOffsets, ['reg_start', 'num_entries'], name, value)


                        class Location(Entity):
                            """
                            
                            
                            .. attribute:: location_name  (key)
                            
                            	
                            	**type**\: str
                            
                            	**mandatory**\: True
                            
                            .. attribute:: data
                            
                            	
                            	**type**\: list of  		 :py:class:`Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Gaspp.Asic.Instance.BlockNumber.RegisterNumber.RegisterOffsets.Location.Data>`
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Gaspp.Asic.Instance.BlockNumber.RegisterNumber.RegisterOffsets.Location, self).__init__()

                                self.yang_name = "location"
                                self.yang_parent_name = "register-offsets"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['location_name']
                                self._child_classes = OrderedDict([("data", ("data", Gaspp.Asic.Instance.BlockNumber.RegisterNumber.RegisterOffsets.Location.Data))])
                                self._leafs = OrderedDict([
                                    ('location_name', YLeaf(YType.str, 'location_name')),
                                ])
                                self.location_name = None

                                self.data = YList(self)
                                self._segment_path = lambda: "location" + "[location_name='" + str(self.location_name) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Gaspp.Asic.Instance.BlockNumber.RegisterNumber.RegisterOffsets.Location, ['location_name'], name, value)


                            class Data(Entity):
                                """
                                
                                
                                .. attribute:: address
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: name
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: value
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: size
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Gaspp.Asic.Instance.BlockNumber.RegisterNumber.RegisterOffsets.Location.Data, self).__init__()

                                    self.yang_name = "data"
                                    self.yang_parent_name = "location"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('address', YLeaf(YType.uint64, 'address')),
                                        ('name', YLeaf(YType.str, 'name')),
                                        ('value', YLeaf(YType.str, 'value')),
                                        ('size', YLeaf(YType.uint32, 'size')),
                                    ])
                                    self.address = None
                                    self.name = None
                                    self.value = None
                                    self.size = None
                                    self._segment_path = lambda: "data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Gaspp.Asic.Instance.BlockNumber.RegisterNumber.RegisterOffsets.Location.Data, ['address', 'name', 'value', 'size'], name, value)


                    class Location(Entity):
                        """
                        
                        
                        .. attribute:: location_name  (key)
                        
                        	
                        	**type**\: str
                        
                        	**mandatory**\: True
                        
                        .. attribute:: data
                        
                        	
                        	**type**\: list of  		 :py:class:`Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Gaspp.Asic.Instance.BlockNumber.RegisterNumber.Location.Data>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Gaspp.Asic.Instance.BlockNumber.RegisterNumber.Location, self).__init__()

                            self.yang_name = "location"
                            self.yang_parent_name = "register-number"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['location_name']
                            self._child_classes = OrderedDict([("data", ("data", Gaspp.Asic.Instance.BlockNumber.RegisterNumber.Location.Data))])
                            self._leafs = OrderedDict([
                                ('location_name', YLeaf(YType.str, 'location_name')),
                            ])
                            self.location_name = None

                            self.data = YList(self)
                            self._segment_path = lambda: "location" + "[location_name='" + str(self.location_name) + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Gaspp.Asic.Instance.BlockNumber.RegisterNumber.Location, ['location_name'], name, value)


                        class Data(Entity):
                            """
                            
                            
                            .. attribute:: address
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: name
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: value
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: size
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Gaspp.Asic.Instance.BlockNumber.RegisterNumber.Location.Data, self).__init__()

                                self.yang_name = "data"
                                self.yang_parent_name = "location"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('address', YLeaf(YType.uint64, 'address')),
                                    ('name', YLeaf(YType.str, 'name')),
                                    ('value', YLeaf(YType.str, 'value')),
                                    ('size', YLeaf(YType.uint32, 'size')),
                                ])
                                self.address = None
                                self.name = None
                                self.value = None
                                self.size = None
                                self._segment_path = lambda: "data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Gaspp.Asic.Instance.BlockNumber.RegisterNumber.Location.Data, ['address', 'name', 'value', 'size'], name, value)

    def clone_ptr(self):
        self._top_entity = Gaspp()
        return self._top_entity

class Set(Entity):
    """
    
    
    .. attribute:: controller
    
    	
    	**type**\:  :py:class:`Controller <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Set.Controller>`
    
    

    """

    _prefix = 'calvados_controllers'
    _revision = '2017-01-31'

    def __init__(self):
        super(Set, self).__init__()
        self._top_entity = None

        self.yang_name = "set"
        self.yang_parent_name = "Cisco-IOS-XR-sysadmin-controllers"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([("controller", ("controller", Set.Controller))])
        self._leafs = OrderedDict()

        self.controller = Set.Controller()
        self.controller.parent = self
        self._children_name_map["controller"] = "controller"
        self._segment_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:set"

    def __setattr__(self, name, value):
        self._perform_setattr(Set, [], name, value)


    class Controller(Entity):
        """
        
        
        .. attribute:: asic
        
        	
        	**type**\: list of  		 :py:class:`Asic <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Set.Controller.Asic>`
        
        

        """

        _prefix = 'calvados_controllers'
        _revision = '2017-01-31'

        def __init__(self):
            super(Set.Controller, self).__init__()

            self.yang_name = "controller"
            self.yang_parent_name = "set"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([("asic", ("asic", Set.Controller.Asic))])
            self._leafs = OrderedDict()

            self.asic = YList(self)
            self._segment_path = lambda: "controller"
            self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:set/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Set.Controller, [], name, value)


        class Asic(Entity):
            """
            
            
            .. attribute:: asic_name  (key)
            
            	
            	**type**\: str
            
            .. attribute:: instance
            
            	
            	**type**\: list of  		 :py:class:`Instance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Set.Controller.Asic.Instance>`
            
            

            """

            _prefix = 'calvados_controllers'
            _revision = '2017-01-31'

            def __init__(self):
                super(Set.Controller.Asic, self).__init__()

                self.yang_name = "asic"
                self.yang_parent_name = "controller"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['asic_name']
                self._child_classes = OrderedDict([("instance", ("instance", Set.Controller.Asic.Instance))])
                self._leafs = OrderedDict([
                    ('asic_name', YLeaf(YType.str, 'asic-name')),
                ])
                self.asic_name = None

                self.instance = YList(self)
                self._segment_path = lambda: "asic" + "[asic-name='" + str(self.asic_name) + "']"
                self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:set/controller/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Set.Controller.Asic, ['asic_name'], name, value)


            class Instance(Entity):
                """
                
                
                .. attribute:: instance_ids  (key)
                
                	
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: fault_injection
                
                	
                	**type**\:  :py:class:`FaultInjection <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Set.Controller.Asic.Instance.FaultInjection>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Set.Controller.Asic.Instance, self).__init__()

                    self.yang_name = "instance"
                    self.yang_parent_name = "asic"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = ['instance_ids']
                    self._child_classes = OrderedDict([("fault-injection", ("fault_injection", Set.Controller.Asic.Instance.FaultInjection))])
                    self._leafs = OrderedDict([
                        ('instance_ids', YLeaf(YType.uint32, 'instance-ids')),
                    ])
                    self.instance_ids = None

                    self.fault_injection = Set.Controller.Asic.Instance.FaultInjection()
                    self.fault_injection.parent = self
                    self._children_name_map["fault_injection"] = "fault-injection"
                    self._segment_path = lambda: "instance" + "[instance-ids='" + str(self.instance_ids) + "']"

                def __setattr__(self, name, value):
                    self._perform_setattr(Set.Controller.Asic.Instance, ['instance_ids'], name, value)


                class FaultInjection(Entity):
                    """
                    
                    
                    .. attribute:: module
                    
                    	
                    	**type**\: list of  		 :py:class:`Module <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Set.Controller.Asic.Instance.FaultInjection.Module>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Set.Controller.Asic.Instance.FaultInjection, self).__init__()

                        self.yang_name = "fault-injection"
                        self.yang_parent_name = "instance"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("module", ("module", Set.Controller.Asic.Instance.FaultInjection.Module))])
                        self._leafs = OrderedDict()

                        self.module = YList(self)
                        self._segment_path = lambda: "fault-injection"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Set.Controller.Asic.Instance.FaultInjection, [], name, value)


                    class Module(Entity):
                        """
                        
                        
                        .. attribute:: module_name  (key)
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: fault_type
                        
                        	
                        	**type**\:  :py:class:`FaultType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Set.Controller.Asic.Instance.FaultInjection.Module.FaultType>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Set.Controller.Asic.Instance.FaultInjection.Module, self).__init__()

                            self.yang_name = "module"
                            self.yang_parent_name = "fault-injection"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['module_name']
                            self._child_classes = OrderedDict([("fault-type", ("fault_type", Set.Controller.Asic.Instance.FaultInjection.Module.FaultType))])
                            self._leafs = OrderedDict([
                                ('module_name', YLeaf(YType.str, 'module-name')),
                            ])
                            self.module_name = None

                            self.fault_type = Set.Controller.Asic.Instance.FaultInjection.Module.FaultType()
                            self.fault_type.parent = self
                            self._children_name_map["fault_type"] = "fault-type"
                            self._segment_path = lambda: "module" + "[module-name='" + str(self.module_name) + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Set.Controller.Asic.Instance.FaultInjection.Module, ['module_name'], name, value)


                        class FaultType(Entity):
                            """
                            
                            
                            .. attribute:: ecc
                            
                            	
                            	**type**\:  :py:class:`Ecc <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc>`
                            
                            .. attribute:: parity
                            
                            	
                            	**type**\:  :py:class:`Parity <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity>`
                            
                            .. attribute:: other
                            
                            	
                            	**type**\:  :py:class:`Other <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other>`
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType, self).__init__()

                                self.yang_name = "fault-type"
                                self.yang_parent_name = "module"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("ecc", ("ecc", Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc)), ("parity", ("parity", Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity)), ("other", ("other", Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other))])
                                self._leafs = OrderedDict()

                                self.ecc = Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc()
                                self.ecc.parent = self
                                self._children_name_map["ecc"] = "ecc"

                                self.parity = Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity()
                                self.parity.parent = self
                                self._children_name_map["parity"] = "parity"

                                self.other = Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other()
                                self.other.parent = self
                                self._children_name_map["other"] = "other"
                                self._segment_path = lambda: "fault-type"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType, [], name, value)


                            class Ecc(Entity):
                                """
                                
                                
                                .. attribute:: all
                                
                                	
                                	**type**\:  :py:class:`All <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.All>`
                                
                                .. attribute:: block_name_lst
                                
                                	
                                	**type**\: list of  		 :py:class:`BlockNameLst <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.BlockNameLst>`
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc, self).__init__()

                                    self.yang_name = "ecc"
                                    self.yang_parent_name = "fault-type"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([("all", ("all", Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.All)), ("block-name-lst", ("block_name_lst", Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.BlockNameLst))])
                                    self._leafs = OrderedDict()

                                    self.all = Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.All()
                                    self.all.parent = self
                                    self._children_name_map["all"] = "all"

                                    self.block_name_lst = YList(self)
                                    self._segment_path = lambda: "ecc"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc, [], name, value)


                                class All(Entity):
                                    """
                                    
                                    
                                    .. attribute:: threshold
                                    
                                    	
                                    	**type**\: list of  		 :py:class:`Threshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.All.Threshold>`
                                    
                                    .. attribute:: location
                                    
                                    	
                                    	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.All.Location>`
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.All, self).__init__()

                                        self.yang_name = "all"
                                        self.yang_parent_name = "ecc"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("threshold", ("threshold", Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.All.Threshold)), ("location", ("location", Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.All.Location))])
                                        self._leafs = OrderedDict()

                                        self.threshold = YList(self)
                                        self.location = YList(self)
                                        self._segment_path = lambda: "all"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.All, [], name, value)


                                    class Threshold(Entity):
                                        """
                                        
                                        
                                        .. attribute:: num_seconds  (key)
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        	**mandatory**\: True
                                        
                                        .. attribute:: location
                                        
                                        	
                                        	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.All.Threshold.Location>`
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.All.Threshold, self).__init__()

                                            self.yang_name = "threshold"
                                            self.yang_parent_name = "all"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['num_seconds']
                                            self._child_classes = OrderedDict([("location", ("location", Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.All.Threshold.Location))])
                                            self._leafs = OrderedDict([
                                                ('num_seconds', YLeaf(YType.uint32, 'num-seconds')),
                                            ])
                                            self.num_seconds = None

                                            self.location = YList(self)
                                            self._segment_path = lambda: "threshold" + "[num-seconds='" + str(self.num_seconds) + "']"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.All.Threshold, ['num_seconds'], name, value)


                                        class Location(Entity):
                                            """
                                            
                                            
                                            .. attribute:: fit_location_name  (key)
                                            
                                            	
                                            	**type**\: str
                                            
                                            	**pattern:** ((([bB][0\-9])/(([a\-zA\-Z]){2}\\d{1,2}))\|(([fF][0\-3])/(([a\-zA\-Z]){2}\\d{1,2}))\|((0?[0\-9]\|1[1\-5])/((([a\-zA\-Z]){2,3})?\\d{1,2})))(/[cC][pP][uU]0)?
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.All.Threshold.Location, self).__init__()

                                                self.yang_name = "location"
                                                self.yang_parent_name = "threshold"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['fit_location_name']
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('fit_location_name', YLeaf(YType.str, 'fit-location-name')),
                                                ])
                                                self.fit_location_name = None
                                                self._segment_path = lambda: "location" + "[fit-location-name='" + str(self.fit_location_name) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.All.Threshold.Location, ['fit_location_name'], name, value)


                                    class Location(Entity):
                                        """
                                        
                                        
                                        .. attribute:: fit_location_name  (key)
                                        
                                        	
                                        	**type**\: str
                                        
                                        	**pattern:** ((([bB][0\-9])/(([a\-zA\-Z]){2}\\d{1,2}))\|(([fF][0\-3])/(([a\-zA\-Z]){2}\\d{1,2}))\|((0?[0\-9]\|1[1\-5])/((([a\-zA\-Z]){2,3})?\\d{1,2})))(/[cC][pP][uU]0)?
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.All.Location, self).__init__()

                                            self.yang_name = "location"
                                            self.yang_parent_name = "all"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['fit_location_name']
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('fit_location_name', YLeaf(YType.str, 'fit-location-name')),
                                            ])
                                            self.fit_location_name = None
                                            self._segment_path = lambda: "location" + "[fit-location-name='" + str(self.fit_location_name) + "']"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.All.Location, ['fit_location_name'], name, value)


                                class BlockNameLst(Entity):
                                    """
                                    
                                    
                                    .. attribute:: block_name  (key)
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: one
                                    
                                    	
                                    	**type**\:  :py:class:`One <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.BlockNameLst.One>`
                                    
                                    .. attribute:: continuous
                                    
                                    	
                                    	**type**\:  :py:class:`Continuous <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.BlockNameLst.Continuous>`
                                    
                                    .. attribute:: stop
                                    
                                    	
                                    	**type**\:  :py:class:`Stop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.BlockNameLst.Stop>`
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.BlockNameLst, self).__init__()

                                        self.yang_name = "block-name-lst"
                                        self.yang_parent_name = "ecc"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['block_name']
                                        self._child_classes = OrderedDict([("one", ("one", Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.BlockNameLst.One)), ("continuous", ("continuous", Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.BlockNameLst.Continuous)), ("stop", ("stop", Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.BlockNameLst.Stop))])
                                        self._leafs = OrderedDict([
                                            ('block_name', YLeaf(YType.str, 'block-name')),
                                        ])
                                        self.block_name = None

                                        self.one = Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.BlockNameLst.One()
                                        self.one.parent = self
                                        self._children_name_map["one"] = "one"

                                        self.continuous = Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.BlockNameLst.Continuous()
                                        self.continuous.parent = self
                                        self._children_name_map["continuous"] = "continuous"

                                        self.stop = Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.BlockNameLst.Stop()
                                        self.stop.parent = self
                                        self._children_name_map["stop"] = "stop"
                                        self._segment_path = lambda: "block-name-lst" + "[block-name='" + str(self.block_name) + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.BlockNameLst, ['block_name'], name, value)


                                    class One(Entity):
                                        """
                                        
                                        
                                        .. attribute:: rate
                                        
                                        	
                                        	**type**\:  :py:class:`Rate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.BlockNameLst.One.Rate>`
                                        
                                        .. attribute:: location
                                        
                                        	
                                        	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.BlockNameLst.One.Location>`
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.BlockNameLst.One, self).__init__()

                                            self.yang_name = "one"
                                            self.yang_parent_name = "block-name-lst"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("rate", ("rate", Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.BlockNameLst.One.Rate)), ("location", ("location", Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.BlockNameLst.One.Location))])
                                            self._leafs = OrderedDict()

                                            self.rate = Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.BlockNameLst.One.Rate()
                                            self.rate.parent = self
                                            self._children_name_map["rate"] = "rate"

                                            self.location = YList(self)
                                            self._segment_path = lambda: "one"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.BlockNameLst.One, [], name, value)


                                        class Rate(Entity):
                                            """
                                            
                                            
                                            .. attribute:: error_number
                                            
                                            	
                                            	**type**\: list of  		 :py:class:`ErrorNumber <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.BlockNameLst.One.Rate.ErrorNumber>`
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.BlockNameLst.One.Rate, self).__init__()

                                                self.yang_name = "rate"
                                                self.yang_parent_name = "one"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([("error-number", ("error_number", Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.BlockNameLst.One.Rate.ErrorNumber))])
                                                self._leafs = OrderedDict()

                                                self.error_number = YList(self)
                                                self._segment_path = lambda: "rate"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.BlockNameLst.One.Rate, [], name, value)


                                            class ErrorNumber(Entity):
                                                """
                                                
                                                
                                                .. attribute:: num_errs  (key)
                                                
                                                	
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: duration
                                                
                                                	
                                                	**type**\: list of  		 :py:class:`Duration <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.BlockNameLst.One.Rate.ErrorNumber.Duration>`
                                                
                                                

                                                """

                                                _prefix = 'calvados_controllers'
                                                _revision = '2017-01-31'

                                                def __init__(self):
                                                    super(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.BlockNameLst.One.Rate.ErrorNumber, self).__init__()

                                                    self.yang_name = "error-number"
                                                    self.yang_parent_name = "rate"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['num_errs']
                                                    self._child_classes = OrderedDict([("duration", ("duration", Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.BlockNameLst.One.Rate.ErrorNumber.Duration))])
                                                    self._leafs = OrderedDict([
                                                        ('num_errs', YLeaf(YType.uint32, 'num-errs')),
                                                    ])
                                                    self.num_errs = None

                                                    self.duration = YList(self)
                                                    self._segment_path = lambda: "error-number" + "[num-errs='" + str(self.num_errs) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.BlockNameLst.One.Rate.ErrorNumber, ['num_errs'], name, value)


                                                class Duration(Entity):
                                                    """
                                                    
                                                    
                                                    .. attribute:: num_seconds  (key)
                                                    
                                                    	
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: location
                                                    
                                                    	
                                                    	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.BlockNameLst.One.Rate.ErrorNumber.Duration.Location>`
                                                    
                                                    

                                                    """

                                                    _prefix = 'calvados_controllers'
                                                    _revision = '2017-01-31'

                                                    def __init__(self):
                                                        super(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.BlockNameLst.One.Rate.ErrorNumber.Duration, self).__init__()

                                                        self.yang_name = "duration"
                                                        self.yang_parent_name = "error-number"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = ['num_seconds']
                                                        self._child_classes = OrderedDict([("location", ("location", Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.BlockNameLst.One.Rate.ErrorNumber.Duration.Location))])
                                                        self._leafs = OrderedDict([
                                                            ('num_seconds', YLeaf(YType.uint32, 'num-seconds')),
                                                        ])
                                                        self.num_seconds = None

                                                        self.location = YList(self)
                                                        self._segment_path = lambda: "duration" + "[num-seconds='" + str(self.num_seconds) + "']"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.BlockNameLst.One.Rate.ErrorNumber.Duration, ['num_seconds'], name, value)


                                                    class Location(Entity):
                                                        """
                                                        
                                                        
                                                        .. attribute:: fit_location_name  (key)
                                                        
                                                        	
                                                        	**type**\: str
                                                        
                                                        	**pattern:** ((([bB][0\-9])/(([a\-zA\-Z]){2}\\d{1,2}))\|(([fF][0\-3])/(([a\-zA\-Z]){2}\\d{1,2}))\|((0?[0\-9]\|1[1\-5])/((([a\-zA\-Z]){2,3})?\\d{1,2})))(/[cC][pP][uU]0)?
                                                        
                                                        

                                                        """

                                                        _prefix = 'calvados_controllers'
                                                        _revision = '2017-01-31'

                                                        def __init__(self):
                                                            super(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.BlockNameLst.One.Rate.ErrorNumber.Duration.Location, self).__init__()

                                                            self.yang_name = "location"
                                                            self.yang_parent_name = "duration"
                                                            self.is_top_level_class = False
                                                            self.has_list_ancestor = True
                                                            self.ylist_key_names = ['fit_location_name']
                                                            self._child_classes = OrderedDict([])
                                                            self._leafs = OrderedDict([
                                                                ('fit_location_name', YLeaf(YType.str, 'fit-location-name')),
                                                            ])
                                                            self.fit_location_name = None
                                                            self._segment_path = lambda: "location" + "[fit-location-name='" + str(self.fit_location_name) + "']"

                                                        def __setattr__(self, name, value):
                                                            self._perform_setattr(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.BlockNameLst.One.Rate.ErrorNumber.Duration.Location, ['fit_location_name'], name, value)


                                        class Location(Entity):
                                            """
                                            
                                            
                                            .. attribute:: fit_location_name  (key)
                                            
                                            	
                                            	**type**\: str
                                            
                                            	**pattern:** ((([bB][0\-9])/(([a\-zA\-Z]){2}\\d{1,2}))\|(([fF][0\-3])/(([a\-zA\-Z]){2}\\d{1,2}))\|((0?[0\-9]\|1[1\-5])/((([a\-zA\-Z]){2,3})?\\d{1,2})))(/[cC][pP][uU]0)?
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.BlockNameLst.One.Location, self).__init__()

                                                self.yang_name = "location"
                                                self.yang_parent_name = "one"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['fit_location_name']
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('fit_location_name', YLeaf(YType.str, 'fit-location-name')),
                                                ])
                                                self.fit_location_name = None
                                                self._segment_path = lambda: "location" + "[fit-location-name='" + str(self.fit_location_name) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.BlockNameLst.One.Location, ['fit_location_name'], name, value)


                                    class Continuous(Entity):
                                        """
                                        
                                        
                                        .. attribute:: rate
                                        
                                        	
                                        	**type**\:  :py:class:`Rate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.BlockNameLst.Continuous.Rate>`
                                        
                                        .. attribute:: location
                                        
                                        	
                                        	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.BlockNameLst.Continuous.Location>`
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.BlockNameLst.Continuous, self).__init__()

                                            self.yang_name = "continuous"
                                            self.yang_parent_name = "block-name-lst"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("rate", ("rate", Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.BlockNameLst.Continuous.Rate)), ("location", ("location", Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.BlockNameLst.Continuous.Location))])
                                            self._leafs = OrderedDict()

                                            self.rate = Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.BlockNameLst.Continuous.Rate()
                                            self.rate.parent = self
                                            self._children_name_map["rate"] = "rate"

                                            self.location = YList(self)
                                            self._segment_path = lambda: "continuous"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.BlockNameLst.Continuous, [], name, value)


                                        class Rate(Entity):
                                            """
                                            
                                            
                                            .. attribute:: error_number
                                            
                                            	
                                            	**type**\: list of  		 :py:class:`ErrorNumber <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.BlockNameLst.Continuous.Rate.ErrorNumber>`
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.BlockNameLst.Continuous.Rate, self).__init__()

                                                self.yang_name = "rate"
                                                self.yang_parent_name = "continuous"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([("error-number", ("error_number", Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.BlockNameLst.Continuous.Rate.ErrorNumber))])
                                                self._leafs = OrderedDict()

                                                self.error_number = YList(self)
                                                self._segment_path = lambda: "rate"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.BlockNameLst.Continuous.Rate, [], name, value)


                                            class ErrorNumber(Entity):
                                                """
                                                
                                                
                                                .. attribute:: num_errs  (key)
                                                
                                                	
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: duration
                                                
                                                	
                                                	**type**\: list of  		 :py:class:`Duration <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.BlockNameLst.Continuous.Rate.ErrorNumber.Duration>`
                                                
                                                

                                                """

                                                _prefix = 'calvados_controllers'
                                                _revision = '2017-01-31'

                                                def __init__(self):
                                                    super(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.BlockNameLst.Continuous.Rate.ErrorNumber, self).__init__()

                                                    self.yang_name = "error-number"
                                                    self.yang_parent_name = "rate"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['num_errs']
                                                    self._child_classes = OrderedDict([("duration", ("duration", Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.BlockNameLst.Continuous.Rate.ErrorNumber.Duration))])
                                                    self._leafs = OrderedDict([
                                                        ('num_errs', YLeaf(YType.uint32, 'num-errs')),
                                                    ])
                                                    self.num_errs = None

                                                    self.duration = YList(self)
                                                    self._segment_path = lambda: "error-number" + "[num-errs='" + str(self.num_errs) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.BlockNameLst.Continuous.Rate.ErrorNumber, ['num_errs'], name, value)


                                                class Duration(Entity):
                                                    """
                                                    
                                                    
                                                    .. attribute:: num_seconds  (key)
                                                    
                                                    	
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: location
                                                    
                                                    	
                                                    	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.BlockNameLst.Continuous.Rate.ErrorNumber.Duration.Location>`
                                                    
                                                    

                                                    """

                                                    _prefix = 'calvados_controllers'
                                                    _revision = '2017-01-31'

                                                    def __init__(self):
                                                        super(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.BlockNameLst.Continuous.Rate.ErrorNumber.Duration, self).__init__()

                                                        self.yang_name = "duration"
                                                        self.yang_parent_name = "error-number"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = ['num_seconds']
                                                        self._child_classes = OrderedDict([("location", ("location", Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.BlockNameLst.Continuous.Rate.ErrorNumber.Duration.Location))])
                                                        self._leafs = OrderedDict([
                                                            ('num_seconds', YLeaf(YType.uint32, 'num-seconds')),
                                                        ])
                                                        self.num_seconds = None

                                                        self.location = YList(self)
                                                        self._segment_path = lambda: "duration" + "[num-seconds='" + str(self.num_seconds) + "']"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.BlockNameLst.Continuous.Rate.ErrorNumber.Duration, ['num_seconds'], name, value)


                                                    class Location(Entity):
                                                        """
                                                        
                                                        
                                                        .. attribute:: fit_location_name  (key)
                                                        
                                                        	
                                                        	**type**\: str
                                                        
                                                        	**pattern:** ((([bB][0\-9])/(([a\-zA\-Z]){2}\\d{1,2}))\|(([fF][0\-3])/(([a\-zA\-Z]){2}\\d{1,2}))\|((0?[0\-9]\|1[1\-5])/((([a\-zA\-Z]){2,3})?\\d{1,2})))(/[cC][pP][uU]0)?
                                                        
                                                        

                                                        """

                                                        _prefix = 'calvados_controllers'
                                                        _revision = '2017-01-31'

                                                        def __init__(self):
                                                            super(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.BlockNameLst.Continuous.Rate.ErrorNumber.Duration.Location, self).__init__()

                                                            self.yang_name = "location"
                                                            self.yang_parent_name = "duration"
                                                            self.is_top_level_class = False
                                                            self.has_list_ancestor = True
                                                            self.ylist_key_names = ['fit_location_name']
                                                            self._child_classes = OrderedDict([])
                                                            self._leafs = OrderedDict([
                                                                ('fit_location_name', YLeaf(YType.str, 'fit-location-name')),
                                                            ])
                                                            self.fit_location_name = None
                                                            self._segment_path = lambda: "location" + "[fit-location-name='" + str(self.fit_location_name) + "']"

                                                        def __setattr__(self, name, value):
                                                            self._perform_setattr(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.BlockNameLst.Continuous.Rate.ErrorNumber.Duration.Location, ['fit_location_name'], name, value)


                                        class Location(Entity):
                                            """
                                            
                                            
                                            .. attribute:: fit_location_name  (key)
                                            
                                            	
                                            	**type**\: str
                                            
                                            	**pattern:** ((([bB][0\-9])/(([a\-zA\-Z]){2}\\d{1,2}))\|(([fF][0\-3])/(([a\-zA\-Z]){2}\\d{1,2}))\|((0?[0\-9]\|1[1\-5])/((([a\-zA\-Z]){2,3})?\\d{1,2})))(/[cC][pP][uU]0)?
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.BlockNameLst.Continuous.Location, self).__init__()

                                                self.yang_name = "location"
                                                self.yang_parent_name = "continuous"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['fit_location_name']
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('fit_location_name', YLeaf(YType.str, 'fit-location-name')),
                                                ])
                                                self.fit_location_name = None
                                                self._segment_path = lambda: "location" + "[fit-location-name='" + str(self.fit_location_name) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.BlockNameLst.Continuous.Location, ['fit_location_name'], name, value)


                                    class Stop(Entity):
                                        """
                                        
                                        
                                        .. attribute:: location
                                        
                                        	
                                        	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.BlockNameLst.Stop.Location>`
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.BlockNameLst.Stop, self).__init__()

                                            self.yang_name = "stop"
                                            self.yang_parent_name = "block-name-lst"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("location", ("location", Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.BlockNameLst.Stop.Location))])
                                            self._leafs = OrderedDict()

                                            self.location = YList(self)
                                            self._segment_path = lambda: "stop"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.BlockNameLst.Stop, [], name, value)


                                        class Location(Entity):
                                            """
                                            
                                            
                                            .. attribute:: fit_location_name  (key)
                                            
                                            	
                                            	**type**\: str
                                            
                                            	**pattern:** ((([bB][0\-9])/(([a\-zA\-Z]){2}\\d{1,2}))\|(([fF][0\-3])/(([a\-zA\-Z]){2}\\d{1,2}))\|((0?[0\-9]\|1[1\-5])/((([a\-zA\-Z]){2,3})?\\d{1,2})))(/[cC][pP][uU]0)?
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.BlockNameLst.Stop.Location, self).__init__()

                                                self.yang_name = "location"
                                                self.yang_parent_name = "stop"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['fit_location_name']
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('fit_location_name', YLeaf(YType.str, 'fit-location-name')),
                                                ])
                                                self.fit_location_name = None
                                                self._segment_path = lambda: "location" + "[fit-location-name='" + str(self.fit_location_name) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Ecc.BlockNameLst.Stop.Location, ['fit_location_name'], name, value)


                            class Parity(Entity):
                                """
                                
                                
                                .. attribute:: all
                                
                                	
                                	**type**\:  :py:class:`All <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.All>`
                                
                                .. attribute:: block_name_lst
                                
                                	
                                	**type**\: list of  		 :py:class:`BlockNameLst <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.BlockNameLst>`
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity, self).__init__()

                                    self.yang_name = "parity"
                                    self.yang_parent_name = "fault-type"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([("all", ("all", Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.All)), ("block-name-lst", ("block_name_lst", Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.BlockNameLst))])
                                    self._leafs = OrderedDict()

                                    self.all = Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.All()
                                    self.all.parent = self
                                    self._children_name_map["all"] = "all"

                                    self.block_name_lst = YList(self)
                                    self._segment_path = lambda: "parity"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity, [], name, value)


                                class All(Entity):
                                    """
                                    
                                    
                                    .. attribute:: threshold
                                    
                                    	
                                    	**type**\: list of  		 :py:class:`Threshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.All.Threshold>`
                                    
                                    .. attribute:: location
                                    
                                    	
                                    	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.All.Location>`
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.All, self).__init__()

                                        self.yang_name = "all"
                                        self.yang_parent_name = "parity"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("threshold", ("threshold", Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.All.Threshold)), ("location", ("location", Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.All.Location))])
                                        self._leafs = OrderedDict()

                                        self.threshold = YList(self)
                                        self.location = YList(self)
                                        self._segment_path = lambda: "all"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.All, [], name, value)


                                    class Threshold(Entity):
                                        """
                                        
                                        
                                        .. attribute:: num_seconds  (key)
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        	**mandatory**\: True
                                        
                                        .. attribute:: location
                                        
                                        	
                                        	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.All.Threshold.Location>`
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.All.Threshold, self).__init__()

                                            self.yang_name = "threshold"
                                            self.yang_parent_name = "all"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['num_seconds']
                                            self._child_classes = OrderedDict([("location", ("location", Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.All.Threshold.Location))])
                                            self._leafs = OrderedDict([
                                                ('num_seconds', YLeaf(YType.uint32, 'num-seconds')),
                                            ])
                                            self.num_seconds = None

                                            self.location = YList(self)
                                            self._segment_path = lambda: "threshold" + "[num-seconds='" + str(self.num_seconds) + "']"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.All.Threshold, ['num_seconds'], name, value)


                                        class Location(Entity):
                                            """
                                            
                                            
                                            .. attribute:: fit_location_name  (key)
                                            
                                            	
                                            	**type**\: str
                                            
                                            	**pattern:** ((([bB][0\-9])/(([a\-zA\-Z]){2}\\d{1,2}))\|(([fF][0\-3])/(([a\-zA\-Z]){2}\\d{1,2}))\|((0?[0\-9]\|1[1\-5])/((([a\-zA\-Z]){2,3})?\\d{1,2})))(/[cC][pP][uU]0)?
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.All.Threshold.Location, self).__init__()

                                                self.yang_name = "location"
                                                self.yang_parent_name = "threshold"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['fit_location_name']
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('fit_location_name', YLeaf(YType.str, 'fit-location-name')),
                                                ])
                                                self.fit_location_name = None
                                                self._segment_path = lambda: "location" + "[fit-location-name='" + str(self.fit_location_name) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.All.Threshold.Location, ['fit_location_name'], name, value)


                                    class Location(Entity):
                                        """
                                        
                                        
                                        .. attribute:: fit_location_name  (key)
                                        
                                        	
                                        	**type**\: str
                                        
                                        	**pattern:** ((([bB][0\-9])/(([a\-zA\-Z]){2}\\d{1,2}))\|(([fF][0\-3])/(([a\-zA\-Z]){2}\\d{1,2}))\|((0?[0\-9]\|1[1\-5])/((([a\-zA\-Z]){2,3})?\\d{1,2})))(/[cC][pP][uU]0)?
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.All.Location, self).__init__()

                                            self.yang_name = "location"
                                            self.yang_parent_name = "all"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['fit_location_name']
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('fit_location_name', YLeaf(YType.str, 'fit-location-name')),
                                            ])
                                            self.fit_location_name = None
                                            self._segment_path = lambda: "location" + "[fit-location-name='" + str(self.fit_location_name) + "']"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.All.Location, ['fit_location_name'], name, value)


                                class BlockNameLst(Entity):
                                    """
                                    
                                    
                                    .. attribute:: block_name  (key)
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: one
                                    
                                    	
                                    	**type**\:  :py:class:`One <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.BlockNameLst.One>`
                                    
                                    .. attribute:: continuous
                                    
                                    	
                                    	**type**\:  :py:class:`Continuous <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.BlockNameLst.Continuous>`
                                    
                                    .. attribute:: stop
                                    
                                    	
                                    	**type**\:  :py:class:`Stop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.BlockNameLst.Stop>`
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.BlockNameLst, self).__init__()

                                        self.yang_name = "block-name-lst"
                                        self.yang_parent_name = "parity"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['block_name']
                                        self._child_classes = OrderedDict([("one", ("one", Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.BlockNameLst.One)), ("continuous", ("continuous", Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.BlockNameLst.Continuous)), ("stop", ("stop", Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.BlockNameLst.Stop))])
                                        self._leafs = OrderedDict([
                                            ('block_name', YLeaf(YType.str, 'block-name')),
                                        ])
                                        self.block_name = None

                                        self.one = Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.BlockNameLst.One()
                                        self.one.parent = self
                                        self._children_name_map["one"] = "one"

                                        self.continuous = Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.BlockNameLst.Continuous()
                                        self.continuous.parent = self
                                        self._children_name_map["continuous"] = "continuous"

                                        self.stop = Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.BlockNameLst.Stop()
                                        self.stop.parent = self
                                        self._children_name_map["stop"] = "stop"
                                        self._segment_path = lambda: "block-name-lst" + "[block-name='" + str(self.block_name) + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.BlockNameLst, ['block_name'], name, value)


                                    class One(Entity):
                                        """
                                        
                                        
                                        .. attribute:: rate
                                        
                                        	
                                        	**type**\:  :py:class:`Rate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.BlockNameLst.One.Rate>`
                                        
                                        .. attribute:: location
                                        
                                        	
                                        	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.BlockNameLst.One.Location>`
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.BlockNameLst.One, self).__init__()

                                            self.yang_name = "one"
                                            self.yang_parent_name = "block-name-lst"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("rate", ("rate", Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.BlockNameLst.One.Rate)), ("location", ("location", Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.BlockNameLst.One.Location))])
                                            self._leafs = OrderedDict()

                                            self.rate = Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.BlockNameLst.One.Rate()
                                            self.rate.parent = self
                                            self._children_name_map["rate"] = "rate"

                                            self.location = YList(self)
                                            self._segment_path = lambda: "one"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.BlockNameLst.One, [], name, value)


                                        class Rate(Entity):
                                            """
                                            
                                            
                                            .. attribute:: error_number
                                            
                                            	
                                            	**type**\: list of  		 :py:class:`ErrorNumber <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.BlockNameLst.One.Rate.ErrorNumber>`
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.BlockNameLst.One.Rate, self).__init__()

                                                self.yang_name = "rate"
                                                self.yang_parent_name = "one"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([("error-number", ("error_number", Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.BlockNameLst.One.Rate.ErrorNumber))])
                                                self._leafs = OrderedDict()

                                                self.error_number = YList(self)
                                                self._segment_path = lambda: "rate"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.BlockNameLst.One.Rate, [], name, value)


                                            class ErrorNumber(Entity):
                                                """
                                                
                                                
                                                .. attribute:: num_errs  (key)
                                                
                                                	
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: duration
                                                
                                                	
                                                	**type**\: list of  		 :py:class:`Duration <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.BlockNameLst.One.Rate.ErrorNumber.Duration>`
                                                
                                                

                                                """

                                                _prefix = 'calvados_controllers'
                                                _revision = '2017-01-31'

                                                def __init__(self):
                                                    super(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.BlockNameLst.One.Rate.ErrorNumber, self).__init__()

                                                    self.yang_name = "error-number"
                                                    self.yang_parent_name = "rate"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['num_errs']
                                                    self._child_classes = OrderedDict([("duration", ("duration", Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.BlockNameLst.One.Rate.ErrorNumber.Duration))])
                                                    self._leafs = OrderedDict([
                                                        ('num_errs', YLeaf(YType.uint32, 'num-errs')),
                                                    ])
                                                    self.num_errs = None

                                                    self.duration = YList(self)
                                                    self._segment_path = lambda: "error-number" + "[num-errs='" + str(self.num_errs) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.BlockNameLst.One.Rate.ErrorNumber, ['num_errs'], name, value)


                                                class Duration(Entity):
                                                    """
                                                    
                                                    
                                                    .. attribute:: num_seconds  (key)
                                                    
                                                    	
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: location
                                                    
                                                    	
                                                    	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.BlockNameLst.One.Rate.ErrorNumber.Duration.Location>`
                                                    
                                                    

                                                    """

                                                    _prefix = 'calvados_controllers'
                                                    _revision = '2017-01-31'

                                                    def __init__(self):
                                                        super(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.BlockNameLst.One.Rate.ErrorNumber.Duration, self).__init__()

                                                        self.yang_name = "duration"
                                                        self.yang_parent_name = "error-number"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = ['num_seconds']
                                                        self._child_classes = OrderedDict([("location", ("location", Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.BlockNameLst.One.Rate.ErrorNumber.Duration.Location))])
                                                        self._leafs = OrderedDict([
                                                            ('num_seconds', YLeaf(YType.uint32, 'num-seconds')),
                                                        ])
                                                        self.num_seconds = None

                                                        self.location = YList(self)
                                                        self._segment_path = lambda: "duration" + "[num-seconds='" + str(self.num_seconds) + "']"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.BlockNameLst.One.Rate.ErrorNumber.Duration, ['num_seconds'], name, value)


                                                    class Location(Entity):
                                                        """
                                                        
                                                        
                                                        .. attribute:: fit_location_name  (key)
                                                        
                                                        	
                                                        	**type**\: str
                                                        
                                                        	**pattern:** ((([bB][0\-9])/(([a\-zA\-Z]){2}\\d{1,2}))\|(([fF][0\-3])/(([a\-zA\-Z]){2}\\d{1,2}))\|((0?[0\-9]\|1[1\-5])/((([a\-zA\-Z]){2,3})?\\d{1,2})))(/[cC][pP][uU]0)?
                                                        
                                                        

                                                        """

                                                        _prefix = 'calvados_controllers'
                                                        _revision = '2017-01-31'

                                                        def __init__(self):
                                                            super(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.BlockNameLst.One.Rate.ErrorNumber.Duration.Location, self).__init__()

                                                            self.yang_name = "location"
                                                            self.yang_parent_name = "duration"
                                                            self.is_top_level_class = False
                                                            self.has_list_ancestor = True
                                                            self.ylist_key_names = ['fit_location_name']
                                                            self._child_classes = OrderedDict([])
                                                            self._leafs = OrderedDict([
                                                                ('fit_location_name', YLeaf(YType.str, 'fit-location-name')),
                                                            ])
                                                            self.fit_location_name = None
                                                            self._segment_path = lambda: "location" + "[fit-location-name='" + str(self.fit_location_name) + "']"

                                                        def __setattr__(self, name, value):
                                                            self._perform_setattr(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.BlockNameLst.One.Rate.ErrorNumber.Duration.Location, ['fit_location_name'], name, value)


                                        class Location(Entity):
                                            """
                                            
                                            
                                            .. attribute:: fit_location_name  (key)
                                            
                                            	
                                            	**type**\: str
                                            
                                            	**pattern:** ((([bB][0\-9])/(([a\-zA\-Z]){2}\\d{1,2}))\|(([fF][0\-3])/(([a\-zA\-Z]){2}\\d{1,2}))\|((0?[0\-9]\|1[1\-5])/((([a\-zA\-Z]){2,3})?\\d{1,2})))(/[cC][pP][uU]0)?
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.BlockNameLst.One.Location, self).__init__()

                                                self.yang_name = "location"
                                                self.yang_parent_name = "one"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['fit_location_name']
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('fit_location_name', YLeaf(YType.str, 'fit-location-name')),
                                                ])
                                                self.fit_location_name = None
                                                self._segment_path = lambda: "location" + "[fit-location-name='" + str(self.fit_location_name) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.BlockNameLst.One.Location, ['fit_location_name'], name, value)


                                    class Continuous(Entity):
                                        """
                                        
                                        
                                        .. attribute:: rate
                                        
                                        	
                                        	**type**\:  :py:class:`Rate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.BlockNameLst.Continuous.Rate>`
                                        
                                        .. attribute:: location
                                        
                                        	
                                        	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.BlockNameLst.Continuous.Location>`
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.BlockNameLst.Continuous, self).__init__()

                                            self.yang_name = "continuous"
                                            self.yang_parent_name = "block-name-lst"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("rate", ("rate", Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.BlockNameLst.Continuous.Rate)), ("location", ("location", Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.BlockNameLst.Continuous.Location))])
                                            self._leafs = OrderedDict()

                                            self.rate = Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.BlockNameLst.Continuous.Rate()
                                            self.rate.parent = self
                                            self._children_name_map["rate"] = "rate"

                                            self.location = YList(self)
                                            self._segment_path = lambda: "continuous"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.BlockNameLst.Continuous, [], name, value)


                                        class Rate(Entity):
                                            """
                                            
                                            
                                            .. attribute:: error_number
                                            
                                            	
                                            	**type**\: list of  		 :py:class:`ErrorNumber <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.BlockNameLst.Continuous.Rate.ErrorNumber>`
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.BlockNameLst.Continuous.Rate, self).__init__()

                                                self.yang_name = "rate"
                                                self.yang_parent_name = "continuous"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([("error-number", ("error_number", Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.BlockNameLst.Continuous.Rate.ErrorNumber))])
                                                self._leafs = OrderedDict()

                                                self.error_number = YList(self)
                                                self._segment_path = lambda: "rate"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.BlockNameLst.Continuous.Rate, [], name, value)


                                            class ErrorNumber(Entity):
                                                """
                                                
                                                
                                                .. attribute:: num_errs  (key)
                                                
                                                	
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: duration
                                                
                                                	
                                                	**type**\: list of  		 :py:class:`Duration <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.BlockNameLst.Continuous.Rate.ErrorNumber.Duration>`
                                                
                                                

                                                """

                                                _prefix = 'calvados_controllers'
                                                _revision = '2017-01-31'

                                                def __init__(self):
                                                    super(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.BlockNameLst.Continuous.Rate.ErrorNumber, self).__init__()

                                                    self.yang_name = "error-number"
                                                    self.yang_parent_name = "rate"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['num_errs']
                                                    self._child_classes = OrderedDict([("duration", ("duration", Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.BlockNameLst.Continuous.Rate.ErrorNumber.Duration))])
                                                    self._leafs = OrderedDict([
                                                        ('num_errs', YLeaf(YType.uint32, 'num-errs')),
                                                    ])
                                                    self.num_errs = None

                                                    self.duration = YList(self)
                                                    self._segment_path = lambda: "error-number" + "[num-errs='" + str(self.num_errs) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.BlockNameLst.Continuous.Rate.ErrorNumber, ['num_errs'], name, value)


                                                class Duration(Entity):
                                                    """
                                                    
                                                    
                                                    .. attribute:: num_seconds  (key)
                                                    
                                                    	
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: location
                                                    
                                                    	
                                                    	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.BlockNameLst.Continuous.Rate.ErrorNumber.Duration.Location>`
                                                    
                                                    

                                                    """

                                                    _prefix = 'calvados_controllers'
                                                    _revision = '2017-01-31'

                                                    def __init__(self):
                                                        super(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.BlockNameLst.Continuous.Rate.ErrorNumber.Duration, self).__init__()

                                                        self.yang_name = "duration"
                                                        self.yang_parent_name = "error-number"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = ['num_seconds']
                                                        self._child_classes = OrderedDict([("location", ("location", Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.BlockNameLst.Continuous.Rate.ErrorNumber.Duration.Location))])
                                                        self._leafs = OrderedDict([
                                                            ('num_seconds', YLeaf(YType.uint32, 'num-seconds')),
                                                        ])
                                                        self.num_seconds = None

                                                        self.location = YList(self)
                                                        self._segment_path = lambda: "duration" + "[num-seconds='" + str(self.num_seconds) + "']"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.BlockNameLst.Continuous.Rate.ErrorNumber.Duration, ['num_seconds'], name, value)


                                                    class Location(Entity):
                                                        """
                                                        
                                                        
                                                        .. attribute:: fit_location_name  (key)
                                                        
                                                        	
                                                        	**type**\: str
                                                        
                                                        	**pattern:** ((([bB][0\-9])/(([a\-zA\-Z]){2}\\d{1,2}))\|(([fF][0\-3])/(([a\-zA\-Z]){2}\\d{1,2}))\|((0?[0\-9]\|1[1\-5])/((([a\-zA\-Z]){2,3})?\\d{1,2})))(/[cC][pP][uU]0)?
                                                        
                                                        

                                                        """

                                                        _prefix = 'calvados_controllers'
                                                        _revision = '2017-01-31'

                                                        def __init__(self):
                                                            super(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.BlockNameLst.Continuous.Rate.ErrorNumber.Duration.Location, self).__init__()

                                                            self.yang_name = "location"
                                                            self.yang_parent_name = "duration"
                                                            self.is_top_level_class = False
                                                            self.has_list_ancestor = True
                                                            self.ylist_key_names = ['fit_location_name']
                                                            self._child_classes = OrderedDict([])
                                                            self._leafs = OrderedDict([
                                                                ('fit_location_name', YLeaf(YType.str, 'fit-location-name')),
                                                            ])
                                                            self.fit_location_name = None
                                                            self._segment_path = lambda: "location" + "[fit-location-name='" + str(self.fit_location_name) + "']"

                                                        def __setattr__(self, name, value):
                                                            self._perform_setattr(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.BlockNameLst.Continuous.Rate.ErrorNumber.Duration.Location, ['fit_location_name'], name, value)


                                        class Location(Entity):
                                            """
                                            
                                            
                                            .. attribute:: fit_location_name  (key)
                                            
                                            	
                                            	**type**\: str
                                            
                                            	**pattern:** ((([bB][0\-9])/(([a\-zA\-Z]){2}\\d{1,2}))\|(([fF][0\-3])/(([a\-zA\-Z]){2}\\d{1,2}))\|((0?[0\-9]\|1[1\-5])/((([a\-zA\-Z]){2,3})?\\d{1,2})))(/[cC][pP][uU]0)?
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.BlockNameLst.Continuous.Location, self).__init__()

                                                self.yang_name = "location"
                                                self.yang_parent_name = "continuous"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['fit_location_name']
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('fit_location_name', YLeaf(YType.str, 'fit-location-name')),
                                                ])
                                                self.fit_location_name = None
                                                self._segment_path = lambda: "location" + "[fit-location-name='" + str(self.fit_location_name) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.BlockNameLst.Continuous.Location, ['fit_location_name'], name, value)


                                    class Stop(Entity):
                                        """
                                        
                                        
                                        .. attribute:: location
                                        
                                        	
                                        	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.BlockNameLst.Stop.Location>`
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.BlockNameLst.Stop, self).__init__()

                                            self.yang_name = "stop"
                                            self.yang_parent_name = "block-name-lst"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("location", ("location", Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.BlockNameLst.Stop.Location))])
                                            self._leafs = OrderedDict()

                                            self.location = YList(self)
                                            self._segment_path = lambda: "stop"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.BlockNameLst.Stop, [], name, value)


                                        class Location(Entity):
                                            """
                                            
                                            
                                            .. attribute:: fit_location_name  (key)
                                            
                                            	
                                            	**type**\: str
                                            
                                            	**pattern:** ((([bB][0\-9])/(([a\-zA\-Z]){2}\\d{1,2}))\|(([fF][0\-3])/(([a\-zA\-Z]){2}\\d{1,2}))\|((0?[0\-9]\|1[1\-5])/((([a\-zA\-Z]){2,3})?\\d{1,2})))(/[cC][pP][uU]0)?
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.BlockNameLst.Stop.Location, self).__init__()

                                                self.yang_name = "location"
                                                self.yang_parent_name = "stop"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['fit_location_name']
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('fit_location_name', YLeaf(YType.str, 'fit-location-name')),
                                                ])
                                                self.fit_location_name = None
                                                self._segment_path = lambda: "location" + "[fit-location-name='" + str(self.fit_location_name) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Parity.BlockNameLst.Stop.Location, ['fit_location_name'], name, value)


                            class Other(Entity):
                                """
                                
                                
                                .. attribute:: all
                                
                                	
                                	**type**\:  :py:class:`All <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.All>`
                                
                                .. attribute:: block_name_lst
                                
                                	
                                	**type**\: list of  		 :py:class:`BlockNameLst <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.BlockNameLst>`
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other, self).__init__()

                                    self.yang_name = "other"
                                    self.yang_parent_name = "fault-type"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([("all", ("all", Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.All)), ("block-name-lst", ("block_name_lst", Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.BlockNameLst))])
                                    self._leafs = OrderedDict()

                                    self.all = Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.All()
                                    self.all.parent = self
                                    self._children_name_map["all"] = "all"

                                    self.block_name_lst = YList(self)
                                    self._segment_path = lambda: "other"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other, [], name, value)


                                class All(Entity):
                                    """
                                    
                                    
                                    .. attribute:: threshold
                                    
                                    	
                                    	**type**\: list of  		 :py:class:`Threshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.All.Threshold>`
                                    
                                    .. attribute:: location
                                    
                                    	
                                    	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.All.Location>`
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.All, self).__init__()

                                        self.yang_name = "all"
                                        self.yang_parent_name = "other"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("threshold", ("threshold", Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.All.Threshold)), ("location", ("location", Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.All.Location))])
                                        self._leafs = OrderedDict()

                                        self.threshold = YList(self)
                                        self.location = YList(self)
                                        self._segment_path = lambda: "all"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.All, [], name, value)


                                    class Threshold(Entity):
                                        """
                                        
                                        
                                        .. attribute:: num_seconds  (key)
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        	**mandatory**\: True
                                        
                                        .. attribute:: location
                                        
                                        	
                                        	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.All.Threshold.Location>`
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.All.Threshold, self).__init__()

                                            self.yang_name = "threshold"
                                            self.yang_parent_name = "all"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['num_seconds']
                                            self._child_classes = OrderedDict([("location", ("location", Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.All.Threshold.Location))])
                                            self._leafs = OrderedDict([
                                                ('num_seconds', YLeaf(YType.uint32, 'num-seconds')),
                                            ])
                                            self.num_seconds = None

                                            self.location = YList(self)
                                            self._segment_path = lambda: "threshold" + "[num-seconds='" + str(self.num_seconds) + "']"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.All.Threshold, ['num_seconds'], name, value)


                                        class Location(Entity):
                                            """
                                            
                                            
                                            .. attribute:: fit_location_name  (key)
                                            
                                            	
                                            	**type**\: str
                                            
                                            	**pattern:** ((([bB][0\-9])/(([a\-zA\-Z]){2}\\d{1,2}))\|(([fF][0\-3])/(([a\-zA\-Z]){2}\\d{1,2}))\|((0?[0\-9]\|1[1\-5])/((([a\-zA\-Z]){2,3})?\\d{1,2})))(/[cC][pP][uU]0)?
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.All.Threshold.Location, self).__init__()

                                                self.yang_name = "location"
                                                self.yang_parent_name = "threshold"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['fit_location_name']
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('fit_location_name', YLeaf(YType.str, 'fit-location-name')),
                                                ])
                                                self.fit_location_name = None
                                                self._segment_path = lambda: "location" + "[fit-location-name='" + str(self.fit_location_name) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.All.Threshold.Location, ['fit_location_name'], name, value)


                                    class Location(Entity):
                                        """
                                        
                                        
                                        .. attribute:: fit_location_name  (key)
                                        
                                        	
                                        	**type**\: str
                                        
                                        	**pattern:** ((([bB][0\-9])/(([a\-zA\-Z]){2}\\d{1,2}))\|(([fF][0\-3])/(([a\-zA\-Z]){2}\\d{1,2}))\|((0?[0\-9]\|1[1\-5])/((([a\-zA\-Z]){2,3})?\\d{1,2})))(/[cC][pP][uU]0)?
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.All.Location, self).__init__()

                                            self.yang_name = "location"
                                            self.yang_parent_name = "all"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['fit_location_name']
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('fit_location_name', YLeaf(YType.str, 'fit-location-name')),
                                            ])
                                            self.fit_location_name = None
                                            self._segment_path = lambda: "location" + "[fit-location-name='" + str(self.fit_location_name) + "']"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.All.Location, ['fit_location_name'], name, value)


                                class BlockNameLst(Entity):
                                    """
                                    
                                    
                                    .. attribute:: block_name  (key)
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: one
                                    
                                    	
                                    	**type**\:  :py:class:`One <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.BlockNameLst.One>`
                                    
                                    .. attribute:: continuous
                                    
                                    	
                                    	**type**\:  :py:class:`Continuous <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.BlockNameLst.Continuous>`
                                    
                                    .. attribute:: stop
                                    
                                    	
                                    	**type**\:  :py:class:`Stop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.BlockNameLst.Stop>`
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.BlockNameLst, self).__init__()

                                        self.yang_name = "block-name-lst"
                                        self.yang_parent_name = "other"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['block_name']
                                        self._child_classes = OrderedDict([("one", ("one", Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.BlockNameLst.One)), ("continuous", ("continuous", Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.BlockNameLst.Continuous)), ("stop", ("stop", Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.BlockNameLst.Stop))])
                                        self._leafs = OrderedDict([
                                            ('block_name', YLeaf(YType.str, 'block-name')),
                                        ])
                                        self.block_name = None

                                        self.one = Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.BlockNameLst.One()
                                        self.one.parent = self
                                        self._children_name_map["one"] = "one"

                                        self.continuous = Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.BlockNameLst.Continuous()
                                        self.continuous.parent = self
                                        self._children_name_map["continuous"] = "continuous"

                                        self.stop = Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.BlockNameLst.Stop()
                                        self.stop.parent = self
                                        self._children_name_map["stop"] = "stop"
                                        self._segment_path = lambda: "block-name-lst" + "[block-name='" + str(self.block_name) + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.BlockNameLst, ['block_name'], name, value)


                                    class One(Entity):
                                        """
                                        
                                        
                                        .. attribute:: rate
                                        
                                        	
                                        	**type**\:  :py:class:`Rate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.BlockNameLst.One.Rate>`
                                        
                                        .. attribute:: location
                                        
                                        	
                                        	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.BlockNameLst.One.Location>`
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.BlockNameLst.One, self).__init__()

                                            self.yang_name = "one"
                                            self.yang_parent_name = "block-name-lst"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("rate", ("rate", Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.BlockNameLst.One.Rate)), ("location", ("location", Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.BlockNameLst.One.Location))])
                                            self._leafs = OrderedDict()

                                            self.rate = Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.BlockNameLst.One.Rate()
                                            self.rate.parent = self
                                            self._children_name_map["rate"] = "rate"

                                            self.location = YList(self)
                                            self._segment_path = lambda: "one"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.BlockNameLst.One, [], name, value)


                                        class Rate(Entity):
                                            """
                                            
                                            
                                            .. attribute:: error_number
                                            
                                            	
                                            	**type**\: list of  		 :py:class:`ErrorNumber <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.BlockNameLst.One.Rate.ErrorNumber>`
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.BlockNameLst.One.Rate, self).__init__()

                                                self.yang_name = "rate"
                                                self.yang_parent_name = "one"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([("error-number", ("error_number", Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.BlockNameLst.One.Rate.ErrorNumber))])
                                                self._leafs = OrderedDict()

                                                self.error_number = YList(self)
                                                self._segment_path = lambda: "rate"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.BlockNameLst.One.Rate, [], name, value)


                                            class ErrorNumber(Entity):
                                                """
                                                
                                                
                                                .. attribute:: num_errs  (key)
                                                
                                                	
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: duration
                                                
                                                	
                                                	**type**\: list of  		 :py:class:`Duration <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.BlockNameLst.One.Rate.ErrorNumber.Duration>`
                                                
                                                

                                                """

                                                _prefix = 'calvados_controllers'
                                                _revision = '2017-01-31'

                                                def __init__(self):
                                                    super(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.BlockNameLst.One.Rate.ErrorNumber, self).__init__()

                                                    self.yang_name = "error-number"
                                                    self.yang_parent_name = "rate"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['num_errs']
                                                    self._child_classes = OrderedDict([("duration", ("duration", Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.BlockNameLst.One.Rate.ErrorNumber.Duration))])
                                                    self._leafs = OrderedDict([
                                                        ('num_errs', YLeaf(YType.uint32, 'num-errs')),
                                                    ])
                                                    self.num_errs = None

                                                    self.duration = YList(self)
                                                    self._segment_path = lambda: "error-number" + "[num-errs='" + str(self.num_errs) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.BlockNameLst.One.Rate.ErrorNumber, ['num_errs'], name, value)


                                                class Duration(Entity):
                                                    """
                                                    
                                                    
                                                    .. attribute:: num_seconds  (key)
                                                    
                                                    	
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: location
                                                    
                                                    	
                                                    	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.BlockNameLst.One.Rate.ErrorNumber.Duration.Location>`
                                                    
                                                    

                                                    """

                                                    _prefix = 'calvados_controllers'
                                                    _revision = '2017-01-31'

                                                    def __init__(self):
                                                        super(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.BlockNameLst.One.Rate.ErrorNumber.Duration, self).__init__()

                                                        self.yang_name = "duration"
                                                        self.yang_parent_name = "error-number"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = ['num_seconds']
                                                        self._child_classes = OrderedDict([("location", ("location", Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.BlockNameLst.One.Rate.ErrorNumber.Duration.Location))])
                                                        self._leafs = OrderedDict([
                                                            ('num_seconds', YLeaf(YType.uint32, 'num-seconds')),
                                                        ])
                                                        self.num_seconds = None

                                                        self.location = YList(self)
                                                        self._segment_path = lambda: "duration" + "[num-seconds='" + str(self.num_seconds) + "']"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.BlockNameLst.One.Rate.ErrorNumber.Duration, ['num_seconds'], name, value)


                                                    class Location(Entity):
                                                        """
                                                        
                                                        
                                                        .. attribute:: fit_location_name  (key)
                                                        
                                                        	
                                                        	**type**\: str
                                                        
                                                        	**pattern:** ((([bB][0\-9])/(([a\-zA\-Z]){2}\\d{1,2}))\|(([fF][0\-3])/(([a\-zA\-Z]){2}\\d{1,2}))\|((0?[0\-9]\|1[1\-5])/((([a\-zA\-Z]){2,3})?\\d{1,2})))(/[cC][pP][uU]0)?
                                                        
                                                        

                                                        """

                                                        _prefix = 'calvados_controllers'
                                                        _revision = '2017-01-31'

                                                        def __init__(self):
                                                            super(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.BlockNameLst.One.Rate.ErrorNumber.Duration.Location, self).__init__()

                                                            self.yang_name = "location"
                                                            self.yang_parent_name = "duration"
                                                            self.is_top_level_class = False
                                                            self.has_list_ancestor = True
                                                            self.ylist_key_names = ['fit_location_name']
                                                            self._child_classes = OrderedDict([])
                                                            self._leafs = OrderedDict([
                                                                ('fit_location_name', YLeaf(YType.str, 'fit-location-name')),
                                                            ])
                                                            self.fit_location_name = None
                                                            self._segment_path = lambda: "location" + "[fit-location-name='" + str(self.fit_location_name) + "']"

                                                        def __setattr__(self, name, value):
                                                            self._perform_setattr(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.BlockNameLst.One.Rate.ErrorNumber.Duration.Location, ['fit_location_name'], name, value)


                                        class Location(Entity):
                                            """
                                            
                                            
                                            .. attribute:: fit_location_name  (key)
                                            
                                            	
                                            	**type**\: str
                                            
                                            	**pattern:** ((([bB][0\-9])/(([a\-zA\-Z]){2}\\d{1,2}))\|(([fF][0\-3])/(([a\-zA\-Z]){2}\\d{1,2}))\|((0?[0\-9]\|1[1\-5])/((([a\-zA\-Z]){2,3})?\\d{1,2})))(/[cC][pP][uU]0)?
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.BlockNameLst.One.Location, self).__init__()

                                                self.yang_name = "location"
                                                self.yang_parent_name = "one"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['fit_location_name']
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('fit_location_name', YLeaf(YType.str, 'fit-location-name')),
                                                ])
                                                self.fit_location_name = None
                                                self._segment_path = lambda: "location" + "[fit-location-name='" + str(self.fit_location_name) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.BlockNameLst.One.Location, ['fit_location_name'], name, value)


                                    class Continuous(Entity):
                                        """
                                        
                                        
                                        .. attribute:: rate
                                        
                                        	
                                        	**type**\:  :py:class:`Rate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.BlockNameLst.Continuous.Rate>`
                                        
                                        .. attribute:: location
                                        
                                        	
                                        	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.BlockNameLst.Continuous.Location>`
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.BlockNameLst.Continuous, self).__init__()

                                            self.yang_name = "continuous"
                                            self.yang_parent_name = "block-name-lst"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("rate", ("rate", Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.BlockNameLst.Continuous.Rate)), ("location", ("location", Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.BlockNameLst.Continuous.Location))])
                                            self._leafs = OrderedDict()

                                            self.rate = Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.BlockNameLst.Continuous.Rate()
                                            self.rate.parent = self
                                            self._children_name_map["rate"] = "rate"

                                            self.location = YList(self)
                                            self._segment_path = lambda: "continuous"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.BlockNameLst.Continuous, [], name, value)


                                        class Rate(Entity):
                                            """
                                            
                                            
                                            .. attribute:: error_number
                                            
                                            	
                                            	**type**\: list of  		 :py:class:`ErrorNumber <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.BlockNameLst.Continuous.Rate.ErrorNumber>`
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.BlockNameLst.Continuous.Rate, self).__init__()

                                                self.yang_name = "rate"
                                                self.yang_parent_name = "continuous"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([("error-number", ("error_number", Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.BlockNameLst.Continuous.Rate.ErrorNumber))])
                                                self._leafs = OrderedDict()

                                                self.error_number = YList(self)
                                                self._segment_path = lambda: "rate"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.BlockNameLst.Continuous.Rate, [], name, value)


                                            class ErrorNumber(Entity):
                                                """
                                                
                                                
                                                .. attribute:: num_errs  (key)
                                                
                                                	
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: duration
                                                
                                                	
                                                	**type**\: list of  		 :py:class:`Duration <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.BlockNameLst.Continuous.Rate.ErrorNumber.Duration>`
                                                
                                                

                                                """

                                                _prefix = 'calvados_controllers'
                                                _revision = '2017-01-31'

                                                def __init__(self):
                                                    super(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.BlockNameLst.Continuous.Rate.ErrorNumber, self).__init__()

                                                    self.yang_name = "error-number"
                                                    self.yang_parent_name = "rate"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['num_errs']
                                                    self._child_classes = OrderedDict([("duration", ("duration", Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.BlockNameLst.Continuous.Rate.ErrorNumber.Duration))])
                                                    self._leafs = OrderedDict([
                                                        ('num_errs', YLeaf(YType.uint32, 'num-errs')),
                                                    ])
                                                    self.num_errs = None

                                                    self.duration = YList(self)
                                                    self._segment_path = lambda: "error-number" + "[num-errs='" + str(self.num_errs) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.BlockNameLst.Continuous.Rate.ErrorNumber, ['num_errs'], name, value)


                                                class Duration(Entity):
                                                    """
                                                    
                                                    
                                                    .. attribute:: num_seconds  (key)
                                                    
                                                    	
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: location
                                                    
                                                    	
                                                    	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.BlockNameLst.Continuous.Rate.ErrorNumber.Duration.Location>`
                                                    
                                                    

                                                    """

                                                    _prefix = 'calvados_controllers'
                                                    _revision = '2017-01-31'

                                                    def __init__(self):
                                                        super(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.BlockNameLst.Continuous.Rate.ErrorNumber.Duration, self).__init__()

                                                        self.yang_name = "duration"
                                                        self.yang_parent_name = "error-number"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = ['num_seconds']
                                                        self._child_classes = OrderedDict([("location", ("location", Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.BlockNameLst.Continuous.Rate.ErrorNumber.Duration.Location))])
                                                        self._leafs = OrderedDict([
                                                            ('num_seconds', YLeaf(YType.uint32, 'num-seconds')),
                                                        ])
                                                        self.num_seconds = None

                                                        self.location = YList(self)
                                                        self._segment_path = lambda: "duration" + "[num-seconds='" + str(self.num_seconds) + "']"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.BlockNameLst.Continuous.Rate.ErrorNumber.Duration, ['num_seconds'], name, value)


                                                    class Location(Entity):
                                                        """
                                                        
                                                        
                                                        .. attribute:: fit_location_name  (key)
                                                        
                                                        	
                                                        	**type**\: str
                                                        
                                                        	**pattern:** ((([bB][0\-9])/(([a\-zA\-Z]){2}\\d{1,2}))\|(([fF][0\-3])/(([a\-zA\-Z]){2}\\d{1,2}))\|((0?[0\-9]\|1[1\-5])/((([a\-zA\-Z]){2,3})?\\d{1,2})))(/[cC][pP][uU]0)?
                                                        
                                                        

                                                        """

                                                        _prefix = 'calvados_controllers'
                                                        _revision = '2017-01-31'

                                                        def __init__(self):
                                                            super(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.BlockNameLst.Continuous.Rate.ErrorNumber.Duration.Location, self).__init__()

                                                            self.yang_name = "location"
                                                            self.yang_parent_name = "duration"
                                                            self.is_top_level_class = False
                                                            self.has_list_ancestor = True
                                                            self.ylist_key_names = ['fit_location_name']
                                                            self._child_classes = OrderedDict([])
                                                            self._leafs = OrderedDict([
                                                                ('fit_location_name', YLeaf(YType.str, 'fit-location-name')),
                                                            ])
                                                            self.fit_location_name = None
                                                            self._segment_path = lambda: "location" + "[fit-location-name='" + str(self.fit_location_name) + "']"

                                                        def __setattr__(self, name, value):
                                                            self._perform_setattr(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.BlockNameLst.Continuous.Rate.ErrorNumber.Duration.Location, ['fit_location_name'], name, value)


                                        class Location(Entity):
                                            """
                                            
                                            
                                            .. attribute:: fit_location_name  (key)
                                            
                                            	
                                            	**type**\: str
                                            
                                            	**pattern:** ((([bB][0\-9])/(([a\-zA\-Z]){2}\\d{1,2}))\|(([fF][0\-3])/(([a\-zA\-Z]){2}\\d{1,2}))\|((0?[0\-9]\|1[1\-5])/((([a\-zA\-Z]){2,3})?\\d{1,2})))(/[cC][pP][uU]0)?
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.BlockNameLst.Continuous.Location, self).__init__()

                                                self.yang_name = "location"
                                                self.yang_parent_name = "continuous"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['fit_location_name']
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('fit_location_name', YLeaf(YType.str, 'fit-location-name')),
                                                ])
                                                self.fit_location_name = None
                                                self._segment_path = lambda: "location" + "[fit-location-name='" + str(self.fit_location_name) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.BlockNameLst.Continuous.Location, ['fit_location_name'], name, value)


                                    class Stop(Entity):
                                        """
                                        
                                        
                                        .. attribute:: location
                                        
                                        	
                                        	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.BlockNameLst.Stop.Location>`
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.BlockNameLst.Stop, self).__init__()

                                            self.yang_name = "stop"
                                            self.yang_parent_name = "block-name-lst"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("location", ("location", Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.BlockNameLst.Stop.Location))])
                                            self._leafs = OrderedDict()

                                            self.location = YList(self)
                                            self._segment_path = lambda: "stop"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.BlockNameLst.Stop, [], name, value)


                                        class Location(Entity):
                                            """
                                            
                                            
                                            .. attribute:: fit_location_name  (key)
                                            
                                            	
                                            	**type**\: str
                                            
                                            	**pattern:** ((([bB][0\-9])/(([a\-zA\-Z]){2}\\d{1,2}))\|(([fF][0\-3])/(([a\-zA\-Z]){2}\\d{1,2}))\|((0?[0\-9]\|1[1\-5])/((([a\-zA\-Z]){2,3})?\\d{1,2})))(/[cC][pP][uU]0)?
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.BlockNameLst.Stop.Location, self).__init__()

                                                self.yang_name = "location"
                                                self.yang_parent_name = "stop"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['fit_location_name']
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('fit_location_name', YLeaf(YType.str, 'fit-location-name')),
                                                ])
                                                self.fit_location_name = None
                                                self._segment_path = lambda: "location" + "[fit-location-name='" + str(self.fit_location_name) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Set.Controller.Asic.Instance.FaultInjection.Module.FaultType.Other.BlockNameLst.Stop.Location, ['fit_location_name'], name, value)

    def clone_ptr(self):
        self._top_entity = Set()
        return self._top_entity

class Controller(Entity):
    """
    
    
    .. attribute:: fabric
    
    	Fabric resource commands
    	**type**\:  :py:class:`Fabric <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric>`
    
    .. attribute:: sfe_oper
    
    	
    	**type**\:  :py:class:`SfeOper <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper>`
    
    .. attribute:: asic
    
    	
    	**type**\: list of  		 :py:class:`Asic <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Asic>`
    
    .. attribute:: oper
    
    	
    	**type**\:  :py:class:`Oper <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Oper>`
    
    .. attribute:: zen
    
    	
    	**type**\:  :py:class:`Zen <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Zen>`
    
    .. attribute:: ccc_driver
    
    	
    	**type**\:  :py:class:`CccDriver <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver>`
    
    .. attribute:: switch
    
    	
    	**type**\:  :py:class:`Switch <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch>`
    
    .. attribute:: fabric_action
    
    	
    	**type**\:  :py:class:`FabricAction <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.FabricAction>`
    
    

    """

    _prefix = 'calvados_controllers'
    _revision = '2017-01-31'

    def __init__(self):
        super(Controller, self).__init__()
        self._top_entity = None

        self.yang_name = "controller"
        self.yang_parent_name = "Cisco-IOS-XR-sysadmin-controllers"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([("fabric", ("fabric", Controller.Fabric)), ("sfe_oper", ("sfe_oper", Controller.SfeOper)), ("asic", ("asic", Controller.Asic)), ("oper", ("oper", Controller.Oper)), ("zen", ("zen", Controller.Zen)), ("ccc_driver", ("ccc_driver", Controller.CccDriver)), ("switch", ("switch", Controller.Switch)), ("fabric_action", ("fabric_action", Controller.FabricAction))])
        self._leafs = OrderedDict()

        self.fabric = Controller.Fabric()
        self.fabric.parent = self
        self._children_name_map["fabric"] = "fabric"

        self.sfe_oper = Controller.SfeOper()
        self.sfe_oper.parent = self
        self._children_name_map["sfe_oper"] = "sfe_oper"

        self.oper = Controller.Oper()
        self.oper.parent = self
        self._children_name_map["oper"] = "oper"

        self.zen = Controller.Zen()
        self.zen.parent = self
        self._children_name_map["zen"] = "zen"

        self.ccc_driver = Controller.CccDriver()
        self.ccc_driver.parent = self
        self._children_name_map["ccc_driver"] = "ccc_driver"

        self.switch = Controller.Switch()
        self.switch.parent = self
        self._children_name_map["switch"] = "switch"

        self.fabric_action = Controller.FabricAction()
        self.fabric_action.parent = self
        self._children_name_map["fabric_action"] = "fabric_action"

        self.asic = YList(self)
        self._segment_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller"

    def __setattr__(self, name, value):
        self._perform_setattr(Controller, [], name, value)


    class Fabric(Entity):
        """
        Fabric resource commands
        
        .. attribute:: fabric
        
        	Fabric configuration
        	**type**\:  :py:class:`Fabric_ <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Fabric_>`
        
        .. attribute:: oper
        
        	
        	**type**\:  :py:class:`Oper <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper>`
        
        

        """

        _prefix = 'calvados_controllers'
        _revision = '2017-01-31'

        def __init__(self):
            super(Controller.Fabric, self).__init__()

            self.yang_name = "fabric"
            self.yang_parent_name = "controller"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([("fabric", ("fabric", Controller.Fabric.Fabric_)), ("oper", ("oper", Controller.Fabric.Oper))])
            self._leafs = OrderedDict()

            self.fabric = Controller.Fabric.Fabric_()
            self.fabric.parent = self
            self._children_name_map["fabric"] = "fabric"

            self.oper = Controller.Fabric.Oper()
            self.oper.parent = self
            self._children_name_map["oper"] = "oper"
            self._segment_path = lambda: "fabric"
            self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Controller.Fabric, [], name, value)


        class Fabric_(Entity):
            """
            Fabric configuration
            
            .. attribute:: fsdbagg
            
            	
            	**type**\:  :py:class:`Fsdbagg <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Fabric_.Fsdbagg>`
            
            .. attribute:: fgid
            
            	
            	**type**\:  :py:class:`Fgid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Fabric_.Fgid>`
            
            

            """

            _prefix = 'calvados_controllers'
            _revision = '2017-01-31'

            def __init__(self):
                super(Controller.Fabric.Fabric_, self).__init__()

                self.yang_name = "fabric"
                self.yang_parent_name = "fabric"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("fsdbagg", ("fsdbagg", Controller.Fabric.Fabric_.Fsdbagg)), ("fgid", ("fgid", Controller.Fabric.Fabric_.Fgid))])
                self._leafs = OrderedDict()

                self.fsdbagg = Controller.Fabric.Fabric_.Fsdbagg()
                self.fsdbagg.parent = self
                self._children_name_map["fsdbagg"] = "fsdbagg"

                self.fgid = Controller.Fabric.Fabric_.Fgid()
                self.fgid.parent = self
                self._children_name_map["fgid"] = "fgid"
                self._segment_path = lambda: "fabric"
                self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Controller.Fabric.Fabric_, [], name, value)


            class Fsdbagg(Entity):
                """
                
                
                .. attribute:: plane
                
                	Set state of fabric plane
                	**type**\: list of  		 :py:class:`Plane <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Fabric_.Fsdbagg.Plane>`
                
                .. attribute:: link
                
                	Link configuration commands
                	**type**\:  :py:class:`Link <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Fabric_.Fsdbagg.Link>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Controller.Fabric.Fabric_.Fsdbagg, self).__init__()

                    self.yang_name = "fsdbagg"
                    self.yang_parent_name = "fabric"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("plane", ("plane", Controller.Fabric.Fabric_.Fsdbagg.Plane)), ("link", ("link", Controller.Fabric.Fabric_.Fsdbagg.Link))])
                    self._leafs = OrderedDict()

                    self.link = Controller.Fabric.Fabric_.Fsdbagg.Link()
                    self.link.parent = self
                    self._children_name_map["link"] = "link"

                    self.plane = YList(self)
                    self._segment_path = lambda: "fsdbagg"
                    self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/fabric/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Controller.Fabric.Fabric_.Fsdbagg, [], name, value)


                class Plane(Entity):
                    """
                    Set state of fabric plane
                    
                    .. attribute:: plane_id  (key)
                    
                    	
                    	**type**\: str
                    
                    	**pattern:** [0\-5]
                    
                    .. attribute:: shutdown
                    
                    	Shut down state
                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: b2b
                    
                    	Back to Back plane mode
                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: instance
                    
                    	Multi\-Chassis S2 configuration
                    	**type**\: list of  		 :py:class:`Instance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Fabric_.Fsdbagg.Plane.Instance>`
                    
                    .. attribute:: instance_folded
                    
                    	Multi\-Chassis S2 Folded chassis configuration
                    	**type**\: list of  		 :py:class:`InstanceFolded <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Fabric_.Fsdbagg.Plane.InstanceFolded>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.Fabric.Fabric_.Fsdbagg.Plane, self).__init__()

                        self.yang_name = "plane"
                        self.yang_parent_name = "fsdbagg"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['plane_id']
                        self._child_classes = OrderedDict([("instance", ("instance", Controller.Fabric.Fabric_.Fsdbagg.Plane.Instance)), ("instance_folded", ("instance_folded", Controller.Fabric.Fabric_.Fsdbagg.Plane.InstanceFolded))])
                        self._leafs = OrderedDict([
                            ('plane_id', YLeaf(YType.str, 'plane_id')),
                            ('shutdown', YLeaf(YType.empty, 'shutdown')),
                            ('b2b', YLeaf(YType.empty, 'b2b')),
                        ])
                        self.plane_id = None
                        self.shutdown = None
                        self.b2b = None

                        self.instance = YList(self)
                        self.instance_folded = YList(self)
                        self._segment_path = lambda: "plane" + "[plane_id='" + str(self.plane_id) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/fabric/fsdbagg/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.Fabric.Fabric_.Fsdbagg.Plane, [u'plane_id', u'shutdown', u'b2b'], name, value)


                    class Instance(Entity):
                        """
                        Multi\-Chassis S2 configuration
                        
                        .. attribute:: instance_id  (key)
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..7
                        
                        .. attribute:: location
                        
                        	
                        	**type**\: str
                        
                        	**pattern:** (0?[F\|f][0\-3])/[F\|f][C\|c](0?[0\-9]\|1[0\-1])
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Fabric.Fabric_.Fsdbagg.Plane.Instance, self).__init__()

                            self.yang_name = "instance"
                            self.yang_parent_name = "plane"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['instance_id']
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('instance_id', YLeaf(YType.int32, 'instance-id')),
                                ('location', YLeaf(YType.str, 'location')),
                            ])
                            self.instance_id = None
                            self.location = None
                            self._segment_path = lambda: "instance" + "[instance-id='" + str(self.instance_id) + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Fabric.Fabric_.Fsdbagg.Plane.Instance, [u'instance_id', u'location'], name, value)


                    class InstanceFolded(Entity):
                        """
                        Multi\-Chassis S2 Folded chassis configuration
                        
                        .. attribute:: instance_id  (key)
                        
                        	
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: location
                        
                        	
                        	**type**\: str
                        
                        	**pattern:** (0?[F\|f][0\-3])/[F\|f][C\|c](0?[0\-9]\|1[0\-1])
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Fabric.Fabric_.Fsdbagg.Plane.InstanceFolded, self).__init__()

                            self.yang_name = "instance_folded"
                            self.yang_parent_name = "plane"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['instance_id']
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('instance_id', YLeaf(YType.int32, 'instance-id')),
                                ('location', YLeaf(YType.str, 'location')),
                            ])
                            self.instance_id = None
                            self.location = None
                            self._segment_path = lambda: "instance_folded" + "[instance-id='" + str(self.instance_id) + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Fabric.Fabric_.Fsdbagg.Plane.InstanceFolded, [u'instance_id', u'location'], name, value)


                class Link(Entity):
                    """
                    Link configuration commands
                    
                    .. attribute:: port
                    
                    	Set admin state of a fabric link port
                    	**type**\:  :py:class:`Port <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Fabric_.Fsdbagg.Link.Port>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.Fabric.Fabric_.Fsdbagg.Link, self).__init__()

                        self.yang_name = "link"
                        self.yang_parent_name = "fsdbagg"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("port", ("port", Controller.Fabric.Fabric_.Fsdbagg.Link.Port))])
                        self._leafs = OrderedDict()

                        self.port = Controller.Fabric.Fabric_.Fsdbagg.Link.Port()
                        self.port.parent = self
                        self._children_name_map["port"] = "port"
                        self._segment_path = lambda: "link"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/fabric/fsdbagg/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.Fabric.Fabric_.Fsdbagg.Link, [], name, value)


                    class Port(Entity):
                        """
                        Set admin state of a fabric link port
                        
                        .. attribute:: location
                        
                        	
                        	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Fabric_.Fsdbagg.Link.Port.Location>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Fabric.Fabric_.Fsdbagg.Link.Port, self).__init__()

                            self.yang_name = "port"
                            self.yang_parent_name = "link"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("location", ("location", Controller.Fabric.Fabric_.Fsdbagg.Link.Port.Location))])
                            self._leafs = OrderedDict()

                            self.location = YList(self)
                            self._segment_path = lambda: "port"
                            self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/fabric/fsdbagg/link/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Fabric.Fabric_.Fsdbagg.Link.Port, [], name, value)


                        class Location(Entity):
                            """
                            
                            
                            .. attribute:: loc_str  (key)
                            
                            	
                            	**type**\: str
                            
                            	**pattern:** ((0?[0\-9]\|1[0\-5])/([F\|f][C\|c](0?[0\-5]))/(0?[0\-5])/(0?[0\-9]\|[1\-9][0\-9]\|1[0\-3][0\-9]\|14[0\-3]))\|((0?[0\-9]\|1[0\-5])/(0?[0\-7])/(0?[0\-5])/(0?[0\-9]\|[1\-2][0\-9]\|3[0\-5]))\|(([F\|f][0\-3])/([F\|f][C\|c](0?[0\-9]\|1[0\-1]))/(0?[0\-2])/(0?[0\-9]\|[1\-9][0\-9]\|1[0\-3][0\-9]\|14[0\-3]))
                            
                            .. attribute:: shutdown
                            
                            	Shut down state
                            	**type**\: :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: maintenance
                            
                            	maintenance state
                            	**type**\: :py:class:`Empty<ydk.types.Empty>`
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Fabric.Fabric_.Fsdbagg.Link.Port.Location, self).__init__()

                                self.yang_name = "location"
                                self.yang_parent_name = "port"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = ['loc_str']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('loc_str', YLeaf(YType.str, 'loc_str')),
                                    ('shutdown', YLeaf(YType.empty, 'shutdown')),
                                    ('maintenance', YLeaf(YType.empty, 'maintenance')),
                                ])
                                self.loc_str = None
                                self.shutdown = None
                                self.maintenance = None
                                self._segment_path = lambda: "location" + "[loc_str='" + str(self.loc_str) + "']"
                                self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/fabric/fsdbagg/link/port/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Fabric.Fabric_.Fsdbagg.Link.Port.Location, [u'loc_str', u'shutdown', u'maintenance'], name, value)


            class Fgid(Entity):
                """
                
                
                .. attribute:: resource
                
                	
                	**type**\:  :py:class:`Resource <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Fabric_.Fgid.Resource>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Controller.Fabric.Fabric_.Fgid, self).__init__()

                    self.yang_name = "fgid"
                    self.yang_parent_name = "fabric"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("resource", ("resource", Controller.Fabric.Fabric_.Fgid.Resource))])
                    self._leafs = OrderedDict()

                    self.resource = Controller.Fabric.Fabric_.Fgid.Resource()
                    self.resource.parent = self
                    self._children_name_map["resource"] = "resource"
                    self._segment_path = lambda: "fgid"
                    self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/fabric/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Controller.Fabric.Fabric_.Fgid, [], name, value)


                class Resource(Entity):
                    """
                    
                    
                    .. attribute:: sdr
                    
                    	
                    	**type**\:  :py:class:`Sdr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Fabric_.Fgid.Resource.Sdr>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.Fabric.Fabric_.Fgid.Resource, self).__init__()

                        self.yang_name = "resource"
                        self.yang_parent_name = "fgid"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("sdr", ("sdr", Controller.Fabric.Fabric_.Fgid.Resource.Sdr))])
                        self._leafs = OrderedDict()

                        self.sdr = Controller.Fabric.Fabric_.Fgid.Resource.Sdr()
                        self.sdr.parent = self
                        self._children_name_map["sdr"] = "sdr"
                        self._segment_path = lambda: "resource"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/fabric/fgid/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.Fabric.Fabric_.Fgid.Resource, [], name, value)


                    class Sdr(Entity):
                        """
                        
                        
                        .. attribute:: allocation
                        
                        	
                        	**type**\:  :py:class:`Allocation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Fabric_.Fgid.Resource.Sdr.Allocation>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Fabric.Fabric_.Fgid.Resource.Sdr, self).__init__()

                            self.yang_name = "sdr"
                            self.yang_parent_name = "resource"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("allocation", ("allocation", Controller.Fabric.Fabric_.Fgid.Resource.Sdr.Allocation))])
                            self._leafs = OrderedDict()

                            self.allocation = Controller.Fabric.Fabric_.Fgid.Resource.Sdr.Allocation()
                            self.allocation.parent = self
                            self._children_name_map["allocation"] = "allocation"
                            self._segment_path = lambda: "sdr"
                            self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/fabric/fgid/resource/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Fabric.Fabric_.Fgid.Resource.Sdr, [], name, value)


                        class Allocation(Entity):
                            """
                            
                            
                            .. attribute:: percent
                            
                            	
                            	**type**\: int
                            
                            	**range:** 20..50
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Fabric.Fabric_.Fgid.Resource.Sdr.Allocation, self).__init__()

                                self.yang_name = "allocation"
                                self.yang_parent_name = "sdr"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('percent', YLeaf(YType.int32, 'percent')),
                                ])
                                self.percent = None
                                self._segment_path = lambda: "allocation"
                                self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/fabric/fgid/resource/sdr/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Fabric.Fabric_.Fgid.Resource.Sdr.Allocation, ['percent'], name, value)


        class Oper(Entity):
            """
            
            
            .. attribute:: cxp
            
            	
            	**type**\:  :py:class:`Cxp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Cxp>`
            
            .. attribute:: fgid
            
            	FGID management information
            	**type**\:  :py:class:`Fgid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Fgid>`
            
            .. attribute:: fsdbagg_active
            
            	
            	**type**\:  :py:class:`FsdbaggActive <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.FsdbaggActive>`
            
            .. attribute:: fsdbagg_link
            
            	
            	**type**\:  :py:class:`FsdbaggLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.FsdbaggLink>`
            
            .. attribute:: fsdbagg_sfe_asic_type
            
            	
            	**type**\:  :py:class:`FsdbaggSfeAsicType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.FsdbaggSfeAsicType>`
            
            .. attribute:: fsdbagg_standby
            
            	
            	**type**\:  :py:class:`FsdbaggStandby <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.FsdbaggStandby>`
            
            .. attribute:: fab_health
            
            	
            	**type**\:  :py:class:`FabHealth <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.FabHealth>`
            
            .. attribute:: fsdb_aggregator
            
            	FSDB Aggregator information
            	**type**\:  :py:class:`FsdbAggregator <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.FsdbAggregator>`
            
            .. attribute:: link
            
            	Fabric link option
            	**type**\:  :py:class:`Link <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link>`
            
            .. attribute:: sfe
            
            	Switch Fabric Element option
            	**type**\:  :py:class:`Sfe <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Sfe>`
            
            .. attribute:: fsdb_pla
            
            	plane availability status option
            	**type**\:  :py:class:`FsdbPla <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.FsdbPla>`
            
            .. attribute:: fsdb_srvr
            
            	FSDB Server information
            	**type**\:  :py:class:`FsdbSrvr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.FsdbSrvr>`
            
            

            """

            _prefix = 'calvados_controllers'
            _revision = '2017-01-31'

            def __init__(self):
                super(Controller.Fabric.Oper, self).__init__()

                self.yang_name = "oper"
                self.yang_parent_name = "fabric"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("cxp", ("cxp", Controller.Fabric.Oper.Cxp)), ("fgid", ("fgid", Controller.Fabric.Oper.Fgid)), ("fsdbagg_active", ("fsdbagg_active", Controller.Fabric.Oper.FsdbaggActive)), ("fsdbagg_link", ("fsdbagg_link", Controller.Fabric.Oper.FsdbaggLink)), ("fsdbagg_sfe_asic_type", ("fsdbagg_sfe_asic_type", Controller.Fabric.Oper.FsdbaggSfeAsicType)), ("fsdbagg_standby", ("fsdbagg_standby", Controller.Fabric.Oper.FsdbaggStandby)), ("fab_health", ("fab_health", Controller.Fabric.Oper.FabHealth)), ("fsdb-aggregator", ("fsdb_aggregator", Controller.Fabric.Oper.FsdbAggregator)), ("link", ("link", Controller.Fabric.Oper.Link)), ("sfe", ("sfe", Controller.Fabric.Oper.Sfe)), ("fsdb_pla", ("fsdb_pla", Controller.Fabric.Oper.FsdbPla)), ("fsdb_srvr", ("fsdb_srvr", Controller.Fabric.Oper.FsdbSrvr))])
                self._leafs = OrderedDict()

                self.cxp = Controller.Fabric.Oper.Cxp()
                self.cxp.parent = self
                self._children_name_map["cxp"] = "cxp"

                self.fgid = Controller.Fabric.Oper.Fgid()
                self.fgid.parent = self
                self._children_name_map["fgid"] = "fgid"

                self.fsdbagg_active = Controller.Fabric.Oper.FsdbaggActive()
                self.fsdbagg_active.parent = self
                self._children_name_map["fsdbagg_active"] = "fsdbagg_active"

                self.fsdbagg_link = Controller.Fabric.Oper.FsdbaggLink()
                self.fsdbagg_link.parent = self
                self._children_name_map["fsdbagg_link"] = "fsdbagg_link"

                self.fsdbagg_sfe_asic_type = Controller.Fabric.Oper.FsdbaggSfeAsicType()
                self.fsdbagg_sfe_asic_type.parent = self
                self._children_name_map["fsdbagg_sfe_asic_type"] = "fsdbagg_sfe_asic_type"

                self.fsdbagg_standby = Controller.Fabric.Oper.FsdbaggStandby()
                self.fsdbagg_standby.parent = self
                self._children_name_map["fsdbagg_standby"] = "fsdbagg_standby"

                self.fab_health = Controller.Fabric.Oper.FabHealth()
                self.fab_health.parent = self
                self._children_name_map["fab_health"] = "fab_health"

                self.fsdb_aggregator = Controller.Fabric.Oper.FsdbAggregator()
                self.fsdb_aggregator.parent = self
                self._children_name_map["fsdb_aggregator"] = "fsdb-aggregator"

                self.link = Controller.Fabric.Oper.Link()
                self.link.parent = self
                self._children_name_map["link"] = "link"

                self.sfe = Controller.Fabric.Oper.Sfe()
                self.sfe.parent = self
                self._children_name_map["sfe"] = "sfe"

                self.fsdb_pla = Controller.Fabric.Oper.FsdbPla()
                self.fsdb_pla.parent = self
                self._children_name_map["fsdb_pla"] = "fsdb_pla"

                self.fsdb_srvr = Controller.Fabric.Oper.FsdbSrvr()
                self.fsdb_srvr.parent = self
                self._children_name_map["fsdb_srvr"] = "fsdb_srvr"
                self._segment_path = lambda: "oper"
                self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Controller.Fabric.Oper, [], name, value)


            class Cxp(Entity):
                """
                
                
                .. attribute:: dom
                
                	
                	**type**\:  :py:class:`Dom <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Cxp.Dom>`
                
                .. attribute:: summary
                
                	
                	**type**\:  :py:class:`Summary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Cxp.Summary>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Controller.Fabric.Oper.Cxp, self).__init__()

                    self.yang_name = "cxp"
                    self.yang_parent_name = "oper"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("dom", ("dom", Controller.Fabric.Oper.Cxp.Dom)), ("summary", ("summary", Controller.Fabric.Oper.Cxp.Summary))])
                    self._leafs = OrderedDict()

                    self.dom = Controller.Fabric.Oper.Cxp.Dom()
                    self.dom.parent = self
                    self._children_name_map["dom"] = "dom"

                    self.summary = Controller.Fabric.Oper.Cxp.Summary()
                    self.summary.parent = self
                    self._children_name_map["summary"] = "summary"
                    self._segment_path = lambda: "cxp"
                    self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/oper/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Controller.Fabric.Oper.Cxp, [], name, value)


                class Dom(Entity):
                    """
                    
                    
                    .. attribute:: location
                    
                    	
                    	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Cxp.Dom.Location>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.Fabric.Oper.Cxp.Dom, self).__init__()

                        self.yang_name = "dom"
                        self.yang_parent_name = "cxp"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("location", ("location", Controller.Fabric.Oper.Cxp.Dom.Location))])
                        self._leafs = OrderedDict()

                        self.location = YList(self)
                        self._segment_path = lambda: "dom"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/oper/cxp/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.Fabric.Oper.Cxp.Dom, [], name, value)


                    class Location(Entity):
                        """
                        
                        
                        .. attribute:: loc_str  (key)
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: description
                        
                        	
                        	**type**\: str
                        
                        	**default value**\: location (R/S)
                        
                        .. attribute:: port
                        
                        	
                        	**type**\: list of  		 :py:class:`Port <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Cxp.Dom.Location.Port>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Fabric.Oper.Cxp.Dom.Location, self).__init__()

                            self.yang_name = "location"
                            self.yang_parent_name = "dom"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = ['loc_str']
                            self._child_classes = OrderedDict([("port", ("port", Controller.Fabric.Oper.Cxp.Dom.Location.Port))])
                            self._leafs = OrderedDict([
                                ('loc_str', YLeaf(YType.str, 'loc_str')),
                                ('description', YLeaf(YType.str, 'description')),
                            ])
                            self.loc_str = None
                            self.description = None

                            self.port = YList(self)
                            self._segment_path = lambda: "location" + "[loc_str='" + str(self.loc_str) + "']"
                            self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/oper/cxp/dom/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Fabric.Oper.Cxp.Dom.Location, ['loc_str', 'description'], name, value)


                        class Port(Entity):
                            """
                            
                            
                            .. attribute:: cxp_port  (key)
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..31
                            
                            .. attribute:: show_port
                            
                            	
                            	**type**\: bool
                            
                            .. attribute:: cxp2_display
                            
                            	
                            	**type**\: bool
                            
                            .. attribute:: rack_num
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: slot_num
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: cur_loc_str
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: vendorname
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: partnumber
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: serialnumber
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: vid
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: pid
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: vendor_rev_num
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: vendor_pn
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: vendor_sn
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: dev_description
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: clei_code_num
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: ven_date_code
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: ven_lot_code
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: vendor_oui_ieee_company_id
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: eeprom_rev_num
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: firmware_rev_num
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: tx_temp_rd
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_temp_sts
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_volt_sts
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_volt_rd
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_chn_sts0
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_chn_sts1
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_chn_sts2
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_chn_sts3
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_chn_sts4
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_chn_sts5
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_chn_sts6
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_chn_sts7
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_chn_sts8
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_chn_sts9
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_chn_sts10
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_chn_sts11
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_fault0
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_fault1
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_fault2
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_fault3
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_fault4
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_fault5
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_fault6
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_fault7
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_fault8
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_fault9
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_fault10
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_fault11
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_bias_cur0
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_bias_cur1
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_bias_cur2
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_bias_cur3
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_bias_cur4
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_bias_cur5
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_bias_cur6
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_bias_cur7
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_bias_cur8
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_bias_cur9
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_bias_cur10
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_bias_cur11
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_los0
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_los1
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_los2
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_los3
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_los4
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_los5
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_los6
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_los7
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_los8
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_los9
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_los10
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_los11
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_opt_pw_alm0
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_opt_pw_alm1
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_opt_pw_alm2
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_opt_pw_alm3
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_opt_pw_alm4
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_opt_pw_alm5
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_opt_pw_alm6
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_opt_pw_alm7
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_opt_pw_alm8
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_opt_pw_alm9
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_opt_pw_alm10
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_opt_pw_alm11
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_opt_bs_alm0
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_opt_bs_alm1
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_opt_bs_alm2
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_opt_bs_alm3
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_opt_bs_alm4
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_opt_bs_alm5
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_opt_bs_alm6
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_opt_bs_alm7
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_opt_bs_alm8
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_opt_bs_alm9
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_opt_bs_alm10
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_opt_bs_alm11
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_light_op_dbm0
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_light_op_dbm1
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_light_op_dbm2
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_light_op_dbm3
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_light_op_dbm4
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_light_op_dbm5
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_light_op_dbm6
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_light_op_dbm7
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_light_op_dbm8
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_light_op_dbm9
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_light_op_dbm10
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: tx_light_op_dbm11
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: rx_temp_rd
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: rx_temp_sts
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: rx_volt_sts
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: rx_volt_rd
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: rx_chn_sts0
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: rx_chn_sts1
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: rx_chn_sts2
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: rx_chn_sts3
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: rx_chn_sts4
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: rx_chn_sts5
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: rx_chn_sts6
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: rx_chn_sts7
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: rx_chn_sts8
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: rx_chn_sts9
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: rx_chn_sts10
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: rx_chn_sts11
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: rx_los0
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: rx_los1
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: rx_los2
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: rx_los3
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: rx_los4
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: rx_los5
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: rx_los6
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: rx_los7
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: rx_los8
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: rx_los9
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: rx_los10
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: rx_los11
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: rx_opt_pw_alm0
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: rx_opt_pw_alm1
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: rx_opt_pw_alm2
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: rx_opt_pw_alm3
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: rx_opt_pw_alm4
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: rx_opt_pw_alm5
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: rx_opt_pw_alm6
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: rx_opt_pw_alm7
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: rx_opt_pw_alm8
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: rx_opt_pw_alm9
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: rx_opt_pw_alm10
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: rx_opt_pw_alm11
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: rx_light_in_dbm0
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: rx_light_in_dbm1
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: rx_light_in_dbm2
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: rx_light_in_dbm3
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: rx_light_in_dbm4
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: rx_light_in_dbm5
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: rx_light_in_dbm6
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: rx_light_in_dbm7
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: rx_light_in_dbm8
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: rx_light_in_dbm9
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: rx_light_in_dbm10
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: rx_light_in_dbm11
                            
                            	
                            	**type**\: str
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Fabric.Oper.Cxp.Dom.Location.Port, self).__init__()

                                self.yang_name = "port"
                                self.yang_parent_name = "location"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['cxp_port']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('cxp_port', YLeaf(YType.uint32, 'cxp_port')),
                                    ('show_port', YLeaf(YType.boolean, 'show_port')),
                                    ('cxp2_display', YLeaf(YType.boolean, 'cxp2_display')),
                                    ('rack_num', YLeaf(YType.uint32, 'rack_num')),
                                    ('slot_num', YLeaf(YType.uint32, 'slot_num')),
                                    ('cur_loc_str', YLeaf(YType.str, 'cur_loc_str')),
                                    ('vendorname', YLeaf(YType.str, 'vendorname')),
                                    ('partnumber', YLeaf(YType.str, 'partnumber')),
                                    ('serialnumber', YLeaf(YType.str, 'serialnumber')),
                                    ('vid', YLeaf(YType.str, 'vid')),
                                    ('pid', YLeaf(YType.str, 'pid')),
                                    ('vendor_rev_num', YLeaf(YType.uint32, 'vendor_rev_num')),
                                    ('vendor_pn', YLeaf(YType.str, 'vendor_pn')),
                                    ('vendor_sn', YLeaf(YType.str, 'vendor_sn')),
                                    ('dev_description', YLeaf(YType.str, 'dev_description')),
                                    ('clei_code_num', YLeaf(YType.str, 'clei_code_num')),
                                    ('ven_date_code', YLeaf(YType.str, 'ven_date_code')),
                                    ('ven_lot_code', YLeaf(YType.str, 'ven_lot_code')),
                                    ('vendor_oui_ieee_company_id', YLeaf(YType.uint32, 'vendor_oui_ieee_company_id')),
                                    ('eeprom_rev_num', YLeaf(YType.uint32, 'eeprom_rev_num')),
                                    ('firmware_rev_num', YLeaf(YType.uint32, 'firmware_rev_num')),
                                    ('tx_temp_rd', YLeaf(YType.str, 'TX_temp_rd')),
                                    ('tx_temp_sts', YLeaf(YType.str, 'TX_temp_sts')),
                                    ('tx_volt_sts', YLeaf(YType.str, 'TX_volt_sts')),
                                    ('tx_volt_rd', YLeaf(YType.str, 'TX_volt_rd')),
                                    ('tx_chn_sts0', YLeaf(YType.str, 'tx_chn_sts0')),
                                    ('tx_chn_sts1', YLeaf(YType.str, 'tx_chn_sts1')),
                                    ('tx_chn_sts2', YLeaf(YType.str, 'tx_chn_sts2')),
                                    ('tx_chn_sts3', YLeaf(YType.str, 'tx_chn_sts3')),
                                    ('tx_chn_sts4', YLeaf(YType.str, 'tx_chn_sts4')),
                                    ('tx_chn_sts5', YLeaf(YType.str, 'tx_chn_sts5')),
                                    ('tx_chn_sts6', YLeaf(YType.str, 'tx_chn_sts6')),
                                    ('tx_chn_sts7', YLeaf(YType.str, 'tx_chn_sts7')),
                                    ('tx_chn_sts8', YLeaf(YType.str, 'tx_chn_sts8')),
                                    ('tx_chn_sts9', YLeaf(YType.str, 'tx_chn_sts9')),
                                    ('tx_chn_sts10', YLeaf(YType.str, 'tx_chn_sts10')),
                                    ('tx_chn_sts11', YLeaf(YType.str, 'tx_chn_sts11')),
                                    ('tx_fault0', YLeaf(YType.str, 'tx_fault0')),
                                    ('tx_fault1', YLeaf(YType.str, 'tx_fault1')),
                                    ('tx_fault2', YLeaf(YType.str, 'tx_fault2')),
                                    ('tx_fault3', YLeaf(YType.str, 'tx_fault3')),
                                    ('tx_fault4', YLeaf(YType.str, 'tx_fault4')),
                                    ('tx_fault5', YLeaf(YType.str, 'tx_fault5')),
                                    ('tx_fault6', YLeaf(YType.str, 'tx_fault6')),
                                    ('tx_fault7', YLeaf(YType.str, 'tx_fault7')),
                                    ('tx_fault8', YLeaf(YType.str, 'tx_fault8')),
                                    ('tx_fault9', YLeaf(YType.str, 'tx_fault9')),
                                    ('tx_fault10', YLeaf(YType.str, 'tx_fault10')),
                                    ('tx_fault11', YLeaf(YType.str, 'tx_fault11')),
                                    ('tx_bias_cur0', YLeaf(YType.str, 'tx_bias_cur0')),
                                    ('tx_bias_cur1', YLeaf(YType.str, 'tx_bias_cur1')),
                                    ('tx_bias_cur2', YLeaf(YType.str, 'tx_bias_cur2')),
                                    ('tx_bias_cur3', YLeaf(YType.str, 'tx_bias_cur3')),
                                    ('tx_bias_cur4', YLeaf(YType.str, 'tx_bias_cur4')),
                                    ('tx_bias_cur5', YLeaf(YType.str, 'tx_bias_cur5')),
                                    ('tx_bias_cur6', YLeaf(YType.str, 'tx_bias_cur6')),
                                    ('tx_bias_cur7', YLeaf(YType.str, 'tx_bias_cur7')),
                                    ('tx_bias_cur8', YLeaf(YType.str, 'tx_bias_cur8')),
                                    ('tx_bias_cur9', YLeaf(YType.str, 'tx_bias_cur9')),
                                    ('tx_bias_cur10', YLeaf(YType.str, 'tx_bias_cur10')),
                                    ('tx_bias_cur11', YLeaf(YType.str, 'tx_bias_cur11')),
                                    ('tx_los0', YLeaf(YType.str, 'tx_los0')),
                                    ('tx_los1', YLeaf(YType.str, 'tx_los1')),
                                    ('tx_los2', YLeaf(YType.str, 'tx_los2')),
                                    ('tx_los3', YLeaf(YType.str, 'tx_los3')),
                                    ('tx_los4', YLeaf(YType.str, 'tx_los4')),
                                    ('tx_los5', YLeaf(YType.str, 'tx_los5')),
                                    ('tx_los6', YLeaf(YType.str, 'tx_los6')),
                                    ('tx_los7', YLeaf(YType.str, 'tx_los7')),
                                    ('tx_los8', YLeaf(YType.str, 'tx_los8')),
                                    ('tx_los9', YLeaf(YType.str, 'tx_los9')),
                                    ('tx_los10', YLeaf(YType.str, 'tx_los10')),
                                    ('tx_los11', YLeaf(YType.str, 'tx_los11')),
                                    ('tx_opt_pw_alm0', YLeaf(YType.str, 'tx_opt_pw_alm0')),
                                    ('tx_opt_pw_alm1', YLeaf(YType.str, 'tx_opt_pw_alm1')),
                                    ('tx_opt_pw_alm2', YLeaf(YType.str, 'tx_opt_pw_alm2')),
                                    ('tx_opt_pw_alm3', YLeaf(YType.str, 'tx_opt_pw_alm3')),
                                    ('tx_opt_pw_alm4', YLeaf(YType.str, 'tx_opt_pw_alm4')),
                                    ('tx_opt_pw_alm5', YLeaf(YType.str, 'tx_opt_pw_alm5')),
                                    ('tx_opt_pw_alm6', YLeaf(YType.str, 'tx_opt_pw_alm6')),
                                    ('tx_opt_pw_alm7', YLeaf(YType.str, 'tx_opt_pw_alm7')),
                                    ('tx_opt_pw_alm8', YLeaf(YType.str, 'tx_opt_pw_alm8')),
                                    ('tx_opt_pw_alm9', YLeaf(YType.str, 'tx_opt_pw_alm9')),
                                    ('tx_opt_pw_alm10', YLeaf(YType.str, 'tx_opt_pw_alm10')),
                                    ('tx_opt_pw_alm11', YLeaf(YType.str, 'tx_opt_pw_alm11')),
                                    ('tx_opt_bs_alm0', YLeaf(YType.str, 'tx_opt_bs_alm0')),
                                    ('tx_opt_bs_alm1', YLeaf(YType.str, 'tx_opt_bs_alm1')),
                                    ('tx_opt_bs_alm2', YLeaf(YType.str, 'tx_opt_bs_alm2')),
                                    ('tx_opt_bs_alm3', YLeaf(YType.str, 'tx_opt_bs_alm3')),
                                    ('tx_opt_bs_alm4', YLeaf(YType.str, 'tx_opt_bs_alm4')),
                                    ('tx_opt_bs_alm5', YLeaf(YType.str, 'tx_opt_bs_alm5')),
                                    ('tx_opt_bs_alm6', YLeaf(YType.str, 'tx_opt_bs_alm6')),
                                    ('tx_opt_bs_alm7', YLeaf(YType.str, 'tx_opt_bs_alm7')),
                                    ('tx_opt_bs_alm8', YLeaf(YType.str, 'tx_opt_bs_alm8')),
                                    ('tx_opt_bs_alm9', YLeaf(YType.str, 'tx_opt_bs_alm9')),
                                    ('tx_opt_bs_alm10', YLeaf(YType.str, 'tx_opt_bs_alm10')),
                                    ('tx_opt_bs_alm11', YLeaf(YType.str, 'tx_opt_bs_alm11')),
                                    ('tx_light_op_dbm0', YLeaf(YType.str, 'tx_light_op_dBm0')),
                                    ('tx_light_op_dbm1', YLeaf(YType.str, 'tx_light_op_dBm1')),
                                    ('tx_light_op_dbm2', YLeaf(YType.str, 'tx_light_op_dBm2')),
                                    ('tx_light_op_dbm3', YLeaf(YType.str, 'tx_light_op_dBm3')),
                                    ('tx_light_op_dbm4', YLeaf(YType.str, 'tx_light_op_dBm4')),
                                    ('tx_light_op_dbm5', YLeaf(YType.str, 'tx_light_op_dBm5')),
                                    ('tx_light_op_dbm6', YLeaf(YType.str, 'tx_light_op_dBm6')),
                                    ('tx_light_op_dbm7', YLeaf(YType.str, 'tx_light_op_dBm7')),
                                    ('tx_light_op_dbm8', YLeaf(YType.str, 'tx_light_op_dBm8')),
                                    ('tx_light_op_dbm9', YLeaf(YType.str, 'tx_light_op_dBm9')),
                                    ('tx_light_op_dbm10', YLeaf(YType.str, 'tx_light_op_dBm10')),
                                    ('tx_light_op_dbm11', YLeaf(YType.str, 'tx_light_op_dBm11')),
                                    ('rx_temp_rd', YLeaf(YType.str, 'RX_temp_rd')),
                                    ('rx_temp_sts', YLeaf(YType.str, 'RX_temp_sts')),
                                    ('rx_volt_sts', YLeaf(YType.str, 'RX_volt_sts')),
                                    ('rx_volt_rd', YLeaf(YType.str, 'RX_volt_rd')),
                                    ('rx_chn_sts0', YLeaf(YType.str, 'rx_chn_sts0')),
                                    ('rx_chn_sts1', YLeaf(YType.str, 'rx_chn_sts1')),
                                    ('rx_chn_sts2', YLeaf(YType.str, 'rx_chn_sts2')),
                                    ('rx_chn_sts3', YLeaf(YType.str, 'rx_chn_sts3')),
                                    ('rx_chn_sts4', YLeaf(YType.str, 'rx_chn_sts4')),
                                    ('rx_chn_sts5', YLeaf(YType.str, 'rx_chn_sts5')),
                                    ('rx_chn_sts6', YLeaf(YType.str, 'rx_chn_sts6')),
                                    ('rx_chn_sts7', YLeaf(YType.str, 'rx_chn_sts7')),
                                    ('rx_chn_sts8', YLeaf(YType.str, 'rx_chn_sts8')),
                                    ('rx_chn_sts9', YLeaf(YType.str, 'rx_chn_sts9')),
                                    ('rx_chn_sts10', YLeaf(YType.str, 'rx_chn_sts10')),
                                    ('rx_chn_sts11', YLeaf(YType.str, 'rx_chn_sts11')),
                                    ('rx_los0', YLeaf(YType.str, 'rx_los0')),
                                    ('rx_los1', YLeaf(YType.str, 'rx_los1')),
                                    ('rx_los2', YLeaf(YType.str, 'rx_los2')),
                                    ('rx_los3', YLeaf(YType.str, 'rx_los3')),
                                    ('rx_los4', YLeaf(YType.str, 'rx_los4')),
                                    ('rx_los5', YLeaf(YType.str, 'rx_los5')),
                                    ('rx_los6', YLeaf(YType.str, 'rx_los6')),
                                    ('rx_los7', YLeaf(YType.str, 'rx_los7')),
                                    ('rx_los8', YLeaf(YType.str, 'rx_los8')),
                                    ('rx_los9', YLeaf(YType.str, 'rx_los9')),
                                    ('rx_los10', YLeaf(YType.str, 'rx_los10')),
                                    ('rx_los11', YLeaf(YType.str, 'rx_los11')),
                                    ('rx_opt_pw_alm0', YLeaf(YType.str, 'rx_opt_pw_alm0')),
                                    ('rx_opt_pw_alm1', YLeaf(YType.str, 'rx_opt_pw_alm1')),
                                    ('rx_opt_pw_alm2', YLeaf(YType.str, 'rx_opt_pw_alm2')),
                                    ('rx_opt_pw_alm3', YLeaf(YType.str, 'rx_opt_pw_alm3')),
                                    ('rx_opt_pw_alm4', YLeaf(YType.str, 'rx_opt_pw_alm4')),
                                    ('rx_opt_pw_alm5', YLeaf(YType.str, 'rx_opt_pw_alm5')),
                                    ('rx_opt_pw_alm6', YLeaf(YType.str, 'rx_opt_pw_alm6')),
                                    ('rx_opt_pw_alm7', YLeaf(YType.str, 'rx_opt_pw_alm7')),
                                    ('rx_opt_pw_alm8', YLeaf(YType.str, 'rx_opt_pw_alm8')),
                                    ('rx_opt_pw_alm9', YLeaf(YType.str, 'rx_opt_pw_alm9')),
                                    ('rx_opt_pw_alm10', YLeaf(YType.str, 'rx_opt_pw_alm10')),
                                    ('rx_opt_pw_alm11', YLeaf(YType.str, 'rx_opt_pw_alm11')),
                                    ('rx_light_in_dbm0', YLeaf(YType.str, 'rx_light_in_dBm0')),
                                    ('rx_light_in_dbm1', YLeaf(YType.str, 'rx_light_in_dBm1')),
                                    ('rx_light_in_dbm2', YLeaf(YType.str, 'rx_light_in_dBm2')),
                                    ('rx_light_in_dbm3', YLeaf(YType.str, 'rx_light_in_dBm3')),
                                    ('rx_light_in_dbm4', YLeaf(YType.str, 'rx_light_in_dBm4')),
                                    ('rx_light_in_dbm5', YLeaf(YType.str, 'rx_light_in_dBm5')),
                                    ('rx_light_in_dbm6', YLeaf(YType.str, 'rx_light_in_dBm6')),
                                    ('rx_light_in_dbm7', YLeaf(YType.str, 'rx_light_in_dBm7')),
                                    ('rx_light_in_dbm8', YLeaf(YType.str, 'rx_light_in_dBm8')),
                                    ('rx_light_in_dbm9', YLeaf(YType.str, 'rx_light_in_dBm9')),
                                    ('rx_light_in_dbm10', YLeaf(YType.str, 'rx_light_in_dBm10')),
                                    ('rx_light_in_dbm11', YLeaf(YType.str, 'rx_light_in_dBm11')),
                                ])
                                self.cxp_port = None
                                self.show_port = None
                                self.cxp2_display = None
                                self.rack_num = None
                                self.slot_num = None
                                self.cur_loc_str = None
                                self.vendorname = None
                                self.partnumber = None
                                self.serialnumber = None
                                self.vid = None
                                self.pid = None
                                self.vendor_rev_num = None
                                self.vendor_pn = None
                                self.vendor_sn = None
                                self.dev_description = None
                                self.clei_code_num = None
                                self.ven_date_code = None
                                self.ven_lot_code = None
                                self.vendor_oui_ieee_company_id = None
                                self.eeprom_rev_num = None
                                self.firmware_rev_num = None
                                self.tx_temp_rd = None
                                self.tx_temp_sts = None
                                self.tx_volt_sts = None
                                self.tx_volt_rd = None
                                self.tx_chn_sts0 = None
                                self.tx_chn_sts1 = None
                                self.tx_chn_sts2 = None
                                self.tx_chn_sts3 = None
                                self.tx_chn_sts4 = None
                                self.tx_chn_sts5 = None
                                self.tx_chn_sts6 = None
                                self.tx_chn_sts7 = None
                                self.tx_chn_sts8 = None
                                self.tx_chn_sts9 = None
                                self.tx_chn_sts10 = None
                                self.tx_chn_sts11 = None
                                self.tx_fault0 = None
                                self.tx_fault1 = None
                                self.tx_fault2 = None
                                self.tx_fault3 = None
                                self.tx_fault4 = None
                                self.tx_fault5 = None
                                self.tx_fault6 = None
                                self.tx_fault7 = None
                                self.tx_fault8 = None
                                self.tx_fault9 = None
                                self.tx_fault10 = None
                                self.tx_fault11 = None
                                self.tx_bias_cur0 = None
                                self.tx_bias_cur1 = None
                                self.tx_bias_cur2 = None
                                self.tx_bias_cur3 = None
                                self.tx_bias_cur4 = None
                                self.tx_bias_cur5 = None
                                self.tx_bias_cur6 = None
                                self.tx_bias_cur7 = None
                                self.tx_bias_cur8 = None
                                self.tx_bias_cur9 = None
                                self.tx_bias_cur10 = None
                                self.tx_bias_cur11 = None
                                self.tx_los0 = None
                                self.tx_los1 = None
                                self.tx_los2 = None
                                self.tx_los3 = None
                                self.tx_los4 = None
                                self.tx_los5 = None
                                self.tx_los6 = None
                                self.tx_los7 = None
                                self.tx_los8 = None
                                self.tx_los9 = None
                                self.tx_los10 = None
                                self.tx_los11 = None
                                self.tx_opt_pw_alm0 = None
                                self.tx_opt_pw_alm1 = None
                                self.tx_opt_pw_alm2 = None
                                self.tx_opt_pw_alm3 = None
                                self.tx_opt_pw_alm4 = None
                                self.tx_opt_pw_alm5 = None
                                self.tx_opt_pw_alm6 = None
                                self.tx_opt_pw_alm7 = None
                                self.tx_opt_pw_alm8 = None
                                self.tx_opt_pw_alm9 = None
                                self.tx_opt_pw_alm10 = None
                                self.tx_opt_pw_alm11 = None
                                self.tx_opt_bs_alm0 = None
                                self.tx_opt_bs_alm1 = None
                                self.tx_opt_bs_alm2 = None
                                self.tx_opt_bs_alm3 = None
                                self.tx_opt_bs_alm4 = None
                                self.tx_opt_bs_alm5 = None
                                self.tx_opt_bs_alm6 = None
                                self.tx_opt_bs_alm7 = None
                                self.tx_opt_bs_alm8 = None
                                self.tx_opt_bs_alm9 = None
                                self.tx_opt_bs_alm10 = None
                                self.tx_opt_bs_alm11 = None
                                self.tx_light_op_dbm0 = None
                                self.tx_light_op_dbm1 = None
                                self.tx_light_op_dbm2 = None
                                self.tx_light_op_dbm3 = None
                                self.tx_light_op_dbm4 = None
                                self.tx_light_op_dbm5 = None
                                self.tx_light_op_dbm6 = None
                                self.tx_light_op_dbm7 = None
                                self.tx_light_op_dbm8 = None
                                self.tx_light_op_dbm9 = None
                                self.tx_light_op_dbm10 = None
                                self.tx_light_op_dbm11 = None
                                self.rx_temp_rd = None
                                self.rx_temp_sts = None
                                self.rx_volt_sts = None
                                self.rx_volt_rd = None
                                self.rx_chn_sts0 = None
                                self.rx_chn_sts1 = None
                                self.rx_chn_sts2 = None
                                self.rx_chn_sts3 = None
                                self.rx_chn_sts4 = None
                                self.rx_chn_sts5 = None
                                self.rx_chn_sts6 = None
                                self.rx_chn_sts7 = None
                                self.rx_chn_sts8 = None
                                self.rx_chn_sts9 = None
                                self.rx_chn_sts10 = None
                                self.rx_chn_sts11 = None
                                self.rx_los0 = None
                                self.rx_los1 = None
                                self.rx_los2 = None
                                self.rx_los3 = None
                                self.rx_los4 = None
                                self.rx_los5 = None
                                self.rx_los6 = None
                                self.rx_los7 = None
                                self.rx_los8 = None
                                self.rx_los9 = None
                                self.rx_los10 = None
                                self.rx_los11 = None
                                self.rx_opt_pw_alm0 = None
                                self.rx_opt_pw_alm1 = None
                                self.rx_opt_pw_alm2 = None
                                self.rx_opt_pw_alm3 = None
                                self.rx_opt_pw_alm4 = None
                                self.rx_opt_pw_alm5 = None
                                self.rx_opt_pw_alm6 = None
                                self.rx_opt_pw_alm7 = None
                                self.rx_opt_pw_alm8 = None
                                self.rx_opt_pw_alm9 = None
                                self.rx_opt_pw_alm10 = None
                                self.rx_opt_pw_alm11 = None
                                self.rx_light_in_dbm0 = None
                                self.rx_light_in_dbm1 = None
                                self.rx_light_in_dbm2 = None
                                self.rx_light_in_dbm3 = None
                                self.rx_light_in_dbm4 = None
                                self.rx_light_in_dbm5 = None
                                self.rx_light_in_dbm6 = None
                                self.rx_light_in_dbm7 = None
                                self.rx_light_in_dbm8 = None
                                self.rx_light_in_dbm9 = None
                                self.rx_light_in_dbm10 = None
                                self.rx_light_in_dbm11 = None
                                self._segment_path = lambda: "port" + "[cxp_port='" + str(self.cxp_port) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Fabric.Oper.Cxp.Dom.Location.Port, ['cxp_port', 'show_port', 'cxp2_display', 'rack_num', 'slot_num', 'cur_loc_str', 'vendorname', 'partnumber', 'serialnumber', 'vid', 'pid', 'vendor_rev_num', 'vendor_pn', 'vendor_sn', 'dev_description', 'clei_code_num', 'ven_date_code', 'ven_lot_code', 'vendor_oui_ieee_company_id', 'eeprom_rev_num', 'firmware_rev_num', 'tx_temp_rd', 'tx_temp_sts', 'tx_volt_sts', 'tx_volt_rd', 'tx_chn_sts0', 'tx_chn_sts1', 'tx_chn_sts2', 'tx_chn_sts3', 'tx_chn_sts4', 'tx_chn_sts5', 'tx_chn_sts6', 'tx_chn_sts7', 'tx_chn_sts8', 'tx_chn_sts9', 'tx_chn_sts10', 'tx_chn_sts11', 'tx_fault0', 'tx_fault1', 'tx_fault2', 'tx_fault3', 'tx_fault4', 'tx_fault5', 'tx_fault6', 'tx_fault7', 'tx_fault8', 'tx_fault9', 'tx_fault10', 'tx_fault11', 'tx_bias_cur0', 'tx_bias_cur1', 'tx_bias_cur2', 'tx_bias_cur3', 'tx_bias_cur4', 'tx_bias_cur5', 'tx_bias_cur6', 'tx_bias_cur7', 'tx_bias_cur8', 'tx_bias_cur9', 'tx_bias_cur10', 'tx_bias_cur11', 'tx_los0', 'tx_los1', 'tx_los2', 'tx_los3', 'tx_los4', 'tx_los5', 'tx_los6', 'tx_los7', 'tx_los8', 'tx_los9', 'tx_los10', 'tx_los11', 'tx_opt_pw_alm0', 'tx_opt_pw_alm1', 'tx_opt_pw_alm2', 'tx_opt_pw_alm3', 'tx_opt_pw_alm4', 'tx_opt_pw_alm5', 'tx_opt_pw_alm6', 'tx_opt_pw_alm7', 'tx_opt_pw_alm8', 'tx_opt_pw_alm9', 'tx_opt_pw_alm10', 'tx_opt_pw_alm11', 'tx_opt_bs_alm0', 'tx_opt_bs_alm1', 'tx_opt_bs_alm2', 'tx_opt_bs_alm3', 'tx_opt_bs_alm4', 'tx_opt_bs_alm5', 'tx_opt_bs_alm6', 'tx_opt_bs_alm7', 'tx_opt_bs_alm8', 'tx_opt_bs_alm9', 'tx_opt_bs_alm10', 'tx_opt_bs_alm11', 'tx_light_op_dbm0', 'tx_light_op_dbm1', 'tx_light_op_dbm2', 'tx_light_op_dbm3', 'tx_light_op_dbm4', 'tx_light_op_dbm5', 'tx_light_op_dbm6', 'tx_light_op_dbm7', 'tx_light_op_dbm8', 'tx_light_op_dbm9', 'tx_light_op_dbm10', 'tx_light_op_dbm11', 'rx_temp_rd', 'rx_temp_sts', 'rx_volt_sts', 'rx_volt_rd', 'rx_chn_sts0', 'rx_chn_sts1', 'rx_chn_sts2', 'rx_chn_sts3', 'rx_chn_sts4', 'rx_chn_sts5', 'rx_chn_sts6', 'rx_chn_sts7', 'rx_chn_sts8', 'rx_chn_sts9', 'rx_chn_sts10', 'rx_chn_sts11', 'rx_los0', 'rx_los1', 'rx_los2', 'rx_los3', 'rx_los4', 'rx_los5', 'rx_los6', 'rx_los7', 'rx_los8', 'rx_los9', 'rx_los10', 'rx_los11', 'rx_opt_pw_alm0', 'rx_opt_pw_alm1', 'rx_opt_pw_alm2', 'rx_opt_pw_alm3', 'rx_opt_pw_alm4', 'rx_opt_pw_alm5', 'rx_opt_pw_alm6', 'rx_opt_pw_alm7', 'rx_opt_pw_alm8', 'rx_opt_pw_alm9', 'rx_opt_pw_alm10', 'rx_opt_pw_alm11', 'rx_light_in_dbm0', 'rx_light_in_dbm1', 'rx_light_in_dbm2', 'rx_light_in_dbm3', 'rx_light_in_dbm4', 'rx_light_in_dbm5', 'rx_light_in_dbm6', 'rx_light_in_dbm7', 'rx_light_in_dbm8', 'rx_light_in_dbm9', 'rx_light_in_dbm10', 'rx_light_in_dbm11'], name, value)


                class Summary(Entity):
                    """
                    
                    
                    .. attribute:: rack
                    
                    	
                    	**type**\: list of  		 :py:class:`Rack <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Cxp.Summary.Rack>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.Fabric.Oper.Cxp.Summary, self).__init__()

                        self.yang_name = "summary"
                        self.yang_parent_name = "cxp"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("rack", ("rack", Controller.Fabric.Oper.Cxp.Summary.Rack))])
                        self._leafs = OrderedDict()

                        self.rack = YList(self)
                        self._segment_path = lambda: "summary"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/oper/cxp/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.Fabric.Oper.Cxp.Summary, [], name, value)


                    class Rack(Entity):
                        """
                        
                        
                        .. attribute:: rack_str  (key)
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: description
                        
                        	
                        	**type**\: str
                        
                        	**default value**\: Rack No.
                        
                        .. attribute:: split_tbl_flag
                        
                        	
                        	**type**\: list of  		 :py:class:`SplitTblFlag <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Cxp.Summary.Rack.SplitTblFlag>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Fabric.Oper.Cxp.Summary.Rack, self).__init__()

                            self.yang_name = "rack"
                            self.yang_parent_name = "summary"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = ['rack_str']
                            self._child_classes = OrderedDict([("split_tbl_flag", ("split_tbl_flag", Controller.Fabric.Oper.Cxp.Summary.Rack.SplitTblFlag))])
                            self._leafs = OrderedDict([
                                ('rack_str', YLeaf(YType.str, 'rack_str')),
                                ('description', YLeaf(YType.str, 'description')),
                            ])
                            self.rack_str = None
                            self.description = None

                            self.split_tbl_flag = YList(self)
                            self._segment_path = lambda: "rack" + "[rack_str='" + str(self.rack_str) + "']"
                            self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/oper/cxp/summary/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Fabric.Oper.Cxp.Summary.Rack, ['rack_str', 'description'], name, value)


                        class SplitTblFlag(Entity):
                            """
                            
                            
                            .. attribute:: tbl_splt  (key)
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: smry_per_slot
                            
                            	
                            	**type**\: list of  		 :py:class:`SmryPerSlot <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Cxp.Summary.Rack.SplitTblFlag.SmryPerSlot>`
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Fabric.Oper.Cxp.Summary.Rack.SplitTblFlag, self).__init__()

                                self.yang_name = "split_tbl_flag"
                                self.yang_parent_name = "rack"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['tbl_splt']
                                self._child_classes = OrderedDict([("smry_per_slot", ("smry_per_slot", Controller.Fabric.Oper.Cxp.Summary.Rack.SplitTblFlag.SmryPerSlot))])
                                self._leafs = OrderedDict([
                                    ('tbl_splt', YLeaf(YType.uint32, 'tbl_splt')),
                                ])
                                self.tbl_splt = None

                                self.smry_per_slot = YList(self)
                                self._segment_path = lambda: "split_tbl_flag" + "[tbl_splt='" + str(self.tbl_splt) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Fabric.Oper.Cxp.Summary.Rack.SplitTblFlag, ['tbl_splt'], name, value)


                            class SmryPerSlot(Entity):
                                """
                                
                                
                                .. attribute:: slot_no  (key)
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: func_rack_name
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: max_cxp
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: row_cxp_1
                                
                                	
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: row_cxp_2
                                
                                	
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: slot_row
                                
                                	
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: tbl_splt_flag
                                
                                	
                                	**type**\: bool
                                
                                .. attribute:: cxp_port_no
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: fc_loc_str
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: cxp_sts_0
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: cxp_sts_1
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: cxp_sts_2
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: cxp_sts_3
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: cxp_sts_4
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: cxp_sts_5
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: cxp_sts_6
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: cxp_sts_7
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: cxp_sts_8
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: cxp_sts_9
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: cxp_sts_10
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: cxp_sts_11
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: cxp_sts_12
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: cxp_sts_13
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: cxp_sts_14
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: cxp_sts_15
                                
                                	
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.Fabric.Oper.Cxp.Summary.Rack.SplitTblFlag.SmryPerSlot, self).__init__()

                                    self.yang_name = "smry_per_slot"
                                    self.yang_parent_name = "split_tbl_flag"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['slot_no']
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('slot_no', YLeaf(YType.uint32, 'slot_no')),
                                        ('func_rack_name', YLeaf(YType.str, 'func_rack_name')),
                                        ('max_cxp', YLeaf(YType.uint32, 'max_cxp')),
                                        ('row_cxp_1', YLeaf(YType.boolean, 'row_cxp_1')),
                                        ('row_cxp_2', YLeaf(YType.boolean, 'row_cxp_2')),
                                        ('slot_row', YLeaf(YType.boolean, 'slot_row')),
                                        ('tbl_splt_flag', YLeaf(YType.boolean, 'tbl_splt_flag')),
                                        ('cxp_port_no', YLeaf(YType.uint32, 'cxp_port_no')),
                                        ('fc_loc_str', YLeaf(YType.str, 'fc_loc_str')),
                                        ('cxp_sts_0', YLeaf(YType.str, 'cxp_sts_0')),
                                        ('cxp_sts_1', YLeaf(YType.str, 'cxp_sts_1')),
                                        ('cxp_sts_2', YLeaf(YType.str, 'cxp_sts_2')),
                                        ('cxp_sts_3', YLeaf(YType.str, 'cxp_sts_3')),
                                        ('cxp_sts_4', YLeaf(YType.str, 'cxp_sts_4')),
                                        ('cxp_sts_5', YLeaf(YType.str, 'cxp_sts_5')),
                                        ('cxp_sts_6', YLeaf(YType.str, 'cxp_sts_6')),
                                        ('cxp_sts_7', YLeaf(YType.str, 'cxp_sts_7')),
                                        ('cxp_sts_8', YLeaf(YType.str, 'cxp_sts_8')),
                                        ('cxp_sts_9', YLeaf(YType.str, 'cxp_sts_9')),
                                        ('cxp_sts_10', YLeaf(YType.str, 'cxp_sts_10')),
                                        ('cxp_sts_11', YLeaf(YType.str, 'cxp_sts_11')),
                                        ('cxp_sts_12', YLeaf(YType.str, 'cxp_sts_12')),
                                        ('cxp_sts_13', YLeaf(YType.str, 'cxp_sts_13')),
                                        ('cxp_sts_14', YLeaf(YType.str, 'cxp_sts_14')),
                                        ('cxp_sts_15', YLeaf(YType.str, 'cxp_sts_15')),
                                    ])
                                    self.slot_no = None
                                    self.func_rack_name = None
                                    self.max_cxp = None
                                    self.row_cxp_1 = None
                                    self.row_cxp_2 = None
                                    self.slot_row = None
                                    self.tbl_splt_flag = None
                                    self.cxp_port_no = None
                                    self.fc_loc_str = None
                                    self.cxp_sts_0 = None
                                    self.cxp_sts_1 = None
                                    self.cxp_sts_2 = None
                                    self.cxp_sts_3 = None
                                    self.cxp_sts_4 = None
                                    self.cxp_sts_5 = None
                                    self.cxp_sts_6 = None
                                    self.cxp_sts_7 = None
                                    self.cxp_sts_8 = None
                                    self.cxp_sts_9 = None
                                    self.cxp_sts_10 = None
                                    self.cxp_sts_11 = None
                                    self.cxp_sts_12 = None
                                    self.cxp_sts_13 = None
                                    self.cxp_sts_14 = None
                                    self.cxp_sts_15 = None
                                    self._segment_path = lambda: "smry_per_slot" + "[slot_no='" + str(self.slot_no) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.Fabric.Oper.Cxp.Summary.Rack.SplitTblFlag.SmryPerSlot, ['slot_no', 'func_rack_name', 'max_cxp', 'row_cxp_1', 'row_cxp_2', 'slot_row', 'tbl_splt_flag', 'cxp_port_no', 'fc_loc_str', 'cxp_sts_0', 'cxp_sts_1', 'cxp_sts_2', 'cxp_sts_3', 'cxp_sts_4', 'cxp_sts_5', 'cxp_sts_6', 'cxp_sts_7', 'cxp_sts_8', 'cxp_sts_9', 'cxp_sts_10', 'cxp_sts_11', 'cxp_sts_12', 'cxp_sts_13', 'cxp_sts_14', 'cxp_sts_15'], name, value)


            class Fgid(Entity):
                """
                FGID management information
                
                .. attribute:: information
                
                	
                	**type**\:  :py:class:`Information <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Fgid.Information>`
                
                .. attribute:: resource
                
                	
                	**type**\:  :py:class:`Resource <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Fgid.Resource>`
                
                .. attribute:: statistics
                
                	
                	**type**\:  :py:class:`Statistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Fgid.Statistics>`
                
                .. attribute:: fgid_mgr
                
                	
                	**type**\:  :py:class:`FgidMgr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Fgid.FgidMgr>`
                
                .. attribute:: program_error
                
                	
                	**type**\: list of  		 :py:class:`ProgramError <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Fgid.ProgramError>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Controller.Fabric.Oper.Fgid, self).__init__()

                    self.yang_name = "fgid"
                    self.yang_parent_name = "oper"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("information", ("information", Controller.Fabric.Oper.Fgid.Information)), ("resource", ("resource", Controller.Fabric.Oper.Fgid.Resource)), ("statistics", ("statistics", Controller.Fabric.Oper.Fgid.Statistics)), ("fgid_mgr", ("fgid_mgr", Controller.Fabric.Oper.Fgid.FgidMgr)), ("program_error", ("program_error", Controller.Fabric.Oper.Fgid.ProgramError))])
                    self._leafs = OrderedDict()

                    self.information = Controller.Fabric.Oper.Fgid.Information()
                    self.information.parent = self
                    self._children_name_map["information"] = "information"

                    self.resource = Controller.Fabric.Oper.Fgid.Resource()
                    self.resource.parent = self
                    self._children_name_map["resource"] = "resource"

                    self.statistics = Controller.Fabric.Oper.Fgid.Statistics()
                    self.statistics.parent = self
                    self._children_name_map["statistics"] = "statistics"

                    self.fgid_mgr = Controller.Fabric.Oper.Fgid.FgidMgr()
                    self.fgid_mgr.parent = self
                    self._children_name_map["fgid_mgr"] = "fgid_mgr"

                    self.program_error = YList(self)
                    self._segment_path = lambda: "fgid"
                    self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/oper/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Controller.Fabric.Oper.Fgid, [], name, value)


                class Information(Entity):
                    """
                    
                    
                    .. attribute:: id
                    
                    	
                    	**type**\: list of  		 :py:class:`Id <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Fgid.Information.Id>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.Fabric.Oper.Fgid.Information, self).__init__()

                        self.yang_name = "information"
                        self.yang_parent_name = "fgid"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("id", ("id", Controller.Fabric.Oper.Fgid.Information.Id))])
                        self._leafs = OrderedDict()

                        self.id = YList(self)
                        self._segment_path = lambda: "information"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/oper/fgid/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.Fabric.Oper.Fgid.Information, [], name, value)


                    class Id(Entity):
                        """
                        
                        
                        .. attribute:: fgid_id  (key)
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..524287
                        
                        .. attribute:: hex_bitmaps
                        
                        	
                        	**type**\: list of  		 :py:class:`HexBitmaps <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Fgid.Information.Id.HexBitmaps>`
                        
                        .. attribute:: binary_bitmaps
                        
                        	
                        	**type**\: list of  		 :py:class:`BinaryBitmaps <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Fgid.Information.Id.BinaryBitmaps>`
                        
                        .. attribute:: total_asso_fabricq_ids
                        
                        	
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: asso_fabricq_ids
                        
                        	
                        	**type**\: list of  		 :py:class:`AssoFabricqIds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Fgid.Information.Id.AssoFabricqIds>`
                        
                        .. attribute:: asso_client_info
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: drivers
                        
                        	
                        	**type**\: list of  		 :py:class:`Drivers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Fgid.Information.Id.Drivers>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Fabric.Oper.Fgid.Information.Id, self).__init__()

                            self.yang_name = "id"
                            self.yang_parent_name = "information"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = ['fgid_id']
                            self._child_classes = OrderedDict([("hex_bitmaps", ("hex_bitmaps", Controller.Fabric.Oper.Fgid.Information.Id.HexBitmaps)), ("binary_bitmaps", ("binary_bitmaps", Controller.Fabric.Oper.Fgid.Information.Id.BinaryBitmaps)), ("asso_fabricq_ids", ("asso_fabricq_ids", Controller.Fabric.Oper.Fgid.Information.Id.AssoFabricqIds)), ("drivers", ("drivers", Controller.Fabric.Oper.Fgid.Information.Id.Drivers))])
                            self._leafs = OrderedDict([
                                ('fgid_id', YLeaf(YType.int32, 'fgid_id')),
                                ('total_asso_fabricq_ids', YLeaf(YType.int32, 'total_asso_fabricq_ids')),
                                ('asso_client_info', YLeaf(YType.str, 'asso_client_info')),
                            ])
                            self.fgid_id = None
                            self.total_asso_fabricq_ids = None
                            self.asso_client_info = None

                            self.hex_bitmaps = YList(self)
                            self.binary_bitmaps = YList(self)
                            self.asso_fabricq_ids = YList(self)
                            self.drivers = YList(self)
                            self._segment_path = lambda: "id" + "[fgid_id='" + str(self.fgid_id) + "']"
                            self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/oper/fgid/information/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Fabric.Oper.Fgid.Information.Id, ['fgid_id', 'total_asso_fabricq_ids', 'asso_client_info'], name, value)


                        class HexBitmaps(Entity):
                            """
                            
                            
                            .. attribute:: rack_number  (key)
                            
                            	
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: bitmap
                            
                            	
                            	**type**\: str
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Fabric.Oper.Fgid.Information.Id.HexBitmaps, self).__init__()

                                self.yang_name = "hex_bitmaps"
                                self.yang_parent_name = "id"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['rack_number']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('rack_number', YLeaf(YType.int32, 'rack_number')),
                                    ('bitmap', YLeaf(YType.str, 'bitmap')),
                                ])
                                self.rack_number = None
                                self.bitmap = None
                                self._segment_path = lambda: "hex_bitmaps" + "[rack_number='" + str(self.rack_number) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Fabric.Oper.Fgid.Information.Id.HexBitmaps, ['rack_number', 'bitmap'], name, value)


                        class BinaryBitmaps(Entity):
                            """
                            
                            
                            .. attribute:: rack_number  (key)
                            
                            	
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: bitmap
                            
                            	
                            	**type**\: str
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Fabric.Oper.Fgid.Information.Id.BinaryBitmaps, self).__init__()

                                self.yang_name = "binary_bitmaps"
                                self.yang_parent_name = "id"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['rack_number']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('rack_number', YLeaf(YType.int32, 'rack_number')),
                                    ('bitmap', YLeaf(YType.str, 'bitmap')),
                                ])
                                self.rack_number = None
                                self.bitmap = None
                                self._segment_path = lambda: "binary_bitmaps" + "[rack_number='" + str(self.rack_number) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Fabric.Oper.Fgid.Information.Id.BinaryBitmaps, ['rack_number', 'bitmap'], name, value)


                        class AssoFabricqIds(Entity):
                            """
                            
                            
                            .. attribute:: fabricq_id  (key)
                            
                            	
                            	**type**\: str
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Fabric.Oper.Fgid.Information.Id.AssoFabricqIds, self).__init__()

                                self.yang_name = "asso_fabricq_ids"
                                self.yang_parent_name = "id"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['fabricq_id']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('fabricq_id', YLeaf(YType.str, 'fabricq_id')),
                                ])
                                self.fabricq_id = None
                                self._segment_path = lambda: "asso_fabricq_ids" + "[fabricq_id='" + str(self.fabricq_id) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Fabric.Oper.Fgid.Information.Id.AssoFabricqIds, ['fabricq_id'], name, value)


                        class Drivers(Entity):
                            """
                            
                            
                            .. attribute:: rack_number  (key)
                            
                            	
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: clients
                            
                            	
                            	**type**\: list of  		 :py:class:`Clients <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Fgid.Information.Id.Drivers.Clients>`
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Fabric.Oper.Fgid.Information.Id.Drivers, self).__init__()

                                self.yang_name = "drivers"
                                self.yang_parent_name = "id"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['rack_number']
                                self._child_classes = OrderedDict([("clients", ("clients", Controller.Fabric.Oper.Fgid.Information.Id.Drivers.Clients))])
                                self._leafs = OrderedDict([
                                    ('rack_number', YLeaf(YType.int32, 'rack_number')),
                                ])
                                self.rack_number = None

                                self.clients = YList(self)
                                self._segment_path = lambda: "drivers" + "[rack_number='" + str(self.rack_number) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Fabric.Oper.Fgid.Information.Id.Drivers, ['rack_number'], name, value)


                            class Clients(Entity):
                                """
                                
                                
                                .. attribute:: client_idx  (key)
                                
                                	
                                	**type**\: int
                                
                                	**range:** \-2147483648..2147483647
                                
                                .. attribute:: show_asic_0
                                
                                	
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: asic_0_bitmap
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: show_asic_1
                                
                                	
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: asic_1_bitmap
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: show_asic_2
                                
                                	
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: asic_2_bitmap
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: show_asic_3
                                
                                	
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: asic_3_bitmap
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: show_asic_4
                                
                                	
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: asic_4_bitmap
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: show_asic_5
                                
                                	
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: asic_5_bitmap
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: show_asic_6
                                
                                	
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: asic_6_bitmap
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: show_asic_7
                                
                                	
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: asic_7_bitmap
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: show_asic_8
                                
                                	
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: asic_8_bitmap
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: show_asic_9
                                
                                	
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: asic_9_bitmap
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: show_asic_10
                                
                                	
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: asic_10_bitmap
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: show_asic_11
                                
                                	
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: asic_11_bitmap
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: show_asic_12
                                
                                	
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: asic_12_bitmap
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: show_asic_13
                                
                                	
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: asic_13_bitmap
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: show_asic_14
                                
                                	
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: asic_14_bitmap
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: show_asic_15
                                
                                	
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: asic_15_bitmap
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: show_asic_16
                                
                                	
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: asic_16_bitmap
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: show_asic_17
                                
                                	
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: asic_17_bitmap
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: show_asic_18
                                
                                	
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: asic_18_bitmap
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: show_asic_19
                                
                                	
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: asic_19_bitmap
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: show_asic_20
                                
                                	
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: asic_20_bitmap
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: show_asic_21
                                
                                	
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: asic_21_bitmap
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: show_asic_22
                                
                                	
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: asic_22_bitmap
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: show_asic_23
                                
                                	
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: asic_23_bitmap
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: show_asic_24
                                
                                	
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: asic_24_bitmap
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: show_asic_25
                                
                                	
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: asic_25_bitmap
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: show_asic_26
                                
                                	
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: asic_26_bitmap
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: show_asic_27
                                
                                	
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: asic_27_bitmap
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: show_asic_28
                                
                                	
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: asic_28_bitmap
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: show_asic_29
                                
                                	
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: asic_29_bitmap
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: show_asic_30
                                
                                	
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: asic_30_bitmap
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: show_asic_31
                                
                                	
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: asic_31_bitmap
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: show_asic_32
                                
                                	
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: asic_32_bitmap
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: show_asic_33
                                
                                	
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: asic_33_bitmap
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: show_asic_34
                                
                                	
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: asic_34_bitmap
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: show_asic_35
                                
                                	
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: asic_35_bitmap
                                
                                	
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.Fabric.Oper.Fgid.Information.Id.Drivers.Clients, self).__init__()

                                    self.yang_name = "clients"
                                    self.yang_parent_name = "drivers"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['client_idx']
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('client_idx', YLeaf(YType.int32, 'client_idx')),
                                        ('show_asic_0', YLeaf(YType.boolean, 'show_asic_0')),
                                        ('asic_0_bitmap', YLeaf(YType.str, 'asic_0_bitmap')),
                                        ('show_asic_1', YLeaf(YType.boolean, 'show_asic_1')),
                                        ('asic_1_bitmap', YLeaf(YType.str, 'asic_1_bitmap')),
                                        ('show_asic_2', YLeaf(YType.boolean, 'show_asic_2')),
                                        ('asic_2_bitmap', YLeaf(YType.str, 'asic_2_bitmap')),
                                        ('show_asic_3', YLeaf(YType.boolean, 'show_asic_3')),
                                        ('asic_3_bitmap', YLeaf(YType.str, 'asic_3_bitmap')),
                                        ('show_asic_4', YLeaf(YType.boolean, 'show_asic_4')),
                                        ('asic_4_bitmap', YLeaf(YType.str, 'asic_4_bitmap')),
                                        ('show_asic_5', YLeaf(YType.boolean, 'show_asic_5')),
                                        ('asic_5_bitmap', YLeaf(YType.str, 'asic_5_bitmap')),
                                        ('show_asic_6', YLeaf(YType.boolean, 'show_asic_6')),
                                        ('asic_6_bitmap', YLeaf(YType.str, 'asic_6_bitmap')),
                                        ('show_asic_7', YLeaf(YType.boolean, 'show_asic_7')),
                                        ('asic_7_bitmap', YLeaf(YType.str, 'asic_7_bitmap')),
                                        ('show_asic_8', YLeaf(YType.boolean, 'show_asic_8')),
                                        ('asic_8_bitmap', YLeaf(YType.str, 'asic_8_bitmap')),
                                        ('show_asic_9', YLeaf(YType.boolean, 'show_asic_9')),
                                        ('asic_9_bitmap', YLeaf(YType.str, 'asic_9_bitmap')),
                                        ('show_asic_10', YLeaf(YType.boolean, 'show_asic_10')),
                                        ('asic_10_bitmap', YLeaf(YType.str, 'asic_10_bitmap')),
                                        ('show_asic_11', YLeaf(YType.boolean, 'show_asic_11')),
                                        ('asic_11_bitmap', YLeaf(YType.str, 'asic_11_bitmap')),
                                        ('show_asic_12', YLeaf(YType.boolean, 'show_asic_12')),
                                        ('asic_12_bitmap', YLeaf(YType.str, 'asic_12_bitmap')),
                                        ('show_asic_13', YLeaf(YType.boolean, 'show_asic_13')),
                                        ('asic_13_bitmap', YLeaf(YType.str, 'asic_13_bitmap')),
                                        ('show_asic_14', YLeaf(YType.boolean, 'show_asic_14')),
                                        ('asic_14_bitmap', YLeaf(YType.str, 'asic_14_bitmap')),
                                        ('show_asic_15', YLeaf(YType.boolean, 'show_asic_15')),
                                        ('asic_15_bitmap', YLeaf(YType.str, 'asic_15_bitmap')),
                                        ('show_asic_16', YLeaf(YType.boolean, 'show_asic_16')),
                                        ('asic_16_bitmap', YLeaf(YType.str, 'asic_16_bitmap')),
                                        ('show_asic_17', YLeaf(YType.boolean, 'show_asic_17')),
                                        ('asic_17_bitmap', YLeaf(YType.str, 'asic_17_bitmap')),
                                        ('show_asic_18', YLeaf(YType.boolean, 'show_asic_18')),
                                        ('asic_18_bitmap', YLeaf(YType.str, 'asic_18_bitmap')),
                                        ('show_asic_19', YLeaf(YType.boolean, 'show_asic_19')),
                                        ('asic_19_bitmap', YLeaf(YType.str, 'asic_19_bitmap')),
                                        ('show_asic_20', YLeaf(YType.boolean, 'show_asic_20')),
                                        ('asic_20_bitmap', YLeaf(YType.str, 'asic_20_bitmap')),
                                        ('show_asic_21', YLeaf(YType.boolean, 'show_asic_21')),
                                        ('asic_21_bitmap', YLeaf(YType.str, 'asic_21_bitmap')),
                                        ('show_asic_22', YLeaf(YType.boolean, 'show_asic_22')),
                                        ('asic_22_bitmap', YLeaf(YType.str, 'asic_22_bitmap')),
                                        ('show_asic_23', YLeaf(YType.boolean, 'show_asic_23')),
                                        ('asic_23_bitmap', YLeaf(YType.str, 'asic_23_bitmap')),
                                        ('show_asic_24', YLeaf(YType.boolean, 'show_asic_24')),
                                        ('asic_24_bitmap', YLeaf(YType.str, 'asic_24_bitmap')),
                                        ('show_asic_25', YLeaf(YType.boolean, 'show_asic_25')),
                                        ('asic_25_bitmap', YLeaf(YType.str, 'asic_25_bitmap')),
                                        ('show_asic_26', YLeaf(YType.boolean, 'show_asic_26')),
                                        ('asic_26_bitmap', YLeaf(YType.str, 'asic_26_bitmap')),
                                        ('show_asic_27', YLeaf(YType.boolean, 'show_asic_27')),
                                        ('asic_27_bitmap', YLeaf(YType.str, 'asic_27_bitmap')),
                                        ('show_asic_28', YLeaf(YType.boolean, 'show_asic_28')),
                                        ('asic_28_bitmap', YLeaf(YType.str, 'asic_28_bitmap')),
                                        ('show_asic_29', YLeaf(YType.boolean, 'show_asic_29')),
                                        ('asic_29_bitmap', YLeaf(YType.str, 'asic_29_bitmap')),
                                        ('show_asic_30', YLeaf(YType.boolean, 'show_asic_30')),
                                        ('asic_30_bitmap', YLeaf(YType.str, 'asic_30_bitmap')),
                                        ('show_asic_31', YLeaf(YType.boolean, 'show_asic_31')),
                                        ('asic_31_bitmap', YLeaf(YType.str, 'asic_31_bitmap')),
                                        ('show_asic_32', YLeaf(YType.boolean, 'show_asic_32')),
                                        ('asic_32_bitmap', YLeaf(YType.str, 'asic_32_bitmap')),
                                        ('show_asic_33', YLeaf(YType.boolean, 'show_asic_33')),
                                        ('asic_33_bitmap', YLeaf(YType.str, 'asic_33_bitmap')),
                                        ('show_asic_34', YLeaf(YType.boolean, 'show_asic_34')),
                                        ('asic_34_bitmap', YLeaf(YType.str, 'asic_34_bitmap')),
                                        ('show_asic_35', YLeaf(YType.boolean, 'show_asic_35')),
                                        ('asic_35_bitmap', YLeaf(YType.str, 'asic_35_bitmap')),
                                    ])
                                    self.client_idx = None
                                    self.show_asic_0 = None
                                    self.asic_0_bitmap = None
                                    self.show_asic_1 = None
                                    self.asic_1_bitmap = None
                                    self.show_asic_2 = None
                                    self.asic_2_bitmap = None
                                    self.show_asic_3 = None
                                    self.asic_3_bitmap = None
                                    self.show_asic_4 = None
                                    self.asic_4_bitmap = None
                                    self.show_asic_5 = None
                                    self.asic_5_bitmap = None
                                    self.show_asic_6 = None
                                    self.asic_6_bitmap = None
                                    self.show_asic_7 = None
                                    self.asic_7_bitmap = None
                                    self.show_asic_8 = None
                                    self.asic_8_bitmap = None
                                    self.show_asic_9 = None
                                    self.asic_9_bitmap = None
                                    self.show_asic_10 = None
                                    self.asic_10_bitmap = None
                                    self.show_asic_11 = None
                                    self.asic_11_bitmap = None
                                    self.show_asic_12 = None
                                    self.asic_12_bitmap = None
                                    self.show_asic_13 = None
                                    self.asic_13_bitmap = None
                                    self.show_asic_14 = None
                                    self.asic_14_bitmap = None
                                    self.show_asic_15 = None
                                    self.asic_15_bitmap = None
                                    self.show_asic_16 = None
                                    self.asic_16_bitmap = None
                                    self.show_asic_17 = None
                                    self.asic_17_bitmap = None
                                    self.show_asic_18 = None
                                    self.asic_18_bitmap = None
                                    self.show_asic_19 = None
                                    self.asic_19_bitmap = None
                                    self.show_asic_20 = None
                                    self.asic_20_bitmap = None
                                    self.show_asic_21 = None
                                    self.asic_21_bitmap = None
                                    self.show_asic_22 = None
                                    self.asic_22_bitmap = None
                                    self.show_asic_23 = None
                                    self.asic_23_bitmap = None
                                    self.show_asic_24 = None
                                    self.asic_24_bitmap = None
                                    self.show_asic_25 = None
                                    self.asic_25_bitmap = None
                                    self.show_asic_26 = None
                                    self.asic_26_bitmap = None
                                    self.show_asic_27 = None
                                    self.asic_27_bitmap = None
                                    self.show_asic_28 = None
                                    self.asic_28_bitmap = None
                                    self.show_asic_29 = None
                                    self.asic_29_bitmap = None
                                    self.show_asic_30 = None
                                    self.asic_30_bitmap = None
                                    self.show_asic_31 = None
                                    self.asic_31_bitmap = None
                                    self.show_asic_32 = None
                                    self.asic_32_bitmap = None
                                    self.show_asic_33 = None
                                    self.asic_33_bitmap = None
                                    self.show_asic_34 = None
                                    self.asic_34_bitmap = None
                                    self.show_asic_35 = None
                                    self.asic_35_bitmap = None
                                    self._segment_path = lambda: "clients" + "[client_idx='" + str(self.client_idx) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.Fabric.Oper.Fgid.Information.Id.Drivers.Clients, ['client_idx', 'show_asic_0', 'asic_0_bitmap', 'show_asic_1', 'asic_1_bitmap', 'show_asic_2', 'asic_2_bitmap', 'show_asic_3', 'asic_3_bitmap', 'show_asic_4', 'asic_4_bitmap', 'show_asic_5', 'asic_5_bitmap', 'show_asic_6', 'asic_6_bitmap', 'show_asic_7', 'asic_7_bitmap', 'show_asic_8', 'asic_8_bitmap', 'show_asic_9', 'asic_9_bitmap', 'show_asic_10', 'asic_10_bitmap', 'show_asic_11', 'asic_11_bitmap', 'show_asic_12', 'asic_12_bitmap', 'show_asic_13', 'asic_13_bitmap', 'show_asic_14', 'asic_14_bitmap', 'show_asic_15', 'asic_15_bitmap', 'show_asic_16', 'asic_16_bitmap', 'show_asic_17', 'asic_17_bitmap', 'show_asic_18', 'asic_18_bitmap', 'show_asic_19', 'asic_19_bitmap', 'show_asic_20', 'asic_20_bitmap', 'show_asic_21', 'asic_21_bitmap', 'show_asic_22', 'asic_22_bitmap', 'show_asic_23', 'asic_23_bitmap', 'show_asic_24', 'asic_24_bitmap', 'show_asic_25', 'asic_25_bitmap', 'show_asic_26', 'asic_26_bitmap', 'show_asic_27', 'asic_27_bitmap', 'show_asic_28', 'asic_28_bitmap', 'show_asic_29', 'asic_29_bitmap', 'show_asic_30', 'asic_30_bitmap', 'show_asic_31', 'asic_31_bitmap', 'show_asic_32', 'asic_32_bitmap', 'show_asic_33', 'asic_33_bitmap', 'show_asic_34', 'asic_34_bitmap', 'show_asic_35', 'asic_35_bitmap'], name, value)


                class Resource(Entity):
                    """
                    
                    
                    .. attribute:: sdr
                    
                    	
                    	**type**\: list of  		 :py:class:`Sdr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Fgid.Resource.Sdr>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.Fabric.Oper.Fgid.Resource, self).__init__()

                        self.yang_name = "resource"
                        self.yang_parent_name = "fgid"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("sdr", ("sdr", Controller.Fabric.Oper.Fgid.Resource.Sdr))])
                        self._leafs = OrderedDict()

                        self.sdr = YList(self)
                        self._segment_path = lambda: "resource"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/oper/fgid/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.Fabric.Oper.Fgid.Resource, [], name, value)


                    class Sdr(Entity):
                        """
                        
                        
                        .. attribute:: sdr_name  (key)
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: description
                        
                        	
                        	**type**\: str
                        
                        	**default value**\: Secure Domain Router name.
                        
                        .. attribute:: application
                        
                        	
                        	**type**\: list of  		 :py:class:`Application <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Fgid.Resource.Sdr.Application>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Fabric.Oper.Fgid.Resource.Sdr, self).__init__()

                            self.yang_name = "sdr"
                            self.yang_parent_name = "resource"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = ['sdr_name']
                            self._child_classes = OrderedDict([("application", ("application", Controller.Fabric.Oper.Fgid.Resource.Sdr.Application))])
                            self._leafs = OrderedDict([
                                ('sdr_name', YLeaf(YType.str, 'sdr_name')),
                                ('description', YLeaf(YType.str, 'description')),
                            ])
                            self.sdr_name = None
                            self.description = None

                            self.application = YList(self)
                            self._segment_path = lambda: "sdr" + "[sdr_name='" + str(self.sdr_name) + "']"
                            self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/oper/fgid/resource/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Fabric.Oper.Fgid.Resource.Sdr, ['sdr_name', 'description'], name, value)


                        class Application(Entity):
                            """
                            
                            
                            .. attribute:: app_name  (key)
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: description
                            
                            	
                            	**type**\: str
                            
                            	**default value**\: application.
                            
                            .. attribute:: ids_range
                            
                            	
                            	**type**\: list of  		 :py:class:`IdsRange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Fgid.Resource.Sdr.Application.IdsRange>`
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Fabric.Oper.Fgid.Resource.Sdr.Application, self).__init__()

                                self.yang_name = "application"
                                self.yang_parent_name = "sdr"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['app_name']
                                self._child_classes = OrderedDict([("ids_range", ("ids_range", Controller.Fabric.Oper.Fgid.Resource.Sdr.Application.IdsRange))])
                                self._leafs = OrderedDict([
                                    ('app_name', YLeaf(YType.str, 'app_name')),
                                    ('description', YLeaf(YType.str, 'description')),
                                ])
                                self.app_name = None
                                self.description = None

                                self.ids_range = YList(self)
                                self._segment_path = lambda: "application" + "[app_name='" + str(self.app_name) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Fabric.Oper.Fgid.Resource.Sdr.Application, ['app_name', 'description'], name, value)


                            class IdsRange(Entity):
                                """
                                
                                
                                .. attribute:: id  (key)
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..524287
                                
                                .. attribute:: elements  (key)
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..524288
                                
                                .. attribute:: fgid_ids
                                
                                	
                                	**type**\: list of  		 :py:class:`FgidIds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Fgid.Resource.Sdr.Application.IdsRange.FgidIds>`
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.Fabric.Oper.Fgid.Resource.Sdr.Application.IdsRange, self).__init__()

                                    self.yang_name = "ids_range"
                                    self.yang_parent_name = "application"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['id','elements']
                                    self._child_classes = OrderedDict([("fgid_ids", ("fgid_ids", Controller.Fabric.Oper.Fgid.Resource.Sdr.Application.IdsRange.FgidIds))])
                                    self._leafs = OrderedDict([
                                        ('id', YLeaf(YType.int32, 'id')),
                                        ('elements', YLeaf(YType.int32, 'elements')),
                                    ])
                                    self.id = None
                                    self.elements = None

                                    self.fgid_ids = YList(self)
                                    self._segment_path = lambda: "ids_range" + "[id='" + str(self.id) + "']" + "[elements='" + str(self.elements) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.Fabric.Oper.Fgid.Resource.Sdr.Application.IdsRange, ['id', 'elements'], name, value)


                                class FgidIds(Entity):
                                    """
                                    
                                    
                                    .. attribute:: fgid_id  (key)
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: line_idx  (key)
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    .. attribute:: sdr_name_h
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: app_name_h
                                    
                                    	
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.Fabric.Oper.Fgid.Resource.Sdr.Application.IdsRange.FgidIds, self).__init__()

                                        self.yang_name = "fgid_ids"
                                        self.yang_parent_name = "ids_range"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['fgid_id','line_idx']
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('fgid_id', YLeaf(YType.str, 'fgid_id')),
                                            ('line_idx', YLeaf(YType.int32, 'line_idx')),
                                            ('sdr_name_h', YLeaf(YType.str, 'sdr_name_h')),
                                            ('app_name_h', YLeaf(YType.str, 'app_name_h')),
                                        ])
                                        self.fgid_id = None
                                        self.line_idx = None
                                        self.sdr_name_h = None
                                        self.app_name_h = None
                                        self._segment_path = lambda: "fgid_ids" + "[fgid_id='" + str(self.fgid_id) + "']" + "[line_idx='" + str(self.line_idx) + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.Fabric.Oper.Fgid.Resource.Sdr.Application.IdsRange.FgidIds, ['fgid_id', 'line_idx', 'sdr_name_h', 'app_name_h'], name, value)


                class Statistics(Entity):
                    """
                    
                    
                    .. attribute:: all
                    
                    	
                    	**type**\:  :py:class:`All <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Fgid.Statistics.All>`
                    
                    .. attribute:: sdr
                    
                    	
                    	**type**\:  :py:class:`Sdr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Fgid.Statistics.Sdr>`
                    
                    .. attribute:: pool
                    
                    	
                    	**type**\:  :py:class:`Pool <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Fgid.Statistics.Pool>`
                    
                    .. attribute:: system
                    
                    	
                    	**type**\:  :py:class:`System <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Fgid.Statistics.System>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.Fabric.Oper.Fgid.Statistics, self).__init__()

                        self.yang_name = "statistics"
                        self.yang_parent_name = "fgid"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("all", ("all", Controller.Fabric.Oper.Fgid.Statistics.All)), ("sdr", ("sdr", Controller.Fabric.Oper.Fgid.Statistics.Sdr)), ("pool", ("pool", Controller.Fabric.Oper.Fgid.Statistics.Pool)), ("system", ("system", Controller.Fabric.Oper.Fgid.Statistics.System))])
                        self._leafs = OrderedDict()

                        self.all = Controller.Fabric.Oper.Fgid.Statistics.All()
                        self.all.parent = self
                        self._children_name_map["all"] = "all"

                        self.sdr = Controller.Fabric.Oper.Fgid.Statistics.Sdr()
                        self.sdr.parent = self
                        self._children_name_map["sdr"] = "sdr"

                        self.pool = Controller.Fabric.Oper.Fgid.Statistics.Pool()
                        self.pool.parent = self
                        self._children_name_map["pool"] = "pool"

                        self.system = Controller.Fabric.Oper.Fgid.Statistics.System()
                        self.system.parent = self
                        self._children_name_map["system"] = "system"
                        self._segment_path = lambda: "statistics"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/oper/fgid/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.Fabric.Oper.Fgid.Statistics, [], name, value)


                    class All(Entity):
                        """
                        
                        
                        .. attribute:: stats_list
                        
                        	
                        	**type**\: list of  		 :py:class:`StatsList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Fgid.Statistics.All.StatsList>`
                        
                        .. attribute:: sdr_list
                        
                        	
                        	**type**\: list of  		 :py:class:`SdrList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Fgid.Statistics.All.SdrList>`
                        
                        .. attribute:: pool_list
                        
                        	
                        	**type**\: list of  		 :py:class:`PoolList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Fgid.Statistics.All.PoolList>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Fabric.Oper.Fgid.Statistics.All, self).__init__()

                            self.yang_name = "all"
                            self.yang_parent_name = "statistics"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("stats_list", ("stats_list", Controller.Fabric.Oper.Fgid.Statistics.All.StatsList)), ("sdr_list", ("sdr_list", Controller.Fabric.Oper.Fgid.Statistics.All.SdrList)), ("pool_list", ("pool_list", Controller.Fabric.Oper.Fgid.Statistics.All.PoolList))])
                            self._leafs = OrderedDict()

                            self.stats_list = YList(self)
                            self.sdr_list = YList(self)
                            self.pool_list = YList(self)
                            self._segment_path = lambda: "all"
                            self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/oper/fgid/statistics/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Fabric.Oper.Fgid.Statistics.All, [], name, value)


                        class StatsList(Entity):
                            """
                            
                            
                            .. attribute:: system_stats  (key)
                            
                            	
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: system_total_fgids
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: system_inuse_fgids
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: system_hwm_fgids
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Fabric.Oper.Fgid.Statistics.All.StatsList, self).__init__()

                                self.yang_name = "stats_list"
                                self.yang_parent_name = "all"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = ['system_stats']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('system_stats', YLeaf(YType.int32, 'system_stats')),
                                    ('system_total_fgids', YLeaf(YType.uint32, 'system_total_fgids')),
                                    ('system_inuse_fgids', YLeaf(YType.uint32, 'system_inuse_fgids')),
                                    ('system_hwm_fgids', YLeaf(YType.uint32, 'system_hwm_fgids')),
                                ])
                                self.system_stats = None
                                self.system_total_fgids = None
                                self.system_inuse_fgids = None
                                self.system_hwm_fgids = None
                                self._segment_path = lambda: "stats_list" + "[system_stats='" + str(self.system_stats) + "']"
                                self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/oper/fgid/statistics/all/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Fabric.Oper.Fgid.Statistics.All.StatsList, ['system_stats', 'system_total_fgids', 'system_inuse_fgids', 'system_hwm_fgids'], name, value)


                        class SdrList(Entity):
                            """
                            
                            
                            .. attribute:: sdr_name  (key)
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: description
                            
                            	
                            	**type**\: str
                            
                            	**default value**\: Secure Domain Router name.
                            
                            .. attribute:: sdr_total_fgids
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: sdr_inuse_fgids
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: sdr_hwm_fgids
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: application
                            
                            	
                            	**type**\: list of  		 :py:class:`Application <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Fgid.Statistics.All.SdrList.Application>`
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Fabric.Oper.Fgid.Statistics.All.SdrList, self).__init__()

                                self.yang_name = "sdr_list"
                                self.yang_parent_name = "all"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = ['sdr_name']
                                self._child_classes = OrderedDict([("application", ("application", Controller.Fabric.Oper.Fgid.Statistics.All.SdrList.Application))])
                                self._leafs = OrderedDict([
                                    ('sdr_name', YLeaf(YType.str, 'sdr_name')),
                                    ('description', YLeaf(YType.str, 'description')),
                                    ('sdr_total_fgids', YLeaf(YType.uint32, 'sdr_total_fgids')),
                                    ('sdr_inuse_fgids', YLeaf(YType.uint32, 'sdr_inuse_fgids')),
                                    ('sdr_hwm_fgids', YLeaf(YType.uint32, 'sdr_hwm_fgids')),
                                ])
                                self.sdr_name = None
                                self.description = None
                                self.sdr_total_fgids = None
                                self.sdr_inuse_fgids = None
                                self.sdr_hwm_fgids = None

                                self.application = YList(self)
                                self._segment_path = lambda: "sdr_list" + "[sdr_name='" + str(self.sdr_name) + "']"
                                self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/oper/fgid/statistics/all/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Fabric.Oper.Fgid.Statistics.All.SdrList, ['sdr_name', 'description', 'sdr_total_fgids', 'sdr_inuse_fgids', 'sdr_hwm_fgids'], name, value)


                            class Application(Entity):
                                """
                                
                                
                                .. attribute:: app_name  (key)
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: description
                                
                                	
                                	**type**\: str
                                
                                	**default value**\: application.
                                
                                .. attribute:: app_id
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: pool_id
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: inuse_fgids
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: hwm_fgids
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.Fabric.Oper.Fgid.Statistics.All.SdrList.Application, self).__init__()

                                    self.yang_name = "application"
                                    self.yang_parent_name = "sdr_list"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['app_name']
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('app_name', YLeaf(YType.str, 'app_name')),
                                        ('description', YLeaf(YType.str, 'description')),
                                        ('app_id', YLeaf(YType.uint32, 'app_id')),
                                        ('pool_id', YLeaf(YType.uint32, 'pool_id')),
                                        ('inuse_fgids', YLeaf(YType.uint32, 'inuse_fgids')),
                                        ('hwm_fgids', YLeaf(YType.uint32, 'hwm_fgids')),
                                    ])
                                    self.app_name = None
                                    self.description = None
                                    self.app_id = None
                                    self.pool_id = None
                                    self.inuse_fgids = None
                                    self.hwm_fgids = None
                                    self._segment_path = lambda: "application" + "[app_name='" + str(self.app_name) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.Fabric.Oper.Fgid.Statistics.All.SdrList.Application, ['app_name', 'description', 'app_id', 'pool_id', 'inuse_fgids', 'hwm_fgids'], name, value)


                        class PoolList(Entity):
                            """
                            
                            
                            .. attribute:: pool_id  (key)
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: pool_name
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: pool_type
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: start_fgid
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: total_fgids
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: current_fgids
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: hwm_fgids
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Fabric.Oper.Fgid.Statistics.All.PoolList, self).__init__()

                                self.yang_name = "pool_list"
                                self.yang_parent_name = "all"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = ['pool_id']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('pool_id', YLeaf(YType.uint32, 'pool_id')),
                                    ('pool_name', YLeaf(YType.str, 'pool_name')),
                                    ('pool_type', YLeaf(YType.str, 'pool_type')),
                                    ('start_fgid', YLeaf(YType.str, 'start_fgid')),
                                    ('total_fgids', YLeaf(YType.uint32, 'total_fgids')),
                                    ('current_fgids', YLeaf(YType.uint32, 'current_fgids')),
                                    ('hwm_fgids', YLeaf(YType.uint32, 'hwm_fgids')),
                                ])
                                self.pool_id = None
                                self.pool_name = None
                                self.pool_type = None
                                self.start_fgid = None
                                self.total_fgids = None
                                self.current_fgids = None
                                self.hwm_fgids = None
                                self._segment_path = lambda: "pool_list" + "[pool_id='" + str(self.pool_id) + "']"
                                self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/oper/fgid/statistics/all/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Fabric.Oper.Fgid.Statistics.All.PoolList, ['pool_id', 'pool_name', 'pool_type', 'start_fgid', 'total_fgids', 'current_fgids', 'hwm_fgids'], name, value)


                    class Sdr(Entity):
                        """
                        
                        
                        .. attribute:: sdr_list
                        
                        	
                        	**type**\: list of  		 :py:class:`SdrList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Fgid.Statistics.Sdr.SdrList>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Fabric.Oper.Fgid.Statistics.Sdr, self).__init__()

                            self.yang_name = "sdr"
                            self.yang_parent_name = "statistics"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("sdr_list", ("sdr_list", Controller.Fabric.Oper.Fgid.Statistics.Sdr.SdrList))])
                            self._leafs = OrderedDict()

                            self.sdr_list = YList(self)
                            self._segment_path = lambda: "sdr"
                            self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/oper/fgid/statistics/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Fabric.Oper.Fgid.Statistics.Sdr, [], name, value)


                        class SdrList(Entity):
                            """
                            
                            
                            .. attribute:: sdr_name  (key)
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: description
                            
                            	
                            	**type**\: str
                            
                            	**default value**\: Secure Domain Router name.
                            
                            .. attribute:: sdr_total_fgids
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: sdr_inuse_fgids
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: sdr_hwm_fgids
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: application
                            
                            	
                            	**type**\: list of  		 :py:class:`Application <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Fgid.Statistics.Sdr.SdrList.Application>`
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Fabric.Oper.Fgid.Statistics.Sdr.SdrList, self).__init__()

                                self.yang_name = "sdr_list"
                                self.yang_parent_name = "sdr"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = ['sdr_name']
                                self._child_classes = OrderedDict([("application", ("application", Controller.Fabric.Oper.Fgid.Statistics.Sdr.SdrList.Application))])
                                self._leafs = OrderedDict([
                                    ('sdr_name', YLeaf(YType.str, 'sdr_name')),
                                    ('description', YLeaf(YType.str, 'description')),
                                    ('sdr_total_fgids', YLeaf(YType.uint32, 'sdr_total_fgids')),
                                    ('sdr_inuse_fgids', YLeaf(YType.uint32, 'sdr_inuse_fgids')),
                                    ('sdr_hwm_fgids', YLeaf(YType.uint32, 'sdr_hwm_fgids')),
                                ])
                                self.sdr_name = None
                                self.description = None
                                self.sdr_total_fgids = None
                                self.sdr_inuse_fgids = None
                                self.sdr_hwm_fgids = None

                                self.application = YList(self)
                                self._segment_path = lambda: "sdr_list" + "[sdr_name='" + str(self.sdr_name) + "']"
                                self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/oper/fgid/statistics/sdr/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Fabric.Oper.Fgid.Statistics.Sdr.SdrList, ['sdr_name', 'description', 'sdr_total_fgids', 'sdr_inuse_fgids', 'sdr_hwm_fgids'], name, value)


                            class Application(Entity):
                                """
                                
                                
                                .. attribute:: app_name  (key)
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: description
                                
                                	
                                	**type**\: str
                                
                                	**default value**\: application.
                                
                                .. attribute:: app_id
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: pool_id
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: inuse_fgids
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: hwm_fgids
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.Fabric.Oper.Fgid.Statistics.Sdr.SdrList.Application, self).__init__()

                                    self.yang_name = "application"
                                    self.yang_parent_name = "sdr_list"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['app_name']
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('app_name', YLeaf(YType.str, 'app_name')),
                                        ('description', YLeaf(YType.str, 'description')),
                                        ('app_id', YLeaf(YType.uint32, 'app_id')),
                                        ('pool_id', YLeaf(YType.uint32, 'pool_id')),
                                        ('inuse_fgids', YLeaf(YType.uint32, 'inuse_fgids')),
                                        ('hwm_fgids', YLeaf(YType.uint32, 'hwm_fgids')),
                                    ])
                                    self.app_name = None
                                    self.description = None
                                    self.app_id = None
                                    self.pool_id = None
                                    self.inuse_fgids = None
                                    self.hwm_fgids = None
                                    self._segment_path = lambda: "application" + "[app_name='" + str(self.app_name) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.Fabric.Oper.Fgid.Statistics.Sdr.SdrList.Application, ['app_name', 'description', 'app_id', 'pool_id', 'inuse_fgids', 'hwm_fgids'], name, value)


                    class Pool(Entity):
                        """
                        
                        
                        .. attribute:: pool_list
                        
                        	
                        	**type**\: list of  		 :py:class:`PoolList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Fgid.Statistics.Pool.PoolList>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Fabric.Oper.Fgid.Statistics.Pool, self).__init__()

                            self.yang_name = "pool"
                            self.yang_parent_name = "statistics"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("pool_list", ("pool_list", Controller.Fabric.Oper.Fgid.Statistics.Pool.PoolList))])
                            self._leafs = OrderedDict()

                            self.pool_list = YList(self)
                            self._segment_path = lambda: "pool"
                            self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/oper/fgid/statistics/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Fabric.Oper.Fgid.Statistics.Pool, [], name, value)


                        class PoolList(Entity):
                            """
                            
                            
                            .. attribute:: pool_id  (key)
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: pool_name
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: pool_type
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: start_fgid
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: total_fgids
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: current_fgids
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: hwm_fgids
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Fabric.Oper.Fgid.Statistics.Pool.PoolList, self).__init__()

                                self.yang_name = "pool_list"
                                self.yang_parent_name = "pool"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = ['pool_id']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('pool_id', YLeaf(YType.uint32, 'pool_id')),
                                    ('pool_name', YLeaf(YType.str, 'pool_name')),
                                    ('pool_type', YLeaf(YType.str, 'pool_type')),
                                    ('start_fgid', YLeaf(YType.str, 'start_fgid')),
                                    ('total_fgids', YLeaf(YType.uint32, 'total_fgids')),
                                    ('current_fgids', YLeaf(YType.uint32, 'current_fgids')),
                                    ('hwm_fgids', YLeaf(YType.uint32, 'hwm_fgids')),
                                ])
                                self.pool_id = None
                                self.pool_name = None
                                self.pool_type = None
                                self.start_fgid = None
                                self.total_fgids = None
                                self.current_fgids = None
                                self.hwm_fgids = None
                                self._segment_path = lambda: "pool_list" + "[pool_id='" + str(self.pool_id) + "']"
                                self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/oper/fgid/statistics/pool/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Fabric.Oper.Fgid.Statistics.Pool.PoolList, ['pool_id', 'pool_name', 'pool_type', 'start_fgid', 'total_fgids', 'current_fgids', 'hwm_fgids'], name, value)


                    class System(Entity):
                        """
                        
                        
                        .. attribute:: stats_list
                        
                        	
                        	**type**\: list of  		 :py:class:`StatsList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Fgid.Statistics.System.StatsList>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Fabric.Oper.Fgid.Statistics.System, self).__init__()

                            self.yang_name = "system"
                            self.yang_parent_name = "statistics"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("stats_list", ("stats_list", Controller.Fabric.Oper.Fgid.Statistics.System.StatsList))])
                            self._leafs = OrderedDict()

                            self.stats_list = YList(self)
                            self._segment_path = lambda: "system"
                            self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/oper/fgid/statistics/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Fabric.Oper.Fgid.Statistics.System, [], name, value)


                        class StatsList(Entity):
                            """
                            
                            
                            .. attribute:: system_stats  (key)
                            
                            	
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: system_total_fgids
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: system_inuse_fgids
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: system_hwm_fgids
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Fabric.Oper.Fgid.Statistics.System.StatsList, self).__init__()

                                self.yang_name = "stats_list"
                                self.yang_parent_name = "system"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = ['system_stats']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('system_stats', YLeaf(YType.int32, 'system_stats')),
                                    ('system_total_fgids', YLeaf(YType.uint32, 'system_total_fgids')),
                                    ('system_inuse_fgids', YLeaf(YType.uint32, 'system_inuse_fgids')),
                                    ('system_hwm_fgids', YLeaf(YType.uint32, 'system_hwm_fgids')),
                                ])
                                self.system_stats = None
                                self.system_total_fgids = None
                                self.system_inuse_fgids = None
                                self.system_hwm_fgids = None
                                self._segment_path = lambda: "stats_list" + "[system_stats='" + str(self.system_stats) + "']"
                                self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/oper/fgid/statistics/system/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Fabric.Oper.Fgid.Statistics.System.StatsList, ['system_stats', 'system_total_fgids', 'system_inuse_fgids', 'system_hwm_fgids'], name, value)


                class FgidMgr(Entity):
                    """
                    
                    
                    .. attribute:: trace
                    
                    	show traceable processes
                    	**type**\: list of  		 :py:class:`Trace <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Fgid.FgidMgr.Trace>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.Fabric.Oper.Fgid.FgidMgr, self).__init__()

                        self.yang_name = "fgid_mgr"
                        self.yang_parent_name = "fgid"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("trace", ("trace", Controller.Fabric.Oper.Fgid.FgidMgr.Trace))])
                        self._leafs = OrderedDict()

                        self.trace = YList(self)
                        self._segment_path = lambda: "fgid_mgr"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/oper/fgid/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.Fabric.Oper.Fgid.FgidMgr, [], name, value)


                    class Trace(Entity):
                        """
                        show traceable processes
                        
                        .. attribute:: buffer  (key)
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: location
                        
                        	
                        	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Fgid.FgidMgr.Trace.Location>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Fabric.Oper.Fgid.FgidMgr.Trace, self).__init__()

                            self.yang_name = "trace"
                            self.yang_parent_name = "fgid_mgr"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = ['buffer']
                            self._child_classes = OrderedDict([("location", ("location", Controller.Fabric.Oper.Fgid.FgidMgr.Trace.Location))])
                            self._leafs = OrderedDict([
                                ('buffer', YLeaf(YType.str, 'buffer')),
                            ])
                            self.buffer = None

                            self.location = YList(self)
                            self._segment_path = lambda: "trace" + "[buffer='" + str(self.buffer) + "']"
                            self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/oper/fgid/fgid_mgr/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Fabric.Oper.Fgid.FgidMgr.Trace, [u'buffer'], name, value)


                        class Location(Entity):
                            """
                            
                            
                            .. attribute:: location_name  (key)
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: all_options
                            
                            	
                            	**type**\: list of  		 :py:class:`AllOptions <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Fgid.FgidMgr.Trace.Location.AllOptions>`
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Fabric.Oper.Fgid.FgidMgr.Trace.Location, self).__init__()

                                self.yang_name = "location"
                                self.yang_parent_name = "trace"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['location_name']
                                self._child_classes = OrderedDict([("all-options", ("all_options", Controller.Fabric.Oper.Fgid.FgidMgr.Trace.Location.AllOptions))])
                                self._leafs = OrderedDict([
                                    ('location_name', YLeaf(YType.str, 'location_name')),
                                ])
                                self.location_name = None

                                self.all_options = YList(self)
                                self._segment_path = lambda: "location" + "[location_name='" + str(self.location_name) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Fabric.Oper.Fgid.FgidMgr.Trace.Location, [u'location_name'], name, value)


                            class AllOptions(Entity):
                                """
                                
                                
                                .. attribute:: option  (key)
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: trace_blocks
                                
                                	
                                	**type**\: list of  		 :py:class:`TraceBlocks <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Fgid.FgidMgr.Trace.Location.AllOptions.TraceBlocks>`
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.Fabric.Oper.Fgid.FgidMgr.Trace.Location.AllOptions, self).__init__()

                                    self.yang_name = "all-options"
                                    self.yang_parent_name = "location"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['option']
                                    self._child_classes = OrderedDict([("trace-blocks", ("trace_blocks", Controller.Fabric.Oper.Fgid.FgidMgr.Trace.Location.AllOptions.TraceBlocks))])
                                    self._leafs = OrderedDict([
                                        ('option', YLeaf(YType.str, 'option')),
                                    ])
                                    self.option = None

                                    self.trace_blocks = YList(self)
                                    self._segment_path = lambda: "all-options" + "[option='" + str(self.option) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.Fabric.Oper.Fgid.FgidMgr.Trace.Location.AllOptions, [u'option'], name, value)


                                class TraceBlocks(Entity):
                                    """
                                    
                                    
                                    .. attribute:: data
                                    
                                    	Trace output block
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.Fabric.Oper.Fgid.FgidMgr.Trace.Location.AllOptions.TraceBlocks, self).__init__()

                                        self.yang_name = "trace-blocks"
                                        self.yang_parent_name = "all-options"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('data', YLeaf(YType.str, 'data')),
                                        ])
                                        self.data = None
                                        self._segment_path = lambda: "trace-blocks"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.Fabric.Oper.Fgid.FgidMgr.Trace.Location.AllOptions.TraceBlocks, [u'data'], name, value)


                class ProgramError(Entity):
                    """
                    
                    
                    .. attribute:: start  (key)
                    
                    	
                    	**type**\: int
                    
                    	**range:** 0..524287
                    
                    .. attribute:: end  (key)
                    
                    	
                    	**type**\: int
                    
                    	**range:** 0..524287
                    
                    .. attribute:: rack
                    
                    	
                    	**type**\: list of  		 :py:class:`Rack <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Fgid.ProgramError.Rack>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.Fabric.Oper.Fgid.ProgramError, self).__init__()

                        self.yang_name = "program_error"
                        self.yang_parent_name = "fgid"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['start','end']
                        self._child_classes = OrderedDict([("rack", ("rack", Controller.Fabric.Oper.Fgid.ProgramError.Rack))])
                        self._leafs = OrderedDict([
                            ('start', YLeaf(YType.int32, 'start')),
                            ('end', YLeaf(YType.int32, 'end')),
                        ])
                        self.start = None
                        self.end = None

                        self.rack = YList(self)
                        self._segment_path = lambda: "program_error" + "[start='" + str(self.start) + "']" + "[end='" + str(self.end) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/oper/fgid/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.Fabric.Oper.Fgid.ProgramError, ['start', 'end'], name, value)


                    class Rack(Entity):
                        """
                        
                        
                        .. attribute:: rack_id  (key)
                        
                        	
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: rack_id_str
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: fgids_in_error
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: found_fgids_in_error
                        
                        	
                        	**type**\: bool
                        
                        .. attribute:: total_error_fgids
                        
                        	
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: incorrect_fgids_range
                        
                        	
                        	**type**\: bool
                        
                        .. attribute:: cmd_not_supported
                        
                        	
                        	**type**\: bool
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Fabric.Oper.Fgid.ProgramError.Rack, self).__init__()

                            self.yang_name = "rack"
                            self.yang_parent_name = "program_error"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['rack_id']
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('rack_id', YLeaf(YType.int32, 'rack_id')),
                                ('rack_id_str', YLeaf(YType.str, 'rack_id_str')),
                                ('fgids_in_error', YLeaf(YType.str, 'fgids_in_error')),
                                ('found_fgids_in_error', YLeaf(YType.boolean, 'found_fgids_in_error')),
                                ('total_error_fgids', YLeaf(YType.int32, 'total_error_fgids')),
                                ('incorrect_fgids_range', YLeaf(YType.boolean, 'incorrect_fgids_range')),
                                ('cmd_not_supported', YLeaf(YType.boolean, 'cmd_not_supported')),
                            ])
                            self.rack_id = None
                            self.rack_id_str = None
                            self.fgids_in_error = None
                            self.found_fgids_in_error = None
                            self.total_error_fgids = None
                            self.incorrect_fgids_range = None
                            self.cmd_not_supported = None
                            self._segment_path = lambda: "rack" + "[rack_id='" + str(self.rack_id) + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Fabric.Oper.Fgid.ProgramError.Rack, ['rack_id', 'rack_id_str', 'fgids_in_error', 'found_fgids_in_error', 'total_error_fgids', 'incorrect_fgids_range', 'cmd_not_supported'], name, value)


            class FsdbaggActive(Entity):
                """
                
                
                .. attribute:: plane
                
                	
                	**type**\: list of  		 :py:class:`Plane <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.FsdbaggActive.Plane>`
                
                .. attribute:: bundle
                
                	
                	**type**\:  :py:class:`Bundle <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.FsdbaggActive.Bundle>`
                
                .. attribute:: statistics
                
                	
                	**type**\:  :py:class:`Statistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.FsdbaggActive.Statistics>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Controller.Fabric.Oper.FsdbaggActive, self).__init__()

                    self.yang_name = "fsdbagg_active"
                    self.yang_parent_name = "oper"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("plane", ("plane", Controller.Fabric.Oper.FsdbaggActive.Plane)), ("bundle", ("bundle", Controller.Fabric.Oper.FsdbaggActive.Bundle)), ("statistics", ("statistics", Controller.Fabric.Oper.FsdbaggActive.Statistics))])
                    self._leafs = OrderedDict()

                    self.bundle = Controller.Fabric.Oper.FsdbaggActive.Bundle()
                    self.bundle.parent = self
                    self._children_name_map["bundle"] = "bundle"

                    self.statistics = Controller.Fabric.Oper.FsdbaggActive.Statistics()
                    self.statistics.parent = self
                    self._children_name_map["statistics"] = "statistics"

                    self.plane = YList(self)
                    self._segment_path = lambda: "fsdbagg_active"
                    self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/oper/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Controller.Fabric.Oper.FsdbaggActive, [], name, value)


                class Plane(Entity):
                    """
                    
                    
                    .. attribute:: planeid  (key)
                    
                    	
                    	**type**\: str
                    
                    	**pattern:** all\|[0\-5]
                    
                    .. attribute:: admin_state
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: ucast_oper_state
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: mcast_oper_state
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: plane_mode
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: ucast_cnt_up
                    
                    	
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: ucast_cnt_some_up
                    
                    	
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: ucast_cnt_dn
                    
                    	
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: mcast_cnt_up
                    
                    	
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: mcast_cnt_some_up
                    
                    	
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: mcast_cnt_dn
                    
                    	
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: total_bundles
                    
                    	
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: down_bundles
                    
                    	
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: rx_data_cells
                    
                    	
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    .. attribute:: tx_data_cells
                    
                    	
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    .. attribute:: rx_ce_cells_is_overflow
                    
                    	
                    	**type**\: bool
                    
                    .. attribute:: rx_ce_cells
                    
                    	
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    .. attribute:: rx_uce_cells_is_overflow
                    
                    	
                    	**type**\: bool
                    
                    .. attribute:: rx_uce_cells
                    
                    	
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    .. attribute:: rx_pe_cells_is_overflow
                    
                    	
                    	**type**\: bool
                    
                    .. attribute:: rx_pe_cells
                    
                    	
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    .. attribute:: ucast_lost_cells
                    
                    	
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: mcast_lost_cells
                    
                    	
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: last_clear_ts
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: last_clear_reason
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: last_clear_req_ts
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: last_clear_status
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: is_asic_internal_error
                    
                    	
                    	**type**\: bool
                    
                    .. attribute:: asic_internal_drops
                    
                    	
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    .. attribute:: asic_location_drops
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: ppu_state
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: asic_internal_error
                    
                    	
                    	**type**\: list of  		 :py:class:`AsicInternalError <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.FsdbaggActive.Plane.AsicInternalError>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.Fabric.Oper.FsdbaggActive.Plane, self).__init__()

                        self.yang_name = "plane"
                        self.yang_parent_name = "fsdbagg_active"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['planeid']
                        self._child_classes = OrderedDict([("asic_internal_error", ("asic_internal_error", Controller.Fabric.Oper.FsdbaggActive.Plane.AsicInternalError))])
                        self._leafs = OrderedDict([
                            ('planeid', YLeaf(YType.str, 'planeid')),
                            ('admin_state', YLeaf(YType.str, 'admin-state')),
                            ('ucast_oper_state', YLeaf(YType.str, 'ucast_oper_state')),
                            ('mcast_oper_state', YLeaf(YType.str, 'mcast_oper_state')),
                            ('plane_mode', YLeaf(YType.str, 'plane_mode')),
                            ('ucast_cnt_up', YLeaf(YType.int32, 'ucast_cnt_up')),
                            ('ucast_cnt_some_up', YLeaf(YType.int32, 'ucast_cnt_some_up')),
                            ('ucast_cnt_dn', YLeaf(YType.int32, 'ucast_cnt_dn')),
                            ('mcast_cnt_up', YLeaf(YType.int32, 'mcast_cnt_up')),
                            ('mcast_cnt_some_up', YLeaf(YType.int32, 'mcast_cnt_some_up')),
                            ('mcast_cnt_dn', YLeaf(YType.int32, 'mcast_cnt_dn')),
                            ('total_bundles', YLeaf(YType.int32, 'total_bundles')),
                            ('down_bundles', YLeaf(YType.int32, 'down_bundles')),
                            ('rx_data_cells', YLeaf(YType.uint64, 'rx_data_cells')),
                            ('tx_data_cells', YLeaf(YType.uint64, 'tx_data_cells')),
                            ('rx_ce_cells_is_overflow', YLeaf(YType.boolean, 'rx_ce_cells_is_overflow')),
                            ('rx_ce_cells', YLeaf(YType.uint64, 'rx_ce_cells')),
                            ('rx_uce_cells_is_overflow', YLeaf(YType.boolean, 'rx_uce_cells_is_overflow')),
                            ('rx_uce_cells', YLeaf(YType.uint64, 'rx_uce_cells')),
                            ('rx_pe_cells_is_overflow', YLeaf(YType.boolean, 'rx_pe_cells_is_overflow')),
                            ('rx_pe_cells', YLeaf(YType.uint64, 'rx_pe_cells')),
                            ('ucast_lost_cells', YLeaf(YType.uint32, 'ucast_lost_cells')),
                            ('mcast_lost_cells', YLeaf(YType.uint32, 'mcast_lost_cells')),
                            ('last_clear_ts', YLeaf(YType.str, 'last_clear_ts')),
                            ('last_clear_reason', YLeaf(YType.str, 'last_clear_reason')),
                            ('last_clear_req_ts', YLeaf(YType.str, 'last_clear_req_ts')),
                            ('last_clear_status', YLeaf(YType.str, 'last_clear_status')),
                            ('is_asic_internal_error', YLeaf(YType.boolean, 'is_asic_internal_error')),
                            ('asic_internal_drops', YLeaf(YType.uint64, 'asic_internal_drops')),
                            ('asic_location_drops', YLeaf(YType.str, 'asic_location_drops')),
                            ('ppu_state', YLeaf(YType.str, 'ppu_state')),
                        ])
                        self.planeid = None
                        self.admin_state = None
                        self.ucast_oper_state = None
                        self.mcast_oper_state = None
                        self.plane_mode = None
                        self.ucast_cnt_up = None
                        self.ucast_cnt_some_up = None
                        self.ucast_cnt_dn = None
                        self.mcast_cnt_up = None
                        self.mcast_cnt_some_up = None
                        self.mcast_cnt_dn = None
                        self.total_bundles = None
                        self.down_bundles = None
                        self.rx_data_cells = None
                        self.tx_data_cells = None
                        self.rx_ce_cells_is_overflow = None
                        self.rx_ce_cells = None
                        self.rx_uce_cells_is_overflow = None
                        self.rx_uce_cells = None
                        self.rx_pe_cells_is_overflow = None
                        self.rx_pe_cells = None
                        self.ucast_lost_cells = None
                        self.mcast_lost_cells = None
                        self.last_clear_ts = None
                        self.last_clear_reason = None
                        self.last_clear_req_ts = None
                        self.last_clear_status = None
                        self.is_asic_internal_error = None
                        self.asic_internal_drops = None
                        self.asic_location_drops = None
                        self.ppu_state = None

                        self.asic_internal_error = YList(self)
                        self._segment_path = lambda: "plane" + "[planeid='" + str(self.planeid) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/oper/fsdbagg_active/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.Fabric.Oper.FsdbaggActive.Plane, [u'planeid', u'admin_state', u'ucast_oper_state', u'mcast_oper_state', u'plane_mode', u'ucast_cnt_up', u'ucast_cnt_some_up', u'ucast_cnt_dn', u'mcast_cnt_up', u'mcast_cnt_some_up', u'mcast_cnt_dn', u'total_bundles', u'down_bundles', u'rx_data_cells', u'tx_data_cells', u'rx_ce_cells_is_overflow', u'rx_ce_cells', u'rx_uce_cells_is_overflow', u'rx_uce_cells', u'rx_pe_cells_is_overflow', u'rx_pe_cells', u'ucast_lost_cells', u'mcast_lost_cells', u'last_clear_ts', u'last_clear_reason', u'last_clear_req_ts', u'last_clear_status', u'is_asic_internal_error', u'asic_internal_drops', u'asic_location_drops', u'ppu_state'], name, value)


                    class AsicInternalError(Entity):
                        """
                        
                        
                        .. attribute:: asic_number  (key)
                        
                        	
                        	**type**\: int
                        
                        	**range:** \-9223372036854775808..9223372036854775807
                        
                        .. attribute:: asic_location
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: link_crc_error
                        
                        	
                        	**type**\: bool
                        
                        .. attribute:: link_size_error
                        
                        	
                        	**type**\: bool
                        
                        .. attribute:: link_mis_align_error
                        
                        	
                        	**type**\: bool
                        
                        .. attribute:: link_code_group_error
                        
                        	
                        	**type**\: bool
                        
                        .. attribute:: link_no_sig_lock_error
                        
                        	
                        	**type**\: bool
                        
                        .. attribute:: link_no_sign_accept_error
                        
                        	
                        	**type**\: bool
                        
                        .. attribute:: link_token_error
                        
                        	
                        	**type**\: bool
                        
                        .. attribute:: error_token_count
                        
                        	
                        	**type**\: bool
                        
                        .. attribute:: last_asic_internal_error_ts
                        
                        	
                        	**type**\: str
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Fabric.Oper.FsdbaggActive.Plane.AsicInternalError, self).__init__()

                            self.yang_name = "asic_internal_error"
                            self.yang_parent_name = "plane"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['asic_number']
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('asic_number', YLeaf(YType.int64, 'asic_number')),
                                ('asic_location', YLeaf(YType.str, 'asic_location')),
                                ('link_crc_error', YLeaf(YType.boolean, 'link_crc_error')),
                                ('link_size_error', YLeaf(YType.boolean, 'link_size_error')),
                                ('link_mis_align_error', YLeaf(YType.boolean, 'link_mis_align_error')),
                                ('link_code_group_error', YLeaf(YType.boolean, 'link_code_group_error')),
                                ('link_no_sig_lock_error', YLeaf(YType.boolean, 'link_no_sig_lock_error')),
                                ('link_no_sign_accept_error', YLeaf(YType.boolean, 'link_no_sign_accept_error')),
                                ('link_token_error', YLeaf(YType.boolean, 'link_token_error')),
                                ('error_token_count', YLeaf(YType.boolean, 'error_token_count')),
                                ('last_asic_internal_error_ts', YLeaf(YType.str, 'last_asic_internal_error_ts')),
                            ])
                            self.asic_number = None
                            self.asic_location = None
                            self.link_crc_error = None
                            self.link_size_error = None
                            self.link_mis_align_error = None
                            self.link_code_group_error = None
                            self.link_no_sig_lock_error = None
                            self.link_no_sign_accept_error = None
                            self.link_token_error = None
                            self.error_token_count = None
                            self.last_asic_internal_error_ts = None
                            self._segment_path = lambda: "asic_internal_error" + "[asic_number='" + str(self.asic_number) + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Fabric.Oper.FsdbaggActive.Plane.AsicInternalError, [u'asic_number', u'asic_location', u'link_crc_error', u'link_size_error', u'link_mis_align_error', u'link_code_group_error', u'link_no_sig_lock_error', u'link_no_sign_accept_error', u'link_token_error', u'error_token_count', u'last_asic_internal_error_ts'], name, value)


                class Bundle(Entity):
                    """
                    
                    
                    .. attribute:: summary
                    
                    	
                    	**type**\:  :py:class:`Summary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.FsdbaggActive.Bundle.Summary>`
                    
                    .. attribute:: all
                    
                    	
                    	**type**\:  :py:class:`All <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.FsdbaggActive.Bundle.All>`
                    
                    .. attribute:: port
                    
                    	
                    	**type**\:  :py:class:`Port <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.FsdbaggActive.Bundle.Port>`
                    
                    .. attribute:: location
                    
                    	
                    	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.FsdbaggActive.Bundle.Location>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.Fabric.Oper.FsdbaggActive.Bundle, self).__init__()

                        self.yang_name = "bundle"
                        self.yang_parent_name = "fsdbagg_active"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("summary", ("summary", Controller.Fabric.Oper.FsdbaggActive.Bundle.Summary)), ("all", ("all", Controller.Fabric.Oper.FsdbaggActive.Bundle.All)), ("port", ("port", Controller.Fabric.Oper.FsdbaggActive.Bundle.Port)), ("location", ("location", Controller.Fabric.Oper.FsdbaggActive.Bundle.Location))])
                        self._leafs = OrderedDict()

                        self.summary = Controller.Fabric.Oper.FsdbaggActive.Bundle.Summary()
                        self.summary.parent = self
                        self._children_name_map["summary"] = "summary"

                        self.all = Controller.Fabric.Oper.FsdbaggActive.Bundle.All()
                        self.all.parent = self
                        self._children_name_map["all"] = "all"

                        self.port = Controller.Fabric.Oper.FsdbaggActive.Bundle.Port()
                        self.port.parent = self
                        self._children_name_map["port"] = "port"

                        self.location = YList(self)
                        self._segment_path = lambda: "bundle"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/oper/fsdbagg_active/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.Fabric.Oper.FsdbaggActive.Bundle, [], name, value)


                    class Summary(Entity):
                        """
                        
                        
                        .. attribute:: bundle_summary_list
                        
                        	
                        	**type**\: list of  		 :py:class:`BundleSummaryList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.FsdbaggActive.Bundle.Summary.BundleSummaryList>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Fabric.Oper.FsdbaggActive.Bundle.Summary, self).__init__()

                            self.yang_name = "summary"
                            self.yang_parent_name = "bundle"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("bundle_summary_list", ("bundle_summary_list", Controller.Fabric.Oper.FsdbaggActive.Bundle.Summary.BundleSummaryList))])
                            self._leafs = OrderedDict()

                            self.bundle_summary_list = YList(self)
                            self._segment_path = lambda: "summary"
                            self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/oper/fsdbagg_active/bundle/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Fabric.Oper.FsdbaggActive.Bundle.Summary, [], name, value)


                        class BundleSummaryList(Entity):
                            """
                            
                            
                            .. attribute:: idx  (key)
                            
                            	
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: total_bundles
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: down_bundles
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: bundles_not_connected
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: total_bports
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: down_bports
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: bports_not_connected
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Fabric.Oper.FsdbaggActive.Bundle.Summary.BundleSummaryList, self).__init__()

                                self.yang_name = "bundle_summary_list"
                                self.yang_parent_name = "summary"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = ['idx']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('idx', YLeaf(YType.int32, 'idx')),
                                    ('total_bundles', YLeaf(YType.uint32, 'total_bundles')),
                                    ('down_bundles', YLeaf(YType.uint32, 'down_bundles')),
                                    ('bundles_not_connected', YLeaf(YType.uint32, 'bundles_not_connected')),
                                    ('total_bports', YLeaf(YType.uint32, 'total_bports')),
                                    ('down_bports', YLeaf(YType.uint32, 'down_bports')),
                                    ('bports_not_connected', YLeaf(YType.uint32, 'bports_not_connected')),
                                ])
                                self.idx = None
                                self.total_bundles = None
                                self.down_bundles = None
                                self.bundles_not_connected = None
                                self.total_bports = None
                                self.down_bports = None
                                self.bports_not_connected = None
                                self._segment_path = lambda: "bundle_summary_list" + "[idx='" + str(self.idx) + "']"
                                self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/oper/fsdbagg_active/bundle/summary/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Fabric.Oper.FsdbaggActive.Bundle.Summary.BundleSummaryList, [u'idx', u'total_bundles', u'down_bundles', u'bundles_not_connected', u'total_bports', u'down_bports', u'bports_not_connected'], name, value)


                    class All(Entity):
                        """
                        
                        
                        .. attribute:: bundle_all_list
                        
                        	
                        	**type**\: list of  		 :py:class:`BundleAllList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.FsdbaggActive.Bundle.All.BundleAllList>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Fabric.Oper.FsdbaggActive.Bundle.All, self).__init__()

                            self.yang_name = "all"
                            self.yang_parent_name = "bundle"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("bundle_all_list", ("bundle_all_list", Controller.Fabric.Oper.FsdbaggActive.Bundle.All.BundleAllList))])
                            self._leafs = OrderedDict()

                            self.bundle_all_list = YList(self)
                            self._segment_path = lambda: "all"
                            self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/oper/fsdbagg_active/bundle/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Fabric.Oper.FsdbaggActive.Bundle.All, [], name, value)


                        class BundleAllList(Entity):
                            """
                            
                            
                            .. attribute:: idx  (key)
                            
                            	
                            	**type**\: int
                            
                            	**range:** \-9223372036854775808..9223372036854775807
                            
                            .. attribute:: bundle_id
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: oper_state
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: plane_id
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: total_links
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: down_links
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: bport1
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: bport2
                            
                            	
                            	**type**\: str
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Fabric.Oper.FsdbaggActive.Bundle.All.BundleAllList, self).__init__()

                                self.yang_name = "bundle_all_list"
                                self.yang_parent_name = "all"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = ['idx']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('idx', YLeaf(YType.int64, 'idx')),
                                    ('bundle_id', YLeaf(YType.str, 'bundle_id')),
                                    ('oper_state', YLeaf(YType.str, 'oper_state')),
                                    ('plane_id', YLeaf(YType.uint32, 'plane_id')),
                                    ('total_links', YLeaf(YType.uint32, 'total_links')),
                                    ('down_links', YLeaf(YType.uint32, 'down_links')),
                                    ('bport1', YLeaf(YType.str, 'bport1')),
                                    ('bport2', YLeaf(YType.str, 'bport2')),
                                ])
                                self.idx = None
                                self.bundle_id = None
                                self.oper_state = None
                                self.plane_id = None
                                self.total_links = None
                                self.down_links = None
                                self.bport1 = None
                                self.bport2 = None
                                self._segment_path = lambda: "bundle_all_list" + "[idx='" + str(self.idx) + "']"
                                self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/oper/fsdbagg_active/bundle/all/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Fabric.Oper.FsdbaggActive.Bundle.All.BundleAllList, [u'idx', u'bundle_id', u'oper_state', u'plane_id', u'total_links', u'down_links', u'bport1', u'bport2'], name, value)


                    class Port(Entity):
                        """
                        
                        
                        .. attribute:: all
                        
                        	
                        	**type**\:  :py:class:`All <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.FsdbaggActive.Bundle.Port.All>`
                        
                        .. attribute:: location
                        
                        	
                        	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.FsdbaggActive.Bundle.Port.Location>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Fabric.Oper.FsdbaggActive.Bundle.Port, self).__init__()

                            self.yang_name = "port"
                            self.yang_parent_name = "bundle"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("all", ("all", Controller.Fabric.Oper.FsdbaggActive.Bundle.Port.All)), ("location", ("location", Controller.Fabric.Oper.FsdbaggActive.Bundle.Port.Location))])
                            self._leafs = OrderedDict()

                            self.all = Controller.Fabric.Oper.FsdbaggActive.Bundle.Port.All()
                            self.all.parent = self
                            self._children_name_map["all"] = "all"

                            self.location = YList(self)
                            self._segment_path = lambda: "port"
                            self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/oper/fsdbagg_active/bundle/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Fabric.Oper.FsdbaggActive.Bundle.Port, [], name, value)


                        class All(Entity):
                            """
                            
                            
                            .. attribute:: bport_all_list
                            
                            	
                            	**type**\: list of  		 :py:class:`BportAllList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.FsdbaggActive.Bundle.Port.All.BportAllList>`
                            
                            .. attribute:: statistics
                            
                            	
                            	**type**\:  :py:class:`Statistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.FsdbaggActive.Bundle.Port.All.Statistics>`
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Fabric.Oper.FsdbaggActive.Bundle.Port.All, self).__init__()

                                self.yang_name = "all"
                                self.yang_parent_name = "port"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("bport_all_list", ("bport_all_list", Controller.Fabric.Oper.FsdbaggActive.Bundle.Port.All.BportAllList)), ("statistics", ("statistics", Controller.Fabric.Oper.FsdbaggActive.Bundle.Port.All.Statistics))])
                                self._leafs = OrderedDict()

                                self.statistics = Controller.Fabric.Oper.FsdbaggActive.Bundle.Port.All.Statistics()
                                self.statistics.parent = self
                                self._children_name_map["statistics"] = "statistics"

                                self.bport_all_list = YList(self)
                                self._segment_path = lambda: "all"
                                self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/oper/fsdbagg_active/bundle/port/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Fabric.Oper.FsdbaggActive.Bundle.Port.All, [], name, value)


                            class BportAllList(Entity):
                                """
                                
                                
                                .. attribute:: idx  (key)
                                
                                	
                                	**type**\: int
                                
                                	**range:** \-9223372036854775808..9223372036854775807
                                
                                .. attribute:: bport_id
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: admin_state
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: oper_state
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: down_flags
                                
                                	
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.Fabric.Oper.FsdbaggActive.Bundle.Port.All.BportAllList, self).__init__()

                                    self.yang_name = "bport_all_list"
                                    self.yang_parent_name = "all"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = ['idx']
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('idx', YLeaf(YType.int64, 'idx')),
                                        ('bport_id', YLeaf(YType.str, 'bport_id')),
                                        ('admin_state', YLeaf(YType.str, 'admin-state')),
                                        ('oper_state', YLeaf(YType.str, 'oper_state')),
                                        ('down_flags', YLeaf(YType.str, 'down_flags')),
                                    ])
                                    self.idx = None
                                    self.bport_id = None
                                    self.admin_state = None
                                    self.oper_state = None
                                    self.down_flags = None
                                    self._segment_path = lambda: "bport_all_list" + "[idx='" + str(self.idx) + "']"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/oper/fsdbagg_active/bundle/port/all/%s" % self._segment_path()

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.Fabric.Oper.FsdbaggActive.Bundle.Port.All.BportAllList, [u'idx', u'bport_id', u'admin_state', u'oper_state', u'down_flags'], name, value)


                            class Statistics(Entity):
                                """
                                
                                
                                .. attribute:: bport_stats_all_racks
                                
                                	
                                	**type**\: list of  		 :py:class:`BportStatsAllRacks <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.FsdbaggActive.Bundle.Port.All.Statistics.BportStatsAllRacks>`
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.Fabric.Oper.FsdbaggActive.Bundle.Port.All.Statistics, self).__init__()

                                    self.yang_name = "statistics"
                                    self.yang_parent_name = "all"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([("bport_stats_all_racks", ("bport_stats_all_racks", Controller.Fabric.Oper.FsdbaggActive.Bundle.Port.All.Statistics.BportStatsAllRacks))])
                                    self._leafs = OrderedDict()

                                    self.bport_stats_all_racks = YList(self)
                                    self._segment_path = lambda: "statistics"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/oper/fsdbagg_active/bundle/port/all/%s" % self._segment_path()

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.Fabric.Oper.FsdbaggActive.Bundle.Port.All.Statistics, [], name, value)


                                class BportStatsAllRacks(Entity):
                                    """
                                    
                                    
                                    .. attribute:: idx  (key)
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    .. attribute:: total_racks
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: bport_stats_rack
                                    
                                    	
                                    	**type**\: list of  		 :py:class:`BportStatsRack <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.FsdbaggActive.Bundle.Port.All.Statistics.BportStatsAllRacks.BportStatsRack>`
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.Fabric.Oper.FsdbaggActive.Bundle.Port.All.Statistics.BportStatsAllRacks, self).__init__()

                                        self.yang_name = "bport_stats_all_racks"
                                        self.yang_parent_name = "statistics"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self.ylist_key_names = ['idx']
                                        self._child_classes = OrderedDict([("bport_stats_rack", ("bport_stats_rack", Controller.Fabric.Oper.FsdbaggActive.Bundle.Port.All.Statistics.BportStatsAllRacks.BportStatsRack))])
                                        self._leafs = OrderedDict([
                                            ('idx', YLeaf(YType.int32, 'idx')),
                                            ('total_racks', YLeaf(YType.uint32, 'total_racks')),
                                        ])
                                        self.idx = None
                                        self.total_racks = None

                                        self.bport_stats_rack = YList(self)
                                        self._segment_path = lambda: "bport_stats_all_racks" + "[idx='" + str(self.idx) + "']"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/oper/fsdbagg_active/bundle/port/all/statistics/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.Fabric.Oper.FsdbaggActive.Bundle.Port.All.Statistics.BportStatsAllRacks, [u'idx', u'total_racks'], name, value)


                                    class BportStatsRack(Entity):
                                        """
                                        
                                        
                                        .. attribute:: idx  (key)
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** \-2147483648..2147483647
                                        
                                        .. attribute:: rack_num_str
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: bport_stats
                                        
                                        	
                                        	**type**\: list of  		 :py:class:`BportStats <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.FsdbaggActive.Bundle.Port.All.Statistics.BportStatsAllRacks.BportStatsRack.BportStats>`
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Fabric.Oper.FsdbaggActive.Bundle.Port.All.Statistics.BportStatsAllRacks.BportStatsRack, self).__init__()

                                            self.yang_name = "bport_stats_rack"
                                            self.yang_parent_name = "bport_stats_all_racks"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['idx']
                                            self._child_classes = OrderedDict([("bport_stats", ("bport_stats", Controller.Fabric.Oper.FsdbaggActive.Bundle.Port.All.Statistics.BportStatsAllRacks.BportStatsRack.BportStats))])
                                            self._leafs = OrderedDict([
                                                ('idx', YLeaf(YType.int32, 'idx')),
                                                ('rack_num_str', YLeaf(YType.str, 'rack_num_str')),
                                            ])
                                            self.idx = None
                                            self.rack_num_str = None

                                            self.bport_stats = YList(self)
                                            self._segment_path = lambda: "bport_stats_rack" + "[idx='" + str(self.idx) + "']"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Fabric.Oper.FsdbaggActive.Bundle.Port.All.Statistics.BportStatsAllRacks.BportStatsRack, [u'idx', u'rack_num_str'], name, value)


                                        class BportStats(Entity):
                                            """
                                            
                                            
                                            .. attribute:: idx  (key)
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** \-9223372036854775808..9223372036854775807
                                            
                                            .. attribute:: bport_id
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: rx_data_cells
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..18446744073709551615
                                            
                                            .. attribute:: tx_data_cells
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..18446744073709551615
                                            
                                            .. attribute:: rx_ce_cells_is_overflow
                                            
                                            	
                                            	**type**\: bool
                                            
                                            .. attribute:: rx_ce_cells
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..18446744073709551615
                                            
                                            .. attribute:: rx_uce_cells_is_overflow
                                            
                                            	
                                            	**type**\: bool
                                            
                                            .. attribute:: rx_uce_cells
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..18446744073709551615
                                            
                                            .. attribute:: rx_pe_cells_is_overflow
                                            
                                            	
                                            	**type**\: bool
                                            
                                            .. attribute:: rx_pe_cells
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..18446744073709551615
                                            
                                            .. attribute:: last_clear_ts
                                            
                                            	
                                            	**type**\: str
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.Fabric.Oper.FsdbaggActive.Bundle.Port.All.Statistics.BportStatsAllRacks.BportStatsRack.BportStats, self).__init__()

                                                self.yang_name = "bport_stats"
                                                self.yang_parent_name = "bport_stats_rack"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['idx']
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('idx', YLeaf(YType.int64, 'idx')),
                                                    ('bport_id', YLeaf(YType.str, 'bport_id')),
                                                    ('rx_data_cells', YLeaf(YType.uint64, 'rx_data_cells')),
                                                    ('tx_data_cells', YLeaf(YType.uint64, 'tx_data_cells')),
                                                    ('rx_ce_cells_is_overflow', YLeaf(YType.boolean, 'rx_ce_cells_is_overflow')),
                                                    ('rx_ce_cells', YLeaf(YType.uint64, 'rx_ce_cells')),
                                                    ('rx_uce_cells_is_overflow', YLeaf(YType.boolean, 'rx_uce_cells_is_overflow')),
                                                    ('rx_uce_cells', YLeaf(YType.uint64, 'rx_uce_cells')),
                                                    ('rx_pe_cells_is_overflow', YLeaf(YType.boolean, 'rx_pe_cells_is_overflow')),
                                                    ('rx_pe_cells', YLeaf(YType.uint64, 'rx_pe_cells')),
                                                    ('last_clear_ts', YLeaf(YType.str, 'last_clear_ts')),
                                                ])
                                                self.idx = None
                                                self.bport_id = None
                                                self.rx_data_cells = None
                                                self.tx_data_cells = None
                                                self.rx_ce_cells_is_overflow = None
                                                self.rx_ce_cells = None
                                                self.rx_uce_cells_is_overflow = None
                                                self.rx_uce_cells = None
                                                self.rx_pe_cells_is_overflow = None
                                                self.rx_pe_cells = None
                                                self.last_clear_ts = None
                                                self._segment_path = lambda: "bport_stats" + "[idx='" + str(self.idx) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.Fabric.Oper.FsdbaggActive.Bundle.Port.All.Statistics.BportStatsAllRacks.BportStatsRack.BportStats, [u'idx', u'bport_id', u'rx_data_cells', u'tx_data_cells', u'rx_ce_cells_is_overflow', u'rx_ce_cells', u'rx_uce_cells_is_overflow', u'rx_uce_cells', u'rx_pe_cells_is_overflow', u'rx_pe_cells', u'last_clear_ts'], name, value)


                        class Location(Entity):
                            """
                            
                            
                            .. attribute:: loc_str  (key)
                            
                            	
                            	**type**\: str
                            
                            	**pattern:** ((0?[0\-9]\|1[0\-5])/([F\|f][C\|c](0?[0\-5]))/((0?[0\-9])\|(1[0\-5])))\|(([F\|f][0\-3])/([F\|f][C\|c](0?[0\-9]\|1[0\-1]))/((0?[0\-9])\|([1\-2][0\-9])\|(3[0\-1])))
                            
                            .. attribute:: bport_all_list
                            
                            	
                            	**type**\: list of  		 :py:class:`BportAllList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.FsdbaggActive.Bundle.Port.Location.BportAllList>`
                            
                            .. attribute:: statistics
                            
                            	
                            	**type**\:  :py:class:`Statistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.FsdbaggActive.Bundle.Port.Location.Statistics>`
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Fabric.Oper.FsdbaggActive.Bundle.Port.Location, self).__init__()

                                self.yang_name = "location"
                                self.yang_parent_name = "port"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = ['loc_str']
                                self._child_classes = OrderedDict([("bport_all_list", ("bport_all_list", Controller.Fabric.Oper.FsdbaggActive.Bundle.Port.Location.BportAllList)), ("statistics", ("statistics", Controller.Fabric.Oper.FsdbaggActive.Bundle.Port.Location.Statistics))])
                                self._leafs = OrderedDict([
                                    ('loc_str', YLeaf(YType.str, 'loc_str')),
                                ])
                                self.loc_str = None

                                self.statistics = Controller.Fabric.Oper.FsdbaggActive.Bundle.Port.Location.Statistics()
                                self.statistics.parent = self
                                self._children_name_map["statistics"] = "statistics"

                                self.bport_all_list = YList(self)
                                self._segment_path = lambda: "location" + "[loc_str='" + str(self.loc_str) + "']"
                                self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/oper/fsdbagg_active/bundle/port/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Fabric.Oper.FsdbaggActive.Bundle.Port.Location, [u'loc_str'], name, value)


                            class BportAllList(Entity):
                                """
                                
                                
                                .. attribute:: idx  (key)
                                
                                	
                                	**type**\: int
                                
                                	**range:** \-9223372036854775808..9223372036854775807
                                
                                .. attribute:: bport_id
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: admin_state
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: oper_state
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: down_flags
                                
                                	
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.Fabric.Oper.FsdbaggActive.Bundle.Port.Location.BportAllList, self).__init__()

                                    self.yang_name = "bport_all_list"
                                    self.yang_parent_name = "location"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['idx']
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('idx', YLeaf(YType.int64, 'idx')),
                                        ('bport_id', YLeaf(YType.str, 'bport_id')),
                                        ('admin_state', YLeaf(YType.str, 'admin-state')),
                                        ('oper_state', YLeaf(YType.str, 'oper_state')),
                                        ('down_flags', YLeaf(YType.str, 'down_flags')),
                                    ])
                                    self.idx = None
                                    self.bport_id = None
                                    self.admin_state = None
                                    self.oper_state = None
                                    self.down_flags = None
                                    self._segment_path = lambda: "bport_all_list" + "[idx='" + str(self.idx) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.Fabric.Oper.FsdbaggActive.Bundle.Port.Location.BportAllList, [u'idx', u'bport_id', u'admin_state', u'oper_state', u'down_flags'], name, value)


                            class Statistics(Entity):
                                """
                                
                                
                                .. attribute:: bport_stats_all_racks
                                
                                	
                                	**type**\: list of  		 :py:class:`BportStatsAllRacks <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.FsdbaggActive.Bundle.Port.Location.Statistics.BportStatsAllRacks>`
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.Fabric.Oper.FsdbaggActive.Bundle.Port.Location.Statistics, self).__init__()

                                    self.yang_name = "statistics"
                                    self.yang_parent_name = "location"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([("bport_stats_all_racks", ("bport_stats_all_racks", Controller.Fabric.Oper.FsdbaggActive.Bundle.Port.Location.Statistics.BportStatsAllRacks))])
                                    self._leafs = OrderedDict()

                                    self.bport_stats_all_racks = YList(self)
                                    self._segment_path = lambda: "statistics"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.Fabric.Oper.FsdbaggActive.Bundle.Port.Location.Statistics, [], name, value)


                                class BportStatsAllRacks(Entity):
                                    """
                                    
                                    
                                    .. attribute:: idx  (key)
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    .. attribute:: total_racks
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: bport_stats_rack
                                    
                                    	
                                    	**type**\: list of  		 :py:class:`BportStatsRack <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.FsdbaggActive.Bundle.Port.Location.Statistics.BportStatsAllRacks.BportStatsRack>`
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.Fabric.Oper.FsdbaggActive.Bundle.Port.Location.Statistics.BportStatsAllRacks, self).__init__()

                                        self.yang_name = "bport_stats_all_racks"
                                        self.yang_parent_name = "statistics"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['idx']
                                        self._child_classes = OrderedDict([("bport_stats_rack", ("bport_stats_rack", Controller.Fabric.Oper.FsdbaggActive.Bundle.Port.Location.Statistics.BportStatsAllRacks.BportStatsRack))])
                                        self._leafs = OrderedDict([
                                            ('idx', YLeaf(YType.int32, 'idx')),
                                            ('total_racks', YLeaf(YType.uint32, 'total_racks')),
                                        ])
                                        self.idx = None
                                        self.total_racks = None

                                        self.bport_stats_rack = YList(self)
                                        self._segment_path = lambda: "bport_stats_all_racks" + "[idx='" + str(self.idx) + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.Fabric.Oper.FsdbaggActive.Bundle.Port.Location.Statistics.BportStatsAllRacks, [u'idx', u'total_racks'], name, value)


                                    class BportStatsRack(Entity):
                                        """
                                        
                                        
                                        .. attribute:: idx  (key)
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** \-2147483648..2147483647
                                        
                                        .. attribute:: rack_num_str
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: bport_stats
                                        
                                        	
                                        	**type**\: list of  		 :py:class:`BportStats <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.FsdbaggActive.Bundle.Port.Location.Statistics.BportStatsAllRacks.BportStatsRack.BportStats>`
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Fabric.Oper.FsdbaggActive.Bundle.Port.Location.Statistics.BportStatsAllRacks.BportStatsRack, self).__init__()

                                            self.yang_name = "bport_stats_rack"
                                            self.yang_parent_name = "bport_stats_all_racks"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['idx']
                                            self._child_classes = OrderedDict([("bport_stats", ("bport_stats", Controller.Fabric.Oper.FsdbaggActive.Bundle.Port.Location.Statistics.BportStatsAllRacks.BportStatsRack.BportStats))])
                                            self._leafs = OrderedDict([
                                                ('idx', YLeaf(YType.int32, 'idx')),
                                                ('rack_num_str', YLeaf(YType.str, 'rack_num_str')),
                                            ])
                                            self.idx = None
                                            self.rack_num_str = None

                                            self.bport_stats = YList(self)
                                            self._segment_path = lambda: "bport_stats_rack" + "[idx='" + str(self.idx) + "']"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Fabric.Oper.FsdbaggActive.Bundle.Port.Location.Statistics.BportStatsAllRacks.BportStatsRack, [u'idx', u'rack_num_str'], name, value)


                                        class BportStats(Entity):
                                            """
                                            
                                            
                                            .. attribute:: idx  (key)
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** \-9223372036854775808..9223372036854775807
                                            
                                            .. attribute:: bport_id
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: rx_data_cells
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..18446744073709551615
                                            
                                            .. attribute:: tx_data_cells
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..18446744073709551615
                                            
                                            .. attribute:: rx_ce_cells_is_overflow
                                            
                                            	
                                            	**type**\: bool
                                            
                                            .. attribute:: rx_ce_cells
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..18446744073709551615
                                            
                                            .. attribute:: rx_uce_cells_is_overflow
                                            
                                            	
                                            	**type**\: bool
                                            
                                            .. attribute:: rx_uce_cells
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..18446744073709551615
                                            
                                            .. attribute:: rx_pe_cells_is_overflow
                                            
                                            	
                                            	**type**\: bool
                                            
                                            .. attribute:: rx_pe_cells
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..18446744073709551615
                                            
                                            .. attribute:: last_clear_ts
                                            
                                            	
                                            	**type**\: str
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.Fabric.Oper.FsdbaggActive.Bundle.Port.Location.Statistics.BportStatsAllRacks.BportStatsRack.BportStats, self).__init__()

                                                self.yang_name = "bport_stats"
                                                self.yang_parent_name = "bport_stats_rack"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['idx']
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('idx', YLeaf(YType.int64, 'idx')),
                                                    ('bport_id', YLeaf(YType.str, 'bport_id')),
                                                    ('rx_data_cells', YLeaf(YType.uint64, 'rx_data_cells')),
                                                    ('tx_data_cells', YLeaf(YType.uint64, 'tx_data_cells')),
                                                    ('rx_ce_cells_is_overflow', YLeaf(YType.boolean, 'rx_ce_cells_is_overflow')),
                                                    ('rx_ce_cells', YLeaf(YType.uint64, 'rx_ce_cells')),
                                                    ('rx_uce_cells_is_overflow', YLeaf(YType.boolean, 'rx_uce_cells_is_overflow')),
                                                    ('rx_uce_cells', YLeaf(YType.uint64, 'rx_uce_cells')),
                                                    ('rx_pe_cells_is_overflow', YLeaf(YType.boolean, 'rx_pe_cells_is_overflow')),
                                                    ('rx_pe_cells', YLeaf(YType.uint64, 'rx_pe_cells')),
                                                    ('last_clear_ts', YLeaf(YType.str, 'last_clear_ts')),
                                                ])
                                                self.idx = None
                                                self.bport_id = None
                                                self.rx_data_cells = None
                                                self.tx_data_cells = None
                                                self.rx_ce_cells_is_overflow = None
                                                self.rx_ce_cells = None
                                                self.rx_uce_cells_is_overflow = None
                                                self.rx_uce_cells = None
                                                self.rx_pe_cells_is_overflow = None
                                                self.rx_pe_cells = None
                                                self.last_clear_ts = None
                                                self._segment_path = lambda: "bport_stats" + "[idx='" + str(self.idx) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.Fabric.Oper.FsdbaggActive.Bundle.Port.Location.Statistics.BportStatsAllRacks.BportStatsRack.BportStats, [u'idx', u'bport_id', u'rx_data_cells', u'tx_data_cells', u'rx_ce_cells_is_overflow', u'rx_ce_cells', u'rx_uce_cells_is_overflow', u'rx_uce_cells', u'rx_pe_cells_is_overflow', u'rx_pe_cells', u'last_clear_ts'], name, value)


                    class Location(Entity):
                        """
                        
                        
                        .. attribute:: loc_str  (key)
                        
                        	
                        	**type**\: str
                        
                        	**pattern:** ((0?[0\-9]\|1[0\-5])/([F\|f][C\|c](0?[0\-5]))/((0?[0\-9])\|(1[0\-5])))\|(([F\|f][0\-3])/([F\|f][C\|c](0?[0\-9]\|1[0\-1]))/((0?[0\-9])\|([1\-2][0\-9])\|(3[0\-1])))
                        
                        .. attribute:: bundle_all_list
                        
                        	
                        	**type**\: list of  		 :py:class:`BundleAllList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.FsdbaggActive.Bundle.Location.BundleAllList>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Fabric.Oper.FsdbaggActive.Bundle.Location, self).__init__()

                            self.yang_name = "location"
                            self.yang_parent_name = "bundle"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = ['loc_str']
                            self._child_classes = OrderedDict([("bundle_all_list", ("bundle_all_list", Controller.Fabric.Oper.FsdbaggActive.Bundle.Location.BundleAllList))])
                            self._leafs = OrderedDict([
                                ('loc_str', YLeaf(YType.str, 'loc_str')),
                            ])
                            self.loc_str = None

                            self.bundle_all_list = YList(self)
                            self._segment_path = lambda: "location" + "[loc_str='" + str(self.loc_str) + "']"
                            self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/oper/fsdbagg_active/bundle/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Fabric.Oper.FsdbaggActive.Bundle.Location, [u'loc_str'], name, value)


                        class BundleAllList(Entity):
                            """
                            
                            
                            .. attribute:: idx  (key)
                            
                            	
                            	**type**\: int
                            
                            	**range:** \-9223372036854775808..9223372036854775807
                            
                            .. attribute:: bundle_id
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: oper_state
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: plane_id
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: total_links
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: down_links
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: bport1
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: bport2
                            
                            	
                            	**type**\: str
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Fabric.Oper.FsdbaggActive.Bundle.Location.BundleAllList, self).__init__()

                                self.yang_name = "bundle_all_list"
                                self.yang_parent_name = "location"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['idx']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('idx', YLeaf(YType.int64, 'idx')),
                                    ('bundle_id', YLeaf(YType.str, 'bundle_id')),
                                    ('oper_state', YLeaf(YType.str, 'oper_state')),
                                    ('plane_id', YLeaf(YType.uint32, 'plane_id')),
                                    ('total_links', YLeaf(YType.uint32, 'total_links')),
                                    ('down_links', YLeaf(YType.uint32, 'down_links')),
                                    ('bport1', YLeaf(YType.str, 'bport1')),
                                    ('bport2', YLeaf(YType.str, 'bport2')),
                                ])
                                self.idx = None
                                self.bundle_id = None
                                self.oper_state = None
                                self.plane_id = None
                                self.total_links = None
                                self.down_links = None
                                self.bport1 = None
                                self.bport2 = None
                                self._segment_path = lambda: "bundle_all_list" + "[idx='" + str(self.idx) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Fabric.Oper.FsdbaggActive.Bundle.Location.BundleAllList, [u'idx', u'bundle_id', u'oper_state', u'plane_id', u'total_links', u'down_links', u'bport1', u'bport2'], name, value)


                class Statistics(Entity):
                    """
                    
                    
                    .. attribute:: plane
                    
                    	
                    	**type**\: list of  		 :py:class:`Plane <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.FsdbaggActive.Statistics.Plane>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.Fabric.Oper.FsdbaggActive.Statistics, self).__init__()

                        self.yang_name = "statistics"
                        self.yang_parent_name = "fsdbagg_active"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("plane", ("plane", Controller.Fabric.Oper.FsdbaggActive.Statistics.Plane))])
                        self._leafs = OrderedDict()

                        self.plane = YList(self)
                        self._segment_path = lambda: "statistics"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/oper/fsdbagg_active/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.Fabric.Oper.FsdbaggActive.Statistics, [], name, value)


                    class Plane(Entity):
                        """
                        
                        
                        .. attribute:: planeid  (key)
                        
                        	
                        	**type**\: str
                        
                        	**pattern:** all\|[0\-5]
                        
                        .. attribute:: admin_state
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: ucast_oper_state
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: mcast_oper_state
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: plane_mode
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: ucast_cnt_up
                        
                        	
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: ucast_cnt_some_up
                        
                        	
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: ucast_cnt_dn
                        
                        	
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: mcast_cnt_up
                        
                        	
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: mcast_cnt_some_up
                        
                        	
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: mcast_cnt_dn
                        
                        	
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: total_bundles
                        
                        	
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: down_bundles
                        
                        	
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: rx_data_cells
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        .. attribute:: tx_data_cells
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        .. attribute:: rx_ce_cells_is_overflow
                        
                        	
                        	**type**\: bool
                        
                        .. attribute:: rx_ce_cells
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        .. attribute:: rx_uce_cells_is_overflow
                        
                        	
                        	**type**\: bool
                        
                        .. attribute:: rx_uce_cells
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        .. attribute:: rx_pe_cells_is_overflow
                        
                        	
                        	**type**\: bool
                        
                        .. attribute:: rx_pe_cells
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        .. attribute:: ucast_lost_cells
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: mcast_lost_cells
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: last_clear_ts
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: last_clear_reason
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: last_clear_req_ts
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: last_clear_status
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: is_asic_internal_error
                        
                        	
                        	**type**\: bool
                        
                        .. attribute:: asic_internal_drops
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        .. attribute:: asic_location_drops
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: ppu_state
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: asic_internal_error
                        
                        	
                        	**type**\: list of  		 :py:class:`AsicInternalError <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.FsdbaggActive.Statistics.Plane.AsicInternalError>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Fabric.Oper.FsdbaggActive.Statistics.Plane, self).__init__()

                            self.yang_name = "plane"
                            self.yang_parent_name = "statistics"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = ['planeid']
                            self._child_classes = OrderedDict([("asic_internal_error", ("asic_internal_error", Controller.Fabric.Oper.FsdbaggActive.Statistics.Plane.AsicInternalError))])
                            self._leafs = OrderedDict([
                                ('planeid', YLeaf(YType.str, 'planeid')),
                                ('admin_state', YLeaf(YType.str, 'admin-state')),
                                ('ucast_oper_state', YLeaf(YType.str, 'ucast_oper_state')),
                                ('mcast_oper_state', YLeaf(YType.str, 'mcast_oper_state')),
                                ('plane_mode', YLeaf(YType.str, 'plane_mode')),
                                ('ucast_cnt_up', YLeaf(YType.int32, 'ucast_cnt_up')),
                                ('ucast_cnt_some_up', YLeaf(YType.int32, 'ucast_cnt_some_up')),
                                ('ucast_cnt_dn', YLeaf(YType.int32, 'ucast_cnt_dn')),
                                ('mcast_cnt_up', YLeaf(YType.int32, 'mcast_cnt_up')),
                                ('mcast_cnt_some_up', YLeaf(YType.int32, 'mcast_cnt_some_up')),
                                ('mcast_cnt_dn', YLeaf(YType.int32, 'mcast_cnt_dn')),
                                ('total_bundles', YLeaf(YType.int32, 'total_bundles')),
                                ('down_bundles', YLeaf(YType.int32, 'down_bundles')),
                                ('rx_data_cells', YLeaf(YType.uint64, 'rx_data_cells')),
                                ('tx_data_cells', YLeaf(YType.uint64, 'tx_data_cells')),
                                ('rx_ce_cells_is_overflow', YLeaf(YType.boolean, 'rx_ce_cells_is_overflow')),
                                ('rx_ce_cells', YLeaf(YType.uint64, 'rx_ce_cells')),
                                ('rx_uce_cells_is_overflow', YLeaf(YType.boolean, 'rx_uce_cells_is_overflow')),
                                ('rx_uce_cells', YLeaf(YType.uint64, 'rx_uce_cells')),
                                ('rx_pe_cells_is_overflow', YLeaf(YType.boolean, 'rx_pe_cells_is_overflow')),
                                ('rx_pe_cells', YLeaf(YType.uint64, 'rx_pe_cells')),
                                ('ucast_lost_cells', YLeaf(YType.uint32, 'ucast_lost_cells')),
                                ('mcast_lost_cells', YLeaf(YType.uint32, 'mcast_lost_cells')),
                                ('last_clear_ts', YLeaf(YType.str, 'last_clear_ts')),
                                ('last_clear_reason', YLeaf(YType.str, 'last_clear_reason')),
                                ('last_clear_req_ts', YLeaf(YType.str, 'last_clear_req_ts')),
                                ('last_clear_status', YLeaf(YType.str, 'last_clear_status')),
                                ('is_asic_internal_error', YLeaf(YType.boolean, 'is_asic_internal_error')),
                                ('asic_internal_drops', YLeaf(YType.uint64, 'asic_internal_drops')),
                                ('asic_location_drops', YLeaf(YType.str, 'asic_location_drops')),
                                ('ppu_state', YLeaf(YType.str, 'ppu_state')),
                            ])
                            self.planeid = None
                            self.admin_state = None
                            self.ucast_oper_state = None
                            self.mcast_oper_state = None
                            self.plane_mode = None
                            self.ucast_cnt_up = None
                            self.ucast_cnt_some_up = None
                            self.ucast_cnt_dn = None
                            self.mcast_cnt_up = None
                            self.mcast_cnt_some_up = None
                            self.mcast_cnt_dn = None
                            self.total_bundles = None
                            self.down_bundles = None
                            self.rx_data_cells = None
                            self.tx_data_cells = None
                            self.rx_ce_cells_is_overflow = None
                            self.rx_ce_cells = None
                            self.rx_uce_cells_is_overflow = None
                            self.rx_uce_cells = None
                            self.rx_pe_cells_is_overflow = None
                            self.rx_pe_cells = None
                            self.ucast_lost_cells = None
                            self.mcast_lost_cells = None
                            self.last_clear_ts = None
                            self.last_clear_reason = None
                            self.last_clear_req_ts = None
                            self.last_clear_status = None
                            self.is_asic_internal_error = None
                            self.asic_internal_drops = None
                            self.asic_location_drops = None
                            self.ppu_state = None

                            self.asic_internal_error = YList(self)
                            self._segment_path = lambda: "plane" + "[planeid='" + str(self.planeid) + "']"
                            self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/oper/fsdbagg_active/statistics/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Fabric.Oper.FsdbaggActive.Statistics.Plane, [u'planeid', u'admin_state', u'ucast_oper_state', u'mcast_oper_state', u'plane_mode', u'ucast_cnt_up', u'ucast_cnt_some_up', u'ucast_cnt_dn', u'mcast_cnt_up', u'mcast_cnt_some_up', u'mcast_cnt_dn', u'total_bundles', u'down_bundles', u'rx_data_cells', u'tx_data_cells', u'rx_ce_cells_is_overflow', u'rx_ce_cells', u'rx_uce_cells_is_overflow', u'rx_uce_cells', u'rx_pe_cells_is_overflow', u'rx_pe_cells', u'ucast_lost_cells', u'mcast_lost_cells', u'last_clear_ts', u'last_clear_reason', u'last_clear_req_ts', u'last_clear_status', u'is_asic_internal_error', u'asic_internal_drops', u'asic_location_drops', u'ppu_state'], name, value)


                        class AsicInternalError(Entity):
                            """
                            
                            
                            .. attribute:: asic_number  (key)
                            
                            	
                            	**type**\: int
                            
                            	**range:** \-9223372036854775808..9223372036854775807
                            
                            .. attribute:: asic_location
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: link_crc_error
                            
                            	
                            	**type**\: bool
                            
                            .. attribute:: link_size_error
                            
                            	
                            	**type**\: bool
                            
                            .. attribute:: link_mis_align_error
                            
                            	
                            	**type**\: bool
                            
                            .. attribute:: link_code_group_error
                            
                            	
                            	**type**\: bool
                            
                            .. attribute:: link_no_sig_lock_error
                            
                            	
                            	**type**\: bool
                            
                            .. attribute:: link_no_sign_accept_error
                            
                            	
                            	**type**\: bool
                            
                            .. attribute:: link_token_error
                            
                            	
                            	**type**\: bool
                            
                            .. attribute:: error_token_count
                            
                            	
                            	**type**\: bool
                            
                            .. attribute:: last_asic_internal_error_ts
                            
                            	
                            	**type**\: str
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Fabric.Oper.FsdbaggActive.Statistics.Plane.AsicInternalError, self).__init__()

                                self.yang_name = "asic_internal_error"
                                self.yang_parent_name = "plane"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['asic_number']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('asic_number', YLeaf(YType.int64, 'asic_number')),
                                    ('asic_location', YLeaf(YType.str, 'asic_location')),
                                    ('link_crc_error', YLeaf(YType.boolean, 'link_crc_error')),
                                    ('link_size_error', YLeaf(YType.boolean, 'link_size_error')),
                                    ('link_mis_align_error', YLeaf(YType.boolean, 'link_mis_align_error')),
                                    ('link_code_group_error', YLeaf(YType.boolean, 'link_code_group_error')),
                                    ('link_no_sig_lock_error', YLeaf(YType.boolean, 'link_no_sig_lock_error')),
                                    ('link_no_sign_accept_error', YLeaf(YType.boolean, 'link_no_sign_accept_error')),
                                    ('link_token_error', YLeaf(YType.boolean, 'link_token_error')),
                                    ('error_token_count', YLeaf(YType.boolean, 'error_token_count')),
                                    ('last_asic_internal_error_ts', YLeaf(YType.str, 'last_asic_internal_error_ts')),
                                ])
                                self.asic_number = None
                                self.asic_location = None
                                self.link_crc_error = None
                                self.link_size_error = None
                                self.link_mis_align_error = None
                                self.link_code_group_error = None
                                self.link_no_sig_lock_error = None
                                self.link_no_sign_accept_error = None
                                self.link_token_error = None
                                self.error_token_count = None
                                self.last_asic_internal_error_ts = None
                                self._segment_path = lambda: "asic_internal_error" + "[asic_number='" + str(self.asic_number) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Fabric.Oper.FsdbaggActive.Statistics.Plane.AsicInternalError, [u'asic_number', u'asic_location', u'link_crc_error', u'link_size_error', u'link_mis_align_error', u'link_code_group_error', u'link_no_sig_lock_error', u'link_no_sign_accept_error', u'link_token_error', u'error_token_count', u'last_asic_internal_error_ts'], name, value)


            class FsdbaggLink(Entity):
                """
                
                
                .. attribute:: port
                
                	
                	**type**\: list of  		 :py:class:`Port <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.FsdbaggLink.Port>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Controller.Fabric.Oper.FsdbaggLink, self).__init__()

                    self.yang_name = "fsdbagg_link"
                    self.yang_parent_name = "oper"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("port", ("port", Controller.Fabric.Oper.FsdbaggLink.Port))])
                    self._leafs = OrderedDict()

                    self.port = YList(self)
                    self._segment_path = lambda: "fsdbagg_link"
                    self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/oper/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Controller.Fabric.Oper.FsdbaggLink, [], name, value)


                class Port(Entity):
                    """
                    
                    
                    .. attribute:: portname  (key)
                    
                    	
                    	**type**\: str
                    
                    	**pattern:** fia\|s1\|s2\|s3
                    
                    .. attribute:: description
                    
                    	
                    	**type**\: str
                    
                    	**default value**\: port.
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.Fabric.Oper.FsdbaggLink.Port, self).__init__()

                        self.yang_name = "port"
                        self.yang_parent_name = "fsdbagg_link"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['portname']
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('portname', YLeaf(YType.str, 'portname')),
                            ('description', YLeaf(YType.str, 'description')),
                        ])
                        self.portname = None
                        self.description = None
                        self._segment_path = lambda: "port" + "[portname='" + str(self.portname) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/oper/fsdbagg_link/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.Fabric.Oper.FsdbaggLink.Port, [u'portname', u'description'], name, value)


            class FsdbaggSfeAsicType(Entity):
                """
                
                
                .. attribute:: asic_types
                
                	
                	**type**\: list of  		 :py:class:`AsicTypes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.FsdbaggSfeAsicType.AsicTypes>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Controller.Fabric.Oper.FsdbaggSfeAsicType, self).__init__()

                    self.yang_name = "fsdbagg_sfe_asic_type"
                    self.yang_parent_name = "oper"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("asic_types", ("asic_types", Controller.Fabric.Oper.FsdbaggSfeAsicType.AsicTypes))])
                    self._leafs = OrderedDict()

                    self.asic_types = YList(self)
                    self._segment_path = lambda: "fsdbagg_sfe_asic_type"
                    self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/oper/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Controller.Fabric.Oper.FsdbaggSfeAsicType, [], name, value)


                class AsicTypes(Entity):
                    """
                    
                    
                    .. attribute:: asicname  (key)
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: description
                    
                    	
                    	**type**\: str
                    
                    	**default value**\: asic.
                    
                    .. attribute:: block
                    
                    	
                    	**type**\: list of  		 :py:class:`Block <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.FsdbaggSfeAsicType.AsicTypes.Block>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.Fabric.Oper.FsdbaggSfeAsicType.AsicTypes, self).__init__()

                        self.yang_name = "asic_types"
                        self.yang_parent_name = "fsdbagg_sfe_asic_type"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['asicname']
                        self._child_classes = OrderedDict([("block", ("block", Controller.Fabric.Oper.FsdbaggSfeAsicType.AsicTypes.Block))])
                        self._leafs = OrderedDict([
                            ('asicname', YLeaf(YType.str, 'asicname')),
                            ('description', YLeaf(YType.str, 'description')),
                        ])
                        self.asicname = None
                        self.description = None

                        self.block = YList(self)
                        self._segment_path = lambda: "asic_types" + "[asicname='" + str(self.asicname) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/oper/fsdbagg_sfe_asic_type/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.Fabric.Oper.FsdbaggSfeAsicType.AsicTypes, [u'asicname', u'description'], name, value)


                    class Block(Entity):
                        """
                        
                        
                        .. attribute:: blockname  (key)
                        
                        	
                        	**type**\: str
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Fabric.Oper.FsdbaggSfeAsicType.AsicTypes.Block, self).__init__()

                            self.yang_name = "block"
                            self.yang_parent_name = "asic_types"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['blockname']
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('blockname', YLeaf(YType.str, 'blockname')),
                            ])
                            self.blockname = None
                            self._segment_path = lambda: "block" + "[blockname='" + str(self.blockname) + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Fabric.Oper.FsdbaggSfeAsicType.AsicTypes.Block, [u'blockname'], name, value)


            class FsdbaggStandby(Entity):
                """
                
                
                .. attribute:: plane
                
                	
                	**type**\: list of  		 :py:class:`Plane <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.FsdbaggStandby.Plane>`
                
                .. attribute:: statistics
                
                	
                	**type**\:  :py:class:`Statistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.FsdbaggStandby.Statistics>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Controller.Fabric.Oper.FsdbaggStandby, self).__init__()

                    self.yang_name = "fsdbagg_standby"
                    self.yang_parent_name = "oper"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("plane", ("plane", Controller.Fabric.Oper.FsdbaggStandby.Plane)), ("statistics", ("statistics", Controller.Fabric.Oper.FsdbaggStandby.Statistics))])
                    self._leafs = OrderedDict()

                    self.statistics = Controller.Fabric.Oper.FsdbaggStandby.Statistics()
                    self.statistics.parent = self
                    self._children_name_map["statistics"] = "statistics"

                    self.plane = YList(self)
                    self._segment_path = lambda: "fsdbagg_standby"
                    self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/oper/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Controller.Fabric.Oper.FsdbaggStandby, [], name, value)


                class Plane(Entity):
                    """
                    
                    
                    .. attribute:: planeid  (key)
                    
                    	
                    	**type**\: str
                    
                    	**pattern:** all\|[0\-5]
                    
                    .. attribute:: admin_state
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: ucast_oper_state
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: mcast_oper_state
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: plane_mode
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: ucast_cnt_up
                    
                    	
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: ucast_cnt_some_up
                    
                    	
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: ucast_cnt_dn
                    
                    	
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: mcast_cnt_up
                    
                    	
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: mcast_cnt_some_up
                    
                    	
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: mcast_cnt_dn
                    
                    	
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: total_bundles
                    
                    	
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: down_bundles
                    
                    	
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: rx_data_cells
                    
                    	
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    .. attribute:: tx_data_cells
                    
                    	
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    .. attribute:: rx_ce_cells_is_overflow
                    
                    	
                    	**type**\: bool
                    
                    .. attribute:: rx_ce_cells
                    
                    	
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    .. attribute:: rx_uce_cells_is_overflow
                    
                    	
                    	**type**\: bool
                    
                    .. attribute:: rx_uce_cells
                    
                    	
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    .. attribute:: rx_pe_cells_is_overflow
                    
                    	
                    	**type**\: bool
                    
                    .. attribute:: rx_pe_cells
                    
                    	
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    .. attribute:: ucast_lost_cells
                    
                    	
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: mcast_lost_cells
                    
                    	
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: last_clear_ts
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: last_clear_reason
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: last_clear_req_ts
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: last_clear_status
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: is_asic_internal_error
                    
                    	
                    	**type**\: bool
                    
                    .. attribute:: asic_internal_drops
                    
                    	
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    .. attribute:: asic_location_drops
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: ppu_state
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: asic_internal_error
                    
                    	
                    	**type**\: list of  		 :py:class:`AsicInternalError <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.FsdbaggStandby.Plane.AsicInternalError>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.Fabric.Oper.FsdbaggStandby.Plane, self).__init__()

                        self.yang_name = "plane"
                        self.yang_parent_name = "fsdbagg_standby"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['planeid']
                        self._child_classes = OrderedDict([("asic_internal_error", ("asic_internal_error", Controller.Fabric.Oper.FsdbaggStandby.Plane.AsicInternalError))])
                        self._leafs = OrderedDict([
                            ('planeid', YLeaf(YType.str, 'planeid')),
                            ('admin_state', YLeaf(YType.str, 'admin-state')),
                            ('ucast_oper_state', YLeaf(YType.str, 'ucast_oper_state')),
                            ('mcast_oper_state', YLeaf(YType.str, 'mcast_oper_state')),
                            ('plane_mode', YLeaf(YType.str, 'plane_mode')),
                            ('ucast_cnt_up', YLeaf(YType.int32, 'ucast_cnt_up')),
                            ('ucast_cnt_some_up', YLeaf(YType.int32, 'ucast_cnt_some_up')),
                            ('ucast_cnt_dn', YLeaf(YType.int32, 'ucast_cnt_dn')),
                            ('mcast_cnt_up', YLeaf(YType.int32, 'mcast_cnt_up')),
                            ('mcast_cnt_some_up', YLeaf(YType.int32, 'mcast_cnt_some_up')),
                            ('mcast_cnt_dn', YLeaf(YType.int32, 'mcast_cnt_dn')),
                            ('total_bundles', YLeaf(YType.int32, 'total_bundles')),
                            ('down_bundles', YLeaf(YType.int32, 'down_bundles')),
                            ('rx_data_cells', YLeaf(YType.uint64, 'rx_data_cells')),
                            ('tx_data_cells', YLeaf(YType.uint64, 'tx_data_cells')),
                            ('rx_ce_cells_is_overflow', YLeaf(YType.boolean, 'rx_ce_cells_is_overflow')),
                            ('rx_ce_cells', YLeaf(YType.uint64, 'rx_ce_cells')),
                            ('rx_uce_cells_is_overflow', YLeaf(YType.boolean, 'rx_uce_cells_is_overflow')),
                            ('rx_uce_cells', YLeaf(YType.uint64, 'rx_uce_cells')),
                            ('rx_pe_cells_is_overflow', YLeaf(YType.boolean, 'rx_pe_cells_is_overflow')),
                            ('rx_pe_cells', YLeaf(YType.uint64, 'rx_pe_cells')),
                            ('ucast_lost_cells', YLeaf(YType.uint32, 'ucast_lost_cells')),
                            ('mcast_lost_cells', YLeaf(YType.uint32, 'mcast_lost_cells')),
                            ('last_clear_ts', YLeaf(YType.str, 'last_clear_ts')),
                            ('last_clear_reason', YLeaf(YType.str, 'last_clear_reason')),
                            ('last_clear_req_ts', YLeaf(YType.str, 'last_clear_req_ts')),
                            ('last_clear_status', YLeaf(YType.str, 'last_clear_status')),
                            ('is_asic_internal_error', YLeaf(YType.boolean, 'is_asic_internal_error')),
                            ('asic_internal_drops', YLeaf(YType.uint64, 'asic_internal_drops')),
                            ('asic_location_drops', YLeaf(YType.str, 'asic_location_drops')),
                            ('ppu_state', YLeaf(YType.str, 'ppu_state')),
                        ])
                        self.planeid = None
                        self.admin_state = None
                        self.ucast_oper_state = None
                        self.mcast_oper_state = None
                        self.plane_mode = None
                        self.ucast_cnt_up = None
                        self.ucast_cnt_some_up = None
                        self.ucast_cnt_dn = None
                        self.mcast_cnt_up = None
                        self.mcast_cnt_some_up = None
                        self.mcast_cnt_dn = None
                        self.total_bundles = None
                        self.down_bundles = None
                        self.rx_data_cells = None
                        self.tx_data_cells = None
                        self.rx_ce_cells_is_overflow = None
                        self.rx_ce_cells = None
                        self.rx_uce_cells_is_overflow = None
                        self.rx_uce_cells = None
                        self.rx_pe_cells_is_overflow = None
                        self.rx_pe_cells = None
                        self.ucast_lost_cells = None
                        self.mcast_lost_cells = None
                        self.last_clear_ts = None
                        self.last_clear_reason = None
                        self.last_clear_req_ts = None
                        self.last_clear_status = None
                        self.is_asic_internal_error = None
                        self.asic_internal_drops = None
                        self.asic_location_drops = None
                        self.ppu_state = None

                        self.asic_internal_error = YList(self)
                        self._segment_path = lambda: "plane" + "[planeid='" + str(self.planeid) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/oper/fsdbagg_standby/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.Fabric.Oper.FsdbaggStandby.Plane, [u'planeid', u'admin_state', u'ucast_oper_state', u'mcast_oper_state', u'plane_mode', u'ucast_cnt_up', u'ucast_cnt_some_up', u'ucast_cnt_dn', u'mcast_cnt_up', u'mcast_cnt_some_up', u'mcast_cnt_dn', u'total_bundles', u'down_bundles', u'rx_data_cells', u'tx_data_cells', u'rx_ce_cells_is_overflow', u'rx_ce_cells', u'rx_uce_cells_is_overflow', u'rx_uce_cells', u'rx_pe_cells_is_overflow', u'rx_pe_cells', u'ucast_lost_cells', u'mcast_lost_cells', u'last_clear_ts', u'last_clear_reason', u'last_clear_req_ts', u'last_clear_status', u'is_asic_internal_error', u'asic_internal_drops', u'asic_location_drops', u'ppu_state'], name, value)


                    class AsicInternalError(Entity):
                        """
                        
                        
                        .. attribute:: asic_number  (key)
                        
                        	
                        	**type**\: int
                        
                        	**range:** \-9223372036854775808..9223372036854775807
                        
                        .. attribute:: asic_location
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: link_crc_error
                        
                        	
                        	**type**\: bool
                        
                        .. attribute:: link_size_error
                        
                        	
                        	**type**\: bool
                        
                        .. attribute:: link_mis_align_error
                        
                        	
                        	**type**\: bool
                        
                        .. attribute:: link_code_group_error
                        
                        	
                        	**type**\: bool
                        
                        .. attribute:: link_no_sig_lock_error
                        
                        	
                        	**type**\: bool
                        
                        .. attribute:: link_no_sign_accept_error
                        
                        	
                        	**type**\: bool
                        
                        .. attribute:: link_token_error
                        
                        	
                        	**type**\: bool
                        
                        .. attribute:: error_token_count
                        
                        	
                        	**type**\: bool
                        
                        .. attribute:: last_asic_internal_error_ts
                        
                        	
                        	**type**\: str
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Fabric.Oper.FsdbaggStandby.Plane.AsicInternalError, self).__init__()

                            self.yang_name = "asic_internal_error"
                            self.yang_parent_name = "plane"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['asic_number']
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('asic_number', YLeaf(YType.int64, 'asic_number')),
                                ('asic_location', YLeaf(YType.str, 'asic_location')),
                                ('link_crc_error', YLeaf(YType.boolean, 'link_crc_error')),
                                ('link_size_error', YLeaf(YType.boolean, 'link_size_error')),
                                ('link_mis_align_error', YLeaf(YType.boolean, 'link_mis_align_error')),
                                ('link_code_group_error', YLeaf(YType.boolean, 'link_code_group_error')),
                                ('link_no_sig_lock_error', YLeaf(YType.boolean, 'link_no_sig_lock_error')),
                                ('link_no_sign_accept_error', YLeaf(YType.boolean, 'link_no_sign_accept_error')),
                                ('link_token_error', YLeaf(YType.boolean, 'link_token_error')),
                                ('error_token_count', YLeaf(YType.boolean, 'error_token_count')),
                                ('last_asic_internal_error_ts', YLeaf(YType.str, 'last_asic_internal_error_ts')),
                            ])
                            self.asic_number = None
                            self.asic_location = None
                            self.link_crc_error = None
                            self.link_size_error = None
                            self.link_mis_align_error = None
                            self.link_code_group_error = None
                            self.link_no_sig_lock_error = None
                            self.link_no_sign_accept_error = None
                            self.link_token_error = None
                            self.error_token_count = None
                            self.last_asic_internal_error_ts = None
                            self._segment_path = lambda: "asic_internal_error" + "[asic_number='" + str(self.asic_number) + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Fabric.Oper.FsdbaggStandby.Plane.AsicInternalError, [u'asic_number', u'asic_location', u'link_crc_error', u'link_size_error', u'link_mis_align_error', u'link_code_group_error', u'link_no_sig_lock_error', u'link_no_sign_accept_error', u'link_token_error', u'error_token_count', u'last_asic_internal_error_ts'], name, value)


                class Statistics(Entity):
                    """
                    
                    
                    .. attribute:: plane
                    
                    	
                    	**type**\: list of  		 :py:class:`Plane <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.FsdbaggStandby.Statistics.Plane>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.Fabric.Oper.FsdbaggStandby.Statistics, self).__init__()

                        self.yang_name = "statistics"
                        self.yang_parent_name = "fsdbagg_standby"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("plane", ("plane", Controller.Fabric.Oper.FsdbaggStandby.Statistics.Plane))])
                        self._leafs = OrderedDict()

                        self.plane = YList(self)
                        self._segment_path = lambda: "statistics"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/oper/fsdbagg_standby/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.Fabric.Oper.FsdbaggStandby.Statistics, [], name, value)


                    class Plane(Entity):
                        """
                        
                        
                        .. attribute:: planeid  (key)
                        
                        	
                        	**type**\: str
                        
                        	**pattern:** all\|[0\-5]
                        
                        .. attribute:: admin_state
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: ucast_oper_state
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: mcast_oper_state
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: plane_mode
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: ucast_cnt_up
                        
                        	
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: ucast_cnt_some_up
                        
                        	
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: ucast_cnt_dn
                        
                        	
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: mcast_cnt_up
                        
                        	
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: mcast_cnt_some_up
                        
                        	
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: mcast_cnt_dn
                        
                        	
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: total_bundles
                        
                        	
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: down_bundles
                        
                        	
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: rx_data_cells
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        .. attribute:: tx_data_cells
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        .. attribute:: rx_ce_cells_is_overflow
                        
                        	
                        	**type**\: bool
                        
                        .. attribute:: rx_ce_cells
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        .. attribute:: rx_uce_cells_is_overflow
                        
                        	
                        	**type**\: bool
                        
                        .. attribute:: rx_uce_cells
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        .. attribute:: rx_pe_cells_is_overflow
                        
                        	
                        	**type**\: bool
                        
                        .. attribute:: rx_pe_cells
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        .. attribute:: ucast_lost_cells
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: mcast_lost_cells
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: last_clear_ts
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: last_clear_reason
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: last_clear_req_ts
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: last_clear_status
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: is_asic_internal_error
                        
                        	
                        	**type**\: bool
                        
                        .. attribute:: asic_internal_drops
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        .. attribute:: asic_location_drops
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: ppu_state
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: asic_internal_error
                        
                        	
                        	**type**\: list of  		 :py:class:`AsicInternalError <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.FsdbaggStandby.Statistics.Plane.AsicInternalError>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Fabric.Oper.FsdbaggStandby.Statistics.Plane, self).__init__()

                            self.yang_name = "plane"
                            self.yang_parent_name = "statistics"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = ['planeid']
                            self._child_classes = OrderedDict([("asic_internal_error", ("asic_internal_error", Controller.Fabric.Oper.FsdbaggStandby.Statistics.Plane.AsicInternalError))])
                            self._leafs = OrderedDict([
                                ('planeid', YLeaf(YType.str, 'planeid')),
                                ('admin_state', YLeaf(YType.str, 'admin-state')),
                                ('ucast_oper_state', YLeaf(YType.str, 'ucast_oper_state')),
                                ('mcast_oper_state', YLeaf(YType.str, 'mcast_oper_state')),
                                ('plane_mode', YLeaf(YType.str, 'plane_mode')),
                                ('ucast_cnt_up', YLeaf(YType.int32, 'ucast_cnt_up')),
                                ('ucast_cnt_some_up', YLeaf(YType.int32, 'ucast_cnt_some_up')),
                                ('ucast_cnt_dn', YLeaf(YType.int32, 'ucast_cnt_dn')),
                                ('mcast_cnt_up', YLeaf(YType.int32, 'mcast_cnt_up')),
                                ('mcast_cnt_some_up', YLeaf(YType.int32, 'mcast_cnt_some_up')),
                                ('mcast_cnt_dn', YLeaf(YType.int32, 'mcast_cnt_dn')),
                                ('total_bundles', YLeaf(YType.int32, 'total_bundles')),
                                ('down_bundles', YLeaf(YType.int32, 'down_bundles')),
                                ('rx_data_cells', YLeaf(YType.uint64, 'rx_data_cells')),
                                ('tx_data_cells', YLeaf(YType.uint64, 'tx_data_cells')),
                                ('rx_ce_cells_is_overflow', YLeaf(YType.boolean, 'rx_ce_cells_is_overflow')),
                                ('rx_ce_cells', YLeaf(YType.uint64, 'rx_ce_cells')),
                                ('rx_uce_cells_is_overflow', YLeaf(YType.boolean, 'rx_uce_cells_is_overflow')),
                                ('rx_uce_cells', YLeaf(YType.uint64, 'rx_uce_cells')),
                                ('rx_pe_cells_is_overflow', YLeaf(YType.boolean, 'rx_pe_cells_is_overflow')),
                                ('rx_pe_cells', YLeaf(YType.uint64, 'rx_pe_cells')),
                                ('ucast_lost_cells', YLeaf(YType.uint32, 'ucast_lost_cells')),
                                ('mcast_lost_cells', YLeaf(YType.uint32, 'mcast_lost_cells')),
                                ('last_clear_ts', YLeaf(YType.str, 'last_clear_ts')),
                                ('last_clear_reason', YLeaf(YType.str, 'last_clear_reason')),
                                ('last_clear_req_ts', YLeaf(YType.str, 'last_clear_req_ts')),
                                ('last_clear_status', YLeaf(YType.str, 'last_clear_status')),
                                ('is_asic_internal_error', YLeaf(YType.boolean, 'is_asic_internal_error')),
                                ('asic_internal_drops', YLeaf(YType.uint64, 'asic_internal_drops')),
                                ('asic_location_drops', YLeaf(YType.str, 'asic_location_drops')),
                                ('ppu_state', YLeaf(YType.str, 'ppu_state')),
                            ])
                            self.planeid = None
                            self.admin_state = None
                            self.ucast_oper_state = None
                            self.mcast_oper_state = None
                            self.plane_mode = None
                            self.ucast_cnt_up = None
                            self.ucast_cnt_some_up = None
                            self.ucast_cnt_dn = None
                            self.mcast_cnt_up = None
                            self.mcast_cnt_some_up = None
                            self.mcast_cnt_dn = None
                            self.total_bundles = None
                            self.down_bundles = None
                            self.rx_data_cells = None
                            self.tx_data_cells = None
                            self.rx_ce_cells_is_overflow = None
                            self.rx_ce_cells = None
                            self.rx_uce_cells_is_overflow = None
                            self.rx_uce_cells = None
                            self.rx_pe_cells_is_overflow = None
                            self.rx_pe_cells = None
                            self.ucast_lost_cells = None
                            self.mcast_lost_cells = None
                            self.last_clear_ts = None
                            self.last_clear_reason = None
                            self.last_clear_req_ts = None
                            self.last_clear_status = None
                            self.is_asic_internal_error = None
                            self.asic_internal_drops = None
                            self.asic_location_drops = None
                            self.ppu_state = None

                            self.asic_internal_error = YList(self)
                            self._segment_path = lambda: "plane" + "[planeid='" + str(self.planeid) + "']"
                            self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/oper/fsdbagg_standby/statistics/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Fabric.Oper.FsdbaggStandby.Statistics.Plane, [u'planeid', u'admin_state', u'ucast_oper_state', u'mcast_oper_state', u'plane_mode', u'ucast_cnt_up', u'ucast_cnt_some_up', u'ucast_cnt_dn', u'mcast_cnt_up', u'mcast_cnt_some_up', u'mcast_cnt_dn', u'total_bundles', u'down_bundles', u'rx_data_cells', u'tx_data_cells', u'rx_ce_cells_is_overflow', u'rx_ce_cells', u'rx_uce_cells_is_overflow', u'rx_uce_cells', u'rx_pe_cells_is_overflow', u'rx_pe_cells', u'ucast_lost_cells', u'mcast_lost_cells', u'last_clear_ts', u'last_clear_reason', u'last_clear_req_ts', u'last_clear_status', u'is_asic_internal_error', u'asic_internal_drops', u'asic_location_drops', u'ppu_state'], name, value)


                        class AsicInternalError(Entity):
                            """
                            
                            
                            .. attribute:: asic_number  (key)
                            
                            	
                            	**type**\: int
                            
                            	**range:** \-9223372036854775808..9223372036854775807
                            
                            .. attribute:: asic_location
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: link_crc_error
                            
                            	
                            	**type**\: bool
                            
                            .. attribute:: link_size_error
                            
                            	
                            	**type**\: bool
                            
                            .. attribute:: link_mis_align_error
                            
                            	
                            	**type**\: bool
                            
                            .. attribute:: link_code_group_error
                            
                            	
                            	**type**\: bool
                            
                            .. attribute:: link_no_sig_lock_error
                            
                            	
                            	**type**\: bool
                            
                            .. attribute:: link_no_sign_accept_error
                            
                            	
                            	**type**\: bool
                            
                            .. attribute:: link_token_error
                            
                            	
                            	**type**\: bool
                            
                            .. attribute:: error_token_count
                            
                            	
                            	**type**\: bool
                            
                            .. attribute:: last_asic_internal_error_ts
                            
                            	
                            	**type**\: str
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Fabric.Oper.FsdbaggStandby.Statistics.Plane.AsicInternalError, self).__init__()

                                self.yang_name = "asic_internal_error"
                                self.yang_parent_name = "plane"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['asic_number']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('asic_number', YLeaf(YType.int64, 'asic_number')),
                                    ('asic_location', YLeaf(YType.str, 'asic_location')),
                                    ('link_crc_error', YLeaf(YType.boolean, 'link_crc_error')),
                                    ('link_size_error', YLeaf(YType.boolean, 'link_size_error')),
                                    ('link_mis_align_error', YLeaf(YType.boolean, 'link_mis_align_error')),
                                    ('link_code_group_error', YLeaf(YType.boolean, 'link_code_group_error')),
                                    ('link_no_sig_lock_error', YLeaf(YType.boolean, 'link_no_sig_lock_error')),
                                    ('link_no_sign_accept_error', YLeaf(YType.boolean, 'link_no_sign_accept_error')),
                                    ('link_token_error', YLeaf(YType.boolean, 'link_token_error')),
                                    ('error_token_count', YLeaf(YType.boolean, 'error_token_count')),
                                    ('last_asic_internal_error_ts', YLeaf(YType.str, 'last_asic_internal_error_ts')),
                                ])
                                self.asic_number = None
                                self.asic_location = None
                                self.link_crc_error = None
                                self.link_size_error = None
                                self.link_mis_align_error = None
                                self.link_code_group_error = None
                                self.link_no_sig_lock_error = None
                                self.link_no_sign_accept_error = None
                                self.link_token_error = None
                                self.error_token_count = None
                                self.last_asic_internal_error_ts = None
                                self._segment_path = lambda: "asic_internal_error" + "[asic_number='" + str(self.asic_number) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Fabric.Oper.FsdbaggStandby.Statistics.Plane.AsicInternalError, [u'asic_number', u'asic_location', u'link_crc_error', u'link_size_error', u'link_mis_align_error', u'link_code_group_error', u'link_no_sig_lock_error', u'link_no_sign_accept_error', u'link_token_error', u'error_token_count', u'last_asic_internal_error_ts'], name, value)


            class FabHealth(Entity):
                """
                
                
                .. attribute:: sys_info_list
                
                	
                	**type**\: list of  		 :py:class:`SysInfoList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.FabHealth.SysInfoList>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Controller.Fabric.Oper.FabHealth, self).__init__()

                    self.yang_name = "fab_health"
                    self.yang_parent_name = "oper"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("sys_info_list", ("sys_info_list", Controller.Fabric.Oper.FabHealth.SysInfoList))])
                    self._leafs = OrderedDict()

                    self.sys_info_list = YList(self)
                    self._segment_path = lambda: "fab_health"
                    self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/oper/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Controller.Fabric.Oper.FabHealth, [], name, value)


                class SysInfoList(Entity):
                    """
                    
                    
                    .. attribute:: index_key  (key)
                    
                    	
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: aggr_status
                    
                    	
                    	**type**\: bool
                    
                    .. attribute:: available_rack_ids
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: rack_id_separator
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: available_fm_loc
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: fm_loc_separator
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: rack_total
                    
                    	
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: rack_lcc
                    
                    	
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: rack_fcc
                    
                    	
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: plane_up
                    
                    	
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: plane_dn
                    
                    	
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: plane_mcast_dn
                    
                    	
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: plane_admin_dn
                    
                    	
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: show_sys_plane_detail
                    
                    	
                    	**type**\: bool
                    
                    	**default value**\: false
                    
                    .. attribute:: sfe_asics_total
                    
                    	
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: sfe_asics_up
                    
                    	
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: sfe_asics_dn
                    
                    	
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: fia_asics_total
                    
                    	
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: fia_asics_up
                    
                    	
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: fia_asics_dn
                    
                    	
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: sys_plane_info_list
                    
                    	
                    	**type**\: list of  		 :py:class:`SysPlaneInfoList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.FabHealth.SysInfoList.SysPlaneInfoList>`
                    
                    .. attribute:: rack_info_list
                    
                    	
                    	**type**\: list of  		 :py:class:`RackInfoList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.FabHealth.SysInfoList.RackInfoList>`
                    
                    .. attribute:: fsdb_status
                    
                    	
                    	**type**\: list of  		 :py:class:`FsdbStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.FabHealth.SysInfoList.FsdbStatus>`
                    
                    .. attribute:: sfe_status
                    
                    	
                    	**type**\: list of  		 :py:class:`SfeStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.FabHealth.SysInfoList.SfeStatus>`
                    
                    .. attribute:: sfe_drvr_loc
                    
                    	
                    	**type**\: list of  		 :py:class:`SfeDrvrLoc <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.FabHealth.SysInfoList.SfeDrvrLoc>`
                    
                    .. attribute:: sfe_fm_sep
                    
                    	
                    	**type**\: list of  		 :py:class:`SfeFmSep <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.FabHealth.SysInfoList.SfeFmSep>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.Fabric.Oper.FabHealth.SysInfoList, self).__init__()

                        self.yang_name = "sys_info_list"
                        self.yang_parent_name = "fab_health"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['index_key']
                        self._child_classes = OrderedDict([("sys_plane_info_list", ("sys_plane_info_list", Controller.Fabric.Oper.FabHealth.SysInfoList.SysPlaneInfoList)), ("rack_info_list", ("rack_info_list", Controller.Fabric.Oper.FabHealth.SysInfoList.RackInfoList)), ("fsdb_status", ("fsdb_status", Controller.Fabric.Oper.FabHealth.SysInfoList.FsdbStatus)), ("sfe_status", ("sfe_status", Controller.Fabric.Oper.FabHealth.SysInfoList.SfeStatus)), ("sfe_drvr_loc", ("sfe_drvr_loc", Controller.Fabric.Oper.FabHealth.SysInfoList.SfeDrvrLoc)), ("sfe_fm_sep", ("sfe_fm_sep", Controller.Fabric.Oper.FabHealth.SysInfoList.SfeFmSep))])
                        self._leafs = OrderedDict([
                            ('index_key', YLeaf(YType.int32, 'index_key')),
                            ('aggr_status', YLeaf(YType.boolean, 'aggr_status')),
                            ('available_rack_ids', YLeaf(YType.str, 'available_rack_ids')),
                            ('rack_id_separator', YLeaf(YType.str, 'rack_id_separator')),
                            ('available_fm_loc', YLeaf(YType.str, 'available_fm_loc')),
                            ('fm_loc_separator', YLeaf(YType.str, 'fm_loc_separator')),
                            ('rack_total', YLeaf(YType.uint32, 'rack_total')),
                            ('rack_lcc', YLeaf(YType.uint32, 'rack_lcc')),
                            ('rack_fcc', YLeaf(YType.uint32, 'rack_fcc')),
                            ('plane_up', YLeaf(YType.uint32, 'plane_up')),
                            ('plane_dn', YLeaf(YType.uint32, 'plane_dn')),
                            ('plane_mcast_dn', YLeaf(YType.uint32, 'plane_mcast_dn')),
                            ('plane_admin_dn', YLeaf(YType.uint32, 'plane_admin_dn')),
                            ('show_sys_plane_detail', YLeaf(YType.boolean, 'show_sys_plane_detail')),
                            ('sfe_asics_total', YLeaf(YType.uint32, 'sfe_asics_total')),
                            ('sfe_asics_up', YLeaf(YType.uint32, 'sfe_asics_up')),
                            ('sfe_asics_dn', YLeaf(YType.uint32, 'sfe_asics_dn')),
                            ('fia_asics_total', YLeaf(YType.uint32, 'fia_asics_total')),
                            ('fia_asics_up', YLeaf(YType.uint32, 'fia_asics_up')),
                            ('fia_asics_dn', YLeaf(YType.uint32, 'fia_asics_dn')),
                        ])
                        self.index_key = None
                        self.aggr_status = None
                        self.available_rack_ids = None
                        self.rack_id_separator = None
                        self.available_fm_loc = None
                        self.fm_loc_separator = None
                        self.rack_total = None
                        self.rack_lcc = None
                        self.rack_fcc = None
                        self.plane_up = None
                        self.plane_dn = None
                        self.plane_mcast_dn = None
                        self.plane_admin_dn = None
                        self.show_sys_plane_detail = None
                        self.sfe_asics_total = None
                        self.sfe_asics_up = None
                        self.sfe_asics_dn = None
                        self.fia_asics_total = None
                        self.fia_asics_up = None
                        self.fia_asics_dn = None

                        self.sys_plane_info_list = YList(self)
                        self.rack_info_list = YList(self)
                        self.fsdb_status = YList(self)
                        self.sfe_status = YList(self)
                        self.sfe_drvr_loc = YList(self)
                        self.sfe_fm_sep = YList(self)
                        self._segment_path = lambda: "sys_info_list" + "[index_key='" + str(self.index_key) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/oper/fab_health/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.Fabric.Oper.FabHealth.SysInfoList, [u'index_key', u'aggr_status', u'available_rack_ids', u'rack_id_separator', u'available_fm_loc', u'fm_loc_separator', u'rack_total', u'rack_lcc', u'rack_fcc', u'plane_up', u'plane_dn', u'plane_mcast_dn', u'plane_admin_dn', u'show_sys_plane_detail', u'sfe_asics_total', u'sfe_asics_up', u'sfe_asics_dn', u'fia_asics_total', u'fia_asics_up', u'fia_asics_dn'], name, value)


                    class SysPlaneInfoList(Entity):
                        """
                        
                        
                        .. attribute:: plane_id  (key)
                        
                        	
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: admin_state
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: plane_state
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: plane_mode
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: racks_w_plane_fault
                        
                        	
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: is_data_drop
                        
                        	
                        	**type**\: bool
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Fabric.Oper.FabHealth.SysInfoList.SysPlaneInfoList, self).__init__()

                            self.yang_name = "sys_plane_info_list"
                            self.yang_parent_name = "sys_info_list"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['plane_id']
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('plane_id', YLeaf(YType.int32, 'plane_id')),
                                ('admin_state', YLeaf(YType.str, 'admin-state')),
                                ('plane_state', YLeaf(YType.str, 'plane_state')),
                                ('plane_mode', YLeaf(YType.str, 'plane_mode')),
                                ('racks_w_plane_fault', YLeaf(YType.int32, 'racks_w_plane_fault')),
                                ('is_data_drop', YLeaf(YType.boolean, 'is_data_drop')),
                            ])
                            self.plane_id = None
                            self.admin_state = None
                            self.plane_state = None
                            self.plane_mode = None
                            self.racks_w_plane_fault = None
                            self.is_data_drop = None
                            self._segment_path = lambda: "sys_plane_info_list" + "[plane_id='" + str(self.plane_id) + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Fabric.Oper.FabHealth.SysInfoList.SysPlaneInfoList, [u'plane_id', u'admin_state', u'plane_state', u'plane_mode', u'racks_w_plane_fault', u'is_data_drop'], name, value)


                    class RackInfoList(Entity):
                        """
                        
                        
                        .. attribute:: rack_id  (key)
                        
                        	
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: rack_name
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: rack_type
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: sfe_asics_total
                        
                        	
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: sfe_asics_up
                        
                        	
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: sfe_asics_dn
                        
                        	
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: fia_asics_total
                        
                        	
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: fia_asics_up
                        
                        	
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: fia_asics_dn
                        
                        	
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: plane_up
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: plane_dn
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: plane_mcast_dn
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: plane_admin_dn
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: show_rack_plane_detail
                        
                        	
                        	**type**\: bool
                        
                        	**default value**\: false
                        
                        .. attribute:: amba_valid
                        
                        	
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: rack_plane_info_list
                        
                        	
                        	**type**\: list of  		 :py:class:`RackPlaneInfoList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.FabHealth.SysInfoList.RackInfoList.RackPlaneInfoList>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Fabric.Oper.FabHealth.SysInfoList.RackInfoList, self).__init__()

                            self.yang_name = "rack_info_list"
                            self.yang_parent_name = "sys_info_list"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['rack_id']
                            self._child_classes = OrderedDict([("rack_plane_info_list", ("rack_plane_info_list", Controller.Fabric.Oper.FabHealth.SysInfoList.RackInfoList.RackPlaneInfoList))])
                            self._leafs = OrderedDict([
                                ('rack_id', YLeaf(YType.int32, 'rack_id')),
                                ('rack_name', YLeaf(YType.str, 'rack_name')),
                                ('rack_type', YLeaf(YType.str, 'rack_type')),
                                ('sfe_asics_total', YLeaf(YType.int32, 'sfe_asics_total')),
                                ('sfe_asics_up', YLeaf(YType.int32, 'sfe_asics_up')),
                                ('sfe_asics_dn', YLeaf(YType.int32, 'sfe_asics_dn')),
                                ('fia_asics_total', YLeaf(YType.int32, 'fia_asics_total')),
                                ('fia_asics_up', YLeaf(YType.int32, 'fia_asics_up')),
                                ('fia_asics_dn', YLeaf(YType.int32, 'fia_asics_dn')),
                                ('plane_up', YLeaf(YType.uint32, 'plane_up')),
                                ('plane_dn', YLeaf(YType.uint32, 'plane_dn')),
                                ('plane_mcast_dn', YLeaf(YType.uint32, 'plane_mcast_dn')),
                                ('plane_admin_dn', YLeaf(YType.uint32, 'plane_admin_dn')),
                                ('show_rack_plane_detail', YLeaf(YType.boolean, 'show_rack_plane_detail')),
                                ('amba_valid', YLeaf(YType.int32, 'amba_valid')),
                            ])
                            self.rack_id = None
                            self.rack_name = None
                            self.rack_type = None
                            self.sfe_asics_total = None
                            self.sfe_asics_up = None
                            self.sfe_asics_dn = None
                            self.fia_asics_total = None
                            self.fia_asics_up = None
                            self.fia_asics_dn = None
                            self.plane_up = None
                            self.plane_dn = None
                            self.plane_mcast_dn = None
                            self.plane_admin_dn = None
                            self.show_rack_plane_detail = None
                            self.amba_valid = None

                            self.rack_plane_info_list = YList(self)
                            self._segment_path = lambda: "rack_info_list" + "[rack_id='" + str(self.rack_id) + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Fabric.Oper.FabHealth.SysInfoList.RackInfoList, [u'rack_id', u'rack_name', u'rack_type', u'sfe_asics_total', u'sfe_asics_up', u'sfe_asics_dn', u'fia_asics_total', u'fia_asics_up', u'fia_asics_dn', u'plane_up', u'plane_dn', u'plane_mcast_dn', u'plane_admin_dn', u'show_rack_plane_detail', u'amba_valid'], name, value)


                        class RackPlaneInfoList(Entity):
                            """
                            
                            
                            .. attribute:: plane_id  (key)
                            
                            	
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: plane_state
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: plane_mode
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: asics_total
                            
                            	
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: asics_up
                            
                            	
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: asics_dn
                            
                            	
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: reachable_amba
                            
                            	
                            	**type**\: list of  		 :py:class:`ReachableAmba <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.FabHealth.SysInfoList.RackInfoList.RackPlaneInfoList.ReachableAmba>`
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Fabric.Oper.FabHealth.SysInfoList.RackInfoList.RackPlaneInfoList, self).__init__()

                                self.yang_name = "rack_plane_info_list"
                                self.yang_parent_name = "rack_info_list"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['plane_id']
                                self._child_classes = OrderedDict([("reachable_amba", ("reachable_amba", Controller.Fabric.Oper.FabHealth.SysInfoList.RackInfoList.RackPlaneInfoList.ReachableAmba))])
                                self._leafs = OrderedDict([
                                    ('plane_id', YLeaf(YType.int32, 'plane_id')),
                                    ('plane_state', YLeaf(YType.str, 'plane_state')),
                                    ('plane_mode', YLeaf(YType.str, 'plane_mode')),
                                    ('asics_total', YLeaf(YType.int32, 'asics_total')),
                                    ('asics_up', YLeaf(YType.int32, 'asics_up')),
                                    ('asics_dn', YLeaf(YType.int32, 'asics_dn')),
                                ])
                                self.plane_id = None
                                self.plane_state = None
                                self.plane_mode = None
                                self.asics_total = None
                                self.asics_up = None
                                self.asics_dn = None

                                self.reachable_amba = YList(self)
                                self._segment_path = lambda: "rack_plane_info_list" + "[plane_id='" + str(self.plane_id) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Fabric.Oper.FabHealth.SysInfoList.RackInfoList.RackPlaneInfoList, [u'plane_id', u'plane_state', u'plane_mode', u'asics_total', u'asics_up', u'asics_dn'], name, value)


                            class ReachableAmba(Entity):
                                """
                                
                                
                                .. attribute:: idx  (key)
                                
                                	
                                	**type**\: int
                                
                                	**range:** \-2147483648..2147483647
                                
                                .. attribute:: num_reachable
                                
                                	
                                	**type**\: int
                                
                                	**range:** \-2147483648..2147483647
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.Fabric.Oper.FabHealth.SysInfoList.RackInfoList.RackPlaneInfoList.ReachableAmba, self).__init__()

                                    self.yang_name = "reachable_amba"
                                    self.yang_parent_name = "rack_plane_info_list"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['idx']
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('idx', YLeaf(YType.int32, 'idx')),
                                        ('num_reachable', YLeaf(YType.int32, 'num_reachable')),
                                    ])
                                    self.idx = None
                                    self.num_reachable = None
                                    self._segment_path = lambda: "reachable_amba" + "[idx='" + str(self.idx) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.Fabric.Oper.FabHealth.SysInfoList.RackInfoList.RackPlaneInfoList.ReachableAmba, [u'idx', u'num_reachable'], name, value)


                    class FsdbStatus(Entity):
                        """
                        
                        
                        .. attribute:: rack_id  (key)
                        
                        	
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: status
                        
                        	
                        	**type**\: bool
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Fabric.Oper.FabHealth.SysInfoList.FsdbStatus, self).__init__()

                            self.yang_name = "fsdb_status"
                            self.yang_parent_name = "sys_info_list"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['rack_id']
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('rack_id', YLeaf(YType.int32, 'rack_id')),
                                ('status', YLeaf(YType.boolean, 'status')),
                            ])
                            self.rack_id = None
                            self.status = None
                            self._segment_path = lambda: "fsdb_status" + "[rack_id='" + str(self.rack_id) + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Fabric.Oper.FabHealth.SysInfoList.FsdbStatus, [u'rack_id', u'status'], name, value)


                    class SfeStatus(Entity):
                        """
                        
                        
                        .. attribute:: rack_id  (key)
                        
                        	
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: status
                        
                        	
                        	**type**\: bool
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Fabric.Oper.FabHealth.SysInfoList.SfeStatus, self).__init__()

                            self.yang_name = "sfe_status"
                            self.yang_parent_name = "sys_info_list"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['rack_id']
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('rack_id', YLeaf(YType.int32, 'rack_id')),
                                ('status', YLeaf(YType.boolean, 'status')),
                            ])
                            self.rack_id = None
                            self.status = None
                            self._segment_path = lambda: "sfe_status" + "[rack_id='" + str(self.rack_id) + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Fabric.Oper.FabHealth.SysInfoList.SfeStatus, [u'rack_id', u'status'], name, value)


                    class SfeDrvrLoc(Entity):
                        """
                        
                        
                        .. attribute:: loc_str  (key)
                        
                        	
                        	**type**\: str
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Fabric.Oper.FabHealth.SysInfoList.SfeDrvrLoc, self).__init__()

                            self.yang_name = "sfe_drvr_loc"
                            self.yang_parent_name = "sys_info_list"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['loc_str']
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('loc_str', YLeaf(YType.str, 'loc_str')),
                            ])
                            self.loc_str = None
                            self._segment_path = lambda: "sfe_drvr_loc" + "[loc_str='" + str(self.loc_str) + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Fabric.Oper.FabHealth.SysInfoList.SfeDrvrLoc, [u'loc_str'], name, value)


                    class SfeFmSep(Entity):
                        """
                        
                        
                        .. attribute:: loc_str  (key)
                        
                        	
                        	**type**\: str
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Fabric.Oper.FabHealth.SysInfoList.SfeFmSep, self).__init__()

                            self.yang_name = "sfe_fm_sep"
                            self.yang_parent_name = "sys_info_list"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['loc_str']
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('loc_str', YLeaf(YType.str, 'loc_str')),
                            ])
                            self.loc_str = None
                            self._segment_path = lambda: "sfe_fm_sep" + "[loc_str='" + str(self.loc_str) + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Fabric.Oper.FabHealth.SysInfoList.SfeFmSep, [u'loc_str'], name, value)


            class FsdbAggregator(Entity):
                """
                FSDB Aggregator information
                
                .. attribute:: fsdbagg
                
                	
                	**type**\:  :py:class:`Fsdbagg <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.FsdbAggregator.Fsdbagg>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Controller.Fabric.Oper.FsdbAggregator, self).__init__()

                    self.yang_name = "fsdb-aggregator"
                    self.yang_parent_name = "oper"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("fsdbagg", ("fsdbagg", Controller.Fabric.Oper.FsdbAggregator.Fsdbagg))])
                    self._leafs = OrderedDict()

                    self.fsdbagg = Controller.Fabric.Oper.FsdbAggregator.Fsdbagg()
                    self.fsdbagg.parent = self
                    self._children_name_map["fsdbagg"] = "fsdbagg"
                    self._segment_path = lambda: "fsdb-aggregator"
                    self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/oper/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Controller.Fabric.Oper.FsdbAggregator, [], name, value)


                class Fsdbagg(Entity):
                    """
                    
                    
                    .. attribute:: trace
                    
                    	show traceable processes
                    	**type**\: list of  		 :py:class:`Trace <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.FsdbAggregator.Fsdbagg.Trace>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.Fabric.Oper.FsdbAggregator.Fsdbagg, self).__init__()

                        self.yang_name = "fsdbagg"
                        self.yang_parent_name = "fsdb-aggregator"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("trace", ("trace", Controller.Fabric.Oper.FsdbAggregator.Fsdbagg.Trace))])
                        self._leafs = OrderedDict()

                        self.trace = YList(self)
                        self._segment_path = lambda: "fsdbagg"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/oper/fsdb-aggregator/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.Fabric.Oper.FsdbAggregator.Fsdbagg, [], name, value)


                    class Trace(Entity):
                        """
                        show traceable processes
                        
                        .. attribute:: buffer  (key)
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: location
                        
                        	
                        	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.FsdbAggregator.Fsdbagg.Trace.Location>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Fabric.Oper.FsdbAggregator.Fsdbagg.Trace, self).__init__()

                            self.yang_name = "trace"
                            self.yang_parent_name = "fsdbagg"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = ['buffer']
                            self._child_classes = OrderedDict([("location", ("location", Controller.Fabric.Oper.FsdbAggregator.Fsdbagg.Trace.Location))])
                            self._leafs = OrderedDict([
                                ('buffer', YLeaf(YType.str, 'buffer')),
                            ])
                            self.buffer = None

                            self.location = YList(self)
                            self._segment_path = lambda: "trace" + "[buffer='" + str(self.buffer) + "']"
                            self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/oper/fsdb-aggregator/fsdbagg/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Fabric.Oper.FsdbAggregator.Fsdbagg.Trace, [u'buffer'], name, value)


                        class Location(Entity):
                            """
                            
                            
                            .. attribute:: location_name  (key)
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: all_options
                            
                            	
                            	**type**\: list of  		 :py:class:`AllOptions <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.FsdbAggregator.Fsdbagg.Trace.Location.AllOptions>`
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Fabric.Oper.FsdbAggregator.Fsdbagg.Trace.Location, self).__init__()

                                self.yang_name = "location"
                                self.yang_parent_name = "trace"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['location_name']
                                self._child_classes = OrderedDict([("all-options", ("all_options", Controller.Fabric.Oper.FsdbAggregator.Fsdbagg.Trace.Location.AllOptions))])
                                self._leafs = OrderedDict([
                                    ('location_name', YLeaf(YType.str, 'location_name')),
                                ])
                                self.location_name = None

                                self.all_options = YList(self)
                                self._segment_path = lambda: "location" + "[location_name='" + str(self.location_name) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Fabric.Oper.FsdbAggregator.Fsdbagg.Trace.Location, [u'location_name'], name, value)


                            class AllOptions(Entity):
                                """
                                
                                
                                .. attribute:: option  (key)
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: trace_blocks
                                
                                	
                                	**type**\: list of  		 :py:class:`TraceBlocks <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.FsdbAggregator.Fsdbagg.Trace.Location.AllOptions.TraceBlocks>`
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.Fabric.Oper.FsdbAggregator.Fsdbagg.Trace.Location.AllOptions, self).__init__()

                                    self.yang_name = "all-options"
                                    self.yang_parent_name = "location"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['option']
                                    self._child_classes = OrderedDict([("trace-blocks", ("trace_blocks", Controller.Fabric.Oper.FsdbAggregator.Fsdbagg.Trace.Location.AllOptions.TraceBlocks))])
                                    self._leafs = OrderedDict([
                                        ('option', YLeaf(YType.str, 'option')),
                                    ])
                                    self.option = None

                                    self.trace_blocks = YList(self)
                                    self._segment_path = lambda: "all-options" + "[option='" + str(self.option) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.Fabric.Oper.FsdbAggregator.Fsdbagg.Trace.Location.AllOptions, [u'option'], name, value)


                                class TraceBlocks(Entity):
                                    """
                                    
                                    
                                    .. attribute:: data
                                    
                                    	Trace output block
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.Fabric.Oper.FsdbAggregator.Fsdbagg.Trace.Location.AllOptions.TraceBlocks, self).__init__()

                                        self.yang_name = "trace-blocks"
                                        self.yang_parent_name = "all-options"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('data', YLeaf(YType.str, 'data')),
                                        ])
                                        self.data = None
                                        self._segment_path = lambda: "trace-blocks"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.Fabric.Oper.FsdbAggregator.Fsdbagg.Trace.Location.AllOptions.TraceBlocks, [u'data'], name, value)


            class Link(Entity):
                """
                Fabric link option
                
                .. attribute:: rack
                
                	
                	**type**\: list of  		 :py:class:`Rack <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack>`
                
                .. attribute:: node_location
                
                	
                	**type**\: list of  		 :py:class:`NodeLocation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.NodeLocation>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Controller.Fabric.Oper.Link, self).__init__()

                    self.yang_name = "link"
                    self.yang_parent_name = "oper"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("rack", ("rack", Controller.Fabric.Oper.Link.Rack)), ("node_location", ("node_location", Controller.Fabric.Oper.Link.NodeLocation))])
                    self._leafs = OrderedDict()

                    self.rack = YList(self)
                    self.node_location = YList(self)
                    self._segment_path = lambda: "link"
                    self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/oper/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Controller.Fabric.Oper.Link, [], name, value)


                class Rack(Entity):
                    """
                    
                    
                    .. attribute:: rack_number  (key)
                    
                    	
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: port
                    
                    	
                    	**type**\: list of  		 :py:class:`Port <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.Fabric.Oper.Link.Rack, self).__init__()

                        self.yang_name = "rack"
                        self.yang_parent_name = "link"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['rack_number']
                        self._child_classes = OrderedDict([("port", ("port", Controller.Fabric.Oper.Link.Rack.Port))])
                        self._leafs = OrderedDict([
                            ('rack_number', YLeaf(YType.int32, 'rack_number')),
                        ])
                        self.rack_number = None

                        self.port = YList(self)
                        self._segment_path = lambda: "rack" + "[rack_number='" + str(self.rack_number) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/oper/link/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.Fabric.Oper.Link.Rack, [u'rack_number'], name, value)


                    class Port(Entity):
                        """
                        
                        
                        .. attribute:: portname  (key)
                        
                        	
                        	**type**\: str
                        
                        	**pattern:** fia\|s1\|s2\|s3
                        
                        .. attribute:: description
                        
                        	
                        	**type**\: str
                        
                        	**default value**\: port.
                        
                        .. attribute:: location
                        
                        	
                        	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location>`
                        
                        .. attribute:: rx
                        
                        	Rx link option
                        	**type**\:  :py:class:`Rx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Rx>`
                        
                        .. attribute:: tx
                        
                        	Tx link option
                        	**type**\:  :py:class:`Tx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Tx>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Fabric.Oper.Link.Rack.Port, self).__init__()

                            self.yang_name = "port"
                            self.yang_parent_name = "rack"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['portname']
                            self._child_classes = OrderedDict([("location", ("location", Controller.Fabric.Oper.Link.Rack.Port.Location)), ("rx", ("rx", Controller.Fabric.Oper.Link.Rack.Port.Rx)), ("tx", ("tx", Controller.Fabric.Oper.Link.Rack.Port.Tx))])
                            self._leafs = OrderedDict([
                                ('portname', YLeaf(YType.str, 'portname')),
                                ('description', YLeaf(YType.str, 'description')),
                            ])
                            self.portname = None
                            self.description = None

                            self.rx = Controller.Fabric.Oper.Link.Rack.Port.Rx()
                            self.rx.parent = self
                            self._children_name_map["rx"] = "rx"

                            self.tx = Controller.Fabric.Oper.Link.Rack.Port.Tx()
                            self.tx.parent = self
                            self._children_name_map["tx"] = "tx"

                            self.location = YList(self)
                            self._segment_path = lambda: "port" + "[portname='" + str(self.portname) + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port, [u'portname', u'description'], name, value)


                        class Location(Entity):
                            """
                            
                            
                            .. attribute:: loc_str  (key)
                            
                            	
                            	**type**\: str
                            
                            	**pattern:** ((0?[0\-9]\|1[0\-5])/([F\|f][C\|c](0?[0\-5]))/(0?[0\-5])/(0?[0\-9]\|[1\-9][0\-9]\|1[0\-3][0\-9]\|14[0\-3]))\|((0?[0\-9]\|1[0\-5])/(0?[0\-7])/(0?[0\-5])/(0?[0\-9]\|[1\-2][0\-9]\|3[0\-5]))\|(([F\|f][0\-3])/([F\|f][C\|c](0?[0\-9]\|1[0\-1]))/(0?[0\-2])/(0?[0\-9]\|[1\-9][0\-9]\|1[0\-3][0\-9]\|14[0\-3]))
                            
                            .. attribute:: rx
                            
                            	Rx link option
                            	**type**\:  :py:class:`Rx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Rx>`
                            
                            .. attribute:: tx
                            
                            	Tx link option
                            	**type**\:  :py:class:`Tx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Tx>`
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Fabric.Oper.Link.Rack.Port.Location, self).__init__()

                                self.yang_name = "location"
                                self.yang_parent_name = "port"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['loc_str']
                                self._child_classes = OrderedDict([("rx", ("rx", Controller.Fabric.Oper.Link.Rack.Port.Location.Rx)), ("tx", ("tx", Controller.Fabric.Oper.Link.Rack.Port.Location.Tx))])
                                self._leafs = OrderedDict([
                                    ('loc_str', YLeaf(YType.str, 'loc_str')),
                                ])
                                self.loc_str = None

                                self.rx = Controller.Fabric.Oper.Link.Rack.Port.Location.Rx()
                                self.rx.parent = self
                                self._children_name_map["rx"] = "rx"

                                self.tx = Controller.Fabric.Oper.Link.Rack.Port.Location.Tx()
                                self.tx.parent = self
                                self._children_name_map["tx"] = "tx"
                                self._segment_path = lambda: "location" + "[loc_str='" + str(self.loc_str) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location, [u'loc_str'], name, value)


                            class Rx(Entity):
                                """
                                Rx link option
                                
                                .. attribute:: data_idx
                                
                                	
                                	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.DataIdx>`
                                
                                .. attribute:: brief
                                
                                	
                                	**type**\:  :py:class:`Brief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.Brief>`
                                
                                .. attribute:: detail
                                
                                	
                                	**type**\:  :py:class:`Detail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.Detail>`
                                
                                .. attribute:: state
                                
                                	
                                	**type**\:  :py:class:`State <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State>`
                                
                                .. attribute:: statistics
                                
                                	
                                	**type**\:  :py:class:`Statistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.Statistics>`
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx, self).__init__()

                                    self.yang_name = "rx"
                                    self.yang_parent_name = "location"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.DataIdx)), ("brief", ("brief", Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.Brief)), ("detail", ("detail", Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.Detail)), ("state", ("state", Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State)), ("statistics", ("statistics", Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.Statistics))])
                                    self._leafs = OrderedDict()

                                    self.brief = Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.Brief()
                                    self.brief.parent = self
                                    self._children_name_map["brief"] = "brief"

                                    self.detail = Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.Detail()
                                    self.detail.parent = self
                                    self._children_name_map["detail"] = "detail"

                                    self.state = Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State()
                                    self.state.parent = self
                                    self._children_name_map["state"] = "state"

                                    self.statistics = Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.Statistics()
                                    self.statistics.parent = self
                                    self._children_name_map["statistics"] = "statistics"

                                    self.data_idx = YList(self)
                                    self._segment_path = lambda: "rx"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx, [], name, value)


                                class DataIdx(Entity):
                                    """
                                    
                                    
                                    .. attribute:: port_data_idx  (key)
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** \-9223372036854775808..9223372036854775807
                                    
                                    .. attribute:: sfe_port
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: admin_state
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: oper_state
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: near_end_cdr_ln
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: near_end_cxp_ch
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: far_end_cxp_ch
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: far_end_cdr_ln
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: neighbor_link
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: history
                                    
                                    	
                                    	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.DataIdx.History>`
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.DataIdx, self).__init__()

                                        self.yang_name = "data_idx"
                                        self.yang_parent_name = "rx"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['port_data_idx']
                                        self._child_classes = OrderedDict([("history", ("history", Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.DataIdx.History))])
                                        self._leafs = OrderedDict([
                                            ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                            ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                            ('admin_state', YLeaf(YType.str, 'admin-state')),
                                            ('oper_state', YLeaf(YType.str, 'oper_state')),
                                            ('near_end_cdr_ln', YLeaf(YType.str, 'near_end_cdr_ln')),
                                            ('near_end_cxp_ch', YLeaf(YType.str, 'near_end_cxp_ch')),
                                            ('far_end_cxp_ch', YLeaf(YType.str, 'far_end_cxp_ch')),
                                            ('far_end_cdr_ln', YLeaf(YType.str, 'far_end_cdr_ln')),
                                            ('neighbor_link', YLeaf(YType.str, 'neighbor_link')),
                                        ])
                                        self.port_data_idx = None
                                        self.sfe_port = None
                                        self.admin_state = None
                                        self.oper_state = None
                                        self.near_end_cdr_ln = None
                                        self.near_end_cxp_ch = None
                                        self.far_end_cxp_ch = None
                                        self.far_end_cdr_ln = None
                                        self.neighbor_link = None

                                        self.history = YList(self)
                                        self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.DataIdx, [u'port_data_idx', u'sfe_port', u'admin_state', u'oper_state', u'near_end_cdr_ln', u'near_end_cxp_ch', u'far_end_cxp_ch', u'far_end_cdr_ln', u'neighbor_link'], name, value)


                                    class History(Entity):
                                        """
                                        
                                        
                                        .. attribute:: history_idx  (key)
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** \-2147483648..2147483647
                                        
                                        .. attribute:: time_stamp
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: admin_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: oper_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: error_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.DataIdx.History, self).__init__()

                                            self.yang_name = "history"
                                            self.yang_parent_name = "data_idx"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['history_idx']
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                                ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                                ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                ('error_state', YLeaf(YType.str, 'error_state')),
                                            ])
                                            self.history_idx = None
                                            self.time_stamp = None
                                            self.admin_state = None
                                            self.oper_state = None
                                            self.error_state = None
                                            self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.DataIdx.History, [u'history_idx', u'time_stamp', u'admin_state', u'oper_state', u'error_state'], name, value)


                                class Brief(Entity):
                                    """
                                    
                                    
                                    .. attribute:: data_idx
                                    
                                    	
                                    	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.Brief.DataIdx>`
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.Brief, self).__init__()

                                        self.yang_name = "brief"
                                        self.yang_parent_name = "rx"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.Brief.DataIdx))])
                                        self._leafs = OrderedDict()

                                        self.data_idx = YList(self)
                                        self._segment_path = lambda: "brief"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.Brief, [], name, value)


                                    class DataIdx(Entity):
                                        """
                                        
                                        
                                        .. attribute:: port_data_idx  (key)
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** \-9223372036854775808..9223372036854775807
                                        
                                        .. attribute:: sfe_port
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: admin_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: oper_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: near_end_cdr_ln
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: near_end_cxp_ch
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: far_end_cxp_ch
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: far_end_cdr_ln
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: neighbor_link
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: history
                                        
                                        	
                                        	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.Brief.DataIdx.History>`
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.Brief.DataIdx, self).__init__()

                                            self.yang_name = "data_idx"
                                            self.yang_parent_name = "brief"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['port_data_idx']
                                            self._child_classes = OrderedDict([("history", ("history", Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.Brief.DataIdx.History))])
                                            self._leafs = OrderedDict([
                                                ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                                ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                                ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                ('near_end_cdr_ln', YLeaf(YType.str, 'near_end_cdr_ln')),
                                                ('near_end_cxp_ch', YLeaf(YType.str, 'near_end_cxp_ch')),
                                                ('far_end_cxp_ch', YLeaf(YType.str, 'far_end_cxp_ch')),
                                                ('far_end_cdr_ln', YLeaf(YType.str, 'far_end_cdr_ln')),
                                                ('neighbor_link', YLeaf(YType.str, 'neighbor_link')),
                                            ])
                                            self.port_data_idx = None
                                            self.sfe_port = None
                                            self.admin_state = None
                                            self.oper_state = None
                                            self.near_end_cdr_ln = None
                                            self.near_end_cxp_ch = None
                                            self.far_end_cxp_ch = None
                                            self.far_end_cdr_ln = None
                                            self.neighbor_link = None

                                            self.history = YList(self)
                                            self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.Brief.DataIdx, [u'port_data_idx', u'sfe_port', u'admin_state', u'oper_state', u'near_end_cdr_ln', u'near_end_cxp_ch', u'far_end_cxp_ch', u'far_end_cdr_ln', u'neighbor_link'], name, value)


                                        class History(Entity):
                                            """
                                            
                                            
                                            .. attribute:: history_idx  (key)
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: time_stamp
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: admin_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: oper_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: error_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.Brief.DataIdx.History, self).__init__()

                                                self.yang_name = "history"
                                                self.yang_parent_name = "data_idx"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['history_idx']
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                                    ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                                    ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                    ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                    ('error_state', YLeaf(YType.str, 'error_state')),
                                                ])
                                                self.history_idx = None
                                                self.time_stamp = None
                                                self.admin_state = None
                                                self.oper_state = None
                                                self.error_state = None
                                                self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.Brief.DataIdx.History, [u'history_idx', u'time_stamp', u'admin_state', u'oper_state', u'error_state'], name, value)


                                class Detail(Entity):
                                    """
                                    
                                    
                                    .. attribute:: data_idx
                                    
                                    	
                                    	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.Detail.DataIdx>`
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.Detail, self).__init__()

                                        self.yang_name = "detail"
                                        self.yang_parent_name = "rx"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.Detail.DataIdx))])
                                        self._leafs = OrderedDict()

                                        self.data_idx = YList(self)
                                        self._segment_path = lambda: "detail"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.Detail, [], name, value)


                                    class DataIdx(Entity):
                                        """
                                        
                                        
                                        .. attribute:: port_data_idx  (key)
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** \-9223372036854775808..9223372036854775807
                                        
                                        .. attribute:: sfe_port
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: admin_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: oper_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: near_end_cdr_ln
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: near_end_cxp_ch
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: far_end_cxp_ch
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: far_end_cdr_ln
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: neighbor_link
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: history
                                        
                                        	
                                        	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.Detail.DataIdx.History>`
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.Detail.DataIdx, self).__init__()

                                            self.yang_name = "data_idx"
                                            self.yang_parent_name = "detail"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['port_data_idx']
                                            self._child_classes = OrderedDict([("history", ("history", Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.Detail.DataIdx.History))])
                                            self._leafs = OrderedDict([
                                                ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                                ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                                ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                ('near_end_cdr_ln', YLeaf(YType.str, 'near_end_cdr_ln')),
                                                ('near_end_cxp_ch', YLeaf(YType.str, 'near_end_cxp_ch')),
                                                ('far_end_cxp_ch', YLeaf(YType.str, 'far_end_cxp_ch')),
                                                ('far_end_cdr_ln', YLeaf(YType.str, 'far_end_cdr_ln')),
                                                ('neighbor_link', YLeaf(YType.str, 'neighbor_link')),
                                            ])
                                            self.port_data_idx = None
                                            self.sfe_port = None
                                            self.admin_state = None
                                            self.oper_state = None
                                            self.near_end_cdr_ln = None
                                            self.near_end_cxp_ch = None
                                            self.far_end_cxp_ch = None
                                            self.far_end_cdr_ln = None
                                            self.neighbor_link = None

                                            self.history = YList(self)
                                            self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.Detail.DataIdx, [u'port_data_idx', u'sfe_port', u'admin_state', u'oper_state', u'near_end_cdr_ln', u'near_end_cxp_ch', u'far_end_cxp_ch', u'far_end_cdr_ln', u'neighbor_link'], name, value)


                                        class History(Entity):
                                            """
                                            
                                            
                                            .. attribute:: history_idx  (key)
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: time_stamp
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: admin_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: oper_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: error_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.Detail.DataIdx.History, self).__init__()

                                                self.yang_name = "history"
                                                self.yang_parent_name = "data_idx"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['history_idx']
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                                    ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                                    ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                    ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                    ('error_state', YLeaf(YType.str, 'error_state')),
                                                ])
                                                self.history_idx = None
                                                self.time_stamp = None
                                                self.admin_state = None
                                                self.oper_state = None
                                                self.error_state = None
                                                self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.Detail.DataIdx.History, [u'history_idx', u'time_stamp', u'admin_state', u'oper_state', u'error_state'], name, value)


                                class State(Entity):
                                    """
                                    
                                    
                                    .. attribute:: up
                                    
                                    	
                                    	**type**\:  :py:class:`Up <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Up>`
                                    
                                    .. attribute:: down
                                    
                                    	
                                    	**type**\:  :py:class:`Down <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Down>`
                                    
                                    .. attribute:: er
                                    
                                    	
                                    	**type**\:  :py:class:`Er <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Er>`
                                    
                                    .. attribute:: mismatch
                                    
                                    	
                                    	**type**\:  :py:class:`Mismatch <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Mismatch>`
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State, self).__init__()

                                        self.yang_name = "state"
                                        self.yang_parent_name = "rx"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("up", ("up", Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Up)), ("down", ("down", Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Down)), ("er", ("er", Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Er)), ("mismatch", ("mismatch", Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Mismatch))])
                                        self._leafs = OrderedDict()

                                        self.up = Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Up()
                                        self.up.parent = self
                                        self._children_name_map["up"] = "up"

                                        self.down = Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Down()
                                        self.down.parent = self
                                        self._children_name_map["down"] = "down"

                                        self.er = Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Er()
                                        self.er.parent = self
                                        self._children_name_map["er"] = "er"

                                        self.mismatch = Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Mismatch()
                                        self.mismatch.parent = self
                                        self._children_name_map["mismatch"] = "mismatch"
                                        self._segment_path = lambda: "state"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State, [], name, value)


                                    class Up(Entity):
                                        """
                                        
                                        
                                        .. attribute:: data_idx
                                        
                                        	
                                        	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Up.DataIdx>`
                                        
                                        .. attribute:: brief
                                        
                                        	
                                        	**type**\:  :py:class:`Brief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Up.Brief>`
                                        
                                        .. attribute:: detail
                                        
                                        	
                                        	**type**\:  :py:class:`Detail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Up.Detail>`
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Up, self).__init__()

                                            self.yang_name = "up"
                                            self.yang_parent_name = "state"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Up.DataIdx)), ("brief", ("brief", Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Up.Brief)), ("detail", ("detail", Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Up.Detail))])
                                            self._leafs = OrderedDict()

                                            self.brief = Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Up.Brief()
                                            self.brief.parent = self
                                            self._children_name_map["brief"] = "brief"

                                            self.detail = Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Up.Detail()
                                            self.detail.parent = self
                                            self._children_name_map["detail"] = "detail"

                                            self.data_idx = YList(self)
                                            self._segment_path = lambda: "up"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Up, [], name, value)


                                        class DataIdx(Entity):
                                            """
                                            
                                            
                                            .. attribute:: port_data_idx  (key)
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** \-9223372036854775808..9223372036854775807
                                            
                                            .. attribute:: sfe_port
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: admin_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: oper_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: near_end_cdr_ln
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: near_end_cxp_ch
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: far_end_cxp_ch
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: far_end_cdr_ln
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: neighbor_link
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: history
                                            
                                            	
                                            	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Up.DataIdx.History>`
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Up.DataIdx, self).__init__()

                                                self.yang_name = "data_idx"
                                                self.yang_parent_name = "up"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['port_data_idx']
                                                self._child_classes = OrderedDict([("history", ("history", Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Up.DataIdx.History))])
                                                self._leafs = OrderedDict([
                                                    ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                                    ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                                    ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                    ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                    ('near_end_cdr_ln', YLeaf(YType.str, 'near_end_cdr_ln')),
                                                    ('near_end_cxp_ch', YLeaf(YType.str, 'near_end_cxp_ch')),
                                                    ('far_end_cxp_ch', YLeaf(YType.str, 'far_end_cxp_ch')),
                                                    ('far_end_cdr_ln', YLeaf(YType.str, 'far_end_cdr_ln')),
                                                    ('neighbor_link', YLeaf(YType.str, 'neighbor_link')),
                                                ])
                                                self.port_data_idx = None
                                                self.sfe_port = None
                                                self.admin_state = None
                                                self.oper_state = None
                                                self.near_end_cdr_ln = None
                                                self.near_end_cxp_ch = None
                                                self.far_end_cxp_ch = None
                                                self.far_end_cdr_ln = None
                                                self.neighbor_link = None

                                                self.history = YList(self)
                                                self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Up.DataIdx, [u'port_data_idx', u'sfe_port', u'admin_state', u'oper_state', u'near_end_cdr_ln', u'near_end_cxp_ch', u'far_end_cxp_ch', u'far_end_cdr_ln', u'neighbor_link'], name, value)


                                            class History(Entity):
                                                """
                                                
                                                
                                                .. attribute:: history_idx  (key)
                                                
                                                	
                                                	**type**\: int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                .. attribute:: time_stamp
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: admin_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: oper_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: error_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                

                                                """

                                                _prefix = 'calvados_controllers'
                                                _revision = '2017-01-31'

                                                def __init__(self):
                                                    super(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Up.DataIdx.History, self).__init__()

                                                    self.yang_name = "history"
                                                    self.yang_parent_name = "data_idx"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['history_idx']
                                                    self._child_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                                        ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                                        ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                        ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                        ('error_state', YLeaf(YType.str, 'error_state')),
                                                    ])
                                                    self.history_idx = None
                                                    self.time_stamp = None
                                                    self.admin_state = None
                                                    self.oper_state = None
                                                    self.error_state = None
                                                    self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Up.DataIdx.History, [u'history_idx', u'time_stamp', u'admin_state', u'oper_state', u'error_state'], name, value)


                                        class Brief(Entity):
                                            """
                                            
                                            
                                            .. attribute:: data_idx
                                            
                                            	
                                            	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Up.Brief.DataIdx>`
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Up.Brief, self).__init__()

                                                self.yang_name = "brief"
                                                self.yang_parent_name = "up"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Up.Brief.DataIdx))])
                                                self._leafs = OrderedDict()

                                                self.data_idx = YList(self)
                                                self._segment_path = lambda: "brief"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Up.Brief, [], name, value)


                                            class DataIdx(Entity):
                                                """
                                                
                                                
                                                .. attribute:: port_data_idx  (key)
                                                
                                                	
                                                	**type**\: int
                                                
                                                	**range:** \-9223372036854775808..9223372036854775807
                                                
                                                .. attribute:: sfe_port
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: admin_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: oper_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: near_end_cdr_ln
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: near_end_cxp_ch
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: far_end_cxp_ch
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: far_end_cdr_ln
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_link
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: history
                                                
                                                	
                                                	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Up.Brief.DataIdx.History>`
                                                
                                                

                                                """

                                                _prefix = 'calvados_controllers'
                                                _revision = '2017-01-31'

                                                def __init__(self):
                                                    super(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Up.Brief.DataIdx, self).__init__()

                                                    self.yang_name = "data_idx"
                                                    self.yang_parent_name = "brief"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['port_data_idx']
                                                    self._child_classes = OrderedDict([("history", ("history", Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Up.Brief.DataIdx.History))])
                                                    self._leafs = OrderedDict([
                                                        ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                                        ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                                        ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                        ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                        ('near_end_cdr_ln', YLeaf(YType.str, 'near_end_cdr_ln')),
                                                        ('near_end_cxp_ch', YLeaf(YType.str, 'near_end_cxp_ch')),
                                                        ('far_end_cxp_ch', YLeaf(YType.str, 'far_end_cxp_ch')),
                                                        ('far_end_cdr_ln', YLeaf(YType.str, 'far_end_cdr_ln')),
                                                        ('neighbor_link', YLeaf(YType.str, 'neighbor_link')),
                                                    ])
                                                    self.port_data_idx = None
                                                    self.sfe_port = None
                                                    self.admin_state = None
                                                    self.oper_state = None
                                                    self.near_end_cdr_ln = None
                                                    self.near_end_cxp_ch = None
                                                    self.far_end_cxp_ch = None
                                                    self.far_end_cdr_ln = None
                                                    self.neighbor_link = None

                                                    self.history = YList(self)
                                                    self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Up.Brief.DataIdx, [u'port_data_idx', u'sfe_port', u'admin_state', u'oper_state', u'near_end_cdr_ln', u'near_end_cxp_ch', u'far_end_cxp_ch', u'far_end_cdr_ln', u'neighbor_link'], name, value)


                                                class History(Entity):
                                                    """
                                                    
                                                    
                                                    .. attribute:: history_idx  (key)
                                                    
                                                    	
                                                    	**type**\: int
                                                    
                                                    	**range:** \-2147483648..2147483647
                                                    
                                                    .. attribute:: time_stamp
                                                    
                                                    	
                                                    	**type**\: str
                                                    
                                                    .. attribute:: admin_state
                                                    
                                                    	
                                                    	**type**\: str
                                                    
                                                    .. attribute:: oper_state
                                                    
                                                    	
                                                    	**type**\: str
                                                    
                                                    .. attribute:: error_state
                                                    
                                                    	
                                                    	**type**\: str
                                                    
                                                    

                                                    """

                                                    _prefix = 'calvados_controllers'
                                                    _revision = '2017-01-31'

                                                    def __init__(self):
                                                        super(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Up.Brief.DataIdx.History, self).__init__()

                                                        self.yang_name = "history"
                                                        self.yang_parent_name = "data_idx"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = ['history_idx']
                                                        self._child_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                                            ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                                            ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                            ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                            ('error_state', YLeaf(YType.str, 'error_state')),
                                                        ])
                                                        self.history_idx = None
                                                        self.time_stamp = None
                                                        self.admin_state = None
                                                        self.oper_state = None
                                                        self.error_state = None
                                                        self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Up.Brief.DataIdx.History, [u'history_idx', u'time_stamp', u'admin_state', u'oper_state', u'error_state'], name, value)


                                        class Detail(Entity):
                                            """
                                            
                                            
                                            .. attribute:: data_idx
                                            
                                            	
                                            	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Up.Detail.DataIdx>`
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Up.Detail, self).__init__()

                                                self.yang_name = "detail"
                                                self.yang_parent_name = "up"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Up.Detail.DataIdx))])
                                                self._leafs = OrderedDict()

                                                self.data_idx = YList(self)
                                                self._segment_path = lambda: "detail"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Up.Detail, [], name, value)


                                            class DataIdx(Entity):
                                                """
                                                
                                                
                                                .. attribute:: port_data_idx  (key)
                                                
                                                	
                                                	**type**\: int
                                                
                                                	**range:** \-9223372036854775808..9223372036854775807
                                                
                                                .. attribute:: sfe_port
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: admin_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: oper_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: near_end_cdr_ln
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: near_end_cxp_ch
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: far_end_cxp_ch
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: far_end_cdr_ln
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_link
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: history
                                                
                                                	
                                                	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Up.Detail.DataIdx.History>`
                                                
                                                

                                                """

                                                _prefix = 'calvados_controllers'
                                                _revision = '2017-01-31'

                                                def __init__(self):
                                                    super(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Up.Detail.DataIdx, self).__init__()

                                                    self.yang_name = "data_idx"
                                                    self.yang_parent_name = "detail"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['port_data_idx']
                                                    self._child_classes = OrderedDict([("history", ("history", Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Up.Detail.DataIdx.History))])
                                                    self._leafs = OrderedDict([
                                                        ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                                        ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                                        ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                        ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                        ('near_end_cdr_ln', YLeaf(YType.str, 'near_end_cdr_ln')),
                                                        ('near_end_cxp_ch', YLeaf(YType.str, 'near_end_cxp_ch')),
                                                        ('far_end_cxp_ch', YLeaf(YType.str, 'far_end_cxp_ch')),
                                                        ('far_end_cdr_ln', YLeaf(YType.str, 'far_end_cdr_ln')),
                                                        ('neighbor_link', YLeaf(YType.str, 'neighbor_link')),
                                                    ])
                                                    self.port_data_idx = None
                                                    self.sfe_port = None
                                                    self.admin_state = None
                                                    self.oper_state = None
                                                    self.near_end_cdr_ln = None
                                                    self.near_end_cxp_ch = None
                                                    self.far_end_cxp_ch = None
                                                    self.far_end_cdr_ln = None
                                                    self.neighbor_link = None

                                                    self.history = YList(self)
                                                    self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Up.Detail.DataIdx, [u'port_data_idx', u'sfe_port', u'admin_state', u'oper_state', u'near_end_cdr_ln', u'near_end_cxp_ch', u'far_end_cxp_ch', u'far_end_cdr_ln', u'neighbor_link'], name, value)


                                                class History(Entity):
                                                    """
                                                    
                                                    
                                                    .. attribute:: history_idx  (key)
                                                    
                                                    	
                                                    	**type**\: int
                                                    
                                                    	**range:** \-2147483648..2147483647
                                                    
                                                    .. attribute:: time_stamp
                                                    
                                                    	
                                                    	**type**\: str
                                                    
                                                    .. attribute:: admin_state
                                                    
                                                    	
                                                    	**type**\: str
                                                    
                                                    .. attribute:: oper_state
                                                    
                                                    	
                                                    	**type**\: str
                                                    
                                                    .. attribute:: error_state
                                                    
                                                    	
                                                    	**type**\: str
                                                    
                                                    

                                                    """

                                                    _prefix = 'calvados_controllers'
                                                    _revision = '2017-01-31'

                                                    def __init__(self):
                                                        super(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Up.Detail.DataIdx.History, self).__init__()

                                                        self.yang_name = "history"
                                                        self.yang_parent_name = "data_idx"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = ['history_idx']
                                                        self._child_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                                            ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                                            ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                            ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                            ('error_state', YLeaf(YType.str, 'error_state')),
                                                        ])
                                                        self.history_idx = None
                                                        self.time_stamp = None
                                                        self.admin_state = None
                                                        self.oper_state = None
                                                        self.error_state = None
                                                        self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Up.Detail.DataIdx.History, [u'history_idx', u'time_stamp', u'admin_state', u'oper_state', u'error_state'], name, value)


                                    class Down(Entity):
                                        """
                                        
                                        
                                        .. attribute:: data_idx
                                        
                                        	
                                        	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Down.DataIdx>`
                                        
                                        .. attribute:: brief
                                        
                                        	
                                        	**type**\:  :py:class:`Brief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Down.Brief>`
                                        
                                        .. attribute:: detail
                                        
                                        	
                                        	**type**\:  :py:class:`Detail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Down.Detail>`
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Down, self).__init__()

                                            self.yang_name = "down"
                                            self.yang_parent_name = "state"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Down.DataIdx)), ("brief", ("brief", Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Down.Brief)), ("detail", ("detail", Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Down.Detail))])
                                            self._leafs = OrderedDict()

                                            self.brief = Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Down.Brief()
                                            self.brief.parent = self
                                            self._children_name_map["brief"] = "brief"

                                            self.detail = Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Down.Detail()
                                            self.detail.parent = self
                                            self._children_name_map["detail"] = "detail"

                                            self.data_idx = YList(self)
                                            self._segment_path = lambda: "down"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Down, [], name, value)


                                        class DataIdx(Entity):
                                            """
                                            
                                            
                                            .. attribute:: port_data_idx  (key)
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** \-9223372036854775808..9223372036854775807
                                            
                                            .. attribute:: sfe_port
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: admin_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: oper_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: near_end_cdr_ln
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: near_end_cxp_ch
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: far_end_cxp_ch
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: far_end_cdr_ln
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: neighbor_link
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: history
                                            
                                            	
                                            	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Down.DataIdx.History>`
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Down.DataIdx, self).__init__()

                                                self.yang_name = "data_idx"
                                                self.yang_parent_name = "down"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['port_data_idx']
                                                self._child_classes = OrderedDict([("history", ("history", Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Down.DataIdx.History))])
                                                self._leafs = OrderedDict([
                                                    ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                                    ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                                    ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                    ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                    ('near_end_cdr_ln', YLeaf(YType.str, 'near_end_cdr_ln')),
                                                    ('near_end_cxp_ch', YLeaf(YType.str, 'near_end_cxp_ch')),
                                                    ('far_end_cxp_ch', YLeaf(YType.str, 'far_end_cxp_ch')),
                                                    ('far_end_cdr_ln', YLeaf(YType.str, 'far_end_cdr_ln')),
                                                    ('neighbor_link', YLeaf(YType.str, 'neighbor_link')),
                                                ])
                                                self.port_data_idx = None
                                                self.sfe_port = None
                                                self.admin_state = None
                                                self.oper_state = None
                                                self.near_end_cdr_ln = None
                                                self.near_end_cxp_ch = None
                                                self.far_end_cxp_ch = None
                                                self.far_end_cdr_ln = None
                                                self.neighbor_link = None

                                                self.history = YList(self)
                                                self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Down.DataIdx, [u'port_data_idx', u'sfe_port', u'admin_state', u'oper_state', u'near_end_cdr_ln', u'near_end_cxp_ch', u'far_end_cxp_ch', u'far_end_cdr_ln', u'neighbor_link'], name, value)


                                            class History(Entity):
                                                """
                                                
                                                
                                                .. attribute:: history_idx  (key)
                                                
                                                	
                                                	**type**\: int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                .. attribute:: time_stamp
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: admin_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: oper_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: error_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                

                                                """

                                                _prefix = 'calvados_controllers'
                                                _revision = '2017-01-31'

                                                def __init__(self):
                                                    super(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Down.DataIdx.History, self).__init__()

                                                    self.yang_name = "history"
                                                    self.yang_parent_name = "data_idx"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['history_idx']
                                                    self._child_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                                        ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                                        ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                        ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                        ('error_state', YLeaf(YType.str, 'error_state')),
                                                    ])
                                                    self.history_idx = None
                                                    self.time_stamp = None
                                                    self.admin_state = None
                                                    self.oper_state = None
                                                    self.error_state = None
                                                    self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Down.DataIdx.History, [u'history_idx', u'time_stamp', u'admin_state', u'oper_state', u'error_state'], name, value)


                                        class Brief(Entity):
                                            """
                                            
                                            
                                            .. attribute:: data_idx
                                            
                                            	
                                            	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Down.Brief.DataIdx>`
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Down.Brief, self).__init__()

                                                self.yang_name = "brief"
                                                self.yang_parent_name = "down"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Down.Brief.DataIdx))])
                                                self._leafs = OrderedDict()

                                                self.data_idx = YList(self)
                                                self._segment_path = lambda: "brief"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Down.Brief, [], name, value)


                                            class DataIdx(Entity):
                                                """
                                                
                                                
                                                .. attribute:: port_data_idx  (key)
                                                
                                                	
                                                	**type**\: int
                                                
                                                	**range:** \-9223372036854775808..9223372036854775807
                                                
                                                .. attribute:: sfe_port
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: admin_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: oper_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: near_end_cdr_ln
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: near_end_cxp_ch
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: far_end_cxp_ch
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: far_end_cdr_ln
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_link
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: history
                                                
                                                	
                                                	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Down.Brief.DataIdx.History>`
                                                
                                                

                                                """

                                                _prefix = 'calvados_controllers'
                                                _revision = '2017-01-31'

                                                def __init__(self):
                                                    super(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Down.Brief.DataIdx, self).__init__()

                                                    self.yang_name = "data_idx"
                                                    self.yang_parent_name = "brief"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['port_data_idx']
                                                    self._child_classes = OrderedDict([("history", ("history", Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Down.Brief.DataIdx.History))])
                                                    self._leafs = OrderedDict([
                                                        ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                                        ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                                        ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                        ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                        ('near_end_cdr_ln', YLeaf(YType.str, 'near_end_cdr_ln')),
                                                        ('near_end_cxp_ch', YLeaf(YType.str, 'near_end_cxp_ch')),
                                                        ('far_end_cxp_ch', YLeaf(YType.str, 'far_end_cxp_ch')),
                                                        ('far_end_cdr_ln', YLeaf(YType.str, 'far_end_cdr_ln')),
                                                        ('neighbor_link', YLeaf(YType.str, 'neighbor_link')),
                                                    ])
                                                    self.port_data_idx = None
                                                    self.sfe_port = None
                                                    self.admin_state = None
                                                    self.oper_state = None
                                                    self.near_end_cdr_ln = None
                                                    self.near_end_cxp_ch = None
                                                    self.far_end_cxp_ch = None
                                                    self.far_end_cdr_ln = None
                                                    self.neighbor_link = None

                                                    self.history = YList(self)
                                                    self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Down.Brief.DataIdx, [u'port_data_idx', u'sfe_port', u'admin_state', u'oper_state', u'near_end_cdr_ln', u'near_end_cxp_ch', u'far_end_cxp_ch', u'far_end_cdr_ln', u'neighbor_link'], name, value)


                                                class History(Entity):
                                                    """
                                                    
                                                    
                                                    .. attribute:: history_idx  (key)
                                                    
                                                    	
                                                    	**type**\: int
                                                    
                                                    	**range:** \-2147483648..2147483647
                                                    
                                                    .. attribute:: time_stamp
                                                    
                                                    	
                                                    	**type**\: str
                                                    
                                                    .. attribute:: admin_state
                                                    
                                                    	
                                                    	**type**\: str
                                                    
                                                    .. attribute:: oper_state
                                                    
                                                    	
                                                    	**type**\: str
                                                    
                                                    .. attribute:: error_state
                                                    
                                                    	
                                                    	**type**\: str
                                                    
                                                    

                                                    """

                                                    _prefix = 'calvados_controllers'
                                                    _revision = '2017-01-31'

                                                    def __init__(self):
                                                        super(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Down.Brief.DataIdx.History, self).__init__()

                                                        self.yang_name = "history"
                                                        self.yang_parent_name = "data_idx"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = ['history_idx']
                                                        self._child_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                                            ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                                            ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                            ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                            ('error_state', YLeaf(YType.str, 'error_state')),
                                                        ])
                                                        self.history_idx = None
                                                        self.time_stamp = None
                                                        self.admin_state = None
                                                        self.oper_state = None
                                                        self.error_state = None
                                                        self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Down.Brief.DataIdx.History, [u'history_idx', u'time_stamp', u'admin_state', u'oper_state', u'error_state'], name, value)


                                        class Detail(Entity):
                                            """
                                            
                                            
                                            .. attribute:: data_idx
                                            
                                            	
                                            	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Down.Detail.DataIdx>`
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Down.Detail, self).__init__()

                                                self.yang_name = "detail"
                                                self.yang_parent_name = "down"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Down.Detail.DataIdx))])
                                                self._leafs = OrderedDict()

                                                self.data_idx = YList(self)
                                                self._segment_path = lambda: "detail"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Down.Detail, [], name, value)


                                            class DataIdx(Entity):
                                                """
                                                
                                                
                                                .. attribute:: port_data_idx  (key)
                                                
                                                	
                                                	**type**\: int
                                                
                                                	**range:** \-9223372036854775808..9223372036854775807
                                                
                                                .. attribute:: sfe_port
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: admin_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: oper_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: near_end_cdr_ln
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: near_end_cxp_ch
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: far_end_cxp_ch
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: far_end_cdr_ln
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_link
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: history
                                                
                                                	
                                                	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Down.Detail.DataIdx.History>`
                                                
                                                

                                                """

                                                _prefix = 'calvados_controllers'
                                                _revision = '2017-01-31'

                                                def __init__(self):
                                                    super(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Down.Detail.DataIdx, self).__init__()

                                                    self.yang_name = "data_idx"
                                                    self.yang_parent_name = "detail"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['port_data_idx']
                                                    self._child_classes = OrderedDict([("history", ("history", Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Down.Detail.DataIdx.History))])
                                                    self._leafs = OrderedDict([
                                                        ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                                        ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                                        ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                        ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                        ('near_end_cdr_ln', YLeaf(YType.str, 'near_end_cdr_ln')),
                                                        ('near_end_cxp_ch', YLeaf(YType.str, 'near_end_cxp_ch')),
                                                        ('far_end_cxp_ch', YLeaf(YType.str, 'far_end_cxp_ch')),
                                                        ('far_end_cdr_ln', YLeaf(YType.str, 'far_end_cdr_ln')),
                                                        ('neighbor_link', YLeaf(YType.str, 'neighbor_link')),
                                                    ])
                                                    self.port_data_idx = None
                                                    self.sfe_port = None
                                                    self.admin_state = None
                                                    self.oper_state = None
                                                    self.near_end_cdr_ln = None
                                                    self.near_end_cxp_ch = None
                                                    self.far_end_cxp_ch = None
                                                    self.far_end_cdr_ln = None
                                                    self.neighbor_link = None

                                                    self.history = YList(self)
                                                    self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Down.Detail.DataIdx, [u'port_data_idx', u'sfe_port', u'admin_state', u'oper_state', u'near_end_cdr_ln', u'near_end_cxp_ch', u'far_end_cxp_ch', u'far_end_cdr_ln', u'neighbor_link'], name, value)


                                                class History(Entity):
                                                    """
                                                    
                                                    
                                                    .. attribute:: history_idx  (key)
                                                    
                                                    	
                                                    	**type**\: int
                                                    
                                                    	**range:** \-2147483648..2147483647
                                                    
                                                    .. attribute:: time_stamp
                                                    
                                                    	
                                                    	**type**\: str
                                                    
                                                    .. attribute:: admin_state
                                                    
                                                    	
                                                    	**type**\: str
                                                    
                                                    .. attribute:: oper_state
                                                    
                                                    	
                                                    	**type**\: str
                                                    
                                                    .. attribute:: error_state
                                                    
                                                    	
                                                    	**type**\: str
                                                    
                                                    

                                                    """

                                                    _prefix = 'calvados_controllers'
                                                    _revision = '2017-01-31'

                                                    def __init__(self):
                                                        super(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Down.Detail.DataIdx.History, self).__init__()

                                                        self.yang_name = "history"
                                                        self.yang_parent_name = "data_idx"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = ['history_idx']
                                                        self._child_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                                            ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                                            ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                            ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                            ('error_state', YLeaf(YType.str, 'error_state')),
                                                        ])
                                                        self.history_idx = None
                                                        self.time_stamp = None
                                                        self.admin_state = None
                                                        self.oper_state = None
                                                        self.error_state = None
                                                        self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Down.Detail.DataIdx.History, [u'history_idx', u'time_stamp', u'admin_state', u'oper_state', u'error_state'], name, value)


                                    class Er(Entity):
                                        """
                                        
                                        
                                        .. attribute:: data_idx
                                        
                                        	
                                        	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Er.DataIdx>`
                                        
                                        .. attribute:: brief
                                        
                                        	
                                        	**type**\:  :py:class:`Brief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Er.Brief>`
                                        
                                        .. attribute:: detail
                                        
                                        	
                                        	**type**\:  :py:class:`Detail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Er.Detail>`
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Er, self).__init__()

                                            self.yang_name = "er"
                                            self.yang_parent_name = "state"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Er.DataIdx)), ("brief", ("brief", Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Er.Brief)), ("detail", ("detail", Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Er.Detail))])
                                            self._leafs = OrderedDict()

                                            self.brief = Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Er.Brief()
                                            self.brief.parent = self
                                            self._children_name_map["brief"] = "brief"

                                            self.detail = Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Er.Detail()
                                            self.detail.parent = self
                                            self._children_name_map["detail"] = "detail"

                                            self.data_idx = YList(self)
                                            self._segment_path = lambda: "er"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Er, [], name, value)


                                        class DataIdx(Entity):
                                            """
                                            
                                            
                                            .. attribute:: port_data_idx  (key)
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** \-9223372036854775808..9223372036854775807
                                            
                                            .. attribute:: sfe_port
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: admin_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: oper_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: near_end_cdr_ln
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: near_end_cxp_ch
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: far_end_cxp_ch
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: far_end_cdr_ln
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: neighbor_link
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: history
                                            
                                            	
                                            	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Er.DataIdx.History>`
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Er.DataIdx, self).__init__()

                                                self.yang_name = "data_idx"
                                                self.yang_parent_name = "er"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['port_data_idx']
                                                self._child_classes = OrderedDict([("history", ("history", Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Er.DataIdx.History))])
                                                self._leafs = OrderedDict([
                                                    ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                                    ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                                    ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                    ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                    ('near_end_cdr_ln', YLeaf(YType.str, 'near_end_cdr_ln')),
                                                    ('near_end_cxp_ch', YLeaf(YType.str, 'near_end_cxp_ch')),
                                                    ('far_end_cxp_ch', YLeaf(YType.str, 'far_end_cxp_ch')),
                                                    ('far_end_cdr_ln', YLeaf(YType.str, 'far_end_cdr_ln')),
                                                    ('neighbor_link', YLeaf(YType.str, 'neighbor_link')),
                                                ])
                                                self.port_data_idx = None
                                                self.sfe_port = None
                                                self.admin_state = None
                                                self.oper_state = None
                                                self.near_end_cdr_ln = None
                                                self.near_end_cxp_ch = None
                                                self.far_end_cxp_ch = None
                                                self.far_end_cdr_ln = None
                                                self.neighbor_link = None

                                                self.history = YList(self)
                                                self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Er.DataIdx, [u'port_data_idx', u'sfe_port', u'admin_state', u'oper_state', u'near_end_cdr_ln', u'near_end_cxp_ch', u'far_end_cxp_ch', u'far_end_cdr_ln', u'neighbor_link'], name, value)


                                            class History(Entity):
                                                """
                                                
                                                
                                                .. attribute:: history_idx  (key)
                                                
                                                	
                                                	**type**\: int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                .. attribute:: time_stamp
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: admin_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: oper_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: error_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                

                                                """

                                                _prefix = 'calvados_controllers'
                                                _revision = '2017-01-31'

                                                def __init__(self):
                                                    super(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Er.DataIdx.History, self).__init__()

                                                    self.yang_name = "history"
                                                    self.yang_parent_name = "data_idx"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['history_idx']
                                                    self._child_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                                        ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                                        ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                        ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                        ('error_state', YLeaf(YType.str, 'error_state')),
                                                    ])
                                                    self.history_idx = None
                                                    self.time_stamp = None
                                                    self.admin_state = None
                                                    self.oper_state = None
                                                    self.error_state = None
                                                    self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Er.DataIdx.History, [u'history_idx', u'time_stamp', u'admin_state', u'oper_state', u'error_state'], name, value)


                                        class Brief(Entity):
                                            """
                                            
                                            
                                            .. attribute:: data_idx
                                            
                                            	
                                            	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Er.Brief.DataIdx>`
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Er.Brief, self).__init__()

                                                self.yang_name = "brief"
                                                self.yang_parent_name = "er"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Er.Brief.DataIdx))])
                                                self._leafs = OrderedDict()

                                                self.data_idx = YList(self)
                                                self._segment_path = lambda: "brief"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Er.Brief, [], name, value)


                                            class DataIdx(Entity):
                                                """
                                                
                                                
                                                .. attribute:: port_data_idx  (key)
                                                
                                                	
                                                	**type**\: int
                                                
                                                	**range:** \-9223372036854775808..9223372036854775807
                                                
                                                .. attribute:: sfe_port
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: admin_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: oper_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: near_end_cdr_ln
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: near_end_cxp_ch
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: far_end_cxp_ch
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: far_end_cdr_ln
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_link
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: history
                                                
                                                	
                                                	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Er.Brief.DataIdx.History>`
                                                
                                                

                                                """

                                                _prefix = 'calvados_controllers'
                                                _revision = '2017-01-31'

                                                def __init__(self):
                                                    super(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Er.Brief.DataIdx, self).__init__()

                                                    self.yang_name = "data_idx"
                                                    self.yang_parent_name = "brief"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['port_data_idx']
                                                    self._child_classes = OrderedDict([("history", ("history", Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Er.Brief.DataIdx.History))])
                                                    self._leafs = OrderedDict([
                                                        ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                                        ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                                        ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                        ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                        ('near_end_cdr_ln', YLeaf(YType.str, 'near_end_cdr_ln')),
                                                        ('near_end_cxp_ch', YLeaf(YType.str, 'near_end_cxp_ch')),
                                                        ('far_end_cxp_ch', YLeaf(YType.str, 'far_end_cxp_ch')),
                                                        ('far_end_cdr_ln', YLeaf(YType.str, 'far_end_cdr_ln')),
                                                        ('neighbor_link', YLeaf(YType.str, 'neighbor_link')),
                                                    ])
                                                    self.port_data_idx = None
                                                    self.sfe_port = None
                                                    self.admin_state = None
                                                    self.oper_state = None
                                                    self.near_end_cdr_ln = None
                                                    self.near_end_cxp_ch = None
                                                    self.far_end_cxp_ch = None
                                                    self.far_end_cdr_ln = None
                                                    self.neighbor_link = None

                                                    self.history = YList(self)
                                                    self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Er.Brief.DataIdx, [u'port_data_idx', u'sfe_port', u'admin_state', u'oper_state', u'near_end_cdr_ln', u'near_end_cxp_ch', u'far_end_cxp_ch', u'far_end_cdr_ln', u'neighbor_link'], name, value)


                                                class History(Entity):
                                                    """
                                                    
                                                    
                                                    .. attribute:: history_idx  (key)
                                                    
                                                    	
                                                    	**type**\: int
                                                    
                                                    	**range:** \-2147483648..2147483647
                                                    
                                                    .. attribute:: time_stamp
                                                    
                                                    	
                                                    	**type**\: str
                                                    
                                                    .. attribute:: admin_state
                                                    
                                                    	
                                                    	**type**\: str
                                                    
                                                    .. attribute:: oper_state
                                                    
                                                    	
                                                    	**type**\: str
                                                    
                                                    .. attribute:: error_state
                                                    
                                                    	
                                                    	**type**\: str
                                                    
                                                    

                                                    """

                                                    _prefix = 'calvados_controllers'
                                                    _revision = '2017-01-31'

                                                    def __init__(self):
                                                        super(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Er.Brief.DataIdx.History, self).__init__()

                                                        self.yang_name = "history"
                                                        self.yang_parent_name = "data_idx"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = ['history_idx']
                                                        self._child_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                                            ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                                            ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                            ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                            ('error_state', YLeaf(YType.str, 'error_state')),
                                                        ])
                                                        self.history_idx = None
                                                        self.time_stamp = None
                                                        self.admin_state = None
                                                        self.oper_state = None
                                                        self.error_state = None
                                                        self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Er.Brief.DataIdx.History, [u'history_idx', u'time_stamp', u'admin_state', u'oper_state', u'error_state'], name, value)


                                        class Detail(Entity):
                                            """
                                            
                                            
                                            .. attribute:: data_idx
                                            
                                            	
                                            	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Er.Detail.DataIdx>`
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Er.Detail, self).__init__()

                                                self.yang_name = "detail"
                                                self.yang_parent_name = "er"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Er.Detail.DataIdx))])
                                                self._leafs = OrderedDict()

                                                self.data_idx = YList(self)
                                                self._segment_path = lambda: "detail"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Er.Detail, [], name, value)


                                            class DataIdx(Entity):
                                                """
                                                
                                                
                                                .. attribute:: port_data_idx  (key)
                                                
                                                	
                                                	**type**\: int
                                                
                                                	**range:** \-9223372036854775808..9223372036854775807
                                                
                                                .. attribute:: sfe_port
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: admin_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: oper_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: near_end_cdr_ln
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: near_end_cxp_ch
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: far_end_cxp_ch
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: far_end_cdr_ln
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_link
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: history
                                                
                                                	
                                                	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Er.Detail.DataIdx.History>`
                                                
                                                

                                                """

                                                _prefix = 'calvados_controllers'
                                                _revision = '2017-01-31'

                                                def __init__(self):
                                                    super(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Er.Detail.DataIdx, self).__init__()

                                                    self.yang_name = "data_idx"
                                                    self.yang_parent_name = "detail"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['port_data_idx']
                                                    self._child_classes = OrderedDict([("history", ("history", Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Er.Detail.DataIdx.History))])
                                                    self._leafs = OrderedDict([
                                                        ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                                        ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                                        ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                        ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                        ('near_end_cdr_ln', YLeaf(YType.str, 'near_end_cdr_ln')),
                                                        ('near_end_cxp_ch', YLeaf(YType.str, 'near_end_cxp_ch')),
                                                        ('far_end_cxp_ch', YLeaf(YType.str, 'far_end_cxp_ch')),
                                                        ('far_end_cdr_ln', YLeaf(YType.str, 'far_end_cdr_ln')),
                                                        ('neighbor_link', YLeaf(YType.str, 'neighbor_link')),
                                                    ])
                                                    self.port_data_idx = None
                                                    self.sfe_port = None
                                                    self.admin_state = None
                                                    self.oper_state = None
                                                    self.near_end_cdr_ln = None
                                                    self.near_end_cxp_ch = None
                                                    self.far_end_cxp_ch = None
                                                    self.far_end_cdr_ln = None
                                                    self.neighbor_link = None

                                                    self.history = YList(self)
                                                    self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Er.Detail.DataIdx, [u'port_data_idx', u'sfe_port', u'admin_state', u'oper_state', u'near_end_cdr_ln', u'near_end_cxp_ch', u'far_end_cxp_ch', u'far_end_cdr_ln', u'neighbor_link'], name, value)


                                                class History(Entity):
                                                    """
                                                    
                                                    
                                                    .. attribute:: history_idx  (key)
                                                    
                                                    	
                                                    	**type**\: int
                                                    
                                                    	**range:** \-2147483648..2147483647
                                                    
                                                    .. attribute:: time_stamp
                                                    
                                                    	
                                                    	**type**\: str
                                                    
                                                    .. attribute:: admin_state
                                                    
                                                    	
                                                    	**type**\: str
                                                    
                                                    .. attribute:: oper_state
                                                    
                                                    	
                                                    	**type**\: str
                                                    
                                                    .. attribute:: error_state
                                                    
                                                    	
                                                    	**type**\: str
                                                    
                                                    

                                                    """

                                                    _prefix = 'calvados_controllers'
                                                    _revision = '2017-01-31'

                                                    def __init__(self):
                                                        super(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Er.Detail.DataIdx.History, self).__init__()

                                                        self.yang_name = "history"
                                                        self.yang_parent_name = "data_idx"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = ['history_idx']
                                                        self._child_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                                            ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                                            ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                            ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                            ('error_state', YLeaf(YType.str, 'error_state')),
                                                        ])
                                                        self.history_idx = None
                                                        self.time_stamp = None
                                                        self.admin_state = None
                                                        self.oper_state = None
                                                        self.error_state = None
                                                        self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Er.Detail.DataIdx.History, [u'history_idx', u'time_stamp', u'admin_state', u'oper_state', u'error_state'], name, value)


                                    class Mismatch(Entity):
                                        """
                                        
                                        
                                        .. attribute:: data_idx
                                        
                                        	
                                        	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Mismatch.DataIdx>`
                                        
                                        .. attribute:: brief
                                        
                                        	
                                        	**type**\:  :py:class:`Brief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Mismatch.Brief>`
                                        
                                        .. attribute:: detail
                                        
                                        	
                                        	**type**\:  :py:class:`Detail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Mismatch.Detail>`
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Mismatch, self).__init__()

                                            self.yang_name = "mismatch"
                                            self.yang_parent_name = "state"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Mismatch.DataIdx)), ("brief", ("brief", Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Mismatch.Brief)), ("detail", ("detail", Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Mismatch.Detail))])
                                            self._leafs = OrderedDict()

                                            self.brief = Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Mismatch.Brief()
                                            self.brief.parent = self
                                            self._children_name_map["brief"] = "brief"

                                            self.detail = Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Mismatch.Detail()
                                            self.detail.parent = self
                                            self._children_name_map["detail"] = "detail"

                                            self.data_idx = YList(self)
                                            self._segment_path = lambda: "mismatch"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Mismatch, [], name, value)


                                        class DataIdx(Entity):
                                            """
                                            
                                            
                                            .. attribute:: port_data_idx  (key)
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** \-9223372036854775808..9223372036854775807
                                            
                                            .. attribute:: sfe_port
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: admin_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: oper_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: near_end_cdr_ln
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: near_end_cxp_ch
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: far_end_cxp_ch
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: far_end_cdr_ln
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: neighbor_link
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: history
                                            
                                            	
                                            	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Mismatch.DataIdx.History>`
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Mismatch.DataIdx, self).__init__()

                                                self.yang_name = "data_idx"
                                                self.yang_parent_name = "mismatch"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['port_data_idx']
                                                self._child_classes = OrderedDict([("history", ("history", Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Mismatch.DataIdx.History))])
                                                self._leafs = OrderedDict([
                                                    ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                                    ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                                    ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                    ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                    ('near_end_cdr_ln', YLeaf(YType.str, 'near_end_cdr_ln')),
                                                    ('near_end_cxp_ch', YLeaf(YType.str, 'near_end_cxp_ch')),
                                                    ('far_end_cxp_ch', YLeaf(YType.str, 'far_end_cxp_ch')),
                                                    ('far_end_cdr_ln', YLeaf(YType.str, 'far_end_cdr_ln')),
                                                    ('neighbor_link', YLeaf(YType.str, 'neighbor_link')),
                                                ])
                                                self.port_data_idx = None
                                                self.sfe_port = None
                                                self.admin_state = None
                                                self.oper_state = None
                                                self.near_end_cdr_ln = None
                                                self.near_end_cxp_ch = None
                                                self.far_end_cxp_ch = None
                                                self.far_end_cdr_ln = None
                                                self.neighbor_link = None

                                                self.history = YList(self)
                                                self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Mismatch.DataIdx, [u'port_data_idx', u'sfe_port', u'admin_state', u'oper_state', u'near_end_cdr_ln', u'near_end_cxp_ch', u'far_end_cxp_ch', u'far_end_cdr_ln', u'neighbor_link'], name, value)


                                            class History(Entity):
                                                """
                                                
                                                
                                                .. attribute:: history_idx  (key)
                                                
                                                	
                                                	**type**\: int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                .. attribute:: time_stamp
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: admin_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: oper_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: error_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                

                                                """

                                                _prefix = 'calvados_controllers'
                                                _revision = '2017-01-31'

                                                def __init__(self):
                                                    super(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Mismatch.DataIdx.History, self).__init__()

                                                    self.yang_name = "history"
                                                    self.yang_parent_name = "data_idx"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['history_idx']
                                                    self._child_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                                        ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                                        ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                        ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                        ('error_state', YLeaf(YType.str, 'error_state')),
                                                    ])
                                                    self.history_idx = None
                                                    self.time_stamp = None
                                                    self.admin_state = None
                                                    self.oper_state = None
                                                    self.error_state = None
                                                    self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Mismatch.DataIdx.History, [u'history_idx', u'time_stamp', u'admin_state', u'oper_state', u'error_state'], name, value)


                                        class Brief(Entity):
                                            """
                                            
                                            
                                            .. attribute:: data_idx
                                            
                                            	
                                            	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Mismatch.Brief.DataIdx>`
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Mismatch.Brief, self).__init__()

                                                self.yang_name = "brief"
                                                self.yang_parent_name = "mismatch"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Mismatch.Brief.DataIdx))])
                                                self._leafs = OrderedDict()

                                                self.data_idx = YList(self)
                                                self._segment_path = lambda: "brief"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Mismatch.Brief, [], name, value)


                                            class DataIdx(Entity):
                                                """
                                                
                                                
                                                .. attribute:: port_data_idx  (key)
                                                
                                                	
                                                	**type**\: int
                                                
                                                	**range:** \-9223372036854775808..9223372036854775807
                                                
                                                .. attribute:: sfe_port
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: admin_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: oper_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: near_end_cdr_ln
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: near_end_cxp_ch
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: far_end_cxp_ch
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: far_end_cdr_ln
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_link
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: history
                                                
                                                	
                                                	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Mismatch.Brief.DataIdx.History>`
                                                
                                                

                                                """

                                                _prefix = 'calvados_controllers'
                                                _revision = '2017-01-31'

                                                def __init__(self):
                                                    super(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Mismatch.Brief.DataIdx, self).__init__()

                                                    self.yang_name = "data_idx"
                                                    self.yang_parent_name = "brief"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['port_data_idx']
                                                    self._child_classes = OrderedDict([("history", ("history", Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Mismatch.Brief.DataIdx.History))])
                                                    self._leafs = OrderedDict([
                                                        ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                                        ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                                        ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                        ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                        ('near_end_cdr_ln', YLeaf(YType.str, 'near_end_cdr_ln')),
                                                        ('near_end_cxp_ch', YLeaf(YType.str, 'near_end_cxp_ch')),
                                                        ('far_end_cxp_ch', YLeaf(YType.str, 'far_end_cxp_ch')),
                                                        ('far_end_cdr_ln', YLeaf(YType.str, 'far_end_cdr_ln')),
                                                        ('neighbor_link', YLeaf(YType.str, 'neighbor_link')),
                                                    ])
                                                    self.port_data_idx = None
                                                    self.sfe_port = None
                                                    self.admin_state = None
                                                    self.oper_state = None
                                                    self.near_end_cdr_ln = None
                                                    self.near_end_cxp_ch = None
                                                    self.far_end_cxp_ch = None
                                                    self.far_end_cdr_ln = None
                                                    self.neighbor_link = None

                                                    self.history = YList(self)
                                                    self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Mismatch.Brief.DataIdx, [u'port_data_idx', u'sfe_port', u'admin_state', u'oper_state', u'near_end_cdr_ln', u'near_end_cxp_ch', u'far_end_cxp_ch', u'far_end_cdr_ln', u'neighbor_link'], name, value)


                                                class History(Entity):
                                                    """
                                                    
                                                    
                                                    .. attribute:: history_idx  (key)
                                                    
                                                    	
                                                    	**type**\: int
                                                    
                                                    	**range:** \-2147483648..2147483647
                                                    
                                                    .. attribute:: time_stamp
                                                    
                                                    	
                                                    	**type**\: str
                                                    
                                                    .. attribute:: admin_state
                                                    
                                                    	
                                                    	**type**\: str
                                                    
                                                    .. attribute:: oper_state
                                                    
                                                    	
                                                    	**type**\: str
                                                    
                                                    .. attribute:: error_state
                                                    
                                                    	
                                                    	**type**\: str
                                                    
                                                    

                                                    """

                                                    _prefix = 'calvados_controllers'
                                                    _revision = '2017-01-31'

                                                    def __init__(self):
                                                        super(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Mismatch.Brief.DataIdx.History, self).__init__()

                                                        self.yang_name = "history"
                                                        self.yang_parent_name = "data_idx"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = ['history_idx']
                                                        self._child_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                                            ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                                            ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                            ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                            ('error_state', YLeaf(YType.str, 'error_state')),
                                                        ])
                                                        self.history_idx = None
                                                        self.time_stamp = None
                                                        self.admin_state = None
                                                        self.oper_state = None
                                                        self.error_state = None
                                                        self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Mismatch.Brief.DataIdx.History, [u'history_idx', u'time_stamp', u'admin_state', u'oper_state', u'error_state'], name, value)


                                        class Detail(Entity):
                                            """
                                            
                                            
                                            .. attribute:: data_idx
                                            
                                            	
                                            	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Mismatch.Detail.DataIdx>`
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Mismatch.Detail, self).__init__()

                                                self.yang_name = "detail"
                                                self.yang_parent_name = "mismatch"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Mismatch.Detail.DataIdx))])
                                                self._leafs = OrderedDict()

                                                self.data_idx = YList(self)
                                                self._segment_path = lambda: "detail"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Mismatch.Detail, [], name, value)


                                            class DataIdx(Entity):
                                                """
                                                
                                                
                                                .. attribute:: port_data_idx  (key)
                                                
                                                	
                                                	**type**\: int
                                                
                                                	**range:** \-9223372036854775808..9223372036854775807
                                                
                                                .. attribute:: sfe_port
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: admin_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: oper_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: near_end_cdr_ln
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: near_end_cxp_ch
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: far_end_cxp_ch
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: far_end_cdr_ln
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_link
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: history
                                                
                                                	
                                                	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Mismatch.Detail.DataIdx.History>`
                                                
                                                

                                                """

                                                _prefix = 'calvados_controllers'
                                                _revision = '2017-01-31'

                                                def __init__(self):
                                                    super(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Mismatch.Detail.DataIdx, self).__init__()

                                                    self.yang_name = "data_idx"
                                                    self.yang_parent_name = "detail"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['port_data_idx']
                                                    self._child_classes = OrderedDict([("history", ("history", Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Mismatch.Detail.DataIdx.History))])
                                                    self._leafs = OrderedDict([
                                                        ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                                        ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                                        ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                        ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                        ('near_end_cdr_ln', YLeaf(YType.str, 'near_end_cdr_ln')),
                                                        ('near_end_cxp_ch', YLeaf(YType.str, 'near_end_cxp_ch')),
                                                        ('far_end_cxp_ch', YLeaf(YType.str, 'far_end_cxp_ch')),
                                                        ('far_end_cdr_ln', YLeaf(YType.str, 'far_end_cdr_ln')),
                                                        ('neighbor_link', YLeaf(YType.str, 'neighbor_link')),
                                                    ])
                                                    self.port_data_idx = None
                                                    self.sfe_port = None
                                                    self.admin_state = None
                                                    self.oper_state = None
                                                    self.near_end_cdr_ln = None
                                                    self.near_end_cxp_ch = None
                                                    self.far_end_cxp_ch = None
                                                    self.far_end_cdr_ln = None
                                                    self.neighbor_link = None

                                                    self.history = YList(self)
                                                    self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Mismatch.Detail.DataIdx, [u'port_data_idx', u'sfe_port', u'admin_state', u'oper_state', u'near_end_cdr_ln', u'near_end_cxp_ch', u'far_end_cxp_ch', u'far_end_cdr_ln', u'neighbor_link'], name, value)


                                                class History(Entity):
                                                    """
                                                    
                                                    
                                                    .. attribute:: history_idx  (key)
                                                    
                                                    	
                                                    	**type**\: int
                                                    
                                                    	**range:** \-2147483648..2147483647
                                                    
                                                    .. attribute:: time_stamp
                                                    
                                                    	
                                                    	**type**\: str
                                                    
                                                    .. attribute:: admin_state
                                                    
                                                    	
                                                    	**type**\: str
                                                    
                                                    .. attribute:: oper_state
                                                    
                                                    	
                                                    	**type**\: str
                                                    
                                                    .. attribute:: error_state
                                                    
                                                    	
                                                    	**type**\: str
                                                    
                                                    

                                                    """

                                                    _prefix = 'calvados_controllers'
                                                    _revision = '2017-01-31'

                                                    def __init__(self):
                                                        super(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Mismatch.Detail.DataIdx.History, self).__init__()

                                                        self.yang_name = "history"
                                                        self.yang_parent_name = "data_idx"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = ['history_idx']
                                                        self._child_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                                            ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                                            ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                            ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                            ('error_state', YLeaf(YType.str, 'error_state')),
                                                        ])
                                                        self.history_idx = None
                                                        self.time_stamp = None
                                                        self.admin_state = None
                                                        self.oper_state = None
                                                        self.error_state = None
                                                        self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.State.Mismatch.Detail.DataIdx.History, [u'history_idx', u'time_stamp', u'admin_state', u'oper_state', u'error_state'], name, value)


                                class Statistics(Entity):
                                    """
                                    
                                    
                                    .. attribute:: data_idx
                                    
                                    	
                                    	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.Statistics.DataIdx>`
                                    
                                    .. attribute:: brief
                                    
                                    	
                                    	**type**\:  :py:class:`Brief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.Statistics.Brief>`
                                    
                                    .. attribute:: detail
                                    
                                    	
                                    	**type**\:  :py:class:`Detail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.Statistics.Detail>`
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.Statistics, self).__init__()

                                        self.yang_name = "statistics"
                                        self.yang_parent_name = "rx"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.Statistics.DataIdx)), ("brief", ("brief", Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.Statistics.Brief)), ("detail", ("detail", Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.Statistics.Detail))])
                                        self._leafs = OrderedDict()

                                        self.brief = Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.Statistics.Brief()
                                        self.brief.parent = self
                                        self._children_name_map["brief"] = "brief"

                                        self.detail = Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.Statistics.Detail()
                                        self.detail.parent = self
                                        self._children_name_map["detail"] = "detail"

                                        self.data_idx = YList(self)
                                        self._segment_path = lambda: "statistics"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.Statistics, [], name, value)


                                    class DataIdx(Entity):
                                        """
                                        
                                        
                                        .. attribute:: port_data_idx  (key)
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** \-9223372036854775808..9223372036854775807
                                        
                                        .. attribute:: rack_num
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: sfe_port
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: tx_control_cells_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: tx_data_cell_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: tx_data_byte_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_crc_errors_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_lfec_fec_correctable_error
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_8b_10b_disparity_errors
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_control_cells_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_data_cell_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_data_byte_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_dropped_retransmitted_control
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: tx_asyn_fifo_rate
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_asyn_fifo_rate
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_lfec_fec_uncorrectable_errors
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_8b_10b_code_errors
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: is_link_error
                                        
                                        	
                                        	**type**\: bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: link_crc_error
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: link_size_error
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: link_mis_align_error
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: link_code_group_error
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: link_no_sig_lock_error
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: link_no_sig_accept_error
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: link_tokens_error
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_token_count
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.Statistics.DataIdx, self).__init__()

                                            self.yang_name = "data_idx"
                                            self.yang_parent_name = "statistics"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['port_data_idx']
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                                ('rack_num', YLeaf(YType.str, 'rack_num')),
                                                ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                                ('tx_control_cells_counter', YLeaf(YType.uint64, 'TX_Control_cells_counter')),
                                                ('tx_data_cell_counter', YLeaf(YType.uint64, 'TX_Data_cell_counter')),
                                                ('tx_data_byte_counter', YLeaf(YType.uint64, 'TX_Data_byte_counter')),
                                                ('rx_crc_errors_counter', YLeaf(YType.uint64, 'RX_CRC_errors_counter')),
                                                ('rx_lfec_fec_correctable_error', YLeaf(YType.uint64, 'RX_LFEC_FEC_correctable_error')),
                                                ('rx_8b_10b_disparity_errors', YLeaf(YType.uint64, 'RX_8b_10b_disparity_errors')),
                                                ('rx_control_cells_counter', YLeaf(YType.uint64, 'RX_Control_cells_counter')),
                                                ('rx_data_cell_counter', YLeaf(YType.uint64, 'RX_Data_cell_counter')),
                                                ('rx_data_byte_counter', YLeaf(YType.uint64, 'RX_Data_byte_counter')),
                                                ('rx_dropped_retransmitted_control', YLeaf(YType.uint64, 'RX_dropped_retransmitted_control')),
                                                ('tx_asyn_fifo_rate', YLeaf(YType.uint64, 'TX_Asyn_fifo_rate')),
                                                ('rx_asyn_fifo_rate', YLeaf(YType.uint64, 'RX_Asyn_fifo_rate')),
                                                ('rx_lfec_fec_uncorrectable_errors', YLeaf(YType.uint64, 'RX_LFEC_FEC_uncorrectable_errors')),
                                                ('rx_8b_10b_code_errors', YLeaf(YType.uint64, 'RX_8b_10b_code_errors')),
                                                ('is_link_error', YLeaf(YType.boolean, 'is_link_error')),
                                                ('link_crc_error', YLeaf(YType.uint32, 'link_crc_error')),
                                                ('link_size_error', YLeaf(YType.uint32, 'link_size_error')),
                                                ('link_mis_align_error', YLeaf(YType.uint32, 'link_mis_align_error')),
                                                ('link_code_group_error', YLeaf(YType.uint32, 'link_code_group_error')),
                                                ('link_no_sig_lock_error', YLeaf(YType.uint32, 'link_no_sig_lock_error')),
                                                ('link_no_sig_accept_error', YLeaf(YType.uint32, 'link_no_sig_accept_error')),
                                                ('link_tokens_error', YLeaf(YType.uint32, 'link_tokens_error')),
                                                ('error_token_count', YLeaf(YType.uint32, 'error_token_count')),
                                            ])
                                            self.port_data_idx = None
                                            self.rack_num = None
                                            self.sfe_port = None
                                            self.tx_control_cells_counter = None
                                            self.tx_data_cell_counter = None
                                            self.tx_data_byte_counter = None
                                            self.rx_crc_errors_counter = None
                                            self.rx_lfec_fec_correctable_error = None
                                            self.rx_8b_10b_disparity_errors = None
                                            self.rx_control_cells_counter = None
                                            self.rx_data_cell_counter = None
                                            self.rx_data_byte_counter = None
                                            self.rx_dropped_retransmitted_control = None
                                            self.tx_asyn_fifo_rate = None
                                            self.rx_asyn_fifo_rate = None
                                            self.rx_lfec_fec_uncorrectable_errors = None
                                            self.rx_8b_10b_code_errors = None
                                            self.is_link_error = None
                                            self.link_crc_error = None
                                            self.link_size_error = None
                                            self.link_mis_align_error = None
                                            self.link_code_group_error = None
                                            self.link_no_sig_lock_error = None
                                            self.link_no_sig_accept_error = None
                                            self.link_tokens_error = None
                                            self.error_token_count = None
                                            self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.Statistics.DataIdx, [u'port_data_idx', u'rack_num', u'sfe_port', u'tx_control_cells_counter', u'tx_data_cell_counter', u'tx_data_byte_counter', u'rx_crc_errors_counter', u'rx_lfec_fec_correctable_error', u'rx_8b_10b_disparity_errors', u'rx_control_cells_counter', u'rx_data_cell_counter', u'rx_data_byte_counter', u'rx_dropped_retransmitted_control', u'tx_asyn_fifo_rate', u'rx_asyn_fifo_rate', u'rx_lfec_fec_uncorrectable_errors', u'rx_8b_10b_code_errors', u'is_link_error', u'link_crc_error', u'link_size_error', u'link_mis_align_error', u'link_code_group_error', u'link_no_sig_lock_error', u'link_no_sig_accept_error', u'link_tokens_error', u'error_token_count'], name, value)


                                    class Brief(Entity):
                                        """
                                        
                                        
                                        .. attribute:: data_idx
                                        
                                        	
                                        	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.Statistics.Brief.DataIdx>`
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.Statistics.Brief, self).__init__()

                                            self.yang_name = "brief"
                                            self.yang_parent_name = "statistics"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.Statistics.Brief.DataIdx))])
                                            self._leafs = OrderedDict()

                                            self.data_idx = YList(self)
                                            self._segment_path = lambda: "brief"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.Statistics.Brief, [], name, value)


                                        class DataIdx(Entity):
                                            """
                                            
                                            
                                            .. attribute:: port_data_idx  (key)
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** \-9223372036854775808..9223372036854775807
                                            
                                            .. attribute:: rack_num
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: sfe_port
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: tx_control_cells_counter
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..18446744073709551615
                                            
                                            .. attribute:: tx_data_cell_counter
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..18446744073709551615
                                            
                                            .. attribute:: tx_data_byte_counter
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..18446744073709551615
                                            
                                            .. attribute:: rx_crc_errors_counter
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..18446744073709551615
                                            
                                            .. attribute:: rx_lfec_fec_correctable_error
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..18446744073709551615
                                            
                                            .. attribute:: rx_8b_10b_disparity_errors
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..18446744073709551615
                                            
                                            .. attribute:: rx_control_cells_counter
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..18446744073709551615
                                            
                                            .. attribute:: rx_data_cell_counter
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..18446744073709551615
                                            
                                            .. attribute:: rx_data_byte_counter
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..18446744073709551615
                                            
                                            .. attribute:: rx_dropped_retransmitted_control
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..18446744073709551615
                                            
                                            .. attribute:: tx_asyn_fifo_rate
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..18446744073709551615
                                            
                                            .. attribute:: rx_asyn_fifo_rate
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..18446744073709551615
                                            
                                            .. attribute:: rx_lfec_fec_uncorrectable_errors
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..18446744073709551615
                                            
                                            .. attribute:: rx_8b_10b_code_errors
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..18446744073709551615
                                            
                                            .. attribute:: is_link_error
                                            
                                            	
                                            	**type**\: bool
                                            
                                            	**default value**\: false
                                            
                                            .. attribute:: link_crc_error
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: link_size_error
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: link_mis_align_error
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: link_code_group_error
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: link_no_sig_lock_error
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: link_no_sig_accept_error
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: link_tokens_error
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: error_token_count
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.Statistics.Brief.DataIdx, self).__init__()

                                                self.yang_name = "data_idx"
                                                self.yang_parent_name = "brief"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['port_data_idx']
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                                    ('rack_num', YLeaf(YType.str, 'rack_num')),
                                                    ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                                    ('tx_control_cells_counter', YLeaf(YType.uint64, 'TX_Control_cells_counter')),
                                                    ('tx_data_cell_counter', YLeaf(YType.uint64, 'TX_Data_cell_counter')),
                                                    ('tx_data_byte_counter', YLeaf(YType.uint64, 'TX_Data_byte_counter')),
                                                    ('rx_crc_errors_counter', YLeaf(YType.uint64, 'RX_CRC_errors_counter')),
                                                    ('rx_lfec_fec_correctable_error', YLeaf(YType.uint64, 'RX_LFEC_FEC_correctable_error')),
                                                    ('rx_8b_10b_disparity_errors', YLeaf(YType.uint64, 'RX_8b_10b_disparity_errors')),
                                                    ('rx_control_cells_counter', YLeaf(YType.uint64, 'RX_Control_cells_counter')),
                                                    ('rx_data_cell_counter', YLeaf(YType.uint64, 'RX_Data_cell_counter')),
                                                    ('rx_data_byte_counter', YLeaf(YType.uint64, 'RX_Data_byte_counter')),
                                                    ('rx_dropped_retransmitted_control', YLeaf(YType.uint64, 'RX_dropped_retransmitted_control')),
                                                    ('tx_asyn_fifo_rate', YLeaf(YType.uint64, 'TX_Asyn_fifo_rate')),
                                                    ('rx_asyn_fifo_rate', YLeaf(YType.uint64, 'RX_Asyn_fifo_rate')),
                                                    ('rx_lfec_fec_uncorrectable_errors', YLeaf(YType.uint64, 'RX_LFEC_FEC_uncorrectable_errors')),
                                                    ('rx_8b_10b_code_errors', YLeaf(YType.uint64, 'RX_8b_10b_code_errors')),
                                                    ('is_link_error', YLeaf(YType.boolean, 'is_link_error')),
                                                    ('link_crc_error', YLeaf(YType.uint32, 'link_crc_error')),
                                                    ('link_size_error', YLeaf(YType.uint32, 'link_size_error')),
                                                    ('link_mis_align_error', YLeaf(YType.uint32, 'link_mis_align_error')),
                                                    ('link_code_group_error', YLeaf(YType.uint32, 'link_code_group_error')),
                                                    ('link_no_sig_lock_error', YLeaf(YType.uint32, 'link_no_sig_lock_error')),
                                                    ('link_no_sig_accept_error', YLeaf(YType.uint32, 'link_no_sig_accept_error')),
                                                    ('link_tokens_error', YLeaf(YType.uint32, 'link_tokens_error')),
                                                    ('error_token_count', YLeaf(YType.uint32, 'error_token_count')),
                                                ])
                                                self.port_data_idx = None
                                                self.rack_num = None
                                                self.sfe_port = None
                                                self.tx_control_cells_counter = None
                                                self.tx_data_cell_counter = None
                                                self.tx_data_byte_counter = None
                                                self.rx_crc_errors_counter = None
                                                self.rx_lfec_fec_correctable_error = None
                                                self.rx_8b_10b_disparity_errors = None
                                                self.rx_control_cells_counter = None
                                                self.rx_data_cell_counter = None
                                                self.rx_data_byte_counter = None
                                                self.rx_dropped_retransmitted_control = None
                                                self.tx_asyn_fifo_rate = None
                                                self.rx_asyn_fifo_rate = None
                                                self.rx_lfec_fec_uncorrectable_errors = None
                                                self.rx_8b_10b_code_errors = None
                                                self.is_link_error = None
                                                self.link_crc_error = None
                                                self.link_size_error = None
                                                self.link_mis_align_error = None
                                                self.link_code_group_error = None
                                                self.link_no_sig_lock_error = None
                                                self.link_no_sig_accept_error = None
                                                self.link_tokens_error = None
                                                self.error_token_count = None
                                                self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.Statistics.Brief.DataIdx, [u'port_data_idx', u'rack_num', u'sfe_port', u'tx_control_cells_counter', u'tx_data_cell_counter', u'tx_data_byte_counter', u'rx_crc_errors_counter', u'rx_lfec_fec_correctable_error', u'rx_8b_10b_disparity_errors', u'rx_control_cells_counter', u'rx_data_cell_counter', u'rx_data_byte_counter', u'rx_dropped_retransmitted_control', u'tx_asyn_fifo_rate', u'rx_asyn_fifo_rate', u'rx_lfec_fec_uncorrectable_errors', u'rx_8b_10b_code_errors', u'is_link_error', u'link_crc_error', u'link_size_error', u'link_mis_align_error', u'link_code_group_error', u'link_no_sig_lock_error', u'link_no_sig_accept_error', u'link_tokens_error', u'error_token_count'], name, value)


                                    class Detail(Entity):
                                        """
                                        
                                        
                                        .. attribute:: data_idx
                                        
                                        	
                                        	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.Statistics.Detail.DataIdx>`
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.Statistics.Detail, self).__init__()

                                            self.yang_name = "detail"
                                            self.yang_parent_name = "statistics"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.Statistics.Detail.DataIdx))])
                                            self._leafs = OrderedDict()

                                            self.data_idx = YList(self)
                                            self._segment_path = lambda: "detail"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.Statistics.Detail, [], name, value)


                                        class DataIdx(Entity):
                                            """
                                            
                                            
                                            .. attribute:: port_data_idx  (key)
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** \-9223372036854775808..9223372036854775807
                                            
                                            .. attribute:: rack_num
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: sfe_port
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: tx_control_cells_counter
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..18446744073709551615
                                            
                                            .. attribute:: tx_data_cell_counter
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..18446744073709551615
                                            
                                            .. attribute:: tx_data_byte_counter
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..18446744073709551615
                                            
                                            .. attribute:: rx_crc_errors_counter
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..18446744073709551615
                                            
                                            .. attribute:: rx_lfec_fec_correctable_error
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..18446744073709551615
                                            
                                            .. attribute:: rx_8b_10b_disparity_errors
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..18446744073709551615
                                            
                                            .. attribute:: rx_control_cells_counter
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..18446744073709551615
                                            
                                            .. attribute:: rx_data_cell_counter
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..18446744073709551615
                                            
                                            .. attribute:: rx_data_byte_counter
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..18446744073709551615
                                            
                                            .. attribute:: rx_dropped_retransmitted_control
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..18446744073709551615
                                            
                                            .. attribute:: tx_asyn_fifo_rate
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..18446744073709551615
                                            
                                            .. attribute:: rx_asyn_fifo_rate
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..18446744073709551615
                                            
                                            .. attribute:: rx_lfec_fec_uncorrectable_errors
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..18446744073709551615
                                            
                                            .. attribute:: rx_8b_10b_code_errors
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..18446744073709551615
                                            
                                            .. attribute:: is_link_error
                                            
                                            	
                                            	**type**\: bool
                                            
                                            	**default value**\: false
                                            
                                            .. attribute:: link_crc_error
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: link_size_error
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: link_mis_align_error
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: link_code_group_error
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: link_no_sig_lock_error
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: link_no_sig_accept_error
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: link_tokens_error
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: error_token_count
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.Statistics.Detail.DataIdx, self).__init__()

                                                self.yang_name = "data_idx"
                                                self.yang_parent_name = "detail"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['port_data_idx']
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                                    ('rack_num', YLeaf(YType.str, 'rack_num')),
                                                    ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                                    ('tx_control_cells_counter', YLeaf(YType.uint64, 'TX_Control_cells_counter')),
                                                    ('tx_data_cell_counter', YLeaf(YType.uint64, 'TX_Data_cell_counter')),
                                                    ('tx_data_byte_counter', YLeaf(YType.uint64, 'TX_Data_byte_counter')),
                                                    ('rx_crc_errors_counter', YLeaf(YType.uint64, 'RX_CRC_errors_counter')),
                                                    ('rx_lfec_fec_correctable_error', YLeaf(YType.uint64, 'RX_LFEC_FEC_correctable_error')),
                                                    ('rx_8b_10b_disparity_errors', YLeaf(YType.uint64, 'RX_8b_10b_disparity_errors')),
                                                    ('rx_control_cells_counter', YLeaf(YType.uint64, 'RX_Control_cells_counter')),
                                                    ('rx_data_cell_counter', YLeaf(YType.uint64, 'RX_Data_cell_counter')),
                                                    ('rx_data_byte_counter', YLeaf(YType.uint64, 'RX_Data_byte_counter')),
                                                    ('rx_dropped_retransmitted_control', YLeaf(YType.uint64, 'RX_dropped_retransmitted_control')),
                                                    ('tx_asyn_fifo_rate', YLeaf(YType.uint64, 'TX_Asyn_fifo_rate')),
                                                    ('rx_asyn_fifo_rate', YLeaf(YType.uint64, 'RX_Asyn_fifo_rate')),
                                                    ('rx_lfec_fec_uncorrectable_errors', YLeaf(YType.uint64, 'RX_LFEC_FEC_uncorrectable_errors')),
                                                    ('rx_8b_10b_code_errors', YLeaf(YType.uint64, 'RX_8b_10b_code_errors')),
                                                    ('is_link_error', YLeaf(YType.boolean, 'is_link_error')),
                                                    ('link_crc_error', YLeaf(YType.uint32, 'link_crc_error')),
                                                    ('link_size_error', YLeaf(YType.uint32, 'link_size_error')),
                                                    ('link_mis_align_error', YLeaf(YType.uint32, 'link_mis_align_error')),
                                                    ('link_code_group_error', YLeaf(YType.uint32, 'link_code_group_error')),
                                                    ('link_no_sig_lock_error', YLeaf(YType.uint32, 'link_no_sig_lock_error')),
                                                    ('link_no_sig_accept_error', YLeaf(YType.uint32, 'link_no_sig_accept_error')),
                                                    ('link_tokens_error', YLeaf(YType.uint32, 'link_tokens_error')),
                                                    ('error_token_count', YLeaf(YType.uint32, 'error_token_count')),
                                                ])
                                                self.port_data_idx = None
                                                self.rack_num = None
                                                self.sfe_port = None
                                                self.tx_control_cells_counter = None
                                                self.tx_data_cell_counter = None
                                                self.tx_data_byte_counter = None
                                                self.rx_crc_errors_counter = None
                                                self.rx_lfec_fec_correctable_error = None
                                                self.rx_8b_10b_disparity_errors = None
                                                self.rx_control_cells_counter = None
                                                self.rx_data_cell_counter = None
                                                self.rx_data_byte_counter = None
                                                self.rx_dropped_retransmitted_control = None
                                                self.tx_asyn_fifo_rate = None
                                                self.rx_asyn_fifo_rate = None
                                                self.rx_lfec_fec_uncorrectable_errors = None
                                                self.rx_8b_10b_code_errors = None
                                                self.is_link_error = None
                                                self.link_crc_error = None
                                                self.link_size_error = None
                                                self.link_mis_align_error = None
                                                self.link_code_group_error = None
                                                self.link_no_sig_lock_error = None
                                                self.link_no_sig_accept_error = None
                                                self.link_tokens_error = None
                                                self.error_token_count = None
                                                self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Rx.Statistics.Detail.DataIdx, [u'port_data_idx', u'rack_num', u'sfe_port', u'tx_control_cells_counter', u'tx_data_cell_counter', u'tx_data_byte_counter', u'rx_crc_errors_counter', u'rx_lfec_fec_correctable_error', u'rx_8b_10b_disparity_errors', u'rx_control_cells_counter', u'rx_data_cell_counter', u'rx_data_byte_counter', u'rx_dropped_retransmitted_control', u'tx_asyn_fifo_rate', u'rx_asyn_fifo_rate', u'rx_lfec_fec_uncorrectable_errors', u'rx_8b_10b_code_errors', u'is_link_error', u'link_crc_error', u'link_size_error', u'link_mis_align_error', u'link_code_group_error', u'link_no_sig_lock_error', u'link_no_sig_accept_error', u'link_tokens_error', u'error_token_count'], name, value)


                            class Tx(Entity):
                                """
                                Tx link option
                                
                                .. attribute:: data_idx
                                
                                	
                                	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.DataIdx>`
                                
                                .. attribute:: brief
                                
                                	
                                	**type**\:  :py:class:`Brief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.Brief>`
                                
                                .. attribute:: detail
                                
                                	
                                	**type**\:  :py:class:`Detail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.Detail>`
                                
                                .. attribute:: state
                                
                                	
                                	**type**\:  :py:class:`State <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State>`
                                
                                .. attribute:: statistics
                                
                                	
                                	**type**\:  :py:class:`Statistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.Statistics>`
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx, self).__init__()

                                    self.yang_name = "tx"
                                    self.yang_parent_name = "location"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.DataIdx)), ("brief", ("brief", Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.Brief)), ("detail", ("detail", Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.Detail)), ("state", ("state", Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State)), ("statistics", ("statistics", Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.Statistics))])
                                    self._leafs = OrderedDict()

                                    self.brief = Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.Brief()
                                    self.brief.parent = self
                                    self._children_name_map["brief"] = "brief"

                                    self.detail = Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.Detail()
                                    self.detail.parent = self
                                    self._children_name_map["detail"] = "detail"

                                    self.state = Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State()
                                    self.state.parent = self
                                    self._children_name_map["state"] = "state"

                                    self.statistics = Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.Statistics()
                                    self.statistics.parent = self
                                    self._children_name_map["statistics"] = "statistics"

                                    self.data_idx = YList(self)
                                    self._segment_path = lambda: "tx"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx, [], name, value)


                                class DataIdx(Entity):
                                    """
                                    
                                    
                                    .. attribute:: port_data_idx  (key)
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** \-9223372036854775808..9223372036854775807
                                    
                                    .. attribute:: sfe_port
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: admin_state
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: oper_state
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: near_end_cdr_ln
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: near_end_cxp_ch
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: far_end_cxp_ch
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: far_end_cdr_ln
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: neighbor_link
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: history
                                    
                                    	
                                    	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.DataIdx.History>`
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.DataIdx, self).__init__()

                                        self.yang_name = "data_idx"
                                        self.yang_parent_name = "tx"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['port_data_idx']
                                        self._child_classes = OrderedDict([("history", ("history", Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.DataIdx.History))])
                                        self._leafs = OrderedDict([
                                            ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                            ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                            ('admin_state', YLeaf(YType.str, 'admin-state')),
                                            ('oper_state', YLeaf(YType.str, 'oper_state')),
                                            ('near_end_cdr_ln', YLeaf(YType.str, 'near_end_cdr_ln')),
                                            ('near_end_cxp_ch', YLeaf(YType.str, 'near_end_cxp_ch')),
                                            ('far_end_cxp_ch', YLeaf(YType.str, 'far_end_cxp_ch')),
                                            ('far_end_cdr_ln', YLeaf(YType.str, 'far_end_cdr_ln')),
                                            ('neighbor_link', YLeaf(YType.str, 'neighbor_link')),
                                        ])
                                        self.port_data_idx = None
                                        self.sfe_port = None
                                        self.admin_state = None
                                        self.oper_state = None
                                        self.near_end_cdr_ln = None
                                        self.near_end_cxp_ch = None
                                        self.far_end_cxp_ch = None
                                        self.far_end_cdr_ln = None
                                        self.neighbor_link = None

                                        self.history = YList(self)
                                        self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.DataIdx, [u'port_data_idx', u'sfe_port', u'admin_state', u'oper_state', u'near_end_cdr_ln', u'near_end_cxp_ch', u'far_end_cxp_ch', u'far_end_cdr_ln', u'neighbor_link'], name, value)


                                    class History(Entity):
                                        """
                                        
                                        
                                        .. attribute:: history_idx  (key)
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** \-2147483648..2147483647
                                        
                                        .. attribute:: time_stamp
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: admin_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: oper_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: error_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.DataIdx.History, self).__init__()

                                            self.yang_name = "history"
                                            self.yang_parent_name = "data_idx"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['history_idx']
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                                ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                                ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                ('error_state', YLeaf(YType.str, 'error_state')),
                                            ])
                                            self.history_idx = None
                                            self.time_stamp = None
                                            self.admin_state = None
                                            self.oper_state = None
                                            self.error_state = None
                                            self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.DataIdx.History, [u'history_idx', u'time_stamp', u'admin_state', u'oper_state', u'error_state'], name, value)


                                class Brief(Entity):
                                    """
                                    
                                    
                                    .. attribute:: data_idx
                                    
                                    	
                                    	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.Brief.DataIdx>`
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.Brief, self).__init__()

                                        self.yang_name = "brief"
                                        self.yang_parent_name = "tx"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.Brief.DataIdx))])
                                        self._leafs = OrderedDict()

                                        self.data_idx = YList(self)
                                        self._segment_path = lambda: "brief"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.Brief, [], name, value)


                                    class DataIdx(Entity):
                                        """
                                        
                                        
                                        .. attribute:: port_data_idx  (key)
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** \-9223372036854775808..9223372036854775807
                                        
                                        .. attribute:: sfe_port
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: admin_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: oper_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: near_end_cdr_ln
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: near_end_cxp_ch
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: far_end_cxp_ch
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: far_end_cdr_ln
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: neighbor_link
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: history
                                        
                                        	
                                        	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.Brief.DataIdx.History>`
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.Brief.DataIdx, self).__init__()

                                            self.yang_name = "data_idx"
                                            self.yang_parent_name = "brief"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['port_data_idx']
                                            self._child_classes = OrderedDict([("history", ("history", Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.Brief.DataIdx.History))])
                                            self._leafs = OrderedDict([
                                                ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                                ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                                ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                ('near_end_cdr_ln', YLeaf(YType.str, 'near_end_cdr_ln')),
                                                ('near_end_cxp_ch', YLeaf(YType.str, 'near_end_cxp_ch')),
                                                ('far_end_cxp_ch', YLeaf(YType.str, 'far_end_cxp_ch')),
                                                ('far_end_cdr_ln', YLeaf(YType.str, 'far_end_cdr_ln')),
                                                ('neighbor_link', YLeaf(YType.str, 'neighbor_link')),
                                            ])
                                            self.port_data_idx = None
                                            self.sfe_port = None
                                            self.admin_state = None
                                            self.oper_state = None
                                            self.near_end_cdr_ln = None
                                            self.near_end_cxp_ch = None
                                            self.far_end_cxp_ch = None
                                            self.far_end_cdr_ln = None
                                            self.neighbor_link = None

                                            self.history = YList(self)
                                            self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.Brief.DataIdx, [u'port_data_idx', u'sfe_port', u'admin_state', u'oper_state', u'near_end_cdr_ln', u'near_end_cxp_ch', u'far_end_cxp_ch', u'far_end_cdr_ln', u'neighbor_link'], name, value)


                                        class History(Entity):
                                            """
                                            
                                            
                                            .. attribute:: history_idx  (key)
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: time_stamp
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: admin_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: oper_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: error_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.Brief.DataIdx.History, self).__init__()

                                                self.yang_name = "history"
                                                self.yang_parent_name = "data_idx"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['history_idx']
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                                    ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                                    ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                    ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                    ('error_state', YLeaf(YType.str, 'error_state')),
                                                ])
                                                self.history_idx = None
                                                self.time_stamp = None
                                                self.admin_state = None
                                                self.oper_state = None
                                                self.error_state = None
                                                self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.Brief.DataIdx.History, [u'history_idx', u'time_stamp', u'admin_state', u'oper_state', u'error_state'], name, value)


                                class Detail(Entity):
                                    """
                                    
                                    
                                    .. attribute:: data_idx
                                    
                                    	
                                    	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.Detail.DataIdx>`
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.Detail, self).__init__()

                                        self.yang_name = "detail"
                                        self.yang_parent_name = "tx"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.Detail.DataIdx))])
                                        self._leafs = OrderedDict()

                                        self.data_idx = YList(self)
                                        self._segment_path = lambda: "detail"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.Detail, [], name, value)


                                    class DataIdx(Entity):
                                        """
                                        
                                        
                                        .. attribute:: port_data_idx  (key)
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** \-9223372036854775808..9223372036854775807
                                        
                                        .. attribute:: sfe_port
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: admin_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: oper_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: near_end_cdr_ln
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: near_end_cxp_ch
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: far_end_cxp_ch
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: far_end_cdr_ln
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: neighbor_link
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: history
                                        
                                        	
                                        	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.Detail.DataIdx.History>`
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.Detail.DataIdx, self).__init__()

                                            self.yang_name = "data_idx"
                                            self.yang_parent_name = "detail"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['port_data_idx']
                                            self._child_classes = OrderedDict([("history", ("history", Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.Detail.DataIdx.History))])
                                            self._leafs = OrderedDict([
                                                ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                                ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                                ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                ('near_end_cdr_ln', YLeaf(YType.str, 'near_end_cdr_ln')),
                                                ('near_end_cxp_ch', YLeaf(YType.str, 'near_end_cxp_ch')),
                                                ('far_end_cxp_ch', YLeaf(YType.str, 'far_end_cxp_ch')),
                                                ('far_end_cdr_ln', YLeaf(YType.str, 'far_end_cdr_ln')),
                                                ('neighbor_link', YLeaf(YType.str, 'neighbor_link')),
                                            ])
                                            self.port_data_idx = None
                                            self.sfe_port = None
                                            self.admin_state = None
                                            self.oper_state = None
                                            self.near_end_cdr_ln = None
                                            self.near_end_cxp_ch = None
                                            self.far_end_cxp_ch = None
                                            self.far_end_cdr_ln = None
                                            self.neighbor_link = None

                                            self.history = YList(self)
                                            self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.Detail.DataIdx, [u'port_data_idx', u'sfe_port', u'admin_state', u'oper_state', u'near_end_cdr_ln', u'near_end_cxp_ch', u'far_end_cxp_ch', u'far_end_cdr_ln', u'neighbor_link'], name, value)


                                        class History(Entity):
                                            """
                                            
                                            
                                            .. attribute:: history_idx  (key)
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: time_stamp
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: admin_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: oper_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: error_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.Detail.DataIdx.History, self).__init__()

                                                self.yang_name = "history"
                                                self.yang_parent_name = "data_idx"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['history_idx']
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                                    ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                                    ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                    ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                    ('error_state', YLeaf(YType.str, 'error_state')),
                                                ])
                                                self.history_idx = None
                                                self.time_stamp = None
                                                self.admin_state = None
                                                self.oper_state = None
                                                self.error_state = None
                                                self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.Detail.DataIdx.History, [u'history_idx', u'time_stamp', u'admin_state', u'oper_state', u'error_state'], name, value)


                                class State(Entity):
                                    """
                                    
                                    
                                    .. attribute:: up
                                    
                                    	
                                    	**type**\:  :py:class:`Up <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Up>`
                                    
                                    .. attribute:: down
                                    
                                    	
                                    	**type**\:  :py:class:`Down <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Down>`
                                    
                                    .. attribute:: er
                                    
                                    	
                                    	**type**\:  :py:class:`Er <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Er>`
                                    
                                    .. attribute:: mismatch
                                    
                                    	
                                    	**type**\:  :py:class:`Mismatch <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Mismatch>`
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State, self).__init__()

                                        self.yang_name = "state"
                                        self.yang_parent_name = "tx"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("up", ("up", Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Up)), ("down", ("down", Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Down)), ("er", ("er", Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Er)), ("mismatch", ("mismatch", Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Mismatch))])
                                        self._leafs = OrderedDict()

                                        self.up = Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Up()
                                        self.up.parent = self
                                        self._children_name_map["up"] = "up"

                                        self.down = Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Down()
                                        self.down.parent = self
                                        self._children_name_map["down"] = "down"

                                        self.er = Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Er()
                                        self.er.parent = self
                                        self._children_name_map["er"] = "er"

                                        self.mismatch = Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Mismatch()
                                        self.mismatch.parent = self
                                        self._children_name_map["mismatch"] = "mismatch"
                                        self._segment_path = lambda: "state"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State, [], name, value)


                                    class Up(Entity):
                                        """
                                        
                                        
                                        .. attribute:: data_idx
                                        
                                        	
                                        	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Up.DataIdx>`
                                        
                                        .. attribute:: brief
                                        
                                        	
                                        	**type**\:  :py:class:`Brief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Up.Brief>`
                                        
                                        .. attribute:: detail
                                        
                                        	
                                        	**type**\:  :py:class:`Detail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Up.Detail>`
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Up, self).__init__()

                                            self.yang_name = "up"
                                            self.yang_parent_name = "state"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Up.DataIdx)), ("brief", ("brief", Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Up.Brief)), ("detail", ("detail", Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Up.Detail))])
                                            self._leafs = OrderedDict()

                                            self.brief = Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Up.Brief()
                                            self.brief.parent = self
                                            self._children_name_map["brief"] = "brief"

                                            self.detail = Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Up.Detail()
                                            self.detail.parent = self
                                            self._children_name_map["detail"] = "detail"

                                            self.data_idx = YList(self)
                                            self._segment_path = lambda: "up"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Up, [], name, value)


                                        class DataIdx(Entity):
                                            """
                                            
                                            
                                            .. attribute:: port_data_idx  (key)
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** \-9223372036854775808..9223372036854775807
                                            
                                            .. attribute:: sfe_port
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: admin_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: oper_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: near_end_cdr_ln
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: near_end_cxp_ch
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: far_end_cxp_ch
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: far_end_cdr_ln
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: neighbor_link
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: history
                                            
                                            	
                                            	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Up.DataIdx.History>`
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Up.DataIdx, self).__init__()

                                                self.yang_name = "data_idx"
                                                self.yang_parent_name = "up"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['port_data_idx']
                                                self._child_classes = OrderedDict([("history", ("history", Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Up.DataIdx.History))])
                                                self._leafs = OrderedDict([
                                                    ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                                    ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                                    ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                    ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                    ('near_end_cdr_ln', YLeaf(YType.str, 'near_end_cdr_ln')),
                                                    ('near_end_cxp_ch', YLeaf(YType.str, 'near_end_cxp_ch')),
                                                    ('far_end_cxp_ch', YLeaf(YType.str, 'far_end_cxp_ch')),
                                                    ('far_end_cdr_ln', YLeaf(YType.str, 'far_end_cdr_ln')),
                                                    ('neighbor_link', YLeaf(YType.str, 'neighbor_link')),
                                                ])
                                                self.port_data_idx = None
                                                self.sfe_port = None
                                                self.admin_state = None
                                                self.oper_state = None
                                                self.near_end_cdr_ln = None
                                                self.near_end_cxp_ch = None
                                                self.far_end_cxp_ch = None
                                                self.far_end_cdr_ln = None
                                                self.neighbor_link = None

                                                self.history = YList(self)
                                                self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Up.DataIdx, [u'port_data_idx', u'sfe_port', u'admin_state', u'oper_state', u'near_end_cdr_ln', u'near_end_cxp_ch', u'far_end_cxp_ch', u'far_end_cdr_ln', u'neighbor_link'], name, value)


                                            class History(Entity):
                                                """
                                                
                                                
                                                .. attribute:: history_idx  (key)
                                                
                                                	
                                                	**type**\: int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                .. attribute:: time_stamp
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: admin_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: oper_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: error_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                

                                                """

                                                _prefix = 'calvados_controllers'
                                                _revision = '2017-01-31'

                                                def __init__(self):
                                                    super(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Up.DataIdx.History, self).__init__()

                                                    self.yang_name = "history"
                                                    self.yang_parent_name = "data_idx"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['history_idx']
                                                    self._child_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                                        ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                                        ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                        ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                        ('error_state', YLeaf(YType.str, 'error_state')),
                                                    ])
                                                    self.history_idx = None
                                                    self.time_stamp = None
                                                    self.admin_state = None
                                                    self.oper_state = None
                                                    self.error_state = None
                                                    self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Up.DataIdx.History, [u'history_idx', u'time_stamp', u'admin_state', u'oper_state', u'error_state'], name, value)


                                        class Brief(Entity):
                                            """
                                            
                                            
                                            .. attribute:: data_idx
                                            
                                            	
                                            	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Up.Brief.DataIdx>`
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Up.Brief, self).__init__()

                                                self.yang_name = "brief"
                                                self.yang_parent_name = "up"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Up.Brief.DataIdx))])
                                                self._leafs = OrderedDict()

                                                self.data_idx = YList(self)
                                                self._segment_path = lambda: "brief"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Up.Brief, [], name, value)


                                            class DataIdx(Entity):
                                                """
                                                
                                                
                                                .. attribute:: port_data_idx  (key)
                                                
                                                	
                                                	**type**\: int
                                                
                                                	**range:** \-9223372036854775808..9223372036854775807
                                                
                                                .. attribute:: sfe_port
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: admin_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: oper_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: near_end_cdr_ln
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: near_end_cxp_ch
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: far_end_cxp_ch
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: far_end_cdr_ln
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_link
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: history
                                                
                                                	
                                                	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Up.Brief.DataIdx.History>`
                                                
                                                

                                                """

                                                _prefix = 'calvados_controllers'
                                                _revision = '2017-01-31'

                                                def __init__(self):
                                                    super(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Up.Brief.DataIdx, self).__init__()

                                                    self.yang_name = "data_idx"
                                                    self.yang_parent_name = "brief"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['port_data_idx']
                                                    self._child_classes = OrderedDict([("history", ("history", Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Up.Brief.DataIdx.History))])
                                                    self._leafs = OrderedDict([
                                                        ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                                        ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                                        ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                        ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                        ('near_end_cdr_ln', YLeaf(YType.str, 'near_end_cdr_ln')),
                                                        ('near_end_cxp_ch', YLeaf(YType.str, 'near_end_cxp_ch')),
                                                        ('far_end_cxp_ch', YLeaf(YType.str, 'far_end_cxp_ch')),
                                                        ('far_end_cdr_ln', YLeaf(YType.str, 'far_end_cdr_ln')),
                                                        ('neighbor_link', YLeaf(YType.str, 'neighbor_link')),
                                                    ])
                                                    self.port_data_idx = None
                                                    self.sfe_port = None
                                                    self.admin_state = None
                                                    self.oper_state = None
                                                    self.near_end_cdr_ln = None
                                                    self.near_end_cxp_ch = None
                                                    self.far_end_cxp_ch = None
                                                    self.far_end_cdr_ln = None
                                                    self.neighbor_link = None

                                                    self.history = YList(self)
                                                    self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Up.Brief.DataIdx, [u'port_data_idx', u'sfe_port', u'admin_state', u'oper_state', u'near_end_cdr_ln', u'near_end_cxp_ch', u'far_end_cxp_ch', u'far_end_cdr_ln', u'neighbor_link'], name, value)


                                                class History(Entity):
                                                    """
                                                    
                                                    
                                                    .. attribute:: history_idx  (key)
                                                    
                                                    	
                                                    	**type**\: int
                                                    
                                                    	**range:** \-2147483648..2147483647
                                                    
                                                    .. attribute:: time_stamp
                                                    
                                                    	
                                                    	**type**\: str
                                                    
                                                    .. attribute:: admin_state
                                                    
                                                    	
                                                    	**type**\: str
                                                    
                                                    .. attribute:: oper_state
                                                    
                                                    	
                                                    	**type**\: str
                                                    
                                                    .. attribute:: error_state
                                                    
                                                    	
                                                    	**type**\: str
                                                    
                                                    

                                                    """

                                                    _prefix = 'calvados_controllers'
                                                    _revision = '2017-01-31'

                                                    def __init__(self):
                                                        super(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Up.Brief.DataIdx.History, self).__init__()

                                                        self.yang_name = "history"
                                                        self.yang_parent_name = "data_idx"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = ['history_idx']
                                                        self._child_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                                            ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                                            ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                            ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                            ('error_state', YLeaf(YType.str, 'error_state')),
                                                        ])
                                                        self.history_idx = None
                                                        self.time_stamp = None
                                                        self.admin_state = None
                                                        self.oper_state = None
                                                        self.error_state = None
                                                        self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Up.Brief.DataIdx.History, [u'history_idx', u'time_stamp', u'admin_state', u'oper_state', u'error_state'], name, value)


                                        class Detail(Entity):
                                            """
                                            
                                            
                                            .. attribute:: data_idx
                                            
                                            	
                                            	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Up.Detail.DataIdx>`
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Up.Detail, self).__init__()

                                                self.yang_name = "detail"
                                                self.yang_parent_name = "up"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Up.Detail.DataIdx))])
                                                self._leafs = OrderedDict()

                                                self.data_idx = YList(self)
                                                self._segment_path = lambda: "detail"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Up.Detail, [], name, value)


                                            class DataIdx(Entity):
                                                """
                                                
                                                
                                                .. attribute:: port_data_idx  (key)
                                                
                                                	
                                                	**type**\: int
                                                
                                                	**range:** \-9223372036854775808..9223372036854775807
                                                
                                                .. attribute:: sfe_port
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: admin_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: oper_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: near_end_cdr_ln
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: near_end_cxp_ch
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: far_end_cxp_ch
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: far_end_cdr_ln
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_link
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: history
                                                
                                                	
                                                	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Up.Detail.DataIdx.History>`
                                                
                                                

                                                """

                                                _prefix = 'calvados_controllers'
                                                _revision = '2017-01-31'

                                                def __init__(self):
                                                    super(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Up.Detail.DataIdx, self).__init__()

                                                    self.yang_name = "data_idx"
                                                    self.yang_parent_name = "detail"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['port_data_idx']
                                                    self._child_classes = OrderedDict([("history", ("history", Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Up.Detail.DataIdx.History))])
                                                    self._leafs = OrderedDict([
                                                        ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                                        ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                                        ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                        ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                        ('near_end_cdr_ln', YLeaf(YType.str, 'near_end_cdr_ln')),
                                                        ('near_end_cxp_ch', YLeaf(YType.str, 'near_end_cxp_ch')),
                                                        ('far_end_cxp_ch', YLeaf(YType.str, 'far_end_cxp_ch')),
                                                        ('far_end_cdr_ln', YLeaf(YType.str, 'far_end_cdr_ln')),
                                                        ('neighbor_link', YLeaf(YType.str, 'neighbor_link')),
                                                    ])
                                                    self.port_data_idx = None
                                                    self.sfe_port = None
                                                    self.admin_state = None
                                                    self.oper_state = None
                                                    self.near_end_cdr_ln = None
                                                    self.near_end_cxp_ch = None
                                                    self.far_end_cxp_ch = None
                                                    self.far_end_cdr_ln = None
                                                    self.neighbor_link = None

                                                    self.history = YList(self)
                                                    self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Up.Detail.DataIdx, [u'port_data_idx', u'sfe_port', u'admin_state', u'oper_state', u'near_end_cdr_ln', u'near_end_cxp_ch', u'far_end_cxp_ch', u'far_end_cdr_ln', u'neighbor_link'], name, value)


                                                class History(Entity):
                                                    """
                                                    
                                                    
                                                    .. attribute:: history_idx  (key)
                                                    
                                                    	
                                                    	**type**\: int
                                                    
                                                    	**range:** \-2147483648..2147483647
                                                    
                                                    .. attribute:: time_stamp
                                                    
                                                    	
                                                    	**type**\: str
                                                    
                                                    .. attribute:: admin_state
                                                    
                                                    	
                                                    	**type**\: str
                                                    
                                                    .. attribute:: oper_state
                                                    
                                                    	
                                                    	**type**\: str
                                                    
                                                    .. attribute:: error_state
                                                    
                                                    	
                                                    	**type**\: str
                                                    
                                                    

                                                    """

                                                    _prefix = 'calvados_controllers'
                                                    _revision = '2017-01-31'

                                                    def __init__(self):
                                                        super(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Up.Detail.DataIdx.History, self).__init__()

                                                        self.yang_name = "history"
                                                        self.yang_parent_name = "data_idx"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = ['history_idx']
                                                        self._child_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                                            ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                                            ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                            ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                            ('error_state', YLeaf(YType.str, 'error_state')),
                                                        ])
                                                        self.history_idx = None
                                                        self.time_stamp = None
                                                        self.admin_state = None
                                                        self.oper_state = None
                                                        self.error_state = None
                                                        self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Up.Detail.DataIdx.History, [u'history_idx', u'time_stamp', u'admin_state', u'oper_state', u'error_state'], name, value)


                                    class Down(Entity):
                                        """
                                        
                                        
                                        .. attribute:: data_idx
                                        
                                        	
                                        	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Down.DataIdx>`
                                        
                                        .. attribute:: brief
                                        
                                        	
                                        	**type**\:  :py:class:`Brief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Down.Brief>`
                                        
                                        .. attribute:: detail
                                        
                                        	
                                        	**type**\:  :py:class:`Detail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Down.Detail>`
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Down, self).__init__()

                                            self.yang_name = "down"
                                            self.yang_parent_name = "state"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Down.DataIdx)), ("brief", ("brief", Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Down.Brief)), ("detail", ("detail", Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Down.Detail))])
                                            self._leafs = OrderedDict()

                                            self.brief = Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Down.Brief()
                                            self.brief.parent = self
                                            self._children_name_map["brief"] = "brief"

                                            self.detail = Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Down.Detail()
                                            self.detail.parent = self
                                            self._children_name_map["detail"] = "detail"

                                            self.data_idx = YList(self)
                                            self._segment_path = lambda: "down"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Down, [], name, value)


                                        class DataIdx(Entity):
                                            """
                                            
                                            
                                            .. attribute:: port_data_idx  (key)
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** \-9223372036854775808..9223372036854775807
                                            
                                            .. attribute:: sfe_port
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: admin_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: oper_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: near_end_cdr_ln
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: near_end_cxp_ch
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: far_end_cxp_ch
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: far_end_cdr_ln
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: neighbor_link
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: history
                                            
                                            	
                                            	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Down.DataIdx.History>`
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Down.DataIdx, self).__init__()

                                                self.yang_name = "data_idx"
                                                self.yang_parent_name = "down"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['port_data_idx']
                                                self._child_classes = OrderedDict([("history", ("history", Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Down.DataIdx.History))])
                                                self._leafs = OrderedDict([
                                                    ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                                    ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                                    ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                    ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                    ('near_end_cdr_ln', YLeaf(YType.str, 'near_end_cdr_ln')),
                                                    ('near_end_cxp_ch', YLeaf(YType.str, 'near_end_cxp_ch')),
                                                    ('far_end_cxp_ch', YLeaf(YType.str, 'far_end_cxp_ch')),
                                                    ('far_end_cdr_ln', YLeaf(YType.str, 'far_end_cdr_ln')),
                                                    ('neighbor_link', YLeaf(YType.str, 'neighbor_link')),
                                                ])
                                                self.port_data_idx = None
                                                self.sfe_port = None
                                                self.admin_state = None
                                                self.oper_state = None
                                                self.near_end_cdr_ln = None
                                                self.near_end_cxp_ch = None
                                                self.far_end_cxp_ch = None
                                                self.far_end_cdr_ln = None
                                                self.neighbor_link = None

                                                self.history = YList(self)
                                                self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Down.DataIdx, [u'port_data_idx', u'sfe_port', u'admin_state', u'oper_state', u'near_end_cdr_ln', u'near_end_cxp_ch', u'far_end_cxp_ch', u'far_end_cdr_ln', u'neighbor_link'], name, value)


                                            class History(Entity):
                                                """
                                                
                                                
                                                .. attribute:: history_idx  (key)
                                                
                                                	
                                                	**type**\: int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                .. attribute:: time_stamp
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: admin_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: oper_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: error_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                

                                                """

                                                _prefix = 'calvados_controllers'
                                                _revision = '2017-01-31'

                                                def __init__(self):
                                                    super(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Down.DataIdx.History, self).__init__()

                                                    self.yang_name = "history"
                                                    self.yang_parent_name = "data_idx"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['history_idx']
                                                    self._child_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                                        ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                                        ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                        ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                        ('error_state', YLeaf(YType.str, 'error_state')),
                                                    ])
                                                    self.history_idx = None
                                                    self.time_stamp = None
                                                    self.admin_state = None
                                                    self.oper_state = None
                                                    self.error_state = None
                                                    self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Down.DataIdx.History, [u'history_idx', u'time_stamp', u'admin_state', u'oper_state', u'error_state'], name, value)


                                        class Brief(Entity):
                                            """
                                            
                                            
                                            .. attribute:: data_idx
                                            
                                            	
                                            	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Down.Brief.DataIdx>`
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Down.Brief, self).__init__()

                                                self.yang_name = "brief"
                                                self.yang_parent_name = "down"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Down.Brief.DataIdx))])
                                                self._leafs = OrderedDict()

                                                self.data_idx = YList(self)
                                                self._segment_path = lambda: "brief"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Down.Brief, [], name, value)


                                            class DataIdx(Entity):
                                                """
                                                
                                                
                                                .. attribute:: port_data_idx  (key)
                                                
                                                	
                                                	**type**\: int
                                                
                                                	**range:** \-9223372036854775808..9223372036854775807
                                                
                                                .. attribute:: sfe_port
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: admin_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: oper_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: near_end_cdr_ln
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: near_end_cxp_ch
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: far_end_cxp_ch
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: far_end_cdr_ln
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_link
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: history
                                                
                                                	
                                                	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Down.Brief.DataIdx.History>`
                                                
                                                

                                                """

                                                _prefix = 'calvados_controllers'
                                                _revision = '2017-01-31'

                                                def __init__(self):
                                                    super(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Down.Brief.DataIdx, self).__init__()

                                                    self.yang_name = "data_idx"
                                                    self.yang_parent_name = "brief"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['port_data_idx']
                                                    self._child_classes = OrderedDict([("history", ("history", Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Down.Brief.DataIdx.History))])
                                                    self._leafs = OrderedDict([
                                                        ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                                        ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                                        ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                        ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                        ('near_end_cdr_ln', YLeaf(YType.str, 'near_end_cdr_ln')),
                                                        ('near_end_cxp_ch', YLeaf(YType.str, 'near_end_cxp_ch')),
                                                        ('far_end_cxp_ch', YLeaf(YType.str, 'far_end_cxp_ch')),
                                                        ('far_end_cdr_ln', YLeaf(YType.str, 'far_end_cdr_ln')),
                                                        ('neighbor_link', YLeaf(YType.str, 'neighbor_link')),
                                                    ])
                                                    self.port_data_idx = None
                                                    self.sfe_port = None
                                                    self.admin_state = None
                                                    self.oper_state = None
                                                    self.near_end_cdr_ln = None
                                                    self.near_end_cxp_ch = None
                                                    self.far_end_cxp_ch = None
                                                    self.far_end_cdr_ln = None
                                                    self.neighbor_link = None

                                                    self.history = YList(self)
                                                    self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Down.Brief.DataIdx, [u'port_data_idx', u'sfe_port', u'admin_state', u'oper_state', u'near_end_cdr_ln', u'near_end_cxp_ch', u'far_end_cxp_ch', u'far_end_cdr_ln', u'neighbor_link'], name, value)


                                                class History(Entity):
                                                    """
                                                    
                                                    
                                                    .. attribute:: history_idx  (key)
                                                    
                                                    	
                                                    	**type**\: int
                                                    
                                                    	**range:** \-2147483648..2147483647
                                                    
                                                    .. attribute:: time_stamp
                                                    
                                                    	
                                                    	**type**\: str
                                                    
                                                    .. attribute:: admin_state
                                                    
                                                    	
                                                    	**type**\: str
                                                    
                                                    .. attribute:: oper_state
                                                    
                                                    	
                                                    	**type**\: str
                                                    
                                                    .. attribute:: error_state
                                                    
                                                    	
                                                    	**type**\: str
                                                    
                                                    

                                                    """

                                                    _prefix = 'calvados_controllers'
                                                    _revision = '2017-01-31'

                                                    def __init__(self):
                                                        super(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Down.Brief.DataIdx.History, self).__init__()

                                                        self.yang_name = "history"
                                                        self.yang_parent_name = "data_idx"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = ['history_idx']
                                                        self._child_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                                            ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                                            ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                            ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                            ('error_state', YLeaf(YType.str, 'error_state')),
                                                        ])
                                                        self.history_idx = None
                                                        self.time_stamp = None
                                                        self.admin_state = None
                                                        self.oper_state = None
                                                        self.error_state = None
                                                        self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Down.Brief.DataIdx.History, [u'history_idx', u'time_stamp', u'admin_state', u'oper_state', u'error_state'], name, value)


                                        class Detail(Entity):
                                            """
                                            
                                            
                                            .. attribute:: data_idx
                                            
                                            	
                                            	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Down.Detail.DataIdx>`
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Down.Detail, self).__init__()

                                                self.yang_name = "detail"
                                                self.yang_parent_name = "down"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Down.Detail.DataIdx))])
                                                self._leafs = OrderedDict()

                                                self.data_idx = YList(self)
                                                self._segment_path = lambda: "detail"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Down.Detail, [], name, value)


                                            class DataIdx(Entity):
                                                """
                                                
                                                
                                                .. attribute:: port_data_idx  (key)
                                                
                                                	
                                                	**type**\: int
                                                
                                                	**range:** \-9223372036854775808..9223372036854775807
                                                
                                                .. attribute:: sfe_port
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: admin_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: oper_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: near_end_cdr_ln
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: near_end_cxp_ch
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: far_end_cxp_ch
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: far_end_cdr_ln
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_link
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: history
                                                
                                                	
                                                	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Down.Detail.DataIdx.History>`
                                                
                                                

                                                """

                                                _prefix = 'calvados_controllers'
                                                _revision = '2017-01-31'

                                                def __init__(self):
                                                    super(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Down.Detail.DataIdx, self).__init__()

                                                    self.yang_name = "data_idx"
                                                    self.yang_parent_name = "detail"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['port_data_idx']
                                                    self._child_classes = OrderedDict([("history", ("history", Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Down.Detail.DataIdx.History))])
                                                    self._leafs = OrderedDict([
                                                        ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                                        ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                                        ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                        ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                        ('near_end_cdr_ln', YLeaf(YType.str, 'near_end_cdr_ln')),
                                                        ('near_end_cxp_ch', YLeaf(YType.str, 'near_end_cxp_ch')),
                                                        ('far_end_cxp_ch', YLeaf(YType.str, 'far_end_cxp_ch')),
                                                        ('far_end_cdr_ln', YLeaf(YType.str, 'far_end_cdr_ln')),
                                                        ('neighbor_link', YLeaf(YType.str, 'neighbor_link')),
                                                    ])
                                                    self.port_data_idx = None
                                                    self.sfe_port = None
                                                    self.admin_state = None
                                                    self.oper_state = None
                                                    self.near_end_cdr_ln = None
                                                    self.near_end_cxp_ch = None
                                                    self.far_end_cxp_ch = None
                                                    self.far_end_cdr_ln = None
                                                    self.neighbor_link = None

                                                    self.history = YList(self)
                                                    self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Down.Detail.DataIdx, [u'port_data_idx', u'sfe_port', u'admin_state', u'oper_state', u'near_end_cdr_ln', u'near_end_cxp_ch', u'far_end_cxp_ch', u'far_end_cdr_ln', u'neighbor_link'], name, value)


                                                class History(Entity):
                                                    """
                                                    
                                                    
                                                    .. attribute:: history_idx  (key)
                                                    
                                                    	
                                                    	**type**\: int
                                                    
                                                    	**range:** \-2147483648..2147483647
                                                    
                                                    .. attribute:: time_stamp
                                                    
                                                    	
                                                    	**type**\: str
                                                    
                                                    .. attribute:: admin_state
                                                    
                                                    	
                                                    	**type**\: str
                                                    
                                                    .. attribute:: oper_state
                                                    
                                                    	
                                                    	**type**\: str
                                                    
                                                    .. attribute:: error_state
                                                    
                                                    	
                                                    	**type**\: str
                                                    
                                                    

                                                    """

                                                    _prefix = 'calvados_controllers'
                                                    _revision = '2017-01-31'

                                                    def __init__(self):
                                                        super(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Down.Detail.DataIdx.History, self).__init__()

                                                        self.yang_name = "history"
                                                        self.yang_parent_name = "data_idx"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = ['history_idx']
                                                        self._child_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                                            ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                                            ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                            ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                            ('error_state', YLeaf(YType.str, 'error_state')),
                                                        ])
                                                        self.history_idx = None
                                                        self.time_stamp = None
                                                        self.admin_state = None
                                                        self.oper_state = None
                                                        self.error_state = None
                                                        self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Down.Detail.DataIdx.History, [u'history_idx', u'time_stamp', u'admin_state', u'oper_state', u'error_state'], name, value)


                                    class Er(Entity):
                                        """
                                        
                                        
                                        .. attribute:: data_idx
                                        
                                        	
                                        	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Er.DataIdx>`
                                        
                                        .. attribute:: brief
                                        
                                        	
                                        	**type**\:  :py:class:`Brief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Er.Brief>`
                                        
                                        .. attribute:: detail
                                        
                                        	
                                        	**type**\:  :py:class:`Detail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Er.Detail>`
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Er, self).__init__()

                                            self.yang_name = "er"
                                            self.yang_parent_name = "state"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Er.DataIdx)), ("brief", ("brief", Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Er.Brief)), ("detail", ("detail", Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Er.Detail))])
                                            self._leafs = OrderedDict()

                                            self.brief = Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Er.Brief()
                                            self.brief.parent = self
                                            self._children_name_map["brief"] = "brief"

                                            self.detail = Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Er.Detail()
                                            self.detail.parent = self
                                            self._children_name_map["detail"] = "detail"

                                            self.data_idx = YList(self)
                                            self._segment_path = lambda: "er"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Er, [], name, value)


                                        class DataIdx(Entity):
                                            """
                                            
                                            
                                            .. attribute:: port_data_idx  (key)
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** \-9223372036854775808..9223372036854775807
                                            
                                            .. attribute:: sfe_port
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: admin_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: oper_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: near_end_cdr_ln
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: near_end_cxp_ch
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: far_end_cxp_ch
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: far_end_cdr_ln
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: neighbor_link
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: history
                                            
                                            	
                                            	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Er.DataIdx.History>`
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Er.DataIdx, self).__init__()

                                                self.yang_name = "data_idx"
                                                self.yang_parent_name = "er"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['port_data_idx']
                                                self._child_classes = OrderedDict([("history", ("history", Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Er.DataIdx.History))])
                                                self._leafs = OrderedDict([
                                                    ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                                    ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                                    ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                    ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                    ('near_end_cdr_ln', YLeaf(YType.str, 'near_end_cdr_ln')),
                                                    ('near_end_cxp_ch', YLeaf(YType.str, 'near_end_cxp_ch')),
                                                    ('far_end_cxp_ch', YLeaf(YType.str, 'far_end_cxp_ch')),
                                                    ('far_end_cdr_ln', YLeaf(YType.str, 'far_end_cdr_ln')),
                                                    ('neighbor_link', YLeaf(YType.str, 'neighbor_link')),
                                                ])
                                                self.port_data_idx = None
                                                self.sfe_port = None
                                                self.admin_state = None
                                                self.oper_state = None
                                                self.near_end_cdr_ln = None
                                                self.near_end_cxp_ch = None
                                                self.far_end_cxp_ch = None
                                                self.far_end_cdr_ln = None
                                                self.neighbor_link = None

                                                self.history = YList(self)
                                                self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Er.DataIdx, [u'port_data_idx', u'sfe_port', u'admin_state', u'oper_state', u'near_end_cdr_ln', u'near_end_cxp_ch', u'far_end_cxp_ch', u'far_end_cdr_ln', u'neighbor_link'], name, value)


                                            class History(Entity):
                                                """
                                                
                                                
                                                .. attribute:: history_idx  (key)
                                                
                                                	
                                                	**type**\: int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                .. attribute:: time_stamp
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: admin_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: oper_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: error_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                

                                                """

                                                _prefix = 'calvados_controllers'
                                                _revision = '2017-01-31'

                                                def __init__(self):
                                                    super(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Er.DataIdx.History, self).__init__()

                                                    self.yang_name = "history"
                                                    self.yang_parent_name = "data_idx"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['history_idx']
                                                    self._child_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                                        ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                                        ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                        ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                        ('error_state', YLeaf(YType.str, 'error_state')),
                                                    ])
                                                    self.history_idx = None
                                                    self.time_stamp = None
                                                    self.admin_state = None
                                                    self.oper_state = None
                                                    self.error_state = None
                                                    self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Er.DataIdx.History, [u'history_idx', u'time_stamp', u'admin_state', u'oper_state', u'error_state'], name, value)


                                        class Brief(Entity):
                                            """
                                            
                                            
                                            .. attribute:: data_idx
                                            
                                            	
                                            	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Er.Brief.DataIdx>`
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Er.Brief, self).__init__()

                                                self.yang_name = "brief"
                                                self.yang_parent_name = "er"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Er.Brief.DataIdx))])
                                                self._leafs = OrderedDict()

                                                self.data_idx = YList(self)
                                                self._segment_path = lambda: "brief"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Er.Brief, [], name, value)


                                            class DataIdx(Entity):
                                                """
                                                
                                                
                                                .. attribute:: port_data_idx  (key)
                                                
                                                	
                                                	**type**\: int
                                                
                                                	**range:** \-9223372036854775808..9223372036854775807
                                                
                                                .. attribute:: sfe_port
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: admin_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: oper_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: near_end_cdr_ln
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: near_end_cxp_ch
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: far_end_cxp_ch
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: far_end_cdr_ln
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_link
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: history
                                                
                                                	
                                                	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Er.Brief.DataIdx.History>`
                                                
                                                

                                                """

                                                _prefix = 'calvados_controllers'
                                                _revision = '2017-01-31'

                                                def __init__(self):
                                                    super(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Er.Brief.DataIdx, self).__init__()

                                                    self.yang_name = "data_idx"
                                                    self.yang_parent_name = "brief"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['port_data_idx']
                                                    self._child_classes = OrderedDict([("history", ("history", Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Er.Brief.DataIdx.History))])
                                                    self._leafs = OrderedDict([
                                                        ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                                        ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                                        ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                        ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                        ('near_end_cdr_ln', YLeaf(YType.str, 'near_end_cdr_ln')),
                                                        ('near_end_cxp_ch', YLeaf(YType.str, 'near_end_cxp_ch')),
                                                        ('far_end_cxp_ch', YLeaf(YType.str, 'far_end_cxp_ch')),
                                                        ('far_end_cdr_ln', YLeaf(YType.str, 'far_end_cdr_ln')),
                                                        ('neighbor_link', YLeaf(YType.str, 'neighbor_link')),
                                                    ])
                                                    self.port_data_idx = None
                                                    self.sfe_port = None
                                                    self.admin_state = None
                                                    self.oper_state = None
                                                    self.near_end_cdr_ln = None
                                                    self.near_end_cxp_ch = None
                                                    self.far_end_cxp_ch = None
                                                    self.far_end_cdr_ln = None
                                                    self.neighbor_link = None

                                                    self.history = YList(self)
                                                    self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Er.Brief.DataIdx, [u'port_data_idx', u'sfe_port', u'admin_state', u'oper_state', u'near_end_cdr_ln', u'near_end_cxp_ch', u'far_end_cxp_ch', u'far_end_cdr_ln', u'neighbor_link'], name, value)


                                                class History(Entity):
                                                    """
                                                    
                                                    
                                                    .. attribute:: history_idx  (key)
                                                    
                                                    	
                                                    	**type**\: int
                                                    
                                                    	**range:** \-2147483648..2147483647
                                                    
                                                    .. attribute:: time_stamp
                                                    
                                                    	
                                                    	**type**\: str
                                                    
                                                    .. attribute:: admin_state
                                                    
                                                    	
                                                    	**type**\: str
                                                    
                                                    .. attribute:: oper_state
                                                    
                                                    	
                                                    	**type**\: str
                                                    
                                                    .. attribute:: error_state
                                                    
                                                    	
                                                    	**type**\: str
                                                    
                                                    

                                                    """

                                                    _prefix = 'calvados_controllers'
                                                    _revision = '2017-01-31'

                                                    def __init__(self):
                                                        super(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Er.Brief.DataIdx.History, self).__init__()

                                                        self.yang_name = "history"
                                                        self.yang_parent_name = "data_idx"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = ['history_idx']
                                                        self._child_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                                            ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                                            ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                            ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                            ('error_state', YLeaf(YType.str, 'error_state')),
                                                        ])
                                                        self.history_idx = None
                                                        self.time_stamp = None
                                                        self.admin_state = None
                                                        self.oper_state = None
                                                        self.error_state = None
                                                        self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Er.Brief.DataIdx.History, [u'history_idx', u'time_stamp', u'admin_state', u'oper_state', u'error_state'], name, value)


                                        class Detail(Entity):
                                            """
                                            
                                            
                                            .. attribute:: data_idx
                                            
                                            	
                                            	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Er.Detail.DataIdx>`
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Er.Detail, self).__init__()

                                                self.yang_name = "detail"
                                                self.yang_parent_name = "er"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Er.Detail.DataIdx))])
                                                self._leafs = OrderedDict()

                                                self.data_idx = YList(self)
                                                self._segment_path = lambda: "detail"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Er.Detail, [], name, value)


                                            class DataIdx(Entity):
                                                """
                                                
                                                
                                                .. attribute:: port_data_idx  (key)
                                                
                                                	
                                                	**type**\: int
                                                
                                                	**range:** \-9223372036854775808..9223372036854775807
                                                
                                                .. attribute:: sfe_port
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: admin_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: oper_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: near_end_cdr_ln
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: near_end_cxp_ch
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: far_end_cxp_ch
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: far_end_cdr_ln
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_link
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: history
                                                
                                                	
                                                	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Er.Detail.DataIdx.History>`
                                                
                                                

                                                """

                                                _prefix = 'calvados_controllers'
                                                _revision = '2017-01-31'

                                                def __init__(self):
                                                    super(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Er.Detail.DataIdx, self).__init__()

                                                    self.yang_name = "data_idx"
                                                    self.yang_parent_name = "detail"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['port_data_idx']
                                                    self._child_classes = OrderedDict([("history", ("history", Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Er.Detail.DataIdx.History))])
                                                    self._leafs = OrderedDict([
                                                        ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                                        ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                                        ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                        ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                        ('near_end_cdr_ln', YLeaf(YType.str, 'near_end_cdr_ln')),
                                                        ('near_end_cxp_ch', YLeaf(YType.str, 'near_end_cxp_ch')),
                                                        ('far_end_cxp_ch', YLeaf(YType.str, 'far_end_cxp_ch')),
                                                        ('far_end_cdr_ln', YLeaf(YType.str, 'far_end_cdr_ln')),
                                                        ('neighbor_link', YLeaf(YType.str, 'neighbor_link')),
                                                    ])
                                                    self.port_data_idx = None
                                                    self.sfe_port = None
                                                    self.admin_state = None
                                                    self.oper_state = None
                                                    self.near_end_cdr_ln = None
                                                    self.near_end_cxp_ch = None
                                                    self.far_end_cxp_ch = None
                                                    self.far_end_cdr_ln = None
                                                    self.neighbor_link = None

                                                    self.history = YList(self)
                                                    self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Er.Detail.DataIdx, [u'port_data_idx', u'sfe_port', u'admin_state', u'oper_state', u'near_end_cdr_ln', u'near_end_cxp_ch', u'far_end_cxp_ch', u'far_end_cdr_ln', u'neighbor_link'], name, value)


                                                class History(Entity):
                                                    """
                                                    
                                                    
                                                    .. attribute:: history_idx  (key)
                                                    
                                                    	
                                                    	**type**\: int
                                                    
                                                    	**range:** \-2147483648..2147483647
                                                    
                                                    .. attribute:: time_stamp
                                                    
                                                    	
                                                    	**type**\: str
                                                    
                                                    .. attribute:: admin_state
                                                    
                                                    	
                                                    	**type**\: str
                                                    
                                                    .. attribute:: oper_state
                                                    
                                                    	
                                                    	**type**\: str
                                                    
                                                    .. attribute:: error_state
                                                    
                                                    	
                                                    	**type**\: str
                                                    
                                                    

                                                    """

                                                    _prefix = 'calvados_controllers'
                                                    _revision = '2017-01-31'

                                                    def __init__(self):
                                                        super(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Er.Detail.DataIdx.History, self).__init__()

                                                        self.yang_name = "history"
                                                        self.yang_parent_name = "data_idx"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = ['history_idx']
                                                        self._child_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                                            ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                                            ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                            ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                            ('error_state', YLeaf(YType.str, 'error_state')),
                                                        ])
                                                        self.history_idx = None
                                                        self.time_stamp = None
                                                        self.admin_state = None
                                                        self.oper_state = None
                                                        self.error_state = None
                                                        self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Er.Detail.DataIdx.History, [u'history_idx', u'time_stamp', u'admin_state', u'oper_state', u'error_state'], name, value)


                                    class Mismatch(Entity):
                                        """
                                        
                                        
                                        .. attribute:: data_idx
                                        
                                        	
                                        	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Mismatch.DataIdx>`
                                        
                                        .. attribute:: brief
                                        
                                        	
                                        	**type**\:  :py:class:`Brief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Mismatch.Brief>`
                                        
                                        .. attribute:: detail
                                        
                                        	
                                        	**type**\:  :py:class:`Detail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Mismatch.Detail>`
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Mismatch, self).__init__()

                                            self.yang_name = "mismatch"
                                            self.yang_parent_name = "state"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Mismatch.DataIdx)), ("brief", ("brief", Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Mismatch.Brief)), ("detail", ("detail", Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Mismatch.Detail))])
                                            self._leafs = OrderedDict()

                                            self.brief = Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Mismatch.Brief()
                                            self.brief.parent = self
                                            self._children_name_map["brief"] = "brief"

                                            self.detail = Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Mismatch.Detail()
                                            self.detail.parent = self
                                            self._children_name_map["detail"] = "detail"

                                            self.data_idx = YList(self)
                                            self._segment_path = lambda: "mismatch"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Mismatch, [], name, value)


                                        class DataIdx(Entity):
                                            """
                                            
                                            
                                            .. attribute:: port_data_idx  (key)
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** \-9223372036854775808..9223372036854775807
                                            
                                            .. attribute:: sfe_port
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: admin_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: oper_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: near_end_cdr_ln
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: near_end_cxp_ch
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: far_end_cxp_ch
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: far_end_cdr_ln
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: neighbor_link
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: history
                                            
                                            	
                                            	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Mismatch.DataIdx.History>`
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Mismatch.DataIdx, self).__init__()

                                                self.yang_name = "data_idx"
                                                self.yang_parent_name = "mismatch"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['port_data_idx']
                                                self._child_classes = OrderedDict([("history", ("history", Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Mismatch.DataIdx.History))])
                                                self._leafs = OrderedDict([
                                                    ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                                    ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                                    ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                    ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                    ('near_end_cdr_ln', YLeaf(YType.str, 'near_end_cdr_ln')),
                                                    ('near_end_cxp_ch', YLeaf(YType.str, 'near_end_cxp_ch')),
                                                    ('far_end_cxp_ch', YLeaf(YType.str, 'far_end_cxp_ch')),
                                                    ('far_end_cdr_ln', YLeaf(YType.str, 'far_end_cdr_ln')),
                                                    ('neighbor_link', YLeaf(YType.str, 'neighbor_link')),
                                                ])
                                                self.port_data_idx = None
                                                self.sfe_port = None
                                                self.admin_state = None
                                                self.oper_state = None
                                                self.near_end_cdr_ln = None
                                                self.near_end_cxp_ch = None
                                                self.far_end_cxp_ch = None
                                                self.far_end_cdr_ln = None
                                                self.neighbor_link = None

                                                self.history = YList(self)
                                                self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Mismatch.DataIdx, [u'port_data_idx', u'sfe_port', u'admin_state', u'oper_state', u'near_end_cdr_ln', u'near_end_cxp_ch', u'far_end_cxp_ch', u'far_end_cdr_ln', u'neighbor_link'], name, value)


                                            class History(Entity):
                                                """
                                                
                                                
                                                .. attribute:: history_idx  (key)
                                                
                                                	
                                                	**type**\: int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                .. attribute:: time_stamp
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: admin_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: oper_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: error_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                

                                                """

                                                _prefix = 'calvados_controllers'
                                                _revision = '2017-01-31'

                                                def __init__(self):
                                                    super(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Mismatch.DataIdx.History, self).__init__()

                                                    self.yang_name = "history"
                                                    self.yang_parent_name = "data_idx"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['history_idx']
                                                    self._child_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                                        ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                                        ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                        ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                        ('error_state', YLeaf(YType.str, 'error_state')),
                                                    ])
                                                    self.history_idx = None
                                                    self.time_stamp = None
                                                    self.admin_state = None
                                                    self.oper_state = None
                                                    self.error_state = None
                                                    self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Mismatch.DataIdx.History, [u'history_idx', u'time_stamp', u'admin_state', u'oper_state', u'error_state'], name, value)


                                        class Brief(Entity):
                                            """
                                            
                                            
                                            .. attribute:: data_idx
                                            
                                            	
                                            	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Mismatch.Brief.DataIdx>`
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Mismatch.Brief, self).__init__()

                                                self.yang_name = "brief"
                                                self.yang_parent_name = "mismatch"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Mismatch.Brief.DataIdx))])
                                                self._leafs = OrderedDict()

                                                self.data_idx = YList(self)
                                                self._segment_path = lambda: "brief"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Mismatch.Brief, [], name, value)


                                            class DataIdx(Entity):
                                                """
                                                
                                                
                                                .. attribute:: port_data_idx  (key)
                                                
                                                	
                                                	**type**\: int
                                                
                                                	**range:** \-9223372036854775808..9223372036854775807
                                                
                                                .. attribute:: sfe_port
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: admin_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: oper_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: near_end_cdr_ln
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: near_end_cxp_ch
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: far_end_cxp_ch
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: far_end_cdr_ln
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_link
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: history
                                                
                                                	
                                                	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Mismatch.Brief.DataIdx.History>`
                                                
                                                

                                                """

                                                _prefix = 'calvados_controllers'
                                                _revision = '2017-01-31'

                                                def __init__(self):
                                                    super(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Mismatch.Brief.DataIdx, self).__init__()

                                                    self.yang_name = "data_idx"
                                                    self.yang_parent_name = "brief"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['port_data_idx']
                                                    self._child_classes = OrderedDict([("history", ("history", Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Mismatch.Brief.DataIdx.History))])
                                                    self._leafs = OrderedDict([
                                                        ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                                        ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                                        ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                        ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                        ('near_end_cdr_ln', YLeaf(YType.str, 'near_end_cdr_ln')),
                                                        ('near_end_cxp_ch', YLeaf(YType.str, 'near_end_cxp_ch')),
                                                        ('far_end_cxp_ch', YLeaf(YType.str, 'far_end_cxp_ch')),
                                                        ('far_end_cdr_ln', YLeaf(YType.str, 'far_end_cdr_ln')),
                                                        ('neighbor_link', YLeaf(YType.str, 'neighbor_link')),
                                                    ])
                                                    self.port_data_idx = None
                                                    self.sfe_port = None
                                                    self.admin_state = None
                                                    self.oper_state = None
                                                    self.near_end_cdr_ln = None
                                                    self.near_end_cxp_ch = None
                                                    self.far_end_cxp_ch = None
                                                    self.far_end_cdr_ln = None
                                                    self.neighbor_link = None

                                                    self.history = YList(self)
                                                    self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Mismatch.Brief.DataIdx, [u'port_data_idx', u'sfe_port', u'admin_state', u'oper_state', u'near_end_cdr_ln', u'near_end_cxp_ch', u'far_end_cxp_ch', u'far_end_cdr_ln', u'neighbor_link'], name, value)


                                                class History(Entity):
                                                    """
                                                    
                                                    
                                                    .. attribute:: history_idx  (key)
                                                    
                                                    	
                                                    	**type**\: int
                                                    
                                                    	**range:** \-2147483648..2147483647
                                                    
                                                    .. attribute:: time_stamp
                                                    
                                                    	
                                                    	**type**\: str
                                                    
                                                    .. attribute:: admin_state
                                                    
                                                    	
                                                    	**type**\: str
                                                    
                                                    .. attribute:: oper_state
                                                    
                                                    	
                                                    	**type**\: str
                                                    
                                                    .. attribute:: error_state
                                                    
                                                    	
                                                    	**type**\: str
                                                    
                                                    

                                                    """

                                                    _prefix = 'calvados_controllers'
                                                    _revision = '2017-01-31'

                                                    def __init__(self):
                                                        super(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Mismatch.Brief.DataIdx.History, self).__init__()

                                                        self.yang_name = "history"
                                                        self.yang_parent_name = "data_idx"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = ['history_idx']
                                                        self._child_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                                            ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                                            ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                            ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                            ('error_state', YLeaf(YType.str, 'error_state')),
                                                        ])
                                                        self.history_idx = None
                                                        self.time_stamp = None
                                                        self.admin_state = None
                                                        self.oper_state = None
                                                        self.error_state = None
                                                        self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Mismatch.Brief.DataIdx.History, [u'history_idx', u'time_stamp', u'admin_state', u'oper_state', u'error_state'], name, value)


                                        class Detail(Entity):
                                            """
                                            
                                            
                                            .. attribute:: data_idx
                                            
                                            	
                                            	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Mismatch.Detail.DataIdx>`
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Mismatch.Detail, self).__init__()

                                                self.yang_name = "detail"
                                                self.yang_parent_name = "mismatch"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Mismatch.Detail.DataIdx))])
                                                self._leafs = OrderedDict()

                                                self.data_idx = YList(self)
                                                self._segment_path = lambda: "detail"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Mismatch.Detail, [], name, value)


                                            class DataIdx(Entity):
                                                """
                                                
                                                
                                                .. attribute:: port_data_idx  (key)
                                                
                                                	
                                                	**type**\: int
                                                
                                                	**range:** \-9223372036854775808..9223372036854775807
                                                
                                                .. attribute:: sfe_port
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: admin_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: oper_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: near_end_cdr_ln
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: near_end_cxp_ch
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: far_end_cxp_ch
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: far_end_cdr_ln
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_link
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: history
                                                
                                                	
                                                	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Mismatch.Detail.DataIdx.History>`
                                                
                                                

                                                """

                                                _prefix = 'calvados_controllers'
                                                _revision = '2017-01-31'

                                                def __init__(self):
                                                    super(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Mismatch.Detail.DataIdx, self).__init__()

                                                    self.yang_name = "data_idx"
                                                    self.yang_parent_name = "detail"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['port_data_idx']
                                                    self._child_classes = OrderedDict([("history", ("history", Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Mismatch.Detail.DataIdx.History))])
                                                    self._leafs = OrderedDict([
                                                        ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                                        ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                                        ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                        ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                        ('near_end_cdr_ln', YLeaf(YType.str, 'near_end_cdr_ln')),
                                                        ('near_end_cxp_ch', YLeaf(YType.str, 'near_end_cxp_ch')),
                                                        ('far_end_cxp_ch', YLeaf(YType.str, 'far_end_cxp_ch')),
                                                        ('far_end_cdr_ln', YLeaf(YType.str, 'far_end_cdr_ln')),
                                                        ('neighbor_link', YLeaf(YType.str, 'neighbor_link')),
                                                    ])
                                                    self.port_data_idx = None
                                                    self.sfe_port = None
                                                    self.admin_state = None
                                                    self.oper_state = None
                                                    self.near_end_cdr_ln = None
                                                    self.near_end_cxp_ch = None
                                                    self.far_end_cxp_ch = None
                                                    self.far_end_cdr_ln = None
                                                    self.neighbor_link = None

                                                    self.history = YList(self)
                                                    self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Mismatch.Detail.DataIdx, [u'port_data_idx', u'sfe_port', u'admin_state', u'oper_state', u'near_end_cdr_ln', u'near_end_cxp_ch', u'far_end_cxp_ch', u'far_end_cdr_ln', u'neighbor_link'], name, value)


                                                class History(Entity):
                                                    """
                                                    
                                                    
                                                    .. attribute:: history_idx  (key)
                                                    
                                                    	
                                                    	**type**\: int
                                                    
                                                    	**range:** \-2147483648..2147483647
                                                    
                                                    .. attribute:: time_stamp
                                                    
                                                    	
                                                    	**type**\: str
                                                    
                                                    .. attribute:: admin_state
                                                    
                                                    	
                                                    	**type**\: str
                                                    
                                                    .. attribute:: oper_state
                                                    
                                                    	
                                                    	**type**\: str
                                                    
                                                    .. attribute:: error_state
                                                    
                                                    	
                                                    	**type**\: str
                                                    
                                                    

                                                    """

                                                    _prefix = 'calvados_controllers'
                                                    _revision = '2017-01-31'

                                                    def __init__(self):
                                                        super(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Mismatch.Detail.DataIdx.History, self).__init__()

                                                        self.yang_name = "history"
                                                        self.yang_parent_name = "data_idx"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = ['history_idx']
                                                        self._child_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                                            ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                                            ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                            ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                            ('error_state', YLeaf(YType.str, 'error_state')),
                                                        ])
                                                        self.history_idx = None
                                                        self.time_stamp = None
                                                        self.admin_state = None
                                                        self.oper_state = None
                                                        self.error_state = None
                                                        self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.State.Mismatch.Detail.DataIdx.History, [u'history_idx', u'time_stamp', u'admin_state', u'oper_state', u'error_state'], name, value)


                                class Statistics(Entity):
                                    """
                                    
                                    
                                    .. attribute:: data_idx
                                    
                                    	
                                    	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.Statistics.DataIdx>`
                                    
                                    .. attribute:: brief
                                    
                                    	
                                    	**type**\:  :py:class:`Brief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.Statistics.Brief>`
                                    
                                    .. attribute:: detail
                                    
                                    	
                                    	**type**\:  :py:class:`Detail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.Statistics.Detail>`
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.Statistics, self).__init__()

                                        self.yang_name = "statistics"
                                        self.yang_parent_name = "tx"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.Statistics.DataIdx)), ("brief", ("brief", Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.Statistics.Brief)), ("detail", ("detail", Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.Statistics.Detail))])
                                        self._leafs = OrderedDict()

                                        self.brief = Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.Statistics.Brief()
                                        self.brief.parent = self
                                        self._children_name_map["brief"] = "brief"

                                        self.detail = Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.Statistics.Detail()
                                        self.detail.parent = self
                                        self._children_name_map["detail"] = "detail"

                                        self.data_idx = YList(self)
                                        self._segment_path = lambda: "statistics"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.Statistics, [], name, value)


                                    class DataIdx(Entity):
                                        """
                                        
                                        
                                        .. attribute:: port_data_idx  (key)
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** \-9223372036854775808..9223372036854775807
                                        
                                        .. attribute:: rack_num
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: sfe_port
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: tx_control_cells_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: tx_data_cell_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: tx_data_byte_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_crc_errors_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_lfec_fec_correctable_error
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_8b_10b_disparity_errors
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_control_cells_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_data_cell_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_data_byte_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_dropped_retransmitted_control
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: tx_asyn_fifo_rate
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_asyn_fifo_rate
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_lfec_fec_uncorrectable_errors
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_8b_10b_code_errors
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: is_link_error
                                        
                                        	
                                        	**type**\: bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: link_crc_error
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: link_size_error
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: link_mis_align_error
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: link_code_group_error
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: link_no_sig_lock_error
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: link_no_sig_accept_error
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: link_tokens_error
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_token_count
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.Statistics.DataIdx, self).__init__()

                                            self.yang_name = "data_idx"
                                            self.yang_parent_name = "statistics"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['port_data_idx']
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                                ('rack_num', YLeaf(YType.str, 'rack_num')),
                                                ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                                ('tx_control_cells_counter', YLeaf(YType.uint64, 'TX_Control_cells_counter')),
                                                ('tx_data_cell_counter', YLeaf(YType.uint64, 'TX_Data_cell_counter')),
                                                ('tx_data_byte_counter', YLeaf(YType.uint64, 'TX_Data_byte_counter')),
                                                ('rx_crc_errors_counter', YLeaf(YType.uint64, 'RX_CRC_errors_counter')),
                                                ('rx_lfec_fec_correctable_error', YLeaf(YType.uint64, 'RX_LFEC_FEC_correctable_error')),
                                                ('rx_8b_10b_disparity_errors', YLeaf(YType.uint64, 'RX_8b_10b_disparity_errors')),
                                                ('rx_control_cells_counter', YLeaf(YType.uint64, 'RX_Control_cells_counter')),
                                                ('rx_data_cell_counter', YLeaf(YType.uint64, 'RX_Data_cell_counter')),
                                                ('rx_data_byte_counter', YLeaf(YType.uint64, 'RX_Data_byte_counter')),
                                                ('rx_dropped_retransmitted_control', YLeaf(YType.uint64, 'RX_dropped_retransmitted_control')),
                                                ('tx_asyn_fifo_rate', YLeaf(YType.uint64, 'TX_Asyn_fifo_rate')),
                                                ('rx_asyn_fifo_rate', YLeaf(YType.uint64, 'RX_Asyn_fifo_rate')),
                                                ('rx_lfec_fec_uncorrectable_errors', YLeaf(YType.uint64, 'RX_LFEC_FEC_uncorrectable_errors')),
                                                ('rx_8b_10b_code_errors', YLeaf(YType.uint64, 'RX_8b_10b_code_errors')),
                                                ('is_link_error', YLeaf(YType.boolean, 'is_link_error')),
                                                ('link_crc_error', YLeaf(YType.uint32, 'link_crc_error')),
                                                ('link_size_error', YLeaf(YType.uint32, 'link_size_error')),
                                                ('link_mis_align_error', YLeaf(YType.uint32, 'link_mis_align_error')),
                                                ('link_code_group_error', YLeaf(YType.uint32, 'link_code_group_error')),
                                                ('link_no_sig_lock_error', YLeaf(YType.uint32, 'link_no_sig_lock_error')),
                                                ('link_no_sig_accept_error', YLeaf(YType.uint32, 'link_no_sig_accept_error')),
                                                ('link_tokens_error', YLeaf(YType.uint32, 'link_tokens_error')),
                                                ('error_token_count', YLeaf(YType.uint32, 'error_token_count')),
                                            ])
                                            self.port_data_idx = None
                                            self.rack_num = None
                                            self.sfe_port = None
                                            self.tx_control_cells_counter = None
                                            self.tx_data_cell_counter = None
                                            self.tx_data_byte_counter = None
                                            self.rx_crc_errors_counter = None
                                            self.rx_lfec_fec_correctable_error = None
                                            self.rx_8b_10b_disparity_errors = None
                                            self.rx_control_cells_counter = None
                                            self.rx_data_cell_counter = None
                                            self.rx_data_byte_counter = None
                                            self.rx_dropped_retransmitted_control = None
                                            self.tx_asyn_fifo_rate = None
                                            self.rx_asyn_fifo_rate = None
                                            self.rx_lfec_fec_uncorrectable_errors = None
                                            self.rx_8b_10b_code_errors = None
                                            self.is_link_error = None
                                            self.link_crc_error = None
                                            self.link_size_error = None
                                            self.link_mis_align_error = None
                                            self.link_code_group_error = None
                                            self.link_no_sig_lock_error = None
                                            self.link_no_sig_accept_error = None
                                            self.link_tokens_error = None
                                            self.error_token_count = None
                                            self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.Statistics.DataIdx, [u'port_data_idx', u'rack_num', u'sfe_port', u'tx_control_cells_counter', u'tx_data_cell_counter', u'tx_data_byte_counter', u'rx_crc_errors_counter', u'rx_lfec_fec_correctable_error', u'rx_8b_10b_disparity_errors', u'rx_control_cells_counter', u'rx_data_cell_counter', u'rx_data_byte_counter', u'rx_dropped_retransmitted_control', u'tx_asyn_fifo_rate', u'rx_asyn_fifo_rate', u'rx_lfec_fec_uncorrectable_errors', u'rx_8b_10b_code_errors', u'is_link_error', u'link_crc_error', u'link_size_error', u'link_mis_align_error', u'link_code_group_error', u'link_no_sig_lock_error', u'link_no_sig_accept_error', u'link_tokens_error', u'error_token_count'], name, value)


                                    class Brief(Entity):
                                        """
                                        
                                        
                                        .. attribute:: data_idx
                                        
                                        	
                                        	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.Statistics.Brief.DataIdx>`
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.Statistics.Brief, self).__init__()

                                            self.yang_name = "brief"
                                            self.yang_parent_name = "statistics"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.Statistics.Brief.DataIdx))])
                                            self._leafs = OrderedDict()

                                            self.data_idx = YList(self)
                                            self._segment_path = lambda: "brief"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.Statistics.Brief, [], name, value)


                                        class DataIdx(Entity):
                                            """
                                            
                                            
                                            .. attribute:: port_data_idx  (key)
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** \-9223372036854775808..9223372036854775807
                                            
                                            .. attribute:: rack_num
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: sfe_port
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: tx_control_cells_counter
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..18446744073709551615
                                            
                                            .. attribute:: tx_data_cell_counter
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..18446744073709551615
                                            
                                            .. attribute:: tx_data_byte_counter
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..18446744073709551615
                                            
                                            .. attribute:: rx_crc_errors_counter
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..18446744073709551615
                                            
                                            .. attribute:: rx_lfec_fec_correctable_error
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..18446744073709551615
                                            
                                            .. attribute:: rx_8b_10b_disparity_errors
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..18446744073709551615
                                            
                                            .. attribute:: rx_control_cells_counter
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..18446744073709551615
                                            
                                            .. attribute:: rx_data_cell_counter
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..18446744073709551615
                                            
                                            .. attribute:: rx_data_byte_counter
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..18446744073709551615
                                            
                                            .. attribute:: rx_dropped_retransmitted_control
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..18446744073709551615
                                            
                                            .. attribute:: tx_asyn_fifo_rate
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..18446744073709551615
                                            
                                            .. attribute:: rx_asyn_fifo_rate
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..18446744073709551615
                                            
                                            .. attribute:: rx_lfec_fec_uncorrectable_errors
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..18446744073709551615
                                            
                                            .. attribute:: rx_8b_10b_code_errors
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..18446744073709551615
                                            
                                            .. attribute:: is_link_error
                                            
                                            	
                                            	**type**\: bool
                                            
                                            	**default value**\: false
                                            
                                            .. attribute:: link_crc_error
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: link_size_error
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: link_mis_align_error
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: link_code_group_error
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: link_no_sig_lock_error
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: link_no_sig_accept_error
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: link_tokens_error
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: error_token_count
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.Statistics.Brief.DataIdx, self).__init__()

                                                self.yang_name = "data_idx"
                                                self.yang_parent_name = "brief"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['port_data_idx']
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                                    ('rack_num', YLeaf(YType.str, 'rack_num')),
                                                    ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                                    ('tx_control_cells_counter', YLeaf(YType.uint64, 'TX_Control_cells_counter')),
                                                    ('tx_data_cell_counter', YLeaf(YType.uint64, 'TX_Data_cell_counter')),
                                                    ('tx_data_byte_counter', YLeaf(YType.uint64, 'TX_Data_byte_counter')),
                                                    ('rx_crc_errors_counter', YLeaf(YType.uint64, 'RX_CRC_errors_counter')),
                                                    ('rx_lfec_fec_correctable_error', YLeaf(YType.uint64, 'RX_LFEC_FEC_correctable_error')),
                                                    ('rx_8b_10b_disparity_errors', YLeaf(YType.uint64, 'RX_8b_10b_disparity_errors')),
                                                    ('rx_control_cells_counter', YLeaf(YType.uint64, 'RX_Control_cells_counter')),
                                                    ('rx_data_cell_counter', YLeaf(YType.uint64, 'RX_Data_cell_counter')),
                                                    ('rx_data_byte_counter', YLeaf(YType.uint64, 'RX_Data_byte_counter')),
                                                    ('rx_dropped_retransmitted_control', YLeaf(YType.uint64, 'RX_dropped_retransmitted_control')),
                                                    ('tx_asyn_fifo_rate', YLeaf(YType.uint64, 'TX_Asyn_fifo_rate')),
                                                    ('rx_asyn_fifo_rate', YLeaf(YType.uint64, 'RX_Asyn_fifo_rate')),
                                                    ('rx_lfec_fec_uncorrectable_errors', YLeaf(YType.uint64, 'RX_LFEC_FEC_uncorrectable_errors')),
                                                    ('rx_8b_10b_code_errors', YLeaf(YType.uint64, 'RX_8b_10b_code_errors')),
                                                    ('is_link_error', YLeaf(YType.boolean, 'is_link_error')),
                                                    ('link_crc_error', YLeaf(YType.uint32, 'link_crc_error')),
                                                    ('link_size_error', YLeaf(YType.uint32, 'link_size_error')),
                                                    ('link_mis_align_error', YLeaf(YType.uint32, 'link_mis_align_error')),
                                                    ('link_code_group_error', YLeaf(YType.uint32, 'link_code_group_error')),
                                                    ('link_no_sig_lock_error', YLeaf(YType.uint32, 'link_no_sig_lock_error')),
                                                    ('link_no_sig_accept_error', YLeaf(YType.uint32, 'link_no_sig_accept_error')),
                                                    ('link_tokens_error', YLeaf(YType.uint32, 'link_tokens_error')),
                                                    ('error_token_count', YLeaf(YType.uint32, 'error_token_count')),
                                                ])
                                                self.port_data_idx = None
                                                self.rack_num = None
                                                self.sfe_port = None
                                                self.tx_control_cells_counter = None
                                                self.tx_data_cell_counter = None
                                                self.tx_data_byte_counter = None
                                                self.rx_crc_errors_counter = None
                                                self.rx_lfec_fec_correctable_error = None
                                                self.rx_8b_10b_disparity_errors = None
                                                self.rx_control_cells_counter = None
                                                self.rx_data_cell_counter = None
                                                self.rx_data_byte_counter = None
                                                self.rx_dropped_retransmitted_control = None
                                                self.tx_asyn_fifo_rate = None
                                                self.rx_asyn_fifo_rate = None
                                                self.rx_lfec_fec_uncorrectable_errors = None
                                                self.rx_8b_10b_code_errors = None
                                                self.is_link_error = None
                                                self.link_crc_error = None
                                                self.link_size_error = None
                                                self.link_mis_align_error = None
                                                self.link_code_group_error = None
                                                self.link_no_sig_lock_error = None
                                                self.link_no_sig_accept_error = None
                                                self.link_tokens_error = None
                                                self.error_token_count = None
                                                self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.Statistics.Brief.DataIdx, [u'port_data_idx', u'rack_num', u'sfe_port', u'tx_control_cells_counter', u'tx_data_cell_counter', u'tx_data_byte_counter', u'rx_crc_errors_counter', u'rx_lfec_fec_correctable_error', u'rx_8b_10b_disparity_errors', u'rx_control_cells_counter', u'rx_data_cell_counter', u'rx_data_byte_counter', u'rx_dropped_retransmitted_control', u'tx_asyn_fifo_rate', u'rx_asyn_fifo_rate', u'rx_lfec_fec_uncorrectable_errors', u'rx_8b_10b_code_errors', u'is_link_error', u'link_crc_error', u'link_size_error', u'link_mis_align_error', u'link_code_group_error', u'link_no_sig_lock_error', u'link_no_sig_accept_error', u'link_tokens_error', u'error_token_count'], name, value)


                                    class Detail(Entity):
                                        """
                                        
                                        
                                        .. attribute:: data_idx
                                        
                                        	
                                        	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.Statistics.Detail.DataIdx>`
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.Statistics.Detail, self).__init__()

                                            self.yang_name = "detail"
                                            self.yang_parent_name = "statistics"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.Statistics.Detail.DataIdx))])
                                            self._leafs = OrderedDict()

                                            self.data_idx = YList(self)
                                            self._segment_path = lambda: "detail"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.Statistics.Detail, [], name, value)


                                        class DataIdx(Entity):
                                            """
                                            
                                            
                                            .. attribute:: port_data_idx  (key)
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** \-9223372036854775808..9223372036854775807
                                            
                                            .. attribute:: rack_num
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: sfe_port
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: tx_control_cells_counter
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..18446744073709551615
                                            
                                            .. attribute:: tx_data_cell_counter
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..18446744073709551615
                                            
                                            .. attribute:: tx_data_byte_counter
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..18446744073709551615
                                            
                                            .. attribute:: rx_crc_errors_counter
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..18446744073709551615
                                            
                                            .. attribute:: rx_lfec_fec_correctable_error
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..18446744073709551615
                                            
                                            .. attribute:: rx_8b_10b_disparity_errors
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..18446744073709551615
                                            
                                            .. attribute:: rx_control_cells_counter
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..18446744073709551615
                                            
                                            .. attribute:: rx_data_cell_counter
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..18446744073709551615
                                            
                                            .. attribute:: rx_data_byte_counter
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..18446744073709551615
                                            
                                            .. attribute:: rx_dropped_retransmitted_control
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..18446744073709551615
                                            
                                            .. attribute:: tx_asyn_fifo_rate
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..18446744073709551615
                                            
                                            .. attribute:: rx_asyn_fifo_rate
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..18446744073709551615
                                            
                                            .. attribute:: rx_lfec_fec_uncorrectable_errors
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..18446744073709551615
                                            
                                            .. attribute:: rx_8b_10b_code_errors
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..18446744073709551615
                                            
                                            .. attribute:: is_link_error
                                            
                                            	
                                            	**type**\: bool
                                            
                                            	**default value**\: false
                                            
                                            .. attribute:: link_crc_error
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: link_size_error
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: link_mis_align_error
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: link_code_group_error
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: link_no_sig_lock_error
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: link_no_sig_accept_error
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: link_tokens_error
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: error_token_count
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.Statistics.Detail.DataIdx, self).__init__()

                                                self.yang_name = "data_idx"
                                                self.yang_parent_name = "detail"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['port_data_idx']
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                                    ('rack_num', YLeaf(YType.str, 'rack_num')),
                                                    ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                                    ('tx_control_cells_counter', YLeaf(YType.uint64, 'TX_Control_cells_counter')),
                                                    ('tx_data_cell_counter', YLeaf(YType.uint64, 'TX_Data_cell_counter')),
                                                    ('tx_data_byte_counter', YLeaf(YType.uint64, 'TX_Data_byte_counter')),
                                                    ('rx_crc_errors_counter', YLeaf(YType.uint64, 'RX_CRC_errors_counter')),
                                                    ('rx_lfec_fec_correctable_error', YLeaf(YType.uint64, 'RX_LFEC_FEC_correctable_error')),
                                                    ('rx_8b_10b_disparity_errors', YLeaf(YType.uint64, 'RX_8b_10b_disparity_errors')),
                                                    ('rx_control_cells_counter', YLeaf(YType.uint64, 'RX_Control_cells_counter')),
                                                    ('rx_data_cell_counter', YLeaf(YType.uint64, 'RX_Data_cell_counter')),
                                                    ('rx_data_byte_counter', YLeaf(YType.uint64, 'RX_Data_byte_counter')),
                                                    ('rx_dropped_retransmitted_control', YLeaf(YType.uint64, 'RX_dropped_retransmitted_control')),
                                                    ('tx_asyn_fifo_rate', YLeaf(YType.uint64, 'TX_Asyn_fifo_rate')),
                                                    ('rx_asyn_fifo_rate', YLeaf(YType.uint64, 'RX_Asyn_fifo_rate')),
                                                    ('rx_lfec_fec_uncorrectable_errors', YLeaf(YType.uint64, 'RX_LFEC_FEC_uncorrectable_errors')),
                                                    ('rx_8b_10b_code_errors', YLeaf(YType.uint64, 'RX_8b_10b_code_errors')),
                                                    ('is_link_error', YLeaf(YType.boolean, 'is_link_error')),
                                                    ('link_crc_error', YLeaf(YType.uint32, 'link_crc_error')),
                                                    ('link_size_error', YLeaf(YType.uint32, 'link_size_error')),
                                                    ('link_mis_align_error', YLeaf(YType.uint32, 'link_mis_align_error')),
                                                    ('link_code_group_error', YLeaf(YType.uint32, 'link_code_group_error')),
                                                    ('link_no_sig_lock_error', YLeaf(YType.uint32, 'link_no_sig_lock_error')),
                                                    ('link_no_sig_accept_error', YLeaf(YType.uint32, 'link_no_sig_accept_error')),
                                                    ('link_tokens_error', YLeaf(YType.uint32, 'link_tokens_error')),
                                                    ('error_token_count', YLeaf(YType.uint32, 'error_token_count')),
                                                ])
                                                self.port_data_idx = None
                                                self.rack_num = None
                                                self.sfe_port = None
                                                self.tx_control_cells_counter = None
                                                self.tx_data_cell_counter = None
                                                self.tx_data_byte_counter = None
                                                self.rx_crc_errors_counter = None
                                                self.rx_lfec_fec_correctable_error = None
                                                self.rx_8b_10b_disparity_errors = None
                                                self.rx_control_cells_counter = None
                                                self.rx_data_cell_counter = None
                                                self.rx_data_byte_counter = None
                                                self.rx_dropped_retransmitted_control = None
                                                self.tx_asyn_fifo_rate = None
                                                self.rx_asyn_fifo_rate = None
                                                self.rx_lfec_fec_uncorrectable_errors = None
                                                self.rx_8b_10b_code_errors = None
                                                self.is_link_error = None
                                                self.link_crc_error = None
                                                self.link_size_error = None
                                                self.link_mis_align_error = None
                                                self.link_code_group_error = None
                                                self.link_no_sig_lock_error = None
                                                self.link_no_sig_accept_error = None
                                                self.link_tokens_error = None
                                                self.error_token_count = None
                                                self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Location.Tx.Statistics.Detail.DataIdx, [u'port_data_idx', u'rack_num', u'sfe_port', u'tx_control_cells_counter', u'tx_data_cell_counter', u'tx_data_byte_counter', u'rx_crc_errors_counter', u'rx_lfec_fec_correctable_error', u'rx_8b_10b_disparity_errors', u'rx_control_cells_counter', u'rx_data_cell_counter', u'rx_data_byte_counter', u'rx_dropped_retransmitted_control', u'tx_asyn_fifo_rate', u'rx_asyn_fifo_rate', u'rx_lfec_fec_uncorrectable_errors', u'rx_8b_10b_code_errors', u'is_link_error', u'link_crc_error', u'link_size_error', u'link_mis_align_error', u'link_code_group_error', u'link_no_sig_lock_error', u'link_no_sig_accept_error', u'link_tokens_error', u'error_token_count'], name, value)


                        class Rx(Entity):
                            """
                            Rx link option
                            
                            .. attribute:: data_idx
                            
                            	
                            	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Rx.DataIdx>`
                            
                            .. attribute:: brief
                            
                            	
                            	**type**\:  :py:class:`Brief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Rx.Brief>`
                            
                            .. attribute:: detail
                            
                            	
                            	**type**\:  :py:class:`Detail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Rx.Detail>`
                            
                            .. attribute:: state
                            
                            	
                            	**type**\:  :py:class:`State <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Rx.State>`
                            
                            .. attribute:: statistics
                            
                            	
                            	**type**\:  :py:class:`Statistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Rx.Statistics>`
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Fabric.Oper.Link.Rack.Port.Rx, self).__init__()

                                self.yang_name = "rx"
                                self.yang_parent_name = "port"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Rx.DataIdx)), ("brief", ("brief", Controller.Fabric.Oper.Link.Rack.Port.Rx.Brief)), ("detail", ("detail", Controller.Fabric.Oper.Link.Rack.Port.Rx.Detail)), ("state", ("state", Controller.Fabric.Oper.Link.Rack.Port.Rx.State)), ("statistics", ("statistics", Controller.Fabric.Oper.Link.Rack.Port.Rx.Statistics))])
                                self._leafs = OrderedDict()

                                self.brief = Controller.Fabric.Oper.Link.Rack.Port.Rx.Brief()
                                self.brief.parent = self
                                self._children_name_map["brief"] = "brief"

                                self.detail = Controller.Fabric.Oper.Link.Rack.Port.Rx.Detail()
                                self.detail.parent = self
                                self._children_name_map["detail"] = "detail"

                                self.state = Controller.Fabric.Oper.Link.Rack.Port.Rx.State()
                                self.state.parent = self
                                self._children_name_map["state"] = "state"

                                self.statistics = Controller.Fabric.Oper.Link.Rack.Port.Rx.Statistics()
                                self.statistics.parent = self
                                self._children_name_map["statistics"] = "statistics"

                                self.data_idx = YList(self)
                                self._segment_path = lambda: "rx"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Rx, [], name, value)


                            class DataIdx(Entity):
                                """
                                
                                
                                .. attribute:: port_data_idx  (key)
                                
                                	
                                	**type**\: int
                                
                                	**range:** \-9223372036854775808..9223372036854775807
                                
                                .. attribute:: sfe_port
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: admin_state
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: oper_state
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: near_end_cdr_ln
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: near_end_cxp_ch
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: far_end_cxp_ch
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: far_end_cdr_ln
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: neighbor_link
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: history
                                
                                	
                                	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Rx.DataIdx.History>`
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.Fabric.Oper.Link.Rack.Port.Rx.DataIdx, self).__init__()

                                    self.yang_name = "data_idx"
                                    self.yang_parent_name = "rx"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['port_data_idx']
                                    self._child_classes = OrderedDict([("history", ("history", Controller.Fabric.Oper.Link.Rack.Port.Rx.DataIdx.History))])
                                    self._leafs = OrderedDict([
                                        ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                        ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                        ('admin_state', YLeaf(YType.str, 'admin-state')),
                                        ('oper_state', YLeaf(YType.str, 'oper_state')),
                                        ('near_end_cdr_ln', YLeaf(YType.str, 'near_end_cdr_ln')),
                                        ('near_end_cxp_ch', YLeaf(YType.str, 'near_end_cxp_ch')),
                                        ('far_end_cxp_ch', YLeaf(YType.str, 'far_end_cxp_ch')),
                                        ('far_end_cdr_ln', YLeaf(YType.str, 'far_end_cdr_ln')),
                                        ('neighbor_link', YLeaf(YType.str, 'neighbor_link')),
                                    ])
                                    self.port_data_idx = None
                                    self.sfe_port = None
                                    self.admin_state = None
                                    self.oper_state = None
                                    self.near_end_cdr_ln = None
                                    self.near_end_cxp_ch = None
                                    self.far_end_cxp_ch = None
                                    self.far_end_cdr_ln = None
                                    self.neighbor_link = None

                                    self.history = YList(self)
                                    self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Rx.DataIdx, [u'port_data_idx', u'sfe_port', u'admin_state', u'oper_state', u'near_end_cdr_ln', u'near_end_cxp_ch', u'far_end_cxp_ch', u'far_end_cdr_ln', u'neighbor_link'], name, value)


                                class History(Entity):
                                    """
                                    
                                    
                                    .. attribute:: history_idx  (key)
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    .. attribute:: time_stamp
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: admin_state
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: oper_state
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: error_state
                                    
                                    	
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.Fabric.Oper.Link.Rack.Port.Rx.DataIdx.History, self).__init__()

                                        self.yang_name = "history"
                                        self.yang_parent_name = "data_idx"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['history_idx']
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                            ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                            ('admin_state', YLeaf(YType.str, 'admin-state')),
                                            ('oper_state', YLeaf(YType.str, 'oper_state')),
                                            ('error_state', YLeaf(YType.str, 'error_state')),
                                        ])
                                        self.history_idx = None
                                        self.time_stamp = None
                                        self.admin_state = None
                                        self.oper_state = None
                                        self.error_state = None
                                        self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Rx.DataIdx.History, [u'history_idx', u'time_stamp', u'admin_state', u'oper_state', u'error_state'], name, value)


                            class Brief(Entity):
                                """
                                
                                
                                .. attribute:: data_idx
                                
                                	
                                	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Rx.Brief.DataIdx>`
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.Fabric.Oper.Link.Rack.Port.Rx.Brief, self).__init__()

                                    self.yang_name = "brief"
                                    self.yang_parent_name = "rx"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Rx.Brief.DataIdx))])
                                    self._leafs = OrderedDict()

                                    self.data_idx = YList(self)
                                    self._segment_path = lambda: "brief"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Rx.Brief, [], name, value)


                                class DataIdx(Entity):
                                    """
                                    
                                    
                                    .. attribute:: port_data_idx  (key)
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** \-9223372036854775808..9223372036854775807
                                    
                                    .. attribute:: sfe_port
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: admin_state
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: oper_state
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: near_end_cdr_ln
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: near_end_cxp_ch
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: far_end_cxp_ch
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: far_end_cdr_ln
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: neighbor_link
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: history
                                    
                                    	
                                    	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Rx.Brief.DataIdx.History>`
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.Fabric.Oper.Link.Rack.Port.Rx.Brief.DataIdx, self).__init__()

                                        self.yang_name = "data_idx"
                                        self.yang_parent_name = "brief"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['port_data_idx']
                                        self._child_classes = OrderedDict([("history", ("history", Controller.Fabric.Oper.Link.Rack.Port.Rx.Brief.DataIdx.History))])
                                        self._leafs = OrderedDict([
                                            ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                            ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                            ('admin_state', YLeaf(YType.str, 'admin-state')),
                                            ('oper_state', YLeaf(YType.str, 'oper_state')),
                                            ('near_end_cdr_ln', YLeaf(YType.str, 'near_end_cdr_ln')),
                                            ('near_end_cxp_ch', YLeaf(YType.str, 'near_end_cxp_ch')),
                                            ('far_end_cxp_ch', YLeaf(YType.str, 'far_end_cxp_ch')),
                                            ('far_end_cdr_ln', YLeaf(YType.str, 'far_end_cdr_ln')),
                                            ('neighbor_link', YLeaf(YType.str, 'neighbor_link')),
                                        ])
                                        self.port_data_idx = None
                                        self.sfe_port = None
                                        self.admin_state = None
                                        self.oper_state = None
                                        self.near_end_cdr_ln = None
                                        self.near_end_cxp_ch = None
                                        self.far_end_cxp_ch = None
                                        self.far_end_cdr_ln = None
                                        self.neighbor_link = None

                                        self.history = YList(self)
                                        self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Rx.Brief.DataIdx, [u'port_data_idx', u'sfe_port', u'admin_state', u'oper_state', u'near_end_cdr_ln', u'near_end_cxp_ch', u'far_end_cxp_ch', u'far_end_cdr_ln', u'neighbor_link'], name, value)


                                    class History(Entity):
                                        """
                                        
                                        
                                        .. attribute:: history_idx  (key)
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** \-2147483648..2147483647
                                        
                                        .. attribute:: time_stamp
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: admin_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: oper_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: error_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Fabric.Oper.Link.Rack.Port.Rx.Brief.DataIdx.History, self).__init__()

                                            self.yang_name = "history"
                                            self.yang_parent_name = "data_idx"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['history_idx']
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                                ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                                ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                ('error_state', YLeaf(YType.str, 'error_state')),
                                            ])
                                            self.history_idx = None
                                            self.time_stamp = None
                                            self.admin_state = None
                                            self.oper_state = None
                                            self.error_state = None
                                            self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Rx.Brief.DataIdx.History, [u'history_idx', u'time_stamp', u'admin_state', u'oper_state', u'error_state'], name, value)


                            class Detail(Entity):
                                """
                                
                                
                                .. attribute:: data_idx
                                
                                	
                                	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Rx.Detail.DataIdx>`
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.Fabric.Oper.Link.Rack.Port.Rx.Detail, self).__init__()

                                    self.yang_name = "detail"
                                    self.yang_parent_name = "rx"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Rx.Detail.DataIdx))])
                                    self._leafs = OrderedDict()

                                    self.data_idx = YList(self)
                                    self._segment_path = lambda: "detail"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Rx.Detail, [], name, value)


                                class DataIdx(Entity):
                                    """
                                    
                                    
                                    .. attribute:: port_data_idx  (key)
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** \-9223372036854775808..9223372036854775807
                                    
                                    .. attribute:: sfe_port
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: admin_state
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: oper_state
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: near_end_cdr_ln
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: near_end_cxp_ch
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: far_end_cxp_ch
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: far_end_cdr_ln
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: neighbor_link
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: history
                                    
                                    	
                                    	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Rx.Detail.DataIdx.History>`
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.Fabric.Oper.Link.Rack.Port.Rx.Detail.DataIdx, self).__init__()

                                        self.yang_name = "data_idx"
                                        self.yang_parent_name = "detail"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['port_data_idx']
                                        self._child_classes = OrderedDict([("history", ("history", Controller.Fabric.Oper.Link.Rack.Port.Rx.Detail.DataIdx.History))])
                                        self._leafs = OrderedDict([
                                            ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                            ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                            ('admin_state', YLeaf(YType.str, 'admin-state')),
                                            ('oper_state', YLeaf(YType.str, 'oper_state')),
                                            ('near_end_cdr_ln', YLeaf(YType.str, 'near_end_cdr_ln')),
                                            ('near_end_cxp_ch', YLeaf(YType.str, 'near_end_cxp_ch')),
                                            ('far_end_cxp_ch', YLeaf(YType.str, 'far_end_cxp_ch')),
                                            ('far_end_cdr_ln', YLeaf(YType.str, 'far_end_cdr_ln')),
                                            ('neighbor_link', YLeaf(YType.str, 'neighbor_link')),
                                        ])
                                        self.port_data_idx = None
                                        self.sfe_port = None
                                        self.admin_state = None
                                        self.oper_state = None
                                        self.near_end_cdr_ln = None
                                        self.near_end_cxp_ch = None
                                        self.far_end_cxp_ch = None
                                        self.far_end_cdr_ln = None
                                        self.neighbor_link = None

                                        self.history = YList(self)
                                        self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Rx.Detail.DataIdx, [u'port_data_idx', u'sfe_port', u'admin_state', u'oper_state', u'near_end_cdr_ln', u'near_end_cxp_ch', u'far_end_cxp_ch', u'far_end_cdr_ln', u'neighbor_link'], name, value)


                                    class History(Entity):
                                        """
                                        
                                        
                                        .. attribute:: history_idx  (key)
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** \-2147483648..2147483647
                                        
                                        .. attribute:: time_stamp
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: admin_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: oper_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: error_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Fabric.Oper.Link.Rack.Port.Rx.Detail.DataIdx.History, self).__init__()

                                            self.yang_name = "history"
                                            self.yang_parent_name = "data_idx"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['history_idx']
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                                ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                                ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                ('error_state', YLeaf(YType.str, 'error_state')),
                                            ])
                                            self.history_idx = None
                                            self.time_stamp = None
                                            self.admin_state = None
                                            self.oper_state = None
                                            self.error_state = None
                                            self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Rx.Detail.DataIdx.History, [u'history_idx', u'time_stamp', u'admin_state', u'oper_state', u'error_state'], name, value)


                            class State(Entity):
                                """
                                
                                
                                .. attribute:: up
                                
                                	
                                	**type**\:  :py:class:`Up <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Up>`
                                
                                .. attribute:: down
                                
                                	
                                	**type**\:  :py:class:`Down <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Down>`
                                
                                .. attribute:: er
                                
                                	
                                	**type**\:  :py:class:`Er <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Er>`
                                
                                .. attribute:: mismatch
                                
                                	
                                	**type**\:  :py:class:`Mismatch <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Mismatch>`
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.Fabric.Oper.Link.Rack.Port.Rx.State, self).__init__()

                                    self.yang_name = "state"
                                    self.yang_parent_name = "rx"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([("up", ("up", Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Up)), ("down", ("down", Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Down)), ("er", ("er", Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Er)), ("mismatch", ("mismatch", Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Mismatch))])
                                    self._leafs = OrderedDict()

                                    self.up = Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Up()
                                    self.up.parent = self
                                    self._children_name_map["up"] = "up"

                                    self.down = Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Down()
                                    self.down.parent = self
                                    self._children_name_map["down"] = "down"

                                    self.er = Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Er()
                                    self.er.parent = self
                                    self._children_name_map["er"] = "er"

                                    self.mismatch = Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Mismatch()
                                    self.mismatch.parent = self
                                    self._children_name_map["mismatch"] = "mismatch"
                                    self._segment_path = lambda: "state"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Rx.State, [], name, value)


                                class Up(Entity):
                                    """
                                    
                                    
                                    .. attribute:: data_idx
                                    
                                    	
                                    	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Up.DataIdx>`
                                    
                                    .. attribute:: brief
                                    
                                    	
                                    	**type**\:  :py:class:`Brief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Up.Brief>`
                                    
                                    .. attribute:: detail
                                    
                                    	
                                    	**type**\:  :py:class:`Detail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Up.Detail>`
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Up, self).__init__()

                                        self.yang_name = "up"
                                        self.yang_parent_name = "state"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Up.DataIdx)), ("brief", ("brief", Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Up.Brief)), ("detail", ("detail", Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Up.Detail))])
                                        self._leafs = OrderedDict()

                                        self.brief = Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Up.Brief()
                                        self.brief.parent = self
                                        self._children_name_map["brief"] = "brief"

                                        self.detail = Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Up.Detail()
                                        self.detail.parent = self
                                        self._children_name_map["detail"] = "detail"

                                        self.data_idx = YList(self)
                                        self._segment_path = lambda: "up"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Up, [], name, value)


                                    class DataIdx(Entity):
                                        """
                                        
                                        
                                        .. attribute:: port_data_idx  (key)
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** \-9223372036854775808..9223372036854775807
                                        
                                        .. attribute:: sfe_port
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: admin_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: oper_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: near_end_cdr_ln
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: near_end_cxp_ch
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: far_end_cxp_ch
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: far_end_cdr_ln
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: neighbor_link
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: history
                                        
                                        	
                                        	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Up.DataIdx.History>`
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Up.DataIdx, self).__init__()

                                            self.yang_name = "data_idx"
                                            self.yang_parent_name = "up"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['port_data_idx']
                                            self._child_classes = OrderedDict([("history", ("history", Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Up.DataIdx.History))])
                                            self._leafs = OrderedDict([
                                                ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                                ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                                ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                ('near_end_cdr_ln', YLeaf(YType.str, 'near_end_cdr_ln')),
                                                ('near_end_cxp_ch', YLeaf(YType.str, 'near_end_cxp_ch')),
                                                ('far_end_cxp_ch', YLeaf(YType.str, 'far_end_cxp_ch')),
                                                ('far_end_cdr_ln', YLeaf(YType.str, 'far_end_cdr_ln')),
                                                ('neighbor_link', YLeaf(YType.str, 'neighbor_link')),
                                            ])
                                            self.port_data_idx = None
                                            self.sfe_port = None
                                            self.admin_state = None
                                            self.oper_state = None
                                            self.near_end_cdr_ln = None
                                            self.near_end_cxp_ch = None
                                            self.far_end_cxp_ch = None
                                            self.far_end_cdr_ln = None
                                            self.neighbor_link = None

                                            self.history = YList(self)
                                            self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Up.DataIdx, [u'port_data_idx', u'sfe_port', u'admin_state', u'oper_state', u'near_end_cdr_ln', u'near_end_cxp_ch', u'far_end_cxp_ch', u'far_end_cdr_ln', u'neighbor_link'], name, value)


                                        class History(Entity):
                                            """
                                            
                                            
                                            .. attribute:: history_idx  (key)
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: time_stamp
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: admin_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: oper_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: error_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Up.DataIdx.History, self).__init__()

                                                self.yang_name = "history"
                                                self.yang_parent_name = "data_idx"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['history_idx']
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                                    ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                                    ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                    ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                    ('error_state', YLeaf(YType.str, 'error_state')),
                                                ])
                                                self.history_idx = None
                                                self.time_stamp = None
                                                self.admin_state = None
                                                self.oper_state = None
                                                self.error_state = None
                                                self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Up.DataIdx.History, [u'history_idx', u'time_stamp', u'admin_state', u'oper_state', u'error_state'], name, value)


                                    class Brief(Entity):
                                        """
                                        
                                        
                                        .. attribute:: data_idx
                                        
                                        	
                                        	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Up.Brief.DataIdx>`
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Up.Brief, self).__init__()

                                            self.yang_name = "brief"
                                            self.yang_parent_name = "up"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Up.Brief.DataIdx))])
                                            self._leafs = OrderedDict()

                                            self.data_idx = YList(self)
                                            self._segment_path = lambda: "brief"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Up.Brief, [], name, value)


                                        class DataIdx(Entity):
                                            """
                                            
                                            
                                            .. attribute:: port_data_idx  (key)
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** \-9223372036854775808..9223372036854775807
                                            
                                            .. attribute:: sfe_port
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: admin_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: oper_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: near_end_cdr_ln
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: near_end_cxp_ch
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: far_end_cxp_ch
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: far_end_cdr_ln
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: neighbor_link
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: history
                                            
                                            	
                                            	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Up.Brief.DataIdx.History>`
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Up.Brief.DataIdx, self).__init__()

                                                self.yang_name = "data_idx"
                                                self.yang_parent_name = "brief"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['port_data_idx']
                                                self._child_classes = OrderedDict([("history", ("history", Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Up.Brief.DataIdx.History))])
                                                self._leafs = OrderedDict([
                                                    ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                                    ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                                    ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                    ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                    ('near_end_cdr_ln', YLeaf(YType.str, 'near_end_cdr_ln')),
                                                    ('near_end_cxp_ch', YLeaf(YType.str, 'near_end_cxp_ch')),
                                                    ('far_end_cxp_ch', YLeaf(YType.str, 'far_end_cxp_ch')),
                                                    ('far_end_cdr_ln', YLeaf(YType.str, 'far_end_cdr_ln')),
                                                    ('neighbor_link', YLeaf(YType.str, 'neighbor_link')),
                                                ])
                                                self.port_data_idx = None
                                                self.sfe_port = None
                                                self.admin_state = None
                                                self.oper_state = None
                                                self.near_end_cdr_ln = None
                                                self.near_end_cxp_ch = None
                                                self.far_end_cxp_ch = None
                                                self.far_end_cdr_ln = None
                                                self.neighbor_link = None

                                                self.history = YList(self)
                                                self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Up.Brief.DataIdx, [u'port_data_idx', u'sfe_port', u'admin_state', u'oper_state', u'near_end_cdr_ln', u'near_end_cxp_ch', u'far_end_cxp_ch', u'far_end_cdr_ln', u'neighbor_link'], name, value)


                                            class History(Entity):
                                                """
                                                
                                                
                                                .. attribute:: history_idx  (key)
                                                
                                                	
                                                	**type**\: int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                .. attribute:: time_stamp
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: admin_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: oper_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: error_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                

                                                """

                                                _prefix = 'calvados_controllers'
                                                _revision = '2017-01-31'

                                                def __init__(self):
                                                    super(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Up.Brief.DataIdx.History, self).__init__()

                                                    self.yang_name = "history"
                                                    self.yang_parent_name = "data_idx"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['history_idx']
                                                    self._child_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                                        ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                                        ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                        ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                        ('error_state', YLeaf(YType.str, 'error_state')),
                                                    ])
                                                    self.history_idx = None
                                                    self.time_stamp = None
                                                    self.admin_state = None
                                                    self.oper_state = None
                                                    self.error_state = None
                                                    self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Up.Brief.DataIdx.History, [u'history_idx', u'time_stamp', u'admin_state', u'oper_state', u'error_state'], name, value)


                                    class Detail(Entity):
                                        """
                                        
                                        
                                        .. attribute:: data_idx
                                        
                                        	
                                        	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Up.Detail.DataIdx>`
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Up.Detail, self).__init__()

                                            self.yang_name = "detail"
                                            self.yang_parent_name = "up"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Up.Detail.DataIdx))])
                                            self._leafs = OrderedDict()

                                            self.data_idx = YList(self)
                                            self._segment_path = lambda: "detail"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Up.Detail, [], name, value)


                                        class DataIdx(Entity):
                                            """
                                            
                                            
                                            .. attribute:: port_data_idx  (key)
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** \-9223372036854775808..9223372036854775807
                                            
                                            .. attribute:: sfe_port
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: admin_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: oper_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: near_end_cdr_ln
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: near_end_cxp_ch
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: far_end_cxp_ch
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: far_end_cdr_ln
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: neighbor_link
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: history
                                            
                                            	
                                            	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Up.Detail.DataIdx.History>`
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Up.Detail.DataIdx, self).__init__()

                                                self.yang_name = "data_idx"
                                                self.yang_parent_name = "detail"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['port_data_idx']
                                                self._child_classes = OrderedDict([("history", ("history", Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Up.Detail.DataIdx.History))])
                                                self._leafs = OrderedDict([
                                                    ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                                    ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                                    ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                    ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                    ('near_end_cdr_ln', YLeaf(YType.str, 'near_end_cdr_ln')),
                                                    ('near_end_cxp_ch', YLeaf(YType.str, 'near_end_cxp_ch')),
                                                    ('far_end_cxp_ch', YLeaf(YType.str, 'far_end_cxp_ch')),
                                                    ('far_end_cdr_ln', YLeaf(YType.str, 'far_end_cdr_ln')),
                                                    ('neighbor_link', YLeaf(YType.str, 'neighbor_link')),
                                                ])
                                                self.port_data_idx = None
                                                self.sfe_port = None
                                                self.admin_state = None
                                                self.oper_state = None
                                                self.near_end_cdr_ln = None
                                                self.near_end_cxp_ch = None
                                                self.far_end_cxp_ch = None
                                                self.far_end_cdr_ln = None
                                                self.neighbor_link = None

                                                self.history = YList(self)
                                                self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Up.Detail.DataIdx, [u'port_data_idx', u'sfe_port', u'admin_state', u'oper_state', u'near_end_cdr_ln', u'near_end_cxp_ch', u'far_end_cxp_ch', u'far_end_cdr_ln', u'neighbor_link'], name, value)


                                            class History(Entity):
                                                """
                                                
                                                
                                                .. attribute:: history_idx  (key)
                                                
                                                	
                                                	**type**\: int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                .. attribute:: time_stamp
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: admin_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: oper_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: error_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                

                                                """

                                                _prefix = 'calvados_controllers'
                                                _revision = '2017-01-31'

                                                def __init__(self):
                                                    super(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Up.Detail.DataIdx.History, self).__init__()

                                                    self.yang_name = "history"
                                                    self.yang_parent_name = "data_idx"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['history_idx']
                                                    self._child_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                                        ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                                        ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                        ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                        ('error_state', YLeaf(YType.str, 'error_state')),
                                                    ])
                                                    self.history_idx = None
                                                    self.time_stamp = None
                                                    self.admin_state = None
                                                    self.oper_state = None
                                                    self.error_state = None
                                                    self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Up.Detail.DataIdx.History, [u'history_idx', u'time_stamp', u'admin_state', u'oper_state', u'error_state'], name, value)


                                class Down(Entity):
                                    """
                                    
                                    
                                    .. attribute:: data_idx
                                    
                                    	
                                    	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Down.DataIdx>`
                                    
                                    .. attribute:: brief
                                    
                                    	
                                    	**type**\:  :py:class:`Brief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Down.Brief>`
                                    
                                    .. attribute:: detail
                                    
                                    	
                                    	**type**\:  :py:class:`Detail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Down.Detail>`
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Down, self).__init__()

                                        self.yang_name = "down"
                                        self.yang_parent_name = "state"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Down.DataIdx)), ("brief", ("brief", Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Down.Brief)), ("detail", ("detail", Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Down.Detail))])
                                        self._leafs = OrderedDict()

                                        self.brief = Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Down.Brief()
                                        self.brief.parent = self
                                        self._children_name_map["brief"] = "brief"

                                        self.detail = Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Down.Detail()
                                        self.detail.parent = self
                                        self._children_name_map["detail"] = "detail"

                                        self.data_idx = YList(self)
                                        self._segment_path = lambda: "down"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Down, [], name, value)


                                    class DataIdx(Entity):
                                        """
                                        
                                        
                                        .. attribute:: port_data_idx  (key)
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** \-9223372036854775808..9223372036854775807
                                        
                                        .. attribute:: sfe_port
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: admin_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: oper_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: near_end_cdr_ln
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: near_end_cxp_ch
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: far_end_cxp_ch
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: far_end_cdr_ln
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: neighbor_link
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: history
                                        
                                        	
                                        	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Down.DataIdx.History>`
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Down.DataIdx, self).__init__()

                                            self.yang_name = "data_idx"
                                            self.yang_parent_name = "down"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['port_data_idx']
                                            self._child_classes = OrderedDict([("history", ("history", Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Down.DataIdx.History))])
                                            self._leafs = OrderedDict([
                                                ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                                ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                                ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                ('near_end_cdr_ln', YLeaf(YType.str, 'near_end_cdr_ln')),
                                                ('near_end_cxp_ch', YLeaf(YType.str, 'near_end_cxp_ch')),
                                                ('far_end_cxp_ch', YLeaf(YType.str, 'far_end_cxp_ch')),
                                                ('far_end_cdr_ln', YLeaf(YType.str, 'far_end_cdr_ln')),
                                                ('neighbor_link', YLeaf(YType.str, 'neighbor_link')),
                                            ])
                                            self.port_data_idx = None
                                            self.sfe_port = None
                                            self.admin_state = None
                                            self.oper_state = None
                                            self.near_end_cdr_ln = None
                                            self.near_end_cxp_ch = None
                                            self.far_end_cxp_ch = None
                                            self.far_end_cdr_ln = None
                                            self.neighbor_link = None

                                            self.history = YList(self)
                                            self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Down.DataIdx, [u'port_data_idx', u'sfe_port', u'admin_state', u'oper_state', u'near_end_cdr_ln', u'near_end_cxp_ch', u'far_end_cxp_ch', u'far_end_cdr_ln', u'neighbor_link'], name, value)


                                        class History(Entity):
                                            """
                                            
                                            
                                            .. attribute:: history_idx  (key)
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: time_stamp
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: admin_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: oper_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: error_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Down.DataIdx.History, self).__init__()

                                                self.yang_name = "history"
                                                self.yang_parent_name = "data_idx"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['history_idx']
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                                    ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                                    ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                    ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                    ('error_state', YLeaf(YType.str, 'error_state')),
                                                ])
                                                self.history_idx = None
                                                self.time_stamp = None
                                                self.admin_state = None
                                                self.oper_state = None
                                                self.error_state = None
                                                self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Down.DataIdx.History, [u'history_idx', u'time_stamp', u'admin_state', u'oper_state', u'error_state'], name, value)


                                    class Brief(Entity):
                                        """
                                        
                                        
                                        .. attribute:: data_idx
                                        
                                        	
                                        	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Down.Brief.DataIdx>`
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Down.Brief, self).__init__()

                                            self.yang_name = "brief"
                                            self.yang_parent_name = "down"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Down.Brief.DataIdx))])
                                            self._leafs = OrderedDict()

                                            self.data_idx = YList(self)
                                            self._segment_path = lambda: "brief"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Down.Brief, [], name, value)


                                        class DataIdx(Entity):
                                            """
                                            
                                            
                                            .. attribute:: port_data_idx  (key)
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** \-9223372036854775808..9223372036854775807
                                            
                                            .. attribute:: sfe_port
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: admin_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: oper_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: near_end_cdr_ln
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: near_end_cxp_ch
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: far_end_cxp_ch
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: far_end_cdr_ln
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: neighbor_link
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: history
                                            
                                            	
                                            	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Down.Brief.DataIdx.History>`
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Down.Brief.DataIdx, self).__init__()

                                                self.yang_name = "data_idx"
                                                self.yang_parent_name = "brief"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['port_data_idx']
                                                self._child_classes = OrderedDict([("history", ("history", Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Down.Brief.DataIdx.History))])
                                                self._leafs = OrderedDict([
                                                    ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                                    ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                                    ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                    ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                    ('near_end_cdr_ln', YLeaf(YType.str, 'near_end_cdr_ln')),
                                                    ('near_end_cxp_ch', YLeaf(YType.str, 'near_end_cxp_ch')),
                                                    ('far_end_cxp_ch', YLeaf(YType.str, 'far_end_cxp_ch')),
                                                    ('far_end_cdr_ln', YLeaf(YType.str, 'far_end_cdr_ln')),
                                                    ('neighbor_link', YLeaf(YType.str, 'neighbor_link')),
                                                ])
                                                self.port_data_idx = None
                                                self.sfe_port = None
                                                self.admin_state = None
                                                self.oper_state = None
                                                self.near_end_cdr_ln = None
                                                self.near_end_cxp_ch = None
                                                self.far_end_cxp_ch = None
                                                self.far_end_cdr_ln = None
                                                self.neighbor_link = None

                                                self.history = YList(self)
                                                self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Down.Brief.DataIdx, [u'port_data_idx', u'sfe_port', u'admin_state', u'oper_state', u'near_end_cdr_ln', u'near_end_cxp_ch', u'far_end_cxp_ch', u'far_end_cdr_ln', u'neighbor_link'], name, value)


                                            class History(Entity):
                                                """
                                                
                                                
                                                .. attribute:: history_idx  (key)
                                                
                                                	
                                                	**type**\: int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                .. attribute:: time_stamp
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: admin_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: oper_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: error_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                

                                                """

                                                _prefix = 'calvados_controllers'
                                                _revision = '2017-01-31'

                                                def __init__(self):
                                                    super(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Down.Brief.DataIdx.History, self).__init__()

                                                    self.yang_name = "history"
                                                    self.yang_parent_name = "data_idx"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['history_idx']
                                                    self._child_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                                        ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                                        ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                        ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                        ('error_state', YLeaf(YType.str, 'error_state')),
                                                    ])
                                                    self.history_idx = None
                                                    self.time_stamp = None
                                                    self.admin_state = None
                                                    self.oper_state = None
                                                    self.error_state = None
                                                    self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Down.Brief.DataIdx.History, [u'history_idx', u'time_stamp', u'admin_state', u'oper_state', u'error_state'], name, value)


                                    class Detail(Entity):
                                        """
                                        
                                        
                                        .. attribute:: data_idx
                                        
                                        	
                                        	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Down.Detail.DataIdx>`
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Down.Detail, self).__init__()

                                            self.yang_name = "detail"
                                            self.yang_parent_name = "down"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Down.Detail.DataIdx))])
                                            self._leafs = OrderedDict()

                                            self.data_idx = YList(self)
                                            self._segment_path = lambda: "detail"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Down.Detail, [], name, value)


                                        class DataIdx(Entity):
                                            """
                                            
                                            
                                            .. attribute:: port_data_idx  (key)
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** \-9223372036854775808..9223372036854775807
                                            
                                            .. attribute:: sfe_port
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: admin_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: oper_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: near_end_cdr_ln
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: near_end_cxp_ch
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: far_end_cxp_ch
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: far_end_cdr_ln
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: neighbor_link
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: history
                                            
                                            	
                                            	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Down.Detail.DataIdx.History>`
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Down.Detail.DataIdx, self).__init__()

                                                self.yang_name = "data_idx"
                                                self.yang_parent_name = "detail"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['port_data_idx']
                                                self._child_classes = OrderedDict([("history", ("history", Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Down.Detail.DataIdx.History))])
                                                self._leafs = OrderedDict([
                                                    ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                                    ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                                    ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                    ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                    ('near_end_cdr_ln', YLeaf(YType.str, 'near_end_cdr_ln')),
                                                    ('near_end_cxp_ch', YLeaf(YType.str, 'near_end_cxp_ch')),
                                                    ('far_end_cxp_ch', YLeaf(YType.str, 'far_end_cxp_ch')),
                                                    ('far_end_cdr_ln', YLeaf(YType.str, 'far_end_cdr_ln')),
                                                    ('neighbor_link', YLeaf(YType.str, 'neighbor_link')),
                                                ])
                                                self.port_data_idx = None
                                                self.sfe_port = None
                                                self.admin_state = None
                                                self.oper_state = None
                                                self.near_end_cdr_ln = None
                                                self.near_end_cxp_ch = None
                                                self.far_end_cxp_ch = None
                                                self.far_end_cdr_ln = None
                                                self.neighbor_link = None

                                                self.history = YList(self)
                                                self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Down.Detail.DataIdx, [u'port_data_idx', u'sfe_port', u'admin_state', u'oper_state', u'near_end_cdr_ln', u'near_end_cxp_ch', u'far_end_cxp_ch', u'far_end_cdr_ln', u'neighbor_link'], name, value)


                                            class History(Entity):
                                                """
                                                
                                                
                                                .. attribute:: history_idx  (key)
                                                
                                                	
                                                	**type**\: int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                .. attribute:: time_stamp
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: admin_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: oper_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: error_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                

                                                """

                                                _prefix = 'calvados_controllers'
                                                _revision = '2017-01-31'

                                                def __init__(self):
                                                    super(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Down.Detail.DataIdx.History, self).__init__()

                                                    self.yang_name = "history"
                                                    self.yang_parent_name = "data_idx"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['history_idx']
                                                    self._child_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                                        ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                                        ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                        ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                        ('error_state', YLeaf(YType.str, 'error_state')),
                                                    ])
                                                    self.history_idx = None
                                                    self.time_stamp = None
                                                    self.admin_state = None
                                                    self.oper_state = None
                                                    self.error_state = None
                                                    self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Down.Detail.DataIdx.History, [u'history_idx', u'time_stamp', u'admin_state', u'oper_state', u'error_state'], name, value)


                                class Er(Entity):
                                    """
                                    
                                    
                                    .. attribute:: data_idx
                                    
                                    	
                                    	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Er.DataIdx>`
                                    
                                    .. attribute:: brief
                                    
                                    	
                                    	**type**\:  :py:class:`Brief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Er.Brief>`
                                    
                                    .. attribute:: detail
                                    
                                    	
                                    	**type**\:  :py:class:`Detail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Er.Detail>`
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Er, self).__init__()

                                        self.yang_name = "er"
                                        self.yang_parent_name = "state"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Er.DataIdx)), ("brief", ("brief", Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Er.Brief)), ("detail", ("detail", Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Er.Detail))])
                                        self._leafs = OrderedDict()

                                        self.brief = Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Er.Brief()
                                        self.brief.parent = self
                                        self._children_name_map["brief"] = "brief"

                                        self.detail = Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Er.Detail()
                                        self.detail.parent = self
                                        self._children_name_map["detail"] = "detail"

                                        self.data_idx = YList(self)
                                        self._segment_path = lambda: "er"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Er, [], name, value)


                                    class DataIdx(Entity):
                                        """
                                        
                                        
                                        .. attribute:: port_data_idx  (key)
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** \-9223372036854775808..9223372036854775807
                                        
                                        .. attribute:: sfe_port
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: admin_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: oper_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: near_end_cdr_ln
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: near_end_cxp_ch
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: far_end_cxp_ch
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: far_end_cdr_ln
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: neighbor_link
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: history
                                        
                                        	
                                        	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Er.DataIdx.History>`
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Er.DataIdx, self).__init__()

                                            self.yang_name = "data_idx"
                                            self.yang_parent_name = "er"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['port_data_idx']
                                            self._child_classes = OrderedDict([("history", ("history", Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Er.DataIdx.History))])
                                            self._leafs = OrderedDict([
                                                ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                                ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                                ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                ('near_end_cdr_ln', YLeaf(YType.str, 'near_end_cdr_ln')),
                                                ('near_end_cxp_ch', YLeaf(YType.str, 'near_end_cxp_ch')),
                                                ('far_end_cxp_ch', YLeaf(YType.str, 'far_end_cxp_ch')),
                                                ('far_end_cdr_ln', YLeaf(YType.str, 'far_end_cdr_ln')),
                                                ('neighbor_link', YLeaf(YType.str, 'neighbor_link')),
                                            ])
                                            self.port_data_idx = None
                                            self.sfe_port = None
                                            self.admin_state = None
                                            self.oper_state = None
                                            self.near_end_cdr_ln = None
                                            self.near_end_cxp_ch = None
                                            self.far_end_cxp_ch = None
                                            self.far_end_cdr_ln = None
                                            self.neighbor_link = None

                                            self.history = YList(self)
                                            self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Er.DataIdx, [u'port_data_idx', u'sfe_port', u'admin_state', u'oper_state', u'near_end_cdr_ln', u'near_end_cxp_ch', u'far_end_cxp_ch', u'far_end_cdr_ln', u'neighbor_link'], name, value)


                                        class History(Entity):
                                            """
                                            
                                            
                                            .. attribute:: history_idx  (key)
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: time_stamp
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: admin_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: oper_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: error_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Er.DataIdx.History, self).__init__()

                                                self.yang_name = "history"
                                                self.yang_parent_name = "data_idx"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['history_idx']
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                                    ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                                    ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                    ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                    ('error_state', YLeaf(YType.str, 'error_state')),
                                                ])
                                                self.history_idx = None
                                                self.time_stamp = None
                                                self.admin_state = None
                                                self.oper_state = None
                                                self.error_state = None
                                                self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Er.DataIdx.History, [u'history_idx', u'time_stamp', u'admin_state', u'oper_state', u'error_state'], name, value)


                                    class Brief(Entity):
                                        """
                                        
                                        
                                        .. attribute:: data_idx
                                        
                                        	
                                        	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Er.Brief.DataIdx>`
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Er.Brief, self).__init__()

                                            self.yang_name = "brief"
                                            self.yang_parent_name = "er"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Er.Brief.DataIdx))])
                                            self._leafs = OrderedDict()

                                            self.data_idx = YList(self)
                                            self._segment_path = lambda: "brief"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Er.Brief, [], name, value)


                                        class DataIdx(Entity):
                                            """
                                            
                                            
                                            .. attribute:: port_data_idx  (key)
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** \-9223372036854775808..9223372036854775807
                                            
                                            .. attribute:: sfe_port
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: admin_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: oper_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: near_end_cdr_ln
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: near_end_cxp_ch
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: far_end_cxp_ch
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: far_end_cdr_ln
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: neighbor_link
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: history
                                            
                                            	
                                            	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Er.Brief.DataIdx.History>`
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Er.Brief.DataIdx, self).__init__()

                                                self.yang_name = "data_idx"
                                                self.yang_parent_name = "brief"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['port_data_idx']
                                                self._child_classes = OrderedDict([("history", ("history", Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Er.Brief.DataIdx.History))])
                                                self._leafs = OrderedDict([
                                                    ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                                    ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                                    ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                    ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                    ('near_end_cdr_ln', YLeaf(YType.str, 'near_end_cdr_ln')),
                                                    ('near_end_cxp_ch', YLeaf(YType.str, 'near_end_cxp_ch')),
                                                    ('far_end_cxp_ch', YLeaf(YType.str, 'far_end_cxp_ch')),
                                                    ('far_end_cdr_ln', YLeaf(YType.str, 'far_end_cdr_ln')),
                                                    ('neighbor_link', YLeaf(YType.str, 'neighbor_link')),
                                                ])
                                                self.port_data_idx = None
                                                self.sfe_port = None
                                                self.admin_state = None
                                                self.oper_state = None
                                                self.near_end_cdr_ln = None
                                                self.near_end_cxp_ch = None
                                                self.far_end_cxp_ch = None
                                                self.far_end_cdr_ln = None
                                                self.neighbor_link = None

                                                self.history = YList(self)
                                                self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Er.Brief.DataIdx, [u'port_data_idx', u'sfe_port', u'admin_state', u'oper_state', u'near_end_cdr_ln', u'near_end_cxp_ch', u'far_end_cxp_ch', u'far_end_cdr_ln', u'neighbor_link'], name, value)


                                            class History(Entity):
                                                """
                                                
                                                
                                                .. attribute:: history_idx  (key)
                                                
                                                	
                                                	**type**\: int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                .. attribute:: time_stamp
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: admin_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: oper_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: error_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                

                                                """

                                                _prefix = 'calvados_controllers'
                                                _revision = '2017-01-31'

                                                def __init__(self):
                                                    super(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Er.Brief.DataIdx.History, self).__init__()

                                                    self.yang_name = "history"
                                                    self.yang_parent_name = "data_idx"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['history_idx']
                                                    self._child_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                                        ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                                        ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                        ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                        ('error_state', YLeaf(YType.str, 'error_state')),
                                                    ])
                                                    self.history_idx = None
                                                    self.time_stamp = None
                                                    self.admin_state = None
                                                    self.oper_state = None
                                                    self.error_state = None
                                                    self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Er.Brief.DataIdx.History, [u'history_idx', u'time_stamp', u'admin_state', u'oper_state', u'error_state'], name, value)


                                    class Detail(Entity):
                                        """
                                        
                                        
                                        .. attribute:: data_idx
                                        
                                        	
                                        	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Er.Detail.DataIdx>`
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Er.Detail, self).__init__()

                                            self.yang_name = "detail"
                                            self.yang_parent_name = "er"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Er.Detail.DataIdx))])
                                            self._leafs = OrderedDict()

                                            self.data_idx = YList(self)
                                            self._segment_path = lambda: "detail"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Er.Detail, [], name, value)


                                        class DataIdx(Entity):
                                            """
                                            
                                            
                                            .. attribute:: port_data_idx  (key)
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** \-9223372036854775808..9223372036854775807
                                            
                                            .. attribute:: sfe_port
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: admin_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: oper_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: near_end_cdr_ln
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: near_end_cxp_ch
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: far_end_cxp_ch
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: far_end_cdr_ln
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: neighbor_link
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: history
                                            
                                            	
                                            	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Er.Detail.DataIdx.History>`
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Er.Detail.DataIdx, self).__init__()

                                                self.yang_name = "data_idx"
                                                self.yang_parent_name = "detail"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['port_data_idx']
                                                self._child_classes = OrderedDict([("history", ("history", Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Er.Detail.DataIdx.History))])
                                                self._leafs = OrderedDict([
                                                    ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                                    ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                                    ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                    ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                    ('near_end_cdr_ln', YLeaf(YType.str, 'near_end_cdr_ln')),
                                                    ('near_end_cxp_ch', YLeaf(YType.str, 'near_end_cxp_ch')),
                                                    ('far_end_cxp_ch', YLeaf(YType.str, 'far_end_cxp_ch')),
                                                    ('far_end_cdr_ln', YLeaf(YType.str, 'far_end_cdr_ln')),
                                                    ('neighbor_link', YLeaf(YType.str, 'neighbor_link')),
                                                ])
                                                self.port_data_idx = None
                                                self.sfe_port = None
                                                self.admin_state = None
                                                self.oper_state = None
                                                self.near_end_cdr_ln = None
                                                self.near_end_cxp_ch = None
                                                self.far_end_cxp_ch = None
                                                self.far_end_cdr_ln = None
                                                self.neighbor_link = None

                                                self.history = YList(self)
                                                self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Er.Detail.DataIdx, [u'port_data_idx', u'sfe_port', u'admin_state', u'oper_state', u'near_end_cdr_ln', u'near_end_cxp_ch', u'far_end_cxp_ch', u'far_end_cdr_ln', u'neighbor_link'], name, value)


                                            class History(Entity):
                                                """
                                                
                                                
                                                .. attribute:: history_idx  (key)
                                                
                                                	
                                                	**type**\: int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                .. attribute:: time_stamp
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: admin_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: oper_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: error_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                

                                                """

                                                _prefix = 'calvados_controllers'
                                                _revision = '2017-01-31'

                                                def __init__(self):
                                                    super(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Er.Detail.DataIdx.History, self).__init__()

                                                    self.yang_name = "history"
                                                    self.yang_parent_name = "data_idx"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['history_idx']
                                                    self._child_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                                        ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                                        ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                        ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                        ('error_state', YLeaf(YType.str, 'error_state')),
                                                    ])
                                                    self.history_idx = None
                                                    self.time_stamp = None
                                                    self.admin_state = None
                                                    self.oper_state = None
                                                    self.error_state = None
                                                    self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Er.Detail.DataIdx.History, [u'history_idx', u'time_stamp', u'admin_state', u'oper_state', u'error_state'], name, value)


                                class Mismatch(Entity):
                                    """
                                    
                                    
                                    .. attribute:: data_idx
                                    
                                    	
                                    	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Mismatch.DataIdx>`
                                    
                                    .. attribute:: brief
                                    
                                    	
                                    	**type**\:  :py:class:`Brief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Mismatch.Brief>`
                                    
                                    .. attribute:: detail
                                    
                                    	
                                    	**type**\:  :py:class:`Detail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Mismatch.Detail>`
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Mismatch, self).__init__()

                                        self.yang_name = "mismatch"
                                        self.yang_parent_name = "state"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Mismatch.DataIdx)), ("brief", ("brief", Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Mismatch.Brief)), ("detail", ("detail", Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Mismatch.Detail))])
                                        self._leafs = OrderedDict()

                                        self.brief = Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Mismatch.Brief()
                                        self.brief.parent = self
                                        self._children_name_map["brief"] = "brief"

                                        self.detail = Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Mismatch.Detail()
                                        self.detail.parent = self
                                        self._children_name_map["detail"] = "detail"

                                        self.data_idx = YList(self)
                                        self._segment_path = lambda: "mismatch"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Mismatch, [], name, value)


                                    class DataIdx(Entity):
                                        """
                                        
                                        
                                        .. attribute:: port_data_idx  (key)
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** \-9223372036854775808..9223372036854775807
                                        
                                        .. attribute:: sfe_port
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: admin_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: oper_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: near_end_cdr_ln
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: near_end_cxp_ch
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: far_end_cxp_ch
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: far_end_cdr_ln
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: neighbor_link
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: history
                                        
                                        	
                                        	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Mismatch.DataIdx.History>`
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Mismatch.DataIdx, self).__init__()

                                            self.yang_name = "data_idx"
                                            self.yang_parent_name = "mismatch"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['port_data_idx']
                                            self._child_classes = OrderedDict([("history", ("history", Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Mismatch.DataIdx.History))])
                                            self._leafs = OrderedDict([
                                                ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                                ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                                ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                ('near_end_cdr_ln', YLeaf(YType.str, 'near_end_cdr_ln')),
                                                ('near_end_cxp_ch', YLeaf(YType.str, 'near_end_cxp_ch')),
                                                ('far_end_cxp_ch', YLeaf(YType.str, 'far_end_cxp_ch')),
                                                ('far_end_cdr_ln', YLeaf(YType.str, 'far_end_cdr_ln')),
                                                ('neighbor_link', YLeaf(YType.str, 'neighbor_link')),
                                            ])
                                            self.port_data_idx = None
                                            self.sfe_port = None
                                            self.admin_state = None
                                            self.oper_state = None
                                            self.near_end_cdr_ln = None
                                            self.near_end_cxp_ch = None
                                            self.far_end_cxp_ch = None
                                            self.far_end_cdr_ln = None
                                            self.neighbor_link = None

                                            self.history = YList(self)
                                            self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Mismatch.DataIdx, [u'port_data_idx', u'sfe_port', u'admin_state', u'oper_state', u'near_end_cdr_ln', u'near_end_cxp_ch', u'far_end_cxp_ch', u'far_end_cdr_ln', u'neighbor_link'], name, value)


                                        class History(Entity):
                                            """
                                            
                                            
                                            .. attribute:: history_idx  (key)
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: time_stamp
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: admin_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: oper_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: error_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Mismatch.DataIdx.History, self).__init__()

                                                self.yang_name = "history"
                                                self.yang_parent_name = "data_idx"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['history_idx']
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                                    ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                                    ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                    ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                    ('error_state', YLeaf(YType.str, 'error_state')),
                                                ])
                                                self.history_idx = None
                                                self.time_stamp = None
                                                self.admin_state = None
                                                self.oper_state = None
                                                self.error_state = None
                                                self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Mismatch.DataIdx.History, [u'history_idx', u'time_stamp', u'admin_state', u'oper_state', u'error_state'], name, value)


                                    class Brief(Entity):
                                        """
                                        
                                        
                                        .. attribute:: data_idx
                                        
                                        	
                                        	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Mismatch.Brief.DataIdx>`
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Mismatch.Brief, self).__init__()

                                            self.yang_name = "brief"
                                            self.yang_parent_name = "mismatch"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Mismatch.Brief.DataIdx))])
                                            self._leafs = OrderedDict()

                                            self.data_idx = YList(self)
                                            self._segment_path = lambda: "brief"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Mismatch.Brief, [], name, value)


                                        class DataIdx(Entity):
                                            """
                                            
                                            
                                            .. attribute:: port_data_idx  (key)
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** \-9223372036854775808..9223372036854775807
                                            
                                            .. attribute:: sfe_port
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: admin_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: oper_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: near_end_cdr_ln
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: near_end_cxp_ch
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: far_end_cxp_ch
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: far_end_cdr_ln
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: neighbor_link
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: history
                                            
                                            	
                                            	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Mismatch.Brief.DataIdx.History>`
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Mismatch.Brief.DataIdx, self).__init__()

                                                self.yang_name = "data_idx"
                                                self.yang_parent_name = "brief"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['port_data_idx']
                                                self._child_classes = OrderedDict([("history", ("history", Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Mismatch.Brief.DataIdx.History))])
                                                self._leafs = OrderedDict([
                                                    ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                                    ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                                    ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                    ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                    ('near_end_cdr_ln', YLeaf(YType.str, 'near_end_cdr_ln')),
                                                    ('near_end_cxp_ch', YLeaf(YType.str, 'near_end_cxp_ch')),
                                                    ('far_end_cxp_ch', YLeaf(YType.str, 'far_end_cxp_ch')),
                                                    ('far_end_cdr_ln', YLeaf(YType.str, 'far_end_cdr_ln')),
                                                    ('neighbor_link', YLeaf(YType.str, 'neighbor_link')),
                                                ])
                                                self.port_data_idx = None
                                                self.sfe_port = None
                                                self.admin_state = None
                                                self.oper_state = None
                                                self.near_end_cdr_ln = None
                                                self.near_end_cxp_ch = None
                                                self.far_end_cxp_ch = None
                                                self.far_end_cdr_ln = None
                                                self.neighbor_link = None

                                                self.history = YList(self)
                                                self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Mismatch.Brief.DataIdx, [u'port_data_idx', u'sfe_port', u'admin_state', u'oper_state', u'near_end_cdr_ln', u'near_end_cxp_ch', u'far_end_cxp_ch', u'far_end_cdr_ln', u'neighbor_link'], name, value)


                                            class History(Entity):
                                                """
                                                
                                                
                                                .. attribute:: history_idx  (key)
                                                
                                                	
                                                	**type**\: int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                .. attribute:: time_stamp
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: admin_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: oper_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: error_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                

                                                """

                                                _prefix = 'calvados_controllers'
                                                _revision = '2017-01-31'

                                                def __init__(self):
                                                    super(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Mismatch.Brief.DataIdx.History, self).__init__()

                                                    self.yang_name = "history"
                                                    self.yang_parent_name = "data_idx"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['history_idx']
                                                    self._child_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                                        ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                                        ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                        ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                        ('error_state', YLeaf(YType.str, 'error_state')),
                                                    ])
                                                    self.history_idx = None
                                                    self.time_stamp = None
                                                    self.admin_state = None
                                                    self.oper_state = None
                                                    self.error_state = None
                                                    self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Mismatch.Brief.DataIdx.History, [u'history_idx', u'time_stamp', u'admin_state', u'oper_state', u'error_state'], name, value)


                                    class Detail(Entity):
                                        """
                                        
                                        
                                        .. attribute:: data_idx
                                        
                                        	
                                        	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Mismatch.Detail.DataIdx>`
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Mismatch.Detail, self).__init__()

                                            self.yang_name = "detail"
                                            self.yang_parent_name = "mismatch"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Mismatch.Detail.DataIdx))])
                                            self._leafs = OrderedDict()

                                            self.data_idx = YList(self)
                                            self._segment_path = lambda: "detail"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Mismatch.Detail, [], name, value)


                                        class DataIdx(Entity):
                                            """
                                            
                                            
                                            .. attribute:: port_data_idx  (key)
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** \-9223372036854775808..9223372036854775807
                                            
                                            .. attribute:: sfe_port
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: admin_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: oper_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: near_end_cdr_ln
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: near_end_cxp_ch
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: far_end_cxp_ch
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: far_end_cdr_ln
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: neighbor_link
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: history
                                            
                                            	
                                            	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Mismatch.Detail.DataIdx.History>`
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Mismatch.Detail.DataIdx, self).__init__()

                                                self.yang_name = "data_idx"
                                                self.yang_parent_name = "detail"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['port_data_idx']
                                                self._child_classes = OrderedDict([("history", ("history", Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Mismatch.Detail.DataIdx.History))])
                                                self._leafs = OrderedDict([
                                                    ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                                    ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                                    ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                    ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                    ('near_end_cdr_ln', YLeaf(YType.str, 'near_end_cdr_ln')),
                                                    ('near_end_cxp_ch', YLeaf(YType.str, 'near_end_cxp_ch')),
                                                    ('far_end_cxp_ch', YLeaf(YType.str, 'far_end_cxp_ch')),
                                                    ('far_end_cdr_ln', YLeaf(YType.str, 'far_end_cdr_ln')),
                                                    ('neighbor_link', YLeaf(YType.str, 'neighbor_link')),
                                                ])
                                                self.port_data_idx = None
                                                self.sfe_port = None
                                                self.admin_state = None
                                                self.oper_state = None
                                                self.near_end_cdr_ln = None
                                                self.near_end_cxp_ch = None
                                                self.far_end_cxp_ch = None
                                                self.far_end_cdr_ln = None
                                                self.neighbor_link = None

                                                self.history = YList(self)
                                                self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Mismatch.Detail.DataIdx, [u'port_data_idx', u'sfe_port', u'admin_state', u'oper_state', u'near_end_cdr_ln', u'near_end_cxp_ch', u'far_end_cxp_ch', u'far_end_cdr_ln', u'neighbor_link'], name, value)


                                            class History(Entity):
                                                """
                                                
                                                
                                                .. attribute:: history_idx  (key)
                                                
                                                	
                                                	**type**\: int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                .. attribute:: time_stamp
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: admin_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: oper_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: error_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                

                                                """

                                                _prefix = 'calvados_controllers'
                                                _revision = '2017-01-31'

                                                def __init__(self):
                                                    super(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Mismatch.Detail.DataIdx.History, self).__init__()

                                                    self.yang_name = "history"
                                                    self.yang_parent_name = "data_idx"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['history_idx']
                                                    self._child_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                                        ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                                        ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                        ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                        ('error_state', YLeaf(YType.str, 'error_state')),
                                                    ])
                                                    self.history_idx = None
                                                    self.time_stamp = None
                                                    self.admin_state = None
                                                    self.oper_state = None
                                                    self.error_state = None
                                                    self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Rx.State.Mismatch.Detail.DataIdx.History, [u'history_idx', u'time_stamp', u'admin_state', u'oper_state', u'error_state'], name, value)


                            class Statistics(Entity):
                                """
                                
                                
                                .. attribute:: data_idx
                                
                                	
                                	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Rx.Statistics.DataIdx>`
                                
                                .. attribute:: brief
                                
                                	
                                	**type**\:  :py:class:`Brief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Rx.Statistics.Brief>`
                                
                                .. attribute:: detail
                                
                                	
                                	**type**\:  :py:class:`Detail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Rx.Statistics.Detail>`
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.Fabric.Oper.Link.Rack.Port.Rx.Statistics, self).__init__()

                                    self.yang_name = "statistics"
                                    self.yang_parent_name = "rx"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Rx.Statistics.DataIdx)), ("brief", ("brief", Controller.Fabric.Oper.Link.Rack.Port.Rx.Statistics.Brief)), ("detail", ("detail", Controller.Fabric.Oper.Link.Rack.Port.Rx.Statistics.Detail))])
                                    self._leafs = OrderedDict()

                                    self.brief = Controller.Fabric.Oper.Link.Rack.Port.Rx.Statistics.Brief()
                                    self.brief.parent = self
                                    self._children_name_map["brief"] = "brief"

                                    self.detail = Controller.Fabric.Oper.Link.Rack.Port.Rx.Statistics.Detail()
                                    self.detail.parent = self
                                    self._children_name_map["detail"] = "detail"

                                    self.data_idx = YList(self)
                                    self._segment_path = lambda: "statistics"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Rx.Statistics, [], name, value)


                                class DataIdx(Entity):
                                    """
                                    
                                    
                                    .. attribute:: port_data_idx  (key)
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** \-9223372036854775808..9223372036854775807
                                    
                                    .. attribute:: rack_num
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: sfe_port
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: tx_control_cells_counter
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: tx_data_cell_counter
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: tx_data_byte_counter
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: rx_crc_errors_counter
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: rx_lfec_fec_correctable_error
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: rx_8b_10b_disparity_errors
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: rx_control_cells_counter
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: rx_data_cell_counter
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: rx_data_byte_counter
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: rx_dropped_retransmitted_control
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: tx_asyn_fifo_rate
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: rx_asyn_fifo_rate
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: rx_lfec_fec_uncorrectable_errors
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: rx_8b_10b_code_errors
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: is_link_error
                                    
                                    	
                                    	**type**\: bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: link_crc_error
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: link_size_error
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: link_mis_align_error
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: link_code_group_error
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: link_no_sig_lock_error
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: link_no_sig_accept_error
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: link_tokens_error
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: error_token_count
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.Fabric.Oper.Link.Rack.Port.Rx.Statistics.DataIdx, self).__init__()

                                        self.yang_name = "data_idx"
                                        self.yang_parent_name = "statistics"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['port_data_idx']
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                            ('rack_num', YLeaf(YType.str, 'rack_num')),
                                            ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                            ('tx_control_cells_counter', YLeaf(YType.uint64, 'TX_Control_cells_counter')),
                                            ('tx_data_cell_counter', YLeaf(YType.uint64, 'TX_Data_cell_counter')),
                                            ('tx_data_byte_counter', YLeaf(YType.uint64, 'TX_Data_byte_counter')),
                                            ('rx_crc_errors_counter', YLeaf(YType.uint64, 'RX_CRC_errors_counter')),
                                            ('rx_lfec_fec_correctable_error', YLeaf(YType.uint64, 'RX_LFEC_FEC_correctable_error')),
                                            ('rx_8b_10b_disparity_errors', YLeaf(YType.uint64, 'RX_8b_10b_disparity_errors')),
                                            ('rx_control_cells_counter', YLeaf(YType.uint64, 'RX_Control_cells_counter')),
                                            ('rx_data_cell_counter', YLeaf(YType.uint64, 'RX_Data_cell_counter')),
                                            ('rx_data_byte_counter', YLeaf(YType.uint64, 'RX_Data_byte_counter')),
                                            ('rx_dropped_retransmitted_control', YLeaf(YType.uint64, 'RX_dropped_retransmitted_control')),
                                            ('tx_asyn_fifo_rate', YLeaf(YType.uint64, 'TX_Asyn_fifo_rate')),
                                            ('rx_asyn_fifo_rate', YLeaf(YType.uint64, 'RX_Asyn_fifo_rate')),
                                            ('rx_lfec_fec_uncorrectable_errors', YLeaf(YType.uint64, 'RX_LFEC_FEC_uncorrectable_errors')),
                                            ('rx_8b_10b_code_errors', YLeaf(YType.uint64, 'RX_8b_10b_code_errors')),
                                            ('is_link_error', YLeaf(YType.boolean, 'is_link_error')),
                                            ('link_crc_error', YLeaf(YType.uint32, 'link_crc_error')),
                                            ('link_size_error', YLeaf(YType.uint32, 'link_size_error')),
                                            ('link_mis_align_error', YLeaf(YType.uint32, 'link_mis_align_error')),
                                            ('link_code_group_error', YLeaf(YType.uint32, 'link_code_group_error')),
                                            ('link_no_sig_lock_error', YLeaf(YType.uint32, 'link_no_sig_lock_error')),
                                            ('link_no_sig_accept_error', YLeaf(YType.uint32, 'link_no_sig_accept_error')),
                                            ('link_tokens_error', YLeaf(YType.uint32, 'link_tokens_error')),
                                            ('error_token_count', YLeaf(YType.uint32, 'error_token_count')),
                                        ])
                                        self.port_data_idx = None
                                        self.rack_num = None
                                        self.sfe_port = None
                                        self.tx_control_cells_counter = None
                                        self.tx_data_cell_counter = None
                                        self.tx_data_byte_counter = None
                                        self.rx_crc_errors_counter = None
                                        self.rx_lfec_fec_correctable_error = None
                                        self.rx_8b_10b_disparity_errors = None
                                        self.rx_control_cells_counter = None
                                        self.rx_data_cell_counter = None
                                        self.rx_data_byte_counter = None
                                        self.rx_dropped_retransmitted_control = None
                                        self.tx_asyn_fifo_rate = None
                                        self.rx_asyn_fifo_rate = None
                                        self.rx_lfec_fec_uncorrectable_errors = None
                                        self.rx_8b_10b_code_errors = None
                                        self.is_link_error = None
                                        self.link_crc_error = None
                                        self.link_size_error = None
                                        self.link_mis_align_error = None
                                        self.link_code_group_error = None
                                        self.link_no_sig_lock_error = None
                                        self.link_no_sig_accept_error = None
                                        self.link_tokens_error = None
                                        self.error_token_count = None
                                        self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Rx.Statistics.DataIdx, [u'port_data_idx', u'rack_num', u'sfe_port', u'tx_control_cells_counter', u'tx_data_cell_counter', u'tx_data_byte_counter', u'rx_crc_errors_counter', u'rx_lfec_fec_correctable_error', u'rx_8b_10b_disparity_errors', u'rx_control_cells_counter', u'rx_data_cell_counter', u'rx_data_byte_counter', u'rx_dropped_retransmitted_control', u'tx_asyn_fifo_rate', u'rx_asyn_fifo_rate', u'rx_lfec_fec_uncorrectable_errors', u'rx_8b_10b_code_errors', u'is_link_error', u'link_crc_error', u'link_size_error', u'link_mis_align_error', u'link_code_group_error', u'link_no_sig_lock_error', u'link_no_sig_accept_error', u'link_tokens_error', u'error_token_count'], name, value)


                                class Brief(Entity):
                                    """
                                    
                                    
                                    .. attribute:: data_idx
                                    
                                    	
                                    	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Rx.Statistics.Brief.DataIdx>`
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.Fabric.Oper.Link.Rack.Port.Rx.Statistics.Brief, self).__init__()

                                        self.yang_name = "brief"
                                        self.yang_parent_name = "statistics"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Rx.Statistics.Brief.DataIdx))])
                                        self._leafs = OrderedDict()

                                        self.data_idx = YList(self)
                                        self._segment_path = lambda: "brief"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Rx.Statistics.Brief, [], name, value)


                                    class DataIdx(Entity):
                                        """
                                        
                                        
                                        .. attribute:: port_data_idx  (key)
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** \-9223372036854775808..9223372036854775807
                                        
                                        .. attribute:: rack_num
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: sfe_port
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: tx_control_cells_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: tx_data_cell_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: tx_data_byte_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_crc_errors_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_lfec_fec_correctable_error
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_8b_10b_disparity_errors
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_control_cells_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_data_cell_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_data_byte_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_dropped_retransmitted_control
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: tx_asyn_fifo_rate
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_asyn_fifo_rate
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_lfec_fec_uncorrectable_errors
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_8b_10b_code_errors
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: is_link_error
                                        
                                        	
                                        	**type**\: bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: link_crc_error
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: link_size_error
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: link_mis_align_error
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: link_code_group_error
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: link_no_sig_lock_error
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: link_no_sig_accept_error
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: link_tokens_error
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_token_count
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Fabric.Oper.Link.Rack.Port.Rx.Statistics.Brief.DataIdx, self).__init__()

                                            self.yang_name = "data_idx"
                                            self.yang_parent_name = "brief"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['port_data_idx']
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                                ('rack_num', YLeaf(YType.str, 'rack_num')),
                                                ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                                ('tx_control_cells_counter', YLeaf(YType.uint64, 'TX_Control_cells_counter')),
                                                ('tx_data_cell_counter', YLeaf(YType.uint64, 'TX_Data_cell_counter')),
                                                ('tx_data_byte_counter', YLeaf(YType.uint64, 'TX_Data_byte_counter')),
                                                ('rx_crc_errors_counter', YLeaf(YType.uint64, 'RX_CRC_errors_counter')),
                                                ('rx_lfec_fec_correctable_error', YLeaf(YType.uint64, 'RX_LFEC_FEC_correctable_error')),
                                                ('rx_8b_10b_disparity_errors', YLeaf(YType.uint64, 'RX_8b_10b_disparity_errors')),
                                                ('rx_control_cells_counter', YLeaf(YType.uint64, 'RX_Control_cells_counter')),
                                                ('rx_data_cell_counter', YLeaf(YType.uint64, 'RX_Data_cell_counter')),
                                                ('rx_data_byte_counter', YLeaf(YType.uint64, 'RX_Data_byte_counter')),
                                                ('rx_dropped_retransmitted_control', YLeaf(YType.uint64, 'RX_dropped_retransmitted_control')),
                                                ('tx_asyn_fifo_rate', YLeaf(YType.uint64, 'TX_Asyn_fifo_rate')),
                                                ('rx_asyn_fifo_rate', YLeaf(YType.uint64, 'RX_Asyn_fifo_rate')),
                                                ('rx_lfec_fec_uncorrectable_errors', YLeaf(YType.uint64, 'RX_LFEC_FEC_uncorrectable_errors')),
                                                ('rx_8b_10b_code_errors', YLeaf(YType.uint64, 'RX_8b_10b_code_errors')),
                                                ('is_link_error', YLeaf(YType.boolean, 'is_link_error')),
                                                ('link_crc_error', YLeaf(YType.uint32, 'link_crc_error')),
                                                ('link_size_error', YLeaf(YType.uint32, 'link_size_error')),
                                                ('link_mis_align_error', YLeaf(YType.uint32, 'link_mis_align_error')),
                                                ('link_code_group_error', YLeaf(YType.uint32, 'link_code_group_error')),
                                                ('link_no_sig_lock_error', YLeaf(YType.uint32, 'link_no_sig_lock_error')),
                                                ('link_no_sig_accept_error', YLeaf(YType.uint32, 'link_no_sig_accept_error')),
                                                ('link_tokens_error', YLeaf(YType.uint32, 'link_tokens_error')),
                                                ('error_token_count', YLeaf(YType.uint32, 'error_token_count')),
                                            ])
                                            self.port_data_idx = None
                                            self.rack_num = None
                                            self.sfe_port = None
                                            self.tx_control_cells_counter = None
                                            self.tx_data_cell_counter = None
                                            self.tx_data_byte_counter = None
                                            self.rx_crc_errors_counter = None
                                            self.rx_lfec_fec_correctable_error = None
                                            self.rx_8b_10b_disparity_errors = None
                                            self.rx_control_cells_counter = None
                                            self.rx_data_cell_counter = None
                                            self.rx_data_byte_counter = None
                                            self.rx_dropped_retransmitted_control = None
                                            self.tx_asyn_fifo_rate = None
                                            self.rx_asyn_fifo_rate = None
                                            self.rx_lfec_fec_uncorrectable_errors = None
                                            self.rx_8b_10b_code_errors = None
                                            self.is_link_error = None
                                            self.link_crc_error = None
                                            self.link_size_error = None
                                            self.link_mis_align_error = None
                                            self.link_code_group_error = None
                                            self.link_no_sig_lock_error = None
                                            self.link_no_sig_accept_error = None
                                            self.link_tokens_error = None
                                            self.error_token_count = None
                                            self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Rx.Statistics.Brief.DataIdx, [u'port_data_idx', u'rack_num', u'sfe_port', u'tx_control_cells_counter', u'tx_data_cell_counter', u'tx_data_byte_counter', u'rx_crc_errors_counter', u'rx_lfec_fec_correctable_error', u'rx_8b_10b_disparity_errors', u'rx_control_cells_counter', u'rx_data_cell_counter', u'rx_data_byte_counter', u'rx_dropped_retransmitted_control', u'tx_asyn_fifo_rate', u'rx_asyn_fifo_rate', u'rx_lfec_fec_uncorrectable_errors', u'rx_8b_10b_code_errors', u'is_link_error', u'link_crc_error', u'link_size_error', u'link_mis_align_error', u'link_code_group_error', u'link_no_sig_lock_error', u'link_no_sig_accept_error', u'link_tokens_error', u'error_token_count'], name, value)


                                class Detail(Entity):
                                    """
                                    
                                    
                                    .. attribute:: data_idx
                                    
                                    	
                                    	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Rx.Statistics.Detail.DataIdx>`
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.Fabric.Oper.Link.Rack.Port.Rx.Statistics.Detail, self).__init__()

                                        self.yang_name = "detail"
                                        self.yang_parent_name = "statistics"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Rx.Statistics.Detail.DataIdx))])
                                        self._leafs = OrderedDict()

                                        self.data_idx = YList(self)
                                        self._segment_path = lambda: "detail"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Rx.Statistics.Detail, [], name, value)


                                    class DataIdx(Entity):
                                        """
                                        
                                        
                                        .. attribute:: port_data_idx  (key)
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** \-9223372036854775808..9223372036854775807
                                        
                                        .. attribute:: rack_num
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: sfe_port
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: tx_control_cells_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: tx_data_cell_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: tx_data_byte_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_crc_errors_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_lfec_fec_correctable_error
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_8b_10b_disparity_errors
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_control_cells_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_data_cell_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_data_byte_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_dropped_retransmitted_control
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: tx_asyn_fifo_rate
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_asyn_fifo_rate
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_lfec_fec_uncorrectable_errors
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_8b_10b_code_errors
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: is_link_error
                                        
                                        	
                                        	**type**\: bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: link_crc_error
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: link_size_error
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: link_mis_align_error
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: link_code_group_error
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: link_no_sig_lock_error
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: link_no_sig_accept_error
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: link_tokens_error
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_token_count
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Fabric.Oper.Link.Rack.Port.Rx.Statistics.Detail.DataIdx, self).__init__()

                                            self.yang_name = "data_idx"
                                            self.yang_parent_name = "detail"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['port_data_idx']
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                                ('rack_num', YLeaf(YType.str, 'rack_num')),
                                                ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                                ('tx_control_cells_counter', YLeaf(YType.uint64, 'TX_Control_cells_counter')),
                                                ('tx_data_cell_counter', YLeaf(YType.uint64, 'TX_Data_cell_counter')),
                                                ('tx_data_byte_counter', YLeaf(YType.uint64, 'TX_Data_byte_counter')),
                                                ('rx_crc_errors_counter', YLeaf(YType.uint64, 'RX_CRC_errors_counter')),
                                                ('rx_lfec_fec_correctable_error', YLeaf(YType.uint64, 'RX_LFEC_FEC_correctable_error')),
                                                ('rx_8b_10b_disparity_errors', YLeaf(YType.uint64, 'RX_8b_10b_disparity_errors')),
                                                ('rx_control_cells_counter', YLeaf(YType.uint64, 'RX_Control_cells_counter')),
                                                ('rx_data_cell_counter', YLeaf(YType.uint64, 'RX_Data_cell_counter')),
                                                ('rx_data_byte_counter', YLeaf(YType.uint64, 'RX_Data_byte_counter')),
                                                ('rx_dropped_retransmitted_control', YLeaf(YType.uint64, 'RX_dropped_retransmitted_control')),
                                                ('tx_asyn_fifo_rate', YLeaf(YType.uint64, 'TX_Asyn_fifo_rate')),
                                                ('rx_asyn_fifo_rate', YLeaf(YType.uint64, 'RX_Asyn_fifo_rate')),
                                                ('rx_lfec_fec_uncorrectable_errors', YLeaf(YType.uint64, 'RX_LFEC_FEC_uncorrectable_errors')),
                                                ('rx_8b_10b_code_errors', YLeaf(YType.uint64, 'RX_8b_10b_code_errors')),
                                                ('is_link_error', YLeaf(YType.boolean, 'is_link_error')),
                                                ('link_crc_error', YLeaf(YType.uint32, 'link_crc_error')),
                                                ('link_size_error', YLeaf(YType.uint32, 'link_size_error')),
                                                ('link_mis_align_error', YLeaf(YType.uint32, 'link_mis_align_error')),
                                                ('link_code_group_error', YLeaf(YType.uint32, 'link_code_group_error')),
                                                ('link_no_sig_lock_error', YLeaf(YType.uint32, 'link_no_sig_lock_error')),
                                                ('link_no_sig_accept_error', YLeaf(YType.uint32, 'link_no_sig_accept_error')),
                                                ('link_tokens_error', YLeaf(YType.uint32, 'link_tokens_error')),
                                                ('error_token_count', YLeaf(YType.uint32, 'error_token_count')),
                                            ])
                                            self.port_data_idx = None
                                            self.rack_num = None
                                            self.sfe_port = None
                                            self.tx_control_cells_counter = None
                                            self.tx_data_cell_counter = None
                                            self.tx_data_byte_counter = None
                                            self.rx_crc_errors_counter = None
                                            self.rx_lfec_fec_correctable_error = None
                                            self.rx_8b_10b_disparity_errors = None
                                            self.rx_control_cells_counter = None
                                            self.rx_data_cell_counter = None
                                            self.rx_data_byte_counter = None
                                            self.rx_dropped_retransmitted_control = None
                                            self.tx_asyn_fifo_rate = None
                                            self.rx_asyn_fifo_rate = None
                                            self.rx_lfec_fec_uncorrectable_errors = None
                                            self.rx_8b_10b_code_errors = None
                                            self.is_link_error = None
                                            self.link_crc_error = None
                                            self.link_size_error = None
                                            self.link_mis_align_error = None
                                            self.link_code_group_error = None
                                            self.link_no_sig_lock_error = None
                                            self.link_no_sig_accept_error = None
                                            self.link_tokens_error = None
                                            self.error_token_count = None
                                            self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Rx.Statistics.Detail.DataIdx, [u'port_data_idx', u'rack_num', u'sfe_port', u'tx_control_cells_counter', u'tx_data_cell_counter', u'tx_data_byte_counter', u'rx_crc_errors_counter', u'rx_lfec_fec_correctable_error', u'rx_8b_10b_disparity_errors', u'rx_control_cells_counter', u'rx_data_cell_counter', u'rx_data_byte_counter', u'rx_dropped_retransmitted_control', u'tx_asyn_fifo_rate', u'rx_asyn_fifo_rate', u'rx_lfec_fec_uncorrectable_errors', u'rx_8b_10b_code_errors', u'is_link_error', u'link_crc_error', u'link_size_error', u'link_mis_align_error', u'link_code_group_error', u'link_no_sig_lock_error', u'link_no_sig_accept_error', u'link_tokens_error', u'error_token_count'], name, value)


                        class Tx(Entity):
                            """
                            Tx link option
                            
                            .. attribute:: data_idx
                            
                            	
                            	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Tx.DataIdx>`
                            
                            .. attribute:: brief
                            
                            	
                            	**type**\:  :py:class:`Brief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Tx.Brief>`
                            
                            .. attribute:: detail
                            
                            	
                            	**type**\:  :py:class:`Detail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Tx.Detail>`
                            
                            .. attribute:: state
                            
                            	
                            	**type**\:  :py:class:`State <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Tx.State>`
                            
                            .. attribute:: statistics
                            
                            	
                            	**type**\:  :py:class:`Statistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Tx.Statistics>`
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Fabric.Oper.Link.Rack.Port.Tx, self).__init__()

                                self.yang_name = "tx"
                                self.yang_parent_name = "port"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Tx.DataIdx)), ("brief", ("brief", Controller.Fabric.Oper.Link.Rack.Port.Tx.Brief)), ("detail", ("detail", Controller.Fabric.Oper.Link.Rack.Port.Tx.Detail)), ("state", ("state", Controller.Fabric.Oper.Link.Rack.Port.Tx.State)), ("statistics", ("statistics", Controller.Fabric.Oper.Link.Rack.Port.Tx.Statistics))])
                                self._leafs = OrderedDict()

                                self.brief = Controller.Fabric.Oper.Link.Rack.Port.Tx.Brief()
                                self.brief.parent = self
                                self._children_name_map["brief"] = "brief"

                                self.detail = Controller.Fabric.Oper.Link.Rack.Port.Tx.Detail()
                                self.detail.parent = self
                                self._children_name_map["detail"] = "detail"

                                self.state = Controller.Fabric.Oper.Link.Rack.Port.Tx.State()
                                self.state.parent = self
                                self._children_name_map["state"] = "state"

                                self.statistics = Controller.Fabric.Oper.Link.Rack.Port.Tx.Statistics()
                                self.statistics.parent = self
                                self._children_name_map["statistics"] = "statistics"

                                self.data_idx = YList(self)
                                self._segment_path = lambda: "tx"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Tx, [], name, value)


                            class DataIdx(Entity):
                                """
                                
                                
                                .. attribute:: port_data_idx  (key)
                                
                                	
                                	**type**\: int
                                
                                	**range:** \-9223372036854775808..9223372036854775807
                                
                                .. attribute:: sfe_port
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: admin_state
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: oper_state
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: near_end_cdr_ln
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: near_end_cxp_ch
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: far_end_cxp_ch
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: far_end_cdr_ln
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: neighbor_link
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: history
                                
                                	
                                	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Tx.DataIdx.History>`
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.Fabric.Oper.Link.Rack.Port.Tx.DataIdx, self).__init__()

                                    self.yang_name = "data_idx"
                                    self.yang_parent_name = "tx"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['port_data_idx']
                                    self._child_classes = OrderedDict([("history", ("history", Controller.Fabric.Oper.Link.Rack.Port.Tx.DataIdx.History))])
                                    self._leafs = OrderedDict([
                                        ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                        ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                        ('admin_state', YLeaf(YType.str, 'admin-state')),
                                        ('oper_state', YLeaf(YType.str, 'oper_state')),
                                        ('near_end_cdr_ln', YLeaf(YType.str, 'near_end_cdr_ln')),
                                        ('near_end_cxp_ch', YLeaf(YType.str, 'near_end_cxp_ch')),
                                        ('far_end_cxp_ch', YLeaf(YType.str, 'far_end_cxp_ch')),
                                        ('far_end_cdr_ln', YLeaf(YType.str, 'far_end_cdr_ln')),
                                        ('neighbor_link', YLeaf(YType.str, 'neighbor_link')),
                                    ])
                                    self.port_data_idx = None
                                    self.sfe_port = None
                                    self.admin_state = None
                                    self.oper_state = None
                                    self.near_end_cdr_ln = None
                                    self.near_end_cxp_ch = None
                                    self.far_end_cxp_ch = None
                                    self.far_end_cdr_ln = None
                                    self.neighbor_link = None

                                    self.history = YList(self)
                                    self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Tx.DataIdx, [u'port_data_idx', u'sfe_port', u'admin_state', u'oper_state', u'near_end_cdr_ln', u'near_end_cxp_ch', u'far_end_cxp_ch', u'far_end_cdr_ln', u'neighbor_link'], name, value)


                                class History(Entity):
                                    """
                                    
                                    
                                    .. attribute:: history_idx  (key)
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    .. attribute:: time_stamp
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: admin_state
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: oper_state
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: error_state
                                    
                                    	
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.Fabric.Oper.Link.Rack.Port.Tx.DataIdx.History, self).__init__()

                                        self.yang_name = "history"
                                        self.yang_parent_name = "data_idx"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['history_idx']
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                            ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                            ('admin_state', YLeaf(YType.str, 'admin-state')),
                                            ('oper_state', YLeaf(YType.str, 'oper_state')),
                                            ('error_state', YLeaf(YType.str, 'error_state')),
                                        ])
                                        self.history_idx = None
                                        self.time_stamp = None
                                        self.admin_state = None
                                        self.oper_state = None
                                        self.error_state = None
                                        self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Tx.DataIdx.History, [u'history_idx', u'time_stamp', u'admin_state', u'oper_state', u'error_state'], name, value)


                            class Brief(Entity):
                                """
                                
                                
                                .. attribute:: data_idx
                                
                                	
                                	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Tx.Brief.DataIdx>`
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.Fabric.Oper.Link.Rack.Port.Tx.Brief, self).__init__()

                                    self.yang_name = "brief"
                                    self.yang_parent_name = "tx"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Tx.Brief.DataIdx))])
                                    self._leafs = OrderedDict()

                                    self.data_idx = YList(self)
                                    self._segment_path = lambda: "brief"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Tx.Brief, [], name, value)


                                class DataIdx(Entity):
                                    """
                                    
                                    
                                    .. attribute:: port_data_idx  (key)
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** \-9223372036854775808..9223372036854775807
                                    
                                    .. attribute:: sfe_port
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: admin_state
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: oper_state
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: near_end_cdr_ln
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: near_end_cxp_ch
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: far_end_cxp_ch
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: far_end_cdr_ln
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: neighbor_link
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: history
                                    
                                    	
                                    	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Tx.Brief.DataIdx.History>`
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.Fabric.Oper.Link.Rack.Port.Tx.Brief.DataIdx, self).__init__()

                                        self.yang_name = "data_idx"
                                        self.yang_parent_name = "brief"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['port_data_idx']
                                        self._child_classes = OrderedDict([("history", ("history", Controller.Fabric.Oper.Link.Rack.Port.Tx.Brief.DataIdx.History))])
                                        self._leafs = OrderedDict([
                                            ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                            ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                            ('admin_state', YLeaf(YType.str, 'admin-state')),
                                            ('oper_state', YLeaf(YType.str, 'oper_state')),
                                            ('near_end_cdr_ln', YLeaf(YType.str, 'near_end_cdr_ln')),
                                            ('near_end_cxp_ch', YLeaf(YType.str, 'near_end_cxp_ch')),
                                            ('far_end_cxp_ch', YLeaf(YType.str, 'far_end_cxp_ch')),
                                            ('far_end_cdr_ln', YLeaf(YType.str, 'far_end_cdr_ln')),
                                            ('neighbor_link', YLeaf(YType.str, 'neighbor_link')),
                                        ])
                                        self.port_data_idx = None
                                        self.sfe_port = None
                                        self.admin_state = None
                                        self.oper_state = None
                                        self.near_end_cdr_ln = None
                                        self.near_end_cxp_ch = None
                                        self.far_end_cxp_ch = None
                                        self.far_end_cdr_ln = None
                                        self.neighbor_link = None

                                        self.history = YList(self)
                                        self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Tx.Brief.DataIdx, [u'port_data_idx', u'sfe_port', u'admin_state', u'oper_state', u'near_end_cdr_ln', u'near_end_cxp_ch', u'far_end_cxp_ch', u'far_end_cdr_ln', u'neighbor_link'], name, value)


                                    class History(Entity):
                                        """
                                        
                                        
                                        .. attribute:: history_idx  (key)
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** \-2147483648..2147483647
                                        
                                        .. attribute:: time_stamp
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: admin_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: oper_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: error_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Fabric.Oper.Link.Rack.Port.Tx.Brief.DataIdx.History, self).__init__()

                                            self.yang_name = "history"
                                            self.yang_parent_name = "data_idx"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['history_idx']
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                                ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                                ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                ('error_state', YLeaf(YType.str, 'error_state')),
                                            ])
                                            self.history_idx = None
                                            self.time_stamp = None
                                            self.admin_state = None
                                            self.oper_state = None
                                            self.error_state = None
                                            self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Tx.Brief.DataIdx.History, [u'history_idx', u'time_stamp', u'admin_state', u'oper_state', u'error_state'], name, value)


                            class Detail(Entity):
                                """
                                
                                
                                .. attribute:: data_idx
                                
                                	
                                	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Tx.Detail.DataIdx>`
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.Fabric.Oper.Link.Rack.Port.Tx.Detail, self).__init__()

                                    self.yang_name = "detail"
                                    self.yang_parent_name = "tx"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Tx.Detail.DataIdx))])
                                    self._leafs = OrderedDict()

                                    self.data_idx = YList(self)
                                    self._segment_path = lambda: "detail"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Tx.Detail, [], name, value)


                                class DataIdx(Entity):
                                    """
                                    
                                    
                                    .. attribute:: port_data_idx  (key)
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** \-9223372036854775808..9223372036854775807
                                    
                                    .. attribute:: sfe_port
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: admin_state
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: oper_state
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: near_end_cdr_ln
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: near_end_cxp_ch
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: far_end_cxp_ch
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: far_end_cdr_ln
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: neighbor_link
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: history
                                    
                                    	
                                    	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Tx.Detail.DataIdx.History>`
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.Fabric.Oper.Link.Rack.Port.Tx.Detail.DataIdx, self).__init__()

                                        self.yang_name = "data_idx"
                                        self.yang_parent_name = "detail"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['port_data_idx']
                                        self._child_classes = OrderedDict([("history", ("history", Controller.Fabric.Oper.Link.Rack.Port.Tx.Detail.DataIdx.History))])
                                        self._leafs = OrderedDict([
                                            ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                            ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                            ('admin_state', YLeaf(YType.str, 'admin-state')),
                                            ('oper_state', YLeaf(YType.str, 'oper_state')),
                                            ('near_end_cdr_ln', YLeaf(YType.str, 'near_end_cdr_ln')),
                                            ('near_end_cxp_ch', YLeaf(YType.str, 'near_end_cxp_ch')),
                                            ('far_end_cxp_ch', YLeaf(YType.str, 'far_end_cxp_ch')),
                                            ('far_end_cdr_ln', YLeaf(YType.str, 'far_end_cdr_ln')),
                                            ('neighbor_link', YLeaf(YType.str, 'neighbor_link')),
                                        ])
                                        self.port_data_idx = None
                                        self.sfe_port = None
                                        self.admin_state = None
                                        self.oper_state = None
                                        self.near_end_cdr_ln = None
                                        self.near_end_cxp_ch = None
                                        self.far_end_cxp_ch = None
                                        self.far_end_cdr_ln = None
                                        self.neighbor_link = None

                                        self.history = YList(self)
                                        self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Tx.Detail.DataIdx, [u'port_data_idx', u'sfe_port', u'admin_state', u'oper_state', u'near_end_cdr_ln', u'near_end_cxp_ch', u'far_end_cxp_ch', u'far_end_cdr_ln', u'neighbor_link'], name, value)


                                    class History(Entity):
                                        """
                                        
                                        
                                        .. attribute:: history_idx  (key)
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** \-2147483648..2147483647
                                        
                                        .. attribute:: time_stamp
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: admin_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: oper_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: error_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Fabric.Oper.Link.Rack.Port.Tx.Detail.DataIdx.History, self).__init__()

                                            self.yang_name = "history"
                                            self.yang_parent_name = "data_idx"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['history_idx']
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                                ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                                ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                ('error_state', YLeaf(YType.str, 'error_state')),
                                            ])
                                            self.history_idx = None
                                            self.time_stamp = None
                                            self.admin_state = None
                                            self.oper_state = None
                                            self.error_state = None
                                            self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Tx.Detail.DataIdx.History, [u'history_idx', u'time_stamp', u'admin_state', u'oper_state', u'error_state'], name, value)


                            class State(Entity):
                                """
                                
                                
                                .. attribute:: up
                                
                                	
                                	**type**\:  :py:class:`Up <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Up>`
                                
                                .. attribute:: down
                                
                                	
                                	**type**\:  :py:class:`Down <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Down>`
                                
                                .. attribute:: er
                                
                                	
                                	**type**\:  :py:class:`Er <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Er>`
                                
                                .. attribute:: mismatch
                                
                                	
                                	**type**\:  :py:class:`Mismatch <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Mismatch>`
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.Fabric.Oper.Link.Rack.Port.Tx.State, self).__init__()

                                    self.yang_name = "state"
                                    self.yang_parent_name = "tx"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([("up", ("up", Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Up)), ("down", ("down", Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Down)), ("er", ("er", Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Er)), ("mismatch", ("mismatch", Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Mismatch))])
                                    self._leafs = OrderedDict()

                                    self.up = Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Up()
                                    self.up.parent = self
                                    self._children_name_map["up"] = "up"

                                    self.down = Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Down()
                                    self.down.parent = self
                                    self._children_name_map["down"] = "down"

                                    self.er = Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Er()
                                    self.er.parent = self
                                    self._children_name_map["er"] = "er"

                                    self.mismatch = Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Mismatch()
                                    self.mismatch.parent = self
                                    self._children_name_map["mismatch"] = "mismatch"
                                    self._segment_path = lambda: "state"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Tx.State, [], name, value)


                                class Up(Entity):
                                    """
                                    
                                    
                                    .. attribute:: data_idx
                                    
                                    	
                                    	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Up.DataIdx>`
                                    
                                    .. attribute:: brief
                                    
                                    	
                                    	**type**\:  :py:class:`Brief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Up.Brief>`
                                    
                                    .. attribute:: detail
                                    
                                    	
                                    	**type**\:  :py:class:`Detail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Up.Detail>`
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Up, self).__init__()

                                        self.yang_name = "up"
                                        self.yang_parent_name = "state"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Up.DataIdx)), ("brief", ("brief", Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Up.Brief)), ("detail", ("detail", Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Up.Detail))])
                                        self._leafs = OrderedDict()

                                        self.brief = Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Up.Brief()
                                        self.brief.parent = self
                                        self._children_name_map["brief"] = "brief"

                                        self.detail = Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Up.Detail()
                                        self.detail.parent = self
                                        self._children_name_map["detail"] = "detail"

                                        self.data_idx = YList(self)
                                        self._segment_path = lambda: "up"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Up, [], name, value)


                                    class DataIdx(Entity):
                                        """
                                        
                                        
                                        .. attribute:: port_data_idx  (key)
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** \-9223372036854775808..9223372036854775807
                                        
                                        .. attribute:: sfe_port
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: admin_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: oper_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: near_end_cdr_ln
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: near_end_cxp_ch
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: far_end_cxp_ch
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: far_end_cdr_ln
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: neighbor_link
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: history
                                        
                                        	
                                        	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Up.DataIdx.History>`
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Up.DataIdx, self).__init__()

                                            self.yang_name = "data_idx"
                                            self.yang_parent_name = "up"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['port_data_idx']
                                            self._child_classes = OrderedDict([("history", ("history", Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Up.DataIdx.History))])
                                            self._leafs = OrderedDict([
                                                ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                                ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                                ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                ('near_end_cdr_ln', YLeaf(YType.str, 'near_end_cdr_ln')),
                                                ('near_end_cxp_ch', YLeaf(YType.str, 'near_end_cxp_ch')),
                                                ('far_end_cxp_ch', YLeaf(YType.str, 'far_end_cxp_ch')),
                                                ('far_end_cdr_ln', YLeaf(YType.str, 'far_end_cdr_ln')),
                                                ('neighbor_link', YLeaf(YType.str, 'neighbor_link')),
                                            ])
                                            self.port_data_idx = None
                                            self.sfe_port = None
                                            self.admin_state = None
                                            self.oper_state = None
                                            self.near_end_cdr_ln = None
                                            self.near_end_cxp_ch = None
                                            self.far_end_cxp_ch = None
                                            self.far_end_cdr_ln = None
                                            self.neighbor_link = None

                                            self.history = YList(self)
                                            self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Up.DataIdx, [u'port_data_idx', u'sfe_port', u'admin_state', u'oper_state', u'near_end_cdr_ln', u'near_end_cxp_ch', u'far_end_cxp_ch', u'far_end_cdr_ln', u'neighbor_link'], name, value)


                                        class History(Entity):
                                            """
                                            
                                            
                                            .. attribute:: history_idx  (key)
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: time_stamp
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: admin_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: oper_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: error_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Up.DataIdx.History, self).__init__()

                                                self.yang_name = "history"
                                                self.yang_parent_name = "data_idx"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['history_idx']
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                                    ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                                    ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                    ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                    ('error_state', YLeaf(YType.str, 'error_state')),
                                                ])
                                                self.history_idx = None
                                                self.time_stamp = None
                                                self.admin_state = None
                                                self.oper_state = None
                                                self.error_state = None
                                                self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Up.DataIdx.History, [u'history_idx', u'time_stamp', u'admin_state', u'oper_state', u'error_state'], name, value)


                                    class Brief(Entity):
                                        """
                                        
                                        
                                        .. attribute:: data_idx
                                        
                                        	
                                        	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Up.Brief.DataIdx>`
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Up.Brief, self).__init__()

                                            self.yang_name = "brief"
                                            self.yang_parent_name = "up"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Up.Brief.DataIdx))])
                                            self._leafs = OrderedDict()

                                            self.data_idx = YList(self)
                                            self._segment_path = lambda: "brief"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Up.Brief, [], name, value)


                                        class DataIdx(Entity):
                                            """
                                            
                                            
                                            .. attribute:: port_data_idx  (key)
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** \-9223372036854775808..9223372036854775807
                                            
                                            .. attribute:: sfe_port
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: admin_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: oper_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: near_end_cdr_ln
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: near_end_cxp_ch
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: far_end_cxp_ch
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: far_end_cdr_ln
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: neighbor_link
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: history
                                            
                                            	
                                            	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Up.Brief.DataIdx.History>`
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Up.Brief.DataIdx, self).__init__()

                                                self.yang_name = "data_idx"
                                                self.yang_parent_name = "brief"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['port_data_idx']
                                                self._child_classes = OrderedDict([("history", ("history", Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Up.Brief.DataIdx.History))])
                                                self._leafs = OrderedDict([
                                                    ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                                    ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                                    ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                    ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                    ('near_end_cdr_ln', YLeaf(YType.str, 'near_end_cdr_ln')),
                                                    ('near_end_cxp_ch', YLeaf(YType.str, 'near_end_cxp_ch')),
                                                    ('far_end_cxp_ch', YLeaf(YType.str, 'far_end_cxp_ch')),
                                                    ('far_end_cdr_ln', YLeaf(YType.str, 'far_end_cdr_ln')),
                                                    ('neighbor_link', YLeaf(YType.str, 'neighbor_link')),
                                                ])
                                                self.port_data_idx = None
                                                self.sfe_port = None
                                                self.admin_state = None
                                                self.oper_state = None
                                                self.near_end_cdr_ln = None
                                                self.near_end_cxp_ch = None
                                                self.far_end_cxp_ch = None
                                                self.far_end_cdr_ln = None
                                                self.neighbor_link = None

                                                self.history = YList(self)
                                                self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Up.Brief.DataIdx, [u'port_data_idx', u'sfe_port', u'admin_state', u'oper_state', u'near_end_cdr_ln', u'near_end_cxp_ch', u'far_end_cxp_ch', u'far_end_cdr_ln', u'neighbor_link'], name, value)


                                            class History(Entity):
                                                """
                                                
                                                
                                                .. attribute:: history_idx  (key)
                                                
                                                	
                                                	**type**\: int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                .. attribute:: time_stamp
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: admin_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: oper_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: error_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                

                                                """

                                                _prefix = 'calvados_controllers'
                                                _revision = '2017-01-31'

                                                def __init__(self):
                                                    super(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Up.Brief.DataIdx.History, self).__init__()

                                                    self.yang_name = "history"
                                                    self.yang_parent_name = "data_idx"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['history_idx']
                                                    self._child_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                                        ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                                        ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                        ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                        ('error_state', YLeaf(YType.str, 'error_state')),
                                                    ])
                                                    self.history_idx = None
                                                    self.time_stamp = None
                                                    self.admin_state = None
                                                    self.oper_state = None
                                                    self.error_state = None
                                                    self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Up.Brief.DataIdx.History, [u'history_idx', u'time_stamp', u'admin_state', u'oper_state', u'error_state'], name, value)


                                    class Detail(Entity):
                                        """
                                        
                                        
                                        .. attribute:: data_idx
                                        
                                        	
                                        	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Up.Detail.DataIdx>`
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Up.Detail, self).__init__()

                                            self.yang_name = "detail"
                                            self.yang_parent_name = "up"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Up.Detail.DataIdx))])
                                            self._leafs = OrderedDict()

                                            self.data_idx = YList(self)
                                            self._segment_path = lambda: "detail"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Up.Detail, [], name, value)


                                        class DataIdx(Entity):
                                            """
                                            
                                            
                                            .. attribute:: port_data_idx  (key)
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** \-9223372036854775808..9223372036854775807
                                            
                                            .. attribute:: sfe_port
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: admin_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: oper_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: near_end_cdr_ln
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: near_end_cxp_ch
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: far_end_cxp_ch
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: far_end_cdr_ln
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: neighbor_link
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: history
                                            
                                            	
                                            	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Up.Detail.DataIdx.History>`
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Up.Detail.DataIdx, self).__init__()

                                                self.yang_name = "data_idx"
                                                self.yang_parent_name = "detail"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['port_data_idx']
                                                self._child_classes = OrderedDict([("history", ("history", Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Up.Detail.DataIdx.History))])
                                                self._leafs = OrderedDict([
                                                    ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                                    ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                                    ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                    ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                    ('near_end_cdr_ln', YLeaf(YType.str, 'near_end_cdr_ln')),
                                                    ('near_end_cxp_ch', YLeaf(YType.str, 'near_end_cxp_ch')),
                                                    ('far_end_cxp_ch', YLeaf(YType.str, 'far_end_cxp_ch')),
                                                    ('far_end_cdr_ln', YLeaf(YType.str, 'far_end_cdr_ln')),
                                                    ('neighbor_link', YLeaf(YType.str, 'neighbor_link')),
                                                ])
                                                self.port_data_idx = None
                                                self.sfe_port = None
                                                self.admin_state = None
                                                self.oper_state = None
                                                self.near_end_cdr_ln = None
                                                self.near_end_cxp_ch = None
                                                self.far_end_cxp_ch = None
                                                self.far_end_cdr_ln = None
                                                self.neighbor_link = None

                                                self.history = YList(self)
                                                self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Up.Detail.DataIdx, [u'port_data_idx', u'sfe_port', u'admin_state', u'oper_state', u'near_end_cdr_ln', u'near_end_cxp_ch', u'far_end_cxp_ch', u'far_end_cdr_ln', u'neighbor_link'], name, value)


                                            class History(Entity):
                                                """
                                                
                                                
                                                .. attribute:: history_idx  (key)
                                                
                                                	
                                                	**type**\: int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                .. attribute:: time_stamp
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: admin_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: oper_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: error_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                

                                                """

                                                _prefix = 'calvados_controllers'
                                                _revision = '2017-01-31'

                                                def __init__(self):
                                                    super(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Up.Detail.DataIdx.History, self).__init__()

                                                    self.yang_name = "history"
                                                    self.yang_parent_name = "data_idx"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['history_idx']
                                                    self._child_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                                        ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                                        ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                        ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                        ('error_state', YLeaf(YType.str, 'error_state')),
                                                    ])
                                                    self.history_idx = None
                                                    self.time_stamp = None
                                                    self.admin_state = None
                                                    self.oper_state = None
                                                    self.error_state = None
                                                    self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Up.Detail.DataIdx.History, [u'history_idx', u'time_stamp', u'admin_state', u'oper_state', u'error_state'], name, value)


                                class Down(Entity):
                                    """
                                    
                                    
                                    .. attribute:: data_idx
                                    
                                    	
                                    	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Down.DataIdx>`
                                    
                                    .. attribute:: brief
                                    
                                    	
                                    	**type**\:  :py:class:`Brief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Down.Brief>`
                                    
                                    .. attribute:: detail
                                    
                                    	
                                    	**type**\:  :py:class:`Detail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Down.Detail>`
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Down, self).__init__()

                                        self.yang_name = "down"
                                        self.yang_parent_name = "state"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Down.DataIdx)), ("brief", ("brief", Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Down.Brief)), ("detail", ("detail", Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Down.Detail))])
                                        self._leafs = OrderedDict()

                                        self.brief = Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Down.Brief()
                                        self.brief.parent = self
                                        self._children_name_map["brief"] = "brief"

                                        self.detail = Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Down.Detail()
                                        self.detail.parent = self
                                        self._children_name_map["detail"] = "detail"

                                        self.data_idx = YList(self)
                                        self._segment_path = lambda: "down"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Down, [], name, value)


                                    class DataIdx(Entity):
                                        """
                                        
                                        
                                        .. attribute:: port_data_idx  (key)
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** \-9223372036854775808..9223372036854775807
                                        
                                        .. attribute:: sfe_port
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: admin_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: oper_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: near_end_cdr_ln
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: near_end_cxp_ch
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: far_end_cxp_ch
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: far_end_cdr_ln
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: neighbor_link
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: history
                                        
                                        	
                                        	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Down.DataIdx.History>`
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Down.DataIdx, self).__init__()

                                            self.yang_name = "data_idx"
                                            self.yang_parent_name = "down"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['port_data_idx']
                                            self._child_classes = OrderedDict([("history", ("history", Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Down.DataIdx.History))])
                                            self._leafs = OrderedDict([
                                                ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                                ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                                ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                ('near_end_cdr_ln', YLeaf(YType.str, 'near_end_cdr_ln')),
                                                ('near_end_cxp_ch', YLeaf(YType.str, 'near_end_cxp_ch')),
                                                ('far_end_cxp_ch', YLeaf(YType.str, 'far_end_cxp_ch')),
                                                ('far_end_cdr_ln', YLeaf(YType.str, 'far_end_cdr_ln')),
                                                ('neighbor_link', YLeaf(YType.str, 'neighbor_link')),
                                            ])
                                            self.port_data_idx = None
                                            self.sfe_port = None
                                            self.admin_state = None
                                            self.oper_state = None
                                            self.near_end_cdr_ln = None
                                            self.near_end_cxp_ch = None
                                            self.far_end_cxp_ch = None
                                            self.far_end_cdr_ln = None
                                            self.neighbor_link = None

                                            self.history = YList(self)
                                            self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Down.DataIdx, [u'port_data_idx', u'sfe_port', u'admin_state', u'oper_state', u'near_end_cdr_ln', u'near_end_cxp_ch', u'far_end_cxp_ch', u'far_end_cdr_ln', u'neighbor_link'], name, value)


                                        class History(Entity):
                                            """
                                            
                                            
                                            .. attribute:: history_idx  (key)
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: time_stamp
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: admin_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: oper_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: error_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Down.DataIdx.History, self).__init__()

                                                self.yang_name = "history"
                                                self.yang_parent_name = "data_idx"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['history_idx']
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                                    ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                                    ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                    ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                    ('error_state', YLeaf(YType.str, 'error_state')),
                                                ])
                                                self.history_idx = None
                                                self.time_stamp = None
                                                self.admin_state = None
                                                self.oper_state = None
                                                self.error_state = None
                                                self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Down.DataIdx.History, [u'history_idx', u'time_stamp', u'admin_state', u'oper_state', u'error_state'], name, value)


                                    class Brief(Entity):
                                        """
                                        
                                        
                                        .. attribute:: data_idx
                                        
                                        	
                                        	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Down.Brief.DataIdx>`
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Down.Brief, self).__init__()

                                            self.yang_name = "brief"
                                            self.yang_parent_name = "down"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Down.Brief.DataIdx))])
                                            self._leafs = OrderedDict()

                                            self.data_idx = YList(self)
                                            self._segment_path = lambda: "brief"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Down.Brief, [], name, value)


                                        class DataIdx(Entity):
                                            """
                                            
                                            
                                            .. attribute:: port_data_idx  (key)
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** \-9223372036854775808..9223372036854775807
                                            
                                            .. attribute:: sfe_port
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: admin_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: oper_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: near_end_cdr_ln
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: near_end_cxp_ch
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: far_end_cxp_ch
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: far_end_cdr_ln
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: neighbor_link
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: history
                                            
                                            	
                                            	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Down.Brief.DataIdx.History>`
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Down.Brief.DataIdx, self).__init__()

                                                self.yang_name = "data_idx"
                                                self.yang_parent_name = "brief"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['port_data_idx']
                                                self._child_classes = OrderedDict([("history", ("history", Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Down.Brief.DataIdx.History))])
                                                self._leafs = OrderedDict([
                                                    ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                                    ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                                    ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                    ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                    ('near_end_cdr_ln', YLeaf(YType.str, 'near_end_cdr_ln')),
                                                    ('near_end_cxp_ch', YLeaf(YType.str, 'near_end_cxp_ch')),
                                                    ('far_end_cxp_ch', YLeaf(YType.str, 'far_end_cxp_ch')),
                                                    ('far_end_cdr_ln', YLeaf(YType.str, 'far_end_cdr_ln')),
                                                    ('neighbor_link', YLeaf(YType.str, 'neighbor_link')),
                                                ])
                                                self.port_data_idx = None
                                                self.sfe_port = None
                                                self.admin_state = None
                                                self.oper_state = None
                                                self.near_end_cdr_ln = None
                                                self.near_end_cxp_ch = None
                                                self.far_end_cxp_ch = None
                                                self.far_end_cdr_ln = None
                                                self.neighbor_link = None

                                                self.history = YList(self)
                                                self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Down.Brief.DataIdx, [u'port_data_idx', u'sfe_port', u'admin_state', u'oper_state', u'near_end_cdr_ln', u'near_end_cxp_ch', u'far_end_cxp_ch', u'far_end_cdr_ln', u'neighbor_link'], name, value)


                                            class History(Entity):
                                                """
                                                
                                                
                                                .. attribute:: history_idx  (key)
                                                
                                                	
                                                	**type**\: int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                .. attribute:: time_stamp
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: admin_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: oper_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: error_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                

                                                """

                                                _prefix = 'calvados_controllers'
                                                _revision = '2017-01-31'

                                                def __init__(self):
                                                    super(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Down.Brief.DataIdx.History, self).__init__()

                                                    self.yang_name = "history"
                                                    self.yang_parent_name = "data_idx"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['history_idx']
                                                    self._child_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                                        ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                                        ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                        ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                        ('error_state', YLeaf(YType.str, 'error_state')),
                                                    ])
                                                    self.history_idx = None
                                                    self.time_stamp = None
                                                    self.admin_state = None
                                                    self.oper_state = None
                                                    self.error_state = None
                                                    self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Down.Brief.DataIdx.History, [u'history_idx', u'time_stamp', u'admin_state', u'oper_state', u'error_state'], name, value)


                                    class Detail(Entity):
                                        """
                                        
                                        
                                        .. attribute:: data_idx
                                        
                                        	
                                        	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Down.Detail.DataIdx>`
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Down.Detail, self).__init__()

                                            self.yang_name = "detail"
                                            self.yang_parent_name = "down"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Down.Detail.DataIdx))])
                                            self._leafs = OrderedDict()

                                            self.data_idx = YList(self)
                                            self._segment_path = lambda: "detail"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Down.Detail, [], name, value)


                                        class DataIdx(Entity):
                                            """
                                            
                                            
                                            .. attribute:: port_data_idx  (key)
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** \-9223372036854775808..9223372036854775807
                                            
                                            .. attribute:: sfe_port
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: admin_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: oper_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: near_end_cdr_ln
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: near_end_cxp_ch
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: far_end_cxp_ch
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: far_end_cdr_ln
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: neighbor_link
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: history
                                            
                                            	
                                            	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Down.Detail.DataIdx.History>`
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Down.Detail.DataIdx, self).__init__()

                                                self.yang_name = "data_idx"
                                                self.yang_parent_name = "detail"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['port_data_idx']
                                                self._child_classes = OrderedDict([("history", ("history", Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Down.Detail.DataIdx.History))])
                                                self._leafs = OrderedDict([
                                                    ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                                    ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                                    ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                    ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                    ('near_end_cdr_ln', YLeaf(YType.str, 'near_end_cdr_ln')),
                                                    ('near_end_cxp_ch', YLeaf(YType.str, 'near_end_cxp_ch')),
                                                    ('far_end_cxp_ch', YLeaf(YType.str, 'far_end_cxp_ch')),
                                                    ('far_end_cdr_ln', YLeaf(YType.str, 'far_end_cdr_ln')),
                                                    ('neighbor_link', YLeaf(YType.str, 'neighbor_link')),
                                                ])
                                                self.port_data_idx = None
                                                self.sfe_port = None
                                                self.admin_state = None
                                                self.oper_state = None
                                                self.near_end_cdr_ln = None
                                                self.near_end_cxp_ch = None
                                                self.far_end_cxp_ch = None
                                                self.far_end_cdr_ln = None
                                                self.neighbor_link = None

                                                self.history = YList(self)
                                                self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Down.Detail.DataIdx, [u'port_data_idx', u'sfe_port', u'admin_state', u'oper_state', u'near_end_cdr_ln', u'near_end_cxp_ch', u'far_end_cxp_ch', u'far_end_cdr_ln', u'neighbor_link'], name, value)


                                            class History(Entity):
                                                """
                                                
                                                
                                                .. attribute:: history_idx  (key)
                                                
                                                	
                                                	**type**\: int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                .. attribute:: time_stamp
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: admin_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: oper_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: error_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                

                                                """

                                                _prefix = 'calvados_controllers'
                                                _revision = '2017-01-31'

                                                def __init__(self):
                                                    super(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Down.Detail.DataIdx.History, self).__init__()

                                                    self.yang_name = "history"
                                                    self.yang_parent_name = "data_idx"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['history_idx']
                                                    self._child_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                                        ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                                        ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                        ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                        ('error_state', YLeaf(YType.str, 'error_state')),
                                                    ])
                                                    self.history_idx = None
                                                    self.time_stamp = None
                                                    self.admin_state = None
                                                    self.oper_state = None
                                                    self.error_state = None
                                                    self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Down.Detail.DataIdx.History, [u'history_idx', u'time_stamp', u'admin_state', u'oper_state', u'error_state'], name, value)


                                class Er(Entity):
                                    """
                                    
                                    
                                    .. attribute:: data_idx
                                    
                                    	
                                    	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Er.DataIdx>`
                                    
                                    .. attribute:: brief
                                    
                                    	
                                    	**type**\:  :py:class:`Brief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Er.Brief>`
                                    
                                    .. attribute:: detail
                                    
                                    	
                                    	**type**\:  :py:class:`Detail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Er.Detail>`
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Er, self).__init__()

                                        self.yang_name = "er"
                                        self.yang_parent_name = "state"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Er.DataIdx)), ("brief", ("brief", Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Er.Brief)), ("detail", ("detail", Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Er.Detail))])
                                        self._leafs = OrderedDict()

                                        self.brief = Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Er.Brief()
                                        self.brief.parent = self
                                        self._children_name_map["brief"] = "brief"

                                        self.detail = Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Er.Detail()
                                        self.detail.parent = self
                                        self._children_name_map["detail"] = "detail"

                                        self.data_idx = YList(self)
                                        self._segment_path = lambda: "er"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Er, [], name, value)


                                    class DataIdx(Entity):
                                        """
                                        
                                        
                                        .. attribute:: port_data_idx  (key)
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** \-9223372036854775808..9223372036854775807
                                        
                                        .. attribute:: sfe_port
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: admin_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: oper_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: near_end_cdr_ln
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: near_end_cxp_ch
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: far_end_cxp_ch
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: far_end_cdr_ln
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: neighbor_link
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: history
                                        
                                        	
                                        	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Er.DataIdx.History>`
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Er.DataIdx, self).__init__()

                                            self.yang_name = "data_idx"
                                            self.yang_parent_name = "er"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['port_data_idx']
                                            self._child_classes = OrderedDict([("history", ("history", Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Er.DataIdx.History))])
                                            self._leafs = OrderedDict([
                                                ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                                ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                                ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                ('near_end_cdr_ln', YLeaf(YType.str, 'near_end_cdr_ln')),
                                                ('near_end_cxp_ch', YLeaf(YType.str, 'near_end_cxp_ch')),
                                                ('far_end_cxp_ch', YLeaf(YType.str, 'far_end_cxp_ch')),
                                                ('far_end_cdr_ln', YLeaf(YType.str, 'far_end_cdr_ln')),
                                                ('neighbor_link', YLeaf(YType.str, 'neighbor_link')),
                                            ])
                                            self.port_data_idx = None
                                            self.sfe_port = None
                                            self.admin_state = None
                                            self.oper_state = None
                                            self.near_end_cdr_ln = None
                                            self.near_end_cxp_ch = None
                                            self.far_end_cxp_ch = None
                                            self.far_end_cdr_ln = None
                                            self.neighbor_link = None

                                            self.history = YList(self)
                                            self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Er.DataIdx, [u'port_data_idx', u'sfe_port', u'admin_state', u'oper_state', u'near_end_cdr_ln', u'near_end_cxp_ch', u'far_end_cxp_ch', u'far_end_cdr_ln', u'neighbor_link'], name, value)


                                        class History(Entity):
                                            """
                                            
                                            
                                            .. attribute:: history_idx  (key)
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: time_stamp
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: admin_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: oper_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: error_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Er.DataIdx.History, self).__init__()

                                                self.yang_name = "history"
                                                self.yang_parent_name = "data_idx"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['history_idx']
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                                    ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                                    ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                    ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                    ('error_state', YLeaf(YType.str, 'error_state')),
                                                ])
                                                self.history_idx = None
                                                self.time_stamp = None
                                                self.admin_state = None
                                                self.oper_state = None
                                                self.error_state = None
                                                self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Er.DataIdx.History, [u'history_idx', u'time_stamp', u'admin_state', u'oper_state', u'error_state'], name, value)


                                    class Brief(Entity):
                                        """
                                        
                                        
                                        .. attribute:: data_idx
                                        
                                        	
                                        	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Er.Brief.DataIdx>`
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Er.Brief, self).__init__()

                                            self.yang_name = "brief"
                                            self.yang_parent_name = "er"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Er.Brief.DataIdx))])
                                            self._leafs = OrderedDict()

                                            self.data_idx = YList(self)
                                            self._segment_path = lambda: "brief"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Er.Brief, [], name, value)


                                        class DataIdx(Entity):
                                            """
                                            
                                            
                                            .. attribute:: port_data_idx  (key)
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** \-9223372036854775808..9223372036854775807
                                            
                                            .. attribute:: sfe_port
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: admin_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: oper_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: near_end_cdr_ln
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: near_end_cxp_ch
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: far_end_cxp_ch
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: far_end_cdr_ln
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: neighbor_link
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: history
                                            
                                            	
                                            	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Er.Brief.DataIdx.History>`
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Er.Brief.DataIdx, self).__init__()

                                                self.yang_name = "data_idx"
                                                self.yang_parent_name = "brief"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['port_data_idx']
                                                self._child_classes = OrderedDict([("history", ("history", Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Er.Brief.DataIdx.History))])
                                                self._leafs = OrderedDict([
                                                    ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                                    ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                                    ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                    ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                    ('near_end_cdr_ln', YLeaf(YType.str, 'near_end_cdr_ln')),
                                                    ('near_end_cxp_ch', YLeaf(YType.str, 'near_end_cxp_ch')),
                                                    ('far_end_cxp_ch', YLeaf(YType.str, 'far_end_cxp_ch')),
                                                    ('far_end_cdr_ln', YLeaf(YType.str, 'far_end_cdr_ln')),
                                                    ('neighbor_link', YLeaf(YType.str, 'neighbor_link')),
                                                ])
                                                self.port_data_idx = None
                                                self.sfe_port = None
                                                self.admin_state = None
                                                self.oper_state = None
                                                self.near_end_cdr_ln = None
                                                self.near_end_cxp_ch = None
                                                self.far_end_cxp_ch = None
                                                self.far_end_cdr_ln = None
                                                self.neighbor_link = None

                                                self.history = YList(self)
                                                self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Er.Brief.DataIdx, [u'port_data_idx', u'sfe_port', u'admin_state', u'oper_state', u'near_end_cdr_ln', u'near_end_cxp_ch', u'far_end_cxp_ch', u'far_end_cdr_ln', u'neighbor_link'], name, value)


                                            class History(Entity):
                                                """
                                                
                                                
                                                .. attribute:: history_idx  (key)
                                                
                                                	
                                                	**type**\: int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                .. attribute:: time_stamp
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: admin_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: oper_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: error_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                

                                                """

                                                _prefix = 'calvados_controllers'
                                                _revision = '2017-01-31'

                                                def __init__(self):
                                                    super(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Er.Brief.DataIdx.History, self).__init__()

                                                    self.yang_name = "history"
                                                    self.yang_parent_name = "data_idx"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['history_idx']
                                                    self._child_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                                        ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                                        ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                        ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                        ('error_state', YLeaf(YType.str, 'error_state')),
                                                    ])
                                                    self.history_idx = None
                                                    self.time_stamp = None
                                                    self.admin_state = None
                                                    self.oper_state = None
                                                    self.error_state = None
                                                    self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Er.Brief.DataIdx.History, [u'history_idx', u'time_stamp', u'admin_state', u'oper_state', u'error_state'], name, value)


                                    class Detail(Entity):
                                        """
                                        
                                        
                                        .. attribute:: data_idx
                                        
                                        	
                                        	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Er.Detail.DataIdx>`
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Er.Detail, self).__init__()

                                            self.yang_name = "detail"
                                            self.yang_parent_name = "er"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Er.Detail.DataIdx))])
                                            self._leafs = OrderedDict()

                                            self.data_idx = YList(self)
                                            self._segment_path = lambda: "detail"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Er.Detail, [], name, value)


                                        class DataIdx(Entity):
                                            """
                                            
                                            
                                            .. attribute:: port_data_idx  (key)
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** \-9223372036854775808..9223372036854775807
                                            
                                            .. attribute:: sfe_port
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: admin_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: oper_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: near_end_cdr_ln
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: near_end_cxp_ch
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: far_end_cxp_ch
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: far_end_cdr_ln
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: neighbor_link
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: history
                                            
                                            	
                                            	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Er.Detail.DataIdx.History>`
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Er.Detail.DataIdx, self).__init__()

                                                self.yang_name = "data_idx"
                                                self.yang_parent_name = "detail"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['port_data_idx']
                                                self._child_classes = OrderedDict([("history", ("history", Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Er.Detail.DataIdx.History))])
                                                self._leafs = OrderedDict([
                                                    ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                                    ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                                    ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                    ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                    ('near_end_cdr_ln', YLeaf(YType.str, 'near_end_cdr_ln')),
                                                    ('near_end_cxp_ch', YLeaf(YType.str, 'near_end_cxp_ch')),
                                                    ('far_end_cxp_ch', YLeaf(YType.str, 'far_end_cxp_ch')),
                                                    ('far_end_cdr_ln', YLeaf(YType.str, 'far_end_cdr_ln')),
                                                    ('neighbor_link', YLeaf(YType.str, 'neighbor_link')),
                                                ])
                                                self.port_data_idx = None
                                                self.sfe_port = None
                                                self.admin_state = None
                                                self.oper_state = None
                                                self.near_end_cdr_ln = None
                                                self.near_end_cxp_ch = None
                                                self.far_end_cxp_ch = None
                                                self.far_end_cdr_ln = None
                                                self.neighbor_link = None

                                                self.history = YList(self)
                                                self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Er.Detail.DataIdx, [u'port_data_idx', u'sfe_port', u'admin_state', u'oper_state', u'near_end_cdr_ln', u'near_end_cxp_ch', u'far_end_cxp_ch', u'far_end_cdr_ln', u'neighbor_link'], name, value)


                                            class History(Entity):
                                                """
                                                
                                                
                                                .. attribute:: history_idx  (key)
                                                
                                                	
                                                	**type**\: int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                .. attribute:: time_stamp
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: admin_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: oper_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: error_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                

                                                """

                                                _prefix = 'calvados_controllers'
                                                _revision = '2017-01-31'

                                                def __init__(self):
                                                    super(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Er.Detail.DataIdx.History, self).__init__()

                                                    self.yang_name = "history"
                                                    self.yang_parent_name = "data_idx"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['history_idx']
                                                    self._child_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                                        ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                                        ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                        ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                        ('error_state', YLeaf(YType.str, 'error_state')),
                                                    ])
                                                    self.history_idx = None
                                                    self.time_stamp = None
                                                    self.admin_state = None
                                                    self.oper_state = None
                                                    self.error_state = None
                                                    self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Er.Detail.DataIdx.History, [u'history_idx', u'time_stamp', u'admin_state', u'oper_state', u'error_state'], name, value)


                                class Mismatch(Entity):
                                    """
                                    
                                    
                                    .. attribute:: data_idx
                                    
                                    	
                                    	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Mismatch.DataIdx>`
                                    
                                    .. attribute:: brief
                                    
                                    	
                                    	**type**\:  :py:class:`Brief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Mismatch.Brief>`
                                    
                                    .. attribute:: detail
                                    
                                    	
                                    	**type**\:  :py:class:`Detail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Mismatch.Detail>`
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Mismatch, self).__init__()

                                        self.yang_name = "mismatch"
                                        self.yang_parent_name = "state"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Mismatch.DataIdx)), ("brief", ("brief", Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Mismatch.Brief)), ("detail", ("detail", Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Mismatch.Detail))])
                                        self._leafs = OrderedDict()

                                        self.brief = Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Mismatch.Brief()
                                        self.brief.parent = self
                                        self._children_name_map["brief"] = "brief"

                                        self.detail = Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Mismatch.Detail()
                                        self.detail.parent = self
                                        self._children_name_map["detail"] = "detail"

                                        self.data_idx = YList(self)
                                        self._segment_path = lambda: "mismatch"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Mismatch, [], name, value)


                                    class DataIdx(Entity):
                                        """
                                        
                                        
                                        .. attribute:: port_data_idx  (key)
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** \-9223372036854775808..9223372036854775807
                                        
                                        .. attribute:: sfe_port
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: admin_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: oper_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: near_end_cdr_ln
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: near_end_cxp_ch
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: far_end_cxp_ch
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: far_end_cdr_ln
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: neighbor_link
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: history
                                        
                                        	
                                        	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Mismatch.DataIdx.History>`
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Mismatch.DataIdx, self).__init__()

                                            self.yang_name = "data_idx"
                                            self.yang_parent_name = "mismatch"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['port_data_idx']
                                            self._child_classes = OrderedDict([("history", ("history", Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Mismatch.DataIdx.History))])
                                            self._leafs = OrderedDict([
                                                ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                                ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                                ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                ('near_end_cdr_ln', YLeaf(YType.str, 'near_end_cdr_ln')),
                                                ('near_end_cxp_ch', YLeaf(YType.str, 'near_end_cxp_ch')),
                                                ('far_end_cxp_ch', YLeaf(YType.str, 'far_end_cxp_ch')),
                                                ('far_end_cdr_ln', YLeaf(YType.str, 'far_end_cdr_ln')),
                                                ('neighbor_link', YLeaf(YType.str, 'neighbor_link')),
                                            ])
                                            self.port_data_idx = None
                                            self.sfe_port = None
                                            self.admin_state = None
                                            self.oper_state = None
                                            self.near_end_cdr_ln = None
                                            self.near_end_cxp_ch = None
                                            self.far_end_cxp_ch = None
                                            self.far_end_cdr_ln = None
                                            self.neighbor_link = None

                                            self.history = YList(self)
                                            self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Mismatch.DataIdx, [u'port_data_idx', u'sfe_port', u'admin_state', u'oper_state', u'near_end_cdr_ln', u'near_end_cxp_ch', u'far_end_cxp_ch', u'far_end_cdr_ln', u'neighbor_link'], name, value)


                                        class History(Entity):
                                            """
                                            
                                            
                                            .. attribute:: history_idx  (key)
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: time_stamp
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: admin_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: oper_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: error_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Mismatch.DataIdx.History, self).__init__()

                                                self.yang_name = "history"
                                                self.yang_parent_name = "data_idx"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['history_idx']
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                                    ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                                    ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                    ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                    ('error_state', YLeaf(YType.str, 'error_state')),
                                                ])
                                                self.history_idx = None
                                                self.time_stamp = None
                                                self.admin_state = None
                                                self.oper_state = None
                                                self.error_state = None
                                                self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Mismatch.DataIdx.History, [u'history_idx', u'time_stamp', u'admin_state', u'oper_state', u'error_state'], name, value)


                                    class Brief(Entity):
                                        """
                                        
                                        
                                        .. attribute:: data_idx
                                        
                                        	
                                        	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Mismatch.Brief.DataIdx>`
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Mismatch.Brief, self).__init__()

                                            self.yang_name = "brief"
                                            self.yang_parent_name = "mismatch"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Mismatch.Brief.DataIdx))])
                                            self._leafs = OrderedDict()

                                            self.data_idx = YList(self)
                                            self._segment_path = lambda: "brief"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Mismatch.Brief, [], name, value)


                                        class DataIdx(Entity):
                                            """
                                            
                                            
                                            .. attribute:: port_data_idx  (key)
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** \-9223372036854775808..9223372036854775807
                                            
                                            .. attribute:: sfe_port
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: admin_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: oper_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: near_end_cdr_ln
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: near_end_cxp_ch
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: far_end_cxp_ch
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: far_end_cdr_ln
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: neighbor_link
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: history
                                            
                                            	
                                            	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Mismatch.Brief.DataIdx.History>`
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Mismatch.Brief.DataIdx, self).__init__()

                                                self.yang_name = "data_idx"
                                                self.yang_parent_name = "brief"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['port_data_idx']
                                                self._child_classes = OrderedDict([("history", ("history", Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Mismatch.Brief.DataIdx.History))])
                                                self._leafs = OrderedDict([
                                                    ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                                    ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                                    ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                    ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                    ('near_end_cdr_ln', YLeaf(YType.str, 'near_end_cdr_ln')),
                                                    ('near_end_cxp_ch', YLeaf(YType.str, 'near_end_cxp_ch')),
                                                    ('far_end_cxp_ch', YLeaf(YType.str, 'far_end_cxp_ch')),
                                                    ('far_end_cdr_ln', YLeaf(YType.str, 'far_end_cdr_ln')),
                                                    ('neighbor_link', YLeaf(YType.str, 'neighbor_link')),
                                                ])
                                                self.port_data_idx = None
                                                self.sfe_port = None
                                                self.admin_state = None
                                                self.oper_state = None
                                                self.near_end_cdr_ln = None
                                                self.near_end_cxp_ch = None
                                                self.far_end_cxp_ch = None
                                                self.far_end_cdr_ln = None
                                                self.neighbor_link = None

                                                self.history = YList(self)
                                                self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Mismatch.Brief.DataIdx, [u'port_data_idx', u'sfe_port', u'admin_state', u'oper_state', u'near_end_cdr_ln', u'near_end_cxp_ch', u'far_end_cxp_ch', u'far_end_cdr_ln', u'neighbor_link'], name, value)


                                            class History(Entity):
                                                """
                                                
                                                
                                                .. attribute:: history_idx  (key)
                                                
                                                	
                                                	**type**\: int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                .. attribute:: time_stamp
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: admin_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: oper_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: error_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                

                                                """

                                                _prefix = 'calvados_controllers'
                                                _revision = '2017-01-31'

                                                def __init__(self):
                                                    super(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Mismatch.Brief.DataIdx.History, self).__init__()

                                                    self.yang_name = "history"
                                                    self.yang_parent_name = "data_idx"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['history_idx']
                                                    self._child_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                                        ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                                        ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                        ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                        ('error_state', YLeaf(YType.str, 'error_state')),
                                                    ])
                                                    self.history_idx = None
                                                    self.time_stamp = None
                                                    self.admin_state = None
                                                    self.oper_state = None
                                                    self.error_state = None
                                                    self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Mismatch.Brief.DataIdx.History, [u'history_idx', u'time_stamp', u'admin_state', u'oper_state', u'error_state'], name, value)


                                    class Detail(Entity):
                                        """
                                        
                                        
                                        .. attribute:: data_idx
                                        
                                        	
                                        	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Mismatch.Detail.DataIdx>`
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Mismatch.Detail, self).__init__()

                                            self.yang_name = "detail"
                                            self.yang_parent_name = "mismatch"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Mismatch.Detail.DataIdx))])
                                            self._leafs = OrderedDict()

                                            self.data_idx = YList(self)
                                            self._segment_path = lambda: "detail"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Mismatch.Detail, [], name, value)


                                        class DataIdx(Entity):
                                            """
                                            
                                            
                                            .. attribute:: port_data_idx  (key)
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** \-9223372036854775808..9223372036854775807
                                            
                                            .. attribute:: sfe_port
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: admin_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: oper_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: near_end_cdr_ln
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: near_end_cxp_ch
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: far_end_cxp_ch
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: far_end_cdr_ln
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: neighbor_link
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: history
                                            
                                            	
                                            	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Mismatch.Detail.DataIdx.History>`
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Mismatch.Detail.DataIdx, self).__init__()

                                                self.yang_name = "data_idx"
                                                self.yang_parent_name = "detail"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['port_data_idx']
                                                self._child_classes = OrderedDict([("history", ("history", Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Mismatch.Detail.DataIdx.History))])
                                                self._leafs = OrderedDict([
                                                    ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                                    ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                                    ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                    ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                    ('near_end_cdr_ln', YLeaf(YType.str, 'near_end_cdr_ln')),
                                                    ('near_end_cxp_ch', YLeaf(YType.str, 'near_end_cxp_ch')),
                                                    ('far_end_cxp_ch', YLeaf(YType.str, 'far_end_cxp_ch')),
                                                    ('far_end_cdr_ln', YLeaf(YType.str, 'far_end_cdr_ln')),
                                                    ('neighbor_link', YLeaf(YType.str, 'neighbor_link')),
                                                ])
                                                self.port_data_idx = None
                                                self.sfe_port = None
                                                self.admin_state = None
                                                self.oper_state = None
                                                self.near_end_cdr_ln = None
                                                self.near_end_cxp_ch = None
                                                self.far_end_cxp_ch = None
                                                self.far_end_cdr_ln = None
                                                self.neighbor_link = None

                                                self.history = YList(self)
                                                self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Mismatch.Detail.DataIdx, [u'port_data_idx', u'sfe_port', u'admin_state', u'oper_state', u'near_end_cdr_ln', u'near_end_cxp_ch', u'far_end_cxp_ch', u'far_end_cdr_ln', u'neighbor_link'], name, value)


                                            class History(Entity):
                                                """
                                                
                                                
                                                .. attribute:: history_idx  (key)
                                                
                                                	
                                                	**type**\: int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                .. attribute:: time_stamp
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: admin_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: oper_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                .. attribute:: error_state
                                                
                                                	
                                                	**type**\: str
                                                
                                                

                                                """

                                                _prefix = 'calvados_controllers'
                                                _revision = '2017-01-31'

                                                def __init__(self):
                                                    super(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Mismatch.Detail.DataIdx.History, self).__init__()

                                                    self.yang_name = "history"
                                                    self.yang_parent_name = "data_idx"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['history_idx']
                                                    self._child_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                                        ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                                        ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                        ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                        ('error_state', YLeaf(YType.str, 'error_state')),
                                                    ])
                                                    self.history_idx = None
                                                    self.time_stamp = None
                                                    self.admin_state = None
                                                    self.oper_state = None
                                                    self.error_state = None
                                                    self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Tx.State.Mismatch.Detail.DataIdx.History, [u'history_idx', u'time_stamp', u'admin_state', u'oper_state', u'error_state'], name, value)


                            class Statistics(Entity):
                                """
                                
                                
                                .. attribute:: data_idx
                                
                                	
                                	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Tx.Statistics.DataIdx>`
                                
                                .. attribute:: brief
                                
                                	
                                	**type**\:  :py:class:`Brief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Tx.Statistics.Brief>`
                                
                                .. attribute:: detail
                                
                                	
                                	**type**\:  :py:class:`Detail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Tx.Statistics.Detail>`
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.Fabric.Oper.Link.Rack.Port.Tx.Statistics, self).__init__()

                                    self.yang_name = "statistics"
                                    self.yang_parent_name = "tx"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Tx.Statistics.DataIdx)), ("brief", ("brief", Controller.Fabric.Oper.Link.Rack.Port.Tx.Statistics.Brief)), ("detail", ("detail", Controller.Fabric.Oper.Link.Rack.Port.Tx.Statistics.Detail))])
                                    self._leafs = OrderedDict()

                                    self.brief = Controller.Fabric.Oper.Link.Rack.Port.Tx.Statistics.Brief()
                                    self.brief.parent = self
                                    self._children_name_map["brief"] = "brief"

                                    self.detail = Controller.Fabric.Oper.Link.Rack.Port.Tx.Statistics.Detail()
                                    self.detail.parent = self
                                    self._children_name_map["detail"] = "detail"

                                    self.data_idx = YList(self)
                                    self._segment_path = lambda: "statistics"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Tx.Statistics, [], name, value)


                                class DataIdx(Entity):
                                    """
                                    
                                    
                                    .. attribute:: port_data_idx  (key)
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** \-9223372036854775808..9223372036854775807
                                    
                                    .. attribute:: rack_num
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: sfe_port
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: tx_control_cells_counter
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: tx_data_cell_counter
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: tx_data_byte_counter
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: rx_crc_errors_counter
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: rx_lfec_fec_correctable_error
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: rx_8b_10b_disparity_errors
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: rx_control_cells_counter
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: rx_data_cell_counter
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: rx_data_byte_counter
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: rx_dropped_retransmitted_control
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: tx_asyn_fifo_rate
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: rx_asyn_fifo_rate
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: rx_lfec_fec_uncorrectable_errors
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: rx_8b_10b_code_errors
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: is_link_error
                                    
                                    	
                                    	**type**\: bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: link_crc_error
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: link_size_error
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: link_mis_align_error
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: link_code_group_error
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: link_no_sig_lock_error
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: link_no_sig_accept_error
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: link_tokens_error
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: error_token_count
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.Fabric.Oper.Link.Rack.Port.Tx.Statistics.DataIdx, self).__init__()

                                        self.yang_name = "data_idx"
                                        self.yang_parent_name = "statistics"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['port_data_idx']
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                            ('rack_num', YLeaf(YType.str, 'rack_num')),
                                            ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                            ('tx_control_cells_counter', YLeaf(YType.uint64, 'TX_Control_cells_counter')),
                                            ('tx_data_cell_counter', YLeaf(YType.uint64, 'TX_Data_cell_counter')),
                                            ('tx_data_byte_counter', YLeaf(YType.uint64, 'TX_Data_byte_counter')),
                                            ('rx_crc_errors_counter', YLeaf(YType.uint64, 'RX_CRC_errors_counter')),
                                            ('rx_lfec_fec_correctable_error', YLeaf(YType.uint64, 'RX_LFEC_FEC_correctable_error')),
                                            ('rx_8b_10b_disparity_errors', YLeaf(YType.uint64, 'RX_8b_10b_disparity_errors')),
                                            ('rx_control_cells_counter', YLeaf(YType.uint64, 'RX_Control_cells_counter')),
                                            ('rx_data_cell_counter', YLeaf(YType.uint64, 'RX_Data_cell_counter')),
                                            ('rx_data_byte_counter', YLeaf(YType.uint64, 'RX_Data_byte_counter')),
                                            ('rx_dropped_retransmitted_control', YLeaf(YType.uint64, 'RX_dropped_retransmitted_control')),
                                            ('tx_asyn_fifo_rate', YLeaf(YType.uint64, 'TX_Asyn_fifo_rate')),
                                            ('rx_asyn_fifo_rate', YLeaf(YType.uint64, 'RX_Asyn_fifo_rate')),
                                            ('rx_lfec_fec_uncorrectable_errors', YLeaf(YType.uint64, 'RX_LFEC_FEC_uncorrectable_errors')),
                                            ('rx_8b_10b_code_errors', YLeaf(YType.uint64, 'RX_8b_10b_code_errors')),
                                            ('is_link_error', YLeaf(YType.boolean, 'is_link_error')),
                                            ('link_crc_error', YLeaf(YType.uint32, 'link_crc_error')),
                                            ('link_size_error', YLeaf(YType.uint32, 'link_size_error')),
                                            ('link_mis_align_error', YLeaf(YType.uint32, 'link_mis_align_error')),
                                            ('link_code_group_error', YLeaf(YType.uint32, 'link_code_group_error')),
                                            ('link_no_sig_lock_error', YLeaf(YType.uint32, 'link_no_sig_lock_error')),
                                            ('link_no_sig_accept_error', YLeaf(YType.uint32, 'link_no_sig_accept_error')),
                                            ('link_tokens_error', YLeaf(YType.uint32, 'link_tokens_error')),
                                            ('error_token_count', YLeaf(YType.uint32, 'error_token_count')),
                                        ])
                                        self.port_data_idx = None
                                        self.rack_num = None
                                        self.sfe_port = None
                                        self.tx_control_cells_counter = None
                                        self.tx_data_cell_counter = None
                                        self.tx_data_byte_counter = None
                                        self.rx_crc_errors_counter = None
                                        self.rx_lfec_fec_correctable_error = None
                                        self.rx_8b_10b_disparity_errors = None
                                        self.rx_control_cells_counter = None
                                        self.rx_data_cell_counter = None
                                        self.rx_data_byte_counter = None
                                        self.rx_dropped_retransmitted_control = None
                                        self.tx_asyn_fifo_rate = None
                                        self.rx_asyn_fifo_rate = None
                                        self.rx_lfec_fec_uncorrectable_errors = None
                                        self.rx_8b_10b_code_errors = None
                                        self.is_link_error = None
                                        self.link_crc_error = None
                                        self.link_size_error = None
                                        self.link_mis_align_error = None
                                        self.link_code_group_error = None
                                        self.link_no_sig_lock_error = None
                                        self.link_no_sig_accept_error = None
                                        self.link_tokens_error = None
                                        self.error_token_count = None
                                        self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Tx.Statistics.DataIdx, [u'port_data_idx', u'rack_num', u'sfe_port', u'tx_control_cells_counter', u'tx_data_cell_counter', u'tx_data_byte_counter', u'rx_crc_errors_counter', u'rx_lfec_fec_correctable_error', u'rx_8b_10b_disparity_errors', u'rx_control_cells_counter', u'rx_data_cell_counter', u'rx_data_byte_counter', u'rx_dropped_retransmitted_control', u'tx_asyn_fifo_rate', u'rx_asyn_fifo_rate', u'rx_lfec_fec_uncorrectable_errors', u'rx_8b_10b_code_errors', u'is_link_error', u'link_crc_error', u'link_size_error', u'link_mis_align_error', u'link_code_group_error', u'link_no_sig_lock_error', u'link_no_sig_accept_error', u'link_tokens_error', u'error_token_count'], name, value)


                                class Brief(Entity):
                                    """
                                    
                                    
                                    .. attribute:: data_idx
                                    
                                    	
                                    	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Tx.Statistics.Brief.DataIdx>`
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.Fabric.Oper.Link.Rack.Port.Tx.Statistics.Brief, self).__init__()

                                        self.yang_name = "brief"
                                        self.yang_parent_name = "statistics"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Tx.Statistics.Brief.DataIdx))])
                                        self._leafs = OrderedDict()

                                        self.data_idx = YList(self)
                                        self._segment_path = lambda: "brief"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Tx.Statistics.Brief, [], name, value)


                                    class DataIdx(Entity):
                                        """
                                        
                                        
                                        .. attribute:: port_data_idx  (key)
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** \-9223372036854775808..9223372036854775807
                                        
                                        .. attribute:: rack_num
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: sfe_port
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: tx_control_cells_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: tx_data_cell_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: tx_data_byte_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_crc_errors_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_lfec_fec_correctable_error
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_8b_10b_disparity_errors
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_control_cells_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_data_cell_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_data_byte_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_dropped_retransmitted_control
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: tx_asyn_fifo_rate
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_asyn_fifo_rate
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_lfec_fec_uncorrectable_errors
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_8b_10b_code_errors
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: is_link_error
                                        
                                        	
                                        	**type**\: bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: link_crc_error
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: link_size_error
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: link_mis_align_error
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: link_code_group_error
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: link_no_sig_lock_error
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: link_no_sig_accept_error
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: link_tokens_error
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_token_count
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Fabric.Oper.Link.Rack.Port.Tx.Statistics.Brief.DataIdx, self).__init__()

                                            self.yang_name = "data_idx"
                                            self.yang_parent_name = "brief"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['port_data_idx']
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                                ('rack_num', YLeaf(YType.str, 'rack_num')),
                                                ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                                ('tx_control_cells_counter', YLeaf(YType.uint64, 'TX_Control_cells_counter')),
                                                ('tx_data_cell_counter', YLeaf(YType.uint64, 'TX_Data_cell_counter')),
                                                ('tx_data_byte_counter', YLeaf(YType.uint64, 'TX_Data_byte_counter')),
                                                ('rx_crc_errors_counter', YLeaf(YType.uint64, 'RX_CRC_errors_counter')),
                                                ('rx_lfec_fec_correctable_error', YLeaf(YType.uint64, 'RX_LFEC_FEC_correctable_error')),
                                                ('rx_8b_10b_disparity_errors', YLeaf(YType.uint64, 'RX_8b_10b_disparity_errors')),
                                                ('rx_control_cells_counter', YLeaf(YType.uint64, 'RX_Control_cells_counter')),
                                                ('rx_data_cell_counter', YLeaf(YType.uint64, 'RX_Data_cell_counter')),
                                                ('rx_data_byte_counter', YLeaf(YType.uint64, 'RX_Data_byte_counter')),
                                                ('rx_dropped_retransmitted_control', YLeaf(YType.uint64, 'RX_dropped_retransmitted_control')),
                                                ('tx_asyn_fifo_rate', YLeaf(YType.uint64, 'TX_Asyn_fifo_rate')),
                                                ('rx_asyn_fifo_rate', YLeaf(YType.uint64, 'RX_Asyn_fifo_rate')),
                                                ('rx_lfec_fec_uncorrectable_errors', YLeaf(YType.uint64, 'RX_LFEC_FEC_uncorrectable_errors')),
                                                ('rx_8b_10b_code_errors', YLeaf(YType.uint64, 'RX_8b_10b_code_errors')),
                                                ('is_link_error', YLeaf(YType.boolean, 'is_link_error')),
                                                ('link_crc_error', YLeaf(YType.uint32, 'link_crc_error')),
                                                ('link_size_error', YLeaf(YType.uint32, 'link_size_error')),
                                                ('link_mis_align_error', YLeaf(YType.uint32, 'link_mis_align_error')),
                                                ('link_code_group_error', YLeaf(YType.uint32, 'link_code_group_error')),
                                                ('link_no_sig_lock_error', YLeaf(YType.uint32, 'link_no_sig_lock_error')),
                                                ('link_no_sig_accept_error', YLeaf(YType.uint32, 'link_no_sig_accept_error')),
                                                ('link_tokens_error', YLeaf(YType.uint32, 'link_tokens_error')),
                                                ('error_token_count', YLeaf(YType.uint32, 'error_token_count')),
                                            ])
                                            self.port_data_idx = None
                                            self.rack_num = None
                                            self.sfe_port = None
                                            self.tx_control_cells_counter = None
                                            self.tx_data_cell_counter = None
                                            self.tx_data_byte_counter = None
                                            self.rx_crc_errors_counter = None
                                            self.rx_lfec_fec_correctable_error = None
                                            self.rx_8b_10b_disparity_errors = None
                                            self.rx_control_cells_counter = None
                                            self.rx_data_cell_counter = None
                                            self.rx_data_byte_counter = None
                                            self.rx_dropped_retransmitted_control = None
                                            self.tx_asyn_fifo_rate = None
                                            self.rx_asyn_fifo_rate = None
                                            self.rx_lfec_fec_uncorrectable_errors = None
                                            self.rx_8b_10b_code_errors = None
                                            self.is_link_error = None
                                            self.link_crc_error = None
                                            self.link_size_error = None
                                            self.link_mis_align_error = None
                                            self.link_code_group_error = None
                                            self.link_no_sig_lock_error = None
                                            self.link_no_sig_accept_error = None
                                            self.link_tokens_error = None
                                            self.error_token_count = None
                                            self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Tx.Statistics.Brief.DataIdx, [u'port_data_idx', u'rack_num', u'sfe_port', u'tx_control_cells_counter', u'tx_data_cell_counter', u'tx_data_byte_counter', u'rx_crc_errors_counter', u'rx_lfec_fec_correctable_error', u'rx_8b_10b_disparity_errors', u'rx_control_cells_counter', u'rx_data_cell_counter', u'rx_data_byte_counter', u'rx_dropped_retransmitted_control', u'tx_asyn_fifo_rate', u'rx_asyn_fifo_rate', u'rx_lfec_fec_uncorrectable_errors', u'rx_8b_10b_code_errors', u'is_link_error', u'link_crc_error', u'link_size_error', u'link_mis_align_error', u'link_code_group_error', u'link_no_sig_lock_error', u'link_no_sig_accept_error', u'link_tokens_error', u'error_token_count'], name, value)


                                class Detail(Entity):
                                    """
                                    
                                    
                                    .. attribute:: data_idx
                                    
                                    	
                                    	**type**\: list of  		 :py:class:`DataIdx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Link.Rack.Port.Tx.Statistics.Detail.DataIdx>`
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.Fabric.Oper.Link.Rack.Port.Tx.Statistics.Detail, self).__init__()

                                        self.yang_name = "detail"
                                        self.yang_parent_name = "statistics"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("data_idx", ("data_idx", Controller.Fabric.Oper.Link.Rack.Port.Tx.Statistics.Detail.DataIdx))])
                                        self._leafs = OrderedDict()

                                        self.data_idx = YList(self)
                                        self._segment_path = lambda: "detail"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Tx.Statistics.Detail, [], name, value)


                                    class DataIdx(Entity):
                                        """
                                        
                                        
                                        .. attribute:: port_data_idx  (key)
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** \-9223372036854775808..9223372036854775807
                                        
                                        .. attribute:: rack_num
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: sfe_port
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: tx_control_cells_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: tx_data_cell_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: tx_data_byte_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_crc_errors_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_lfec_fec_correctable_error
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_8b_10b_disparity_errors
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_control_cells_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_data_cell_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_data_byte_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_dropped_retransmitted_control
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: tx_asyn_fifo_rate
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_asyn_fifo_rate
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_lfec_fec_uncorrectable_errors
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_8b_10b_code_errors
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: is_link_error
                                        
                                        	
                                        	**type**\: bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: link_crc_error
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: link_size_error
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: link_mis_align_error
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: link_code_group_error
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: link_no_sig_lock_error
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: link_no_sig_accept_error
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: link_tokens_error
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_token_count
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Fabric.Oper.Link.Rack.Port.Tx.Statistics.Detail.DataIdx, self).__init__()

                                            self.yang_name = "data_idx"
                                            self.yang_parent_name = "detail"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['port_data_idx']
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('port_data_idx', YLeaf(YType.int64, 'port_data_idx')),
                                                ('rack_num', YLeaf(YType.str, 'rack_num')),
                                                ('sfe_port', YLeaf(YType.str, 'sfe_port')),
                                                ('tx_control_cells_counter', YLeaf(YType.uint64, 'TX_Control_cells_counter')),
                                                ('tx_data_cell_counter', YLeaf(YType.uint64, 'TX_Data_cell_counter')),
                                                ('tx_data_byte_counter', YLeaf(YType.uint64, 'TX_Data_byte_counter')),
                                                ('rx_crc_errors_counter', YLeaf(YType.uint64, 'RX_CRC_errors_counter')),
                                                ('rx_lfec_fec_correctable_error', YLeaf(YType.uint64, 'RX_LFEC_FEC_correctable_error')),
                                                ('rx_8b_10b_disparity_errors', YLeaf(YType.uint64, 'RX_8b_10b_disparity_errors')),
                                                ('rx_control_cells_counter', YLeaf(YType.uint64, 'RX_Control_cells_counter')),
                                                ('rx_data_cell_counter', YLeaf(YType.uint64, 'RX_Data_cell_counter')),
                                                ('rx_data_byte_counter', YLeaf(YType.uint64, 'RX_Data_byte_counter')),
                                                ('rx_dropped_retransmitted_control', YLeaf(YType.uint64, 'RX_dropped_retransmitted_control')),
                                                ('tx_asyn_fifo_rate', YLeaf(YType.uint64, 'TX_Asyn_fifo_rate')),
                                                ('rx_asyn_fifo_rate', YLeaf(YType.uint64, 'RX_Asyn_fifo_rate')),
                                                ('rx_lfec_fec_uncorrectable_errors', YLeaf(YType.uint64, 'RX_LFEC_FEC_uncorrectable_errors')),
                                                ('rx_8b_10b_code_errors', YLeaf(YType.uint64, 'RX_8b_10b_code_errors')),
                                                ('is_link_error', YLeaf(YType.boolean, 'is_link_error')),
                                                ('link_crc_error', YLeaf(YType.uint32, 'link_crc_error')),
                                                ('link_size_error', YLeaf(YType.uint32, 'link_size_error')),
                                                ('link_mis_align_error', YLeaf(YType.uint32, 'link_mis_align_error')),
                                                ('link_code_group_error', YLeaf(YType.uint32, 'link_code_group_error')),
                                                ('link_no_sig_lock_error', YLeaf(YType.uint32, 'link_no_sig_lock_error')),
                                                ('link_no_sig_accept_error', YLeaf(YType.uint32, 'link_no_sig_accept_error')),
                                                ('link_tokens_error', YLeaf(YType.uint32, 'link_tokens_error')),
                                                ('error_token_count', YLeaf(YType.uint32, 'error_token_count')),
                                            ])
                                            self.port_data_idx = None
                                            self.rack_num = None
                                            self.sfe_port = None
                                            self.tx_control_cells_counter = None
                                            self.tx_data_cell_counter = None
                                            self.tx_data_byte_counter = None
                                            self.rx_crc_errors_counter = None
                                            self.rx_lfec_fec_correctable_error = None
                                            self.rx_8b_10b_disparity_errors = None
                                            self.rx_control_cells_counter = None
                                            self.rx_data_cell_counter = None
                                            self.rx_data_byte_counter = None
                                            self.rx_dropped_retransmitted_control = None
                                            self.tx_asyn_fifo_rate = None
                                            self.rx_asyn_fifo_rate = None
                                            self.rx_lfec_fec_uncorrectable_errors = None
                                            self.rx_8b_10b_code_errors = None
                                            self.is_link_error = None
                                            self.link_crc_error = None
                                            self.link_size_error = None
                                            self.link_mis_align_error = None
                                            self.link_code_group_error = None
                                            self.link_no_sig_lock_error = None
                                            self.link_no_sig_accept_error = None
                                            self.link_tokens_error = None
                                            self.error_token_count = None
                                            self._segment_path = lambda: "data_idx" + "[port_data_idx='" + str(self.port_data_idx) + "']"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Fabric.Oper.Link.Rack.Port.Tx.Statistics.Detail.DataIdx, [u'port_data_idx', u'rack_num', u'sfe_port', u'tx_control_cells_counter', u'tx_data_cell_counter', u'tx_data_byte_counter', u'rx_crc_errors_counter', u'rx_lfec_fec_correctable_error', u'rx_8b_10b_disparity_errors', u'rx_control_cells_counter', u'rx_data_cell_counter', u'rx_data_byte_counter', u'rx_dropped_retransmitted_control', u'tx_asyn_fifo_rate', u'rx_asyn_fifo_rate', u'rx_lfec_fec_uncorrectable_errors', u'rx_8b_10b_code_errors', u'is_link_error', u'link_crc_error', u'link_size_error', u'link_mis_align_error', u'link_code_group_error', u'link_no_sig_lock_error', u'link_no_sig_accept_error', u'link_tokens_error', u'error_token_count'], name, value)


                class NodeLocation(Entity):
                    """
                    
                    
                    .. attribute:: node_str  (key)
                    
                    	
                    	**type**\: str
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.Fabric.Oper.Link.NodeLocation, self).__init__()

                        self.yang_name = "node_location"
                        self.yang_parent_name = "link"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['node_str']
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('node_str', YLeaf(YType.str, 'node_str')),
                        ])
                        self.node_str = None
                        self._segment_path = lambda: "node_location" + "[node_str='" + str(self.node_str) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/oper/link/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.Fabric.Oper.Link.NodeLocation, [u'node_str'], name, value)


            class Sfe(Entity):
                """
                Switch Fabric Element option
                
                .. attribute:: rack
                
                	
                	**type**\: list of  		 :py:class:`Rack <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Sfe.Rack>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Controller.Fabric.Oper.Sfe, self).__init__()

                    self.yang_name = "sfe"
                    self.yang_parent_name = "oper"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("rack", ("rack", Controller.Fabric.Oper.Sfe.Rack))])
                    self._leafs = OrderedDict()

                    self.rack = YList(self)
                    self._segment_path = lambda: "sfe"
                    self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/oper/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Controller.Fabric.Oper.Sfe, [], name, value)


                class Rack(Entity):
                    """
                    
                    
                    .. attribute:: rack_number  (key)
                    
                    	
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: asic_stages
                    
                    	
                    	**type**\: list of  		 :py:class:`AsicStages <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Sfe.Rack.AsicStages>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.Fabric.Oper.Sfe.Rack, self).__init__()

                        self.yang_name = "rack"
                        self.yang_parent_name = "sfe"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['rack_number']
                        self._child_classes = OrderedDict([("asic_stages", ("asic_stages", Controller.Fabric.Oper.Sfe.Rack.AsicStages))])
                        self._leafs = OrderedDict([
                            ('rack_number', YLeaf(YType.int32, 'rack_number')),
                        ])
                        self.rack_number = None

                        self.asic_stages = YList(self)
                        self._segment_path = lambda: "rack" + "[rack_number='" + str(self.rack_number) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/oper/sfe/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.Fabric.Oper.Sfe.Rack, [u'rack_number'], name, value)


                    class AsicStages(Entity):
                        """
                        
                        
                        .. attribute:: asic_stage_name  (key)
                        
                        	
                        	**type**\: str
                        
                        	**pattern:** fia\|s123\|s13\|s2\|b2b
                        
                        .. attribute:: location
                        
                        	
                        	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Sfe.Rack.AsicStages.Location>`
                        
                        .. attribute:: asic_list
                        
                        	
                        	**type**\: list of  		 :py:class:`AsicList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Sfe.Rack.AsicStages.AsicList>`
                        
                        .. attribute:: brief
                        
                        	
                        	**type**\:  :py:class:`Brief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Sfe.Rack.AsicStages.Brief>`
                        
                        .. attribute:: detail
                        
                        	
                        	**type**\:  :py:class:`Detail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Sfe.Rack.AsicStages.Detail>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Fabric.Oper.Sfe.Rack.AsicStages, self).__init__()

                            self.yang_name = "asic_stages"
                            self.yang_parent_name = "rack"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['asic_stage_name']
                            self._child_classes = OrderedDict([("location", ("location", Controller.Fabric.Oper.Sfe.Rack.AsicStages.Location)), ("asic_list", ("asic_list", Controller.Fabric.Oper.Sfe.Rack.AsicStages.AsicList)), ("brief", ("brief", Controller.Fabric.Oper.Sfe.Rack.AsicStages.Brief)), ("detail", ("detail", Controller.Fabric.Oper.Sfe.Rack.AsicStages.Detail))])
                            self._leafs = OrderedDict([
                                ('asic_stage_name', YLeaf(YType.str, 'asic_stage_name')),
                            ])
                            self.asic_stage_name = None

                            self.brief = Controller.Fabric.Oper.Sfe.Rack.AsicStages.Brief()
                            self.brief.parent = self
                            self._children_name_map["brief"] = "brief"

                            self.detail = Controller.Fabric.Oper.Sfe.Rack.AsicStages.Detail()
                            self.detail.parent = self
                            self._children_name_map["detail"] = "detail"

                            self.location = YList(self)
                            self.asic_list = YList(self)
                            self._segment_path = lambda: "asic_stages" + "[asic_stage_name='" + str(self.asic_stage_name) + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Fabric.Oper.Sfe.Rack.AsicStages, [u'asic_stage_name'], name, value)


                        class Location(Entity):
                            """
                            
                            
                            .. attribute:: loc_str  (key)
                            
                            	
                            	**type**\: str
                            
                            	**pattern:** ((0?[0\-9]\|1[0\-5])/([F\|f][C\|c](0?[0\-5]))/(0?[0\-5]))\|((0?[0\-9]\|1[0\-5])/(0?[0\-7])/(0?[0\-5]))\|(([F\|f][0\-3])/([F\|f][C\|c](0?[0\-9]\|1[0\-1]))/(0?[0\-2]))
                            
                            .. attribute:: asic_list
                            
                            	
                            	**type**\: list of  		 :py:class:`AsicList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Sfe.Rack.AsicStages.Location.AsicList>`
                            
                            .. attribute:: brief
                            
                            	
                            	**type**\:  :py:class:`Brief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Sfe.Rack.AsicStages.Location.Brief>`
                            
                            .. attribute:: detail
                            
                            	
                            	**type**\:  :py:class:`Detail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Sfe.Rack.AsicStages.Location.Detail>`
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Fabric.Oper.Sfe.Rack.AsicStages.Location, self).__init__()

                                self.yang_name = "location"
                                self.yang_parent_name = "asic_stages"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['loc_str']
                                self._child_classes = OrderedDict([("asic_list", ("asic_list", Controller.Fabric.Oper.Sfe.Rack.AsicStages.Location.AsicList)), ("brief", ("brief", Controller.Fabric.Oper.Sfe.Rack.AsicStages.Location.Brief)), ("detail", ("detail", Controller.Fabric.Oper.Sfe.Rack.AsicStages.Location.Detail))])
                                self._leafs = OrderedDict([
                                    ('loc_str', YLeaf(YType.str, 'loc_str')),
                                ])
                                self.loc_str = None

                                self.brief = Controller.Fabric.Oper.Sfe.Rack.AsicStages.Location.Brief()
                                self.brief.parent = self
                                self._children_name_map["brief"] = "brief"

                                self.detail = Controller.Fabric.Oper.Sfe.Rack.AsicStages.Location.Detail()
                                self.detail.parent = self
                                self._children_name_map["detail"] = "detail"

                                self.asic_list = YList(self)
                                self._segment_path = lambda: "location" + "[loc_str='" + str(self.loc_str) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Fabric.Oper.Sfe.Rack.AsicStages.Location, [u'loc_str'], name, value)


                            class AsicList(Entity):
                                """
                                
                                
                                .. attribute:: asic_idx  (key)
                                
                                	
                                	**type**\: int
                                
                                	**range:** \-9223372036854775808..9223372036854775807
                                
                                .. attribute:: asic_loc_str
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: admin_state
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: oper_state
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: down_flags
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: fab_group
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: history
                                
                                	
                                	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Sfe.Rack.AsicStages.Location.AsicList.History>`
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.Fabric.Oper.Sfe.Rack.AsicStages.Location.AsicList, self).__init__()

                                    self.yang_name = "asic_list"
                                    self.yang_parent_name = "location"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['asic_idx']
                                    self._child_classes = OrderedDict([("history", ("history", Controller.Fabric.Oper.Sfe.Rack.AsicStages.Location.AsicList.History))])
                                    self._leafs = OrderedDict([
                                        ('asic_idx', YLeaf(YType.int64, 'asic_idx')),
                                        ('asic_loc_str', YLeaf(YType.str, 'asic_loc_str')),
                                        ('admin_state', YLeaf(YType.str, 'admin-state')),
                                        ('oper_state', YLeaf(YType.str, 'oper_state')),
                                        ('down_flags', YLeaf(YType.str, 'down_flags')),
                                        ('fab_group', YLeaf(YType.str, 'fab_group')),
                                    ])
                                    self.asic_idx = None
                                    self.asic_loc_str = None
                                    self.admin_state = None
                                    self.oper_state = None
                                    self.down_flags = None
                                    self.fab_group = None

                                    self.history = YList(self)
                                    self._segment_path = lambda: "asic_list" + "[asic_idx='" + str(self.asic_idx) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.Fabric.Oper.Sfe.Rack.AsicStages.Location.AsicList, [u'asic_idx', u'asic_loc_str', u'admin_state', u'oper_state', u'down_flags', u'fab_group'], name, value)


                                class History(Entity):
                                    """
                                    
                                    
                                    .. attribute:: history_idx  (key)
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    .. attribute:: time_stamp
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: admin_state
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: oper_state
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: error_state
                                    
                                    	
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.Fabric.Oper.Sfe.Rack.AsicStages.Location.AsicList.History, self).__init__()

                                        self.yang_name = "history"
                                        self.yang_parent_name = "asic_list"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['history_idx']
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                            ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                            ('admin_state', YLeaf(YType.str, 'admin-state')),
                                            ('oper_state', YLeaf(YType.str, 'oper_state')),
                                            ('error_state', YLeaf(YType.str, 'error_state')),
                                        ])
                                        self.history_idx = None
                                        self.time_stamp = None
                                        self.admin_state = None
                                        self.oper_state = None
                                        self.error_state = None
                                        self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.Fabric.Oper.Sfe.Rack.AsicStages.Location.AsicList.History, [u'history_idx', u'time_stamp', u'admin_state', u'oper_state', u'error_state'], name, value)


                            class Brief(Entity):
                                """
                                
                                
                                .. attribute:: asic_list
                                
                                	
                                	**type**\: list of  		 :py:class:`AsicList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Sfe.Rack.AsicStages.Location.Brief.AsicList>`
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.Fabric.Oper.Sfe.Rack.AsicStages.Location.Brief, self).__init__()

                                    self.yang_name = "brief"
                                    self.yang_parent_name = "location"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([("asic_list", ("asic_list", Controller.Fabric.Oper.Sfe.Rack.AsicStages.Location.Brief.AsicList))])
                                    self._leafs = OrderedDict()

                                    self.asic_list = YList(self)
                                    self._segment_path = lambda: "brief"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.Fabric.Oper.Sfe.Rack.AsicStages.Location.Brief, [], name, value)


                                class AsicList(Entity):
                                    """
                                    
                                    
                                    .. attribute:: asic_idx  (key)
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** \-9223372036854775808..9223372036854775807
                                    
                                    .. attribute:: asic_loc_str
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: admin_state
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: oper_state
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: down_flags
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: fab_group
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: history
                                    
                                    	
                                    	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Sfe.Rack.AsicStages.Location.Brief.AsicList.History>`
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.Fabric.Oper.Sfe.Rack.AsicStages.Location.Brief.AsicList, self).__init__()

                                        self.yang_name = "asic_list"
                                        self.yang_parent_name = "brief"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['asic_idx']
                                        self._child_classes = OrderedDict([("history", ("history", Controller.Fabric.Oper.Sfe.Rack.AsicStages.Location.Brief.AsicList.History))])
                                        self._leafs = OrderedDict([
                                            ('asic_idx', YLeaf(YType.int64, 'asic_idx')),
                                            ('asic_loc_str', YLeaf(YType.str, 'asic_loc_str')),
                                            ('admin_state', YLeaf(YType.str, 'admin-state')),
                                            ('oper_state', YLeaf(YType.str, 'oper_state')),
                                            ('down_flags', YLeaf(YType.str, 'down_flags')),
                                            ('fab_group', YLeaf(YType.str, 'fab_group')),
                                        ])
                                        self.asic_idx = None
                                        self.asic_loc_str = None
                                        self.admin_state = None
                                        self.oper_state = None
                                        self.down_flags = None
                                        self.fab_group = None

                                        self.history = YList(self)
                                        self._segment_path = lambda: "asic_list" + "[asic_idx='" + str(self.asic_idx) + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.Fabric.Oper.Sfe.Rack.AsicStages.Location.Brief.AsicList, [u'asic_idx', u'asic_loc_str', u'admin_state', u'oper_state', u'down_flags', u'fab_group'], name, value)


                                    class History(Entity):
                                        """
                                        
                                        
                                        .. attribute:: history_idx  (key)
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** \-2147483648..2147483647
                                        
                                        .. attribute:: time_stamp
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: admin_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: oper_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: error_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Fabric.Oper.Sfe.Rack.AsicStages.Location.Brief.AsicList.History, self).__init__()

                                            self.yang_name = "history"
                                            self.yang_parent_name = "asic_list"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['history_idx']
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                                ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                                ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                ('error_state', YLeaf(YType.str, 'error_state')),
                                            ])
                                            self.history_idx = None
                                            self.time_stamp = None
                                            self.admin_state = None
                                            self.oper_state = None
                                            self.error_state = None
                                            self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Fabric.Oper.Sfe.Rack.AsicStages.Location.Brief.AsicList.History, [u'history_idx', u'time_stamp', u'admin_state', u'oper_state', u'error_state'], name, value)


                            class Detail(Entity):
                                """
                                
                                
                                .. attribute:: asic_list
                                
                                	
                                	**type**\: list of  		 :py:class:`AsicList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Sfe.Rack.AsicStages.Location.Detail.AsicList>`
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.Fabric.Oper.Sfe.Rack.AsicStages.Location.Detail, self).__init__()

                                    self.yang_name = "detail"
                                    self.yang_parent_name = "location"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([("asic_list", ("asic_list", Controller.Fabric.Oper.Sfe.Rack.AsicStages.Location.Detail.AsicList))])
                                    self._leafs = OrderedDict()

                                    self.asic_list = YList(self)
                                    self._segment_path = lambda: "detail"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.Fabric.Oper.Sfe.Rack.AsicStages.Location.Detail, [], name, value)


                                class AsicList(Entity):
                                    """
                                    
                                    
                                    .. attribute:: asic_idx  (key)
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** \-9223372036854775808..9223372036854775807
                                    
                                    .. attribute:: asic_loc_str
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: admin_state
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: oper_state
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: down_flags
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: fab_group
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: history
                                    
                                    	
                                    	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Sfe.Rack.AsicStages.Location.Detail.AsicList.History>`
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.Fabric.Oper.Sfe.Rack.AsicStages.Location.Detail.AsicList, self).__init__()

                                        self.yang_name = "asic_list"
                                        self.yang_parent_name = "detail"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['asic_idx']
                                        self._child_classes = OrderedDict([("history", ("history", Controller.Fabric.Oper.Sfe.Rack.AsicStages.Location.Detail.AsicList.History))])
                                        self._leafs = OrderedDict([
                                            ('asic_idx', YLeaf(YType.int64, 'asic_idx')),
                                            ('asic_loc_str', YLeaf(YType.str, 'asic_loc_str')),
                                            ('admin_state', YLeaf(YType.str, 'admin-state')),
                                            ('oper_state', YLeaf(YType.str, 'oper_state')),
                                            ('down_flags', YLeaf(YType.str, 'down_flags')),
                                            ('fab_group', YLeaf(YType.str, 'fab_group')),
                                        ])
                                        self.asic_idx = None
                                        self.asic_loc_str = None
                                        self.admin_state = None
                                        self.oper_state = None
                                        self.down_flags = None
                                        self.fab_group = None

                                        self.history = YList(self)
                                        self._segment_path = lambda: "asic_list" + "[asic_idx='" + str(self.asic_idx) + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.Fabric.Oper.Sfe.Rack.AsicStages.Location.Detail.AsicList, [u'asic_idx', u'asic_loc_str', u'admin_state', u'oper_state', u'down_flags', u'fab_group'], name, value)


                                    class History(Entity):
                                        """
                                        
                                        
                                        .. attribute:: history_idx  (key)
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** \-2147483648..2147483647
                                        
                                        .. attribute:: time_stamp
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: admin_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: oper_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: error_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Fabric.Oper.Sfe.Rack.AsicStages.Location.Detail.AsicList.History, self).__init__()

                                            self.yang_name = "history"
                                            self.yang_parent_name = "asic_list"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['history_idx']
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                                ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                                ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                ('error_state', YLeaf(YType.str, 'error_state')),
                                            ])
                                            self.history_idx = None
                                            self.time_stamp = None
                                            self.admin_state = None
                                            self.oper_state = None
                                            self.error_state = None
                                            self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Fabric.Oper.Sfe.Rack.AsicStages.Location.Detail.AsicList.History, [u'history_idx', u'time_stamp', u'admin_state', u'oper_state', u'error_state'], name, value)


                        class AsicList(Entity):
                            """
                            
                            
                            .. attribute:: asic_idx  (key)
                            
                            	
                            	**type**\: int
                            
                            	**range:** \-9223372036854775808..9223372036854775807
                            
                            .. attribute:: asic_loc_str
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: admin_state
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: oper_state
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: down_flags
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: fab_group
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: history
                            
                            	
                            	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Sfe.Rack.AsicStages.AsicList.History>`
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Fabric.Oper.Sfe.Rack.AsicStages.AsicList, self).__init__()

                                self.yang_name = "asic_list"
                                self.yang_parent_name = "asic_stages"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['asic_idx']
                                self._child_classes = OrderedDict([("history", ("history", Controller.Fabric.Oper.Sfe.Rack.AsicStages.AsicList.History))])
                                self._leafs = OrderedDict([
                                    ('asic_idx', YLeaf(YType.int64, 'asic_idx')),
                                    ('asic_loc_str', YLeaf(YType.str, 'asic_loc_str')),
                                    ('admin_state', YLeaf(YType.str, 'admin-state')),
                                    ('oper_state', YLeaf(YType.str, 'oper_state')),
                                    ('down_flags', YLeaf(YType.str, 'down_flags')),
                                    ('fab_group', YLeaf(YType.str, 'fab_group')),
                                ])
                                self.asic_idx = None
                                self.asic_loc_str = None
                                self.admin_state = None
                                self.oper_state = None
                                self.down_flags = None
                                self.fab_group = None

                                self.history = YList(self)
                                self._segment_path = lambda: "asic_list" + "[asic_idx='" + str(self.asic_idx) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Fabric.Oper.Sfe.Rack.AsicStages.AsicList, [u'asic_idx', u'asic_loc_str', u'admin_state', u'oper_state', u'down_flags', u'fab_group'], name, value)


                            class History(Entity):
                                """
                                
                                
                                .. attribute:: history_idx  (key)
                                
                                	
                                	**type**\: int
                                
                                	**range:** \-2147483648..2147483647
                                
                                .. attribute:: time_stamp
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: admin_state
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: oper_state
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: error_state
                                
                                	
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.Fabric.Oper.Sfe.Rack.AsicStages.AsicList.History, self).__init__()

                                    self.yang_name = "history"
                                    self.yang_parent_name = "asic_list"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['history_idx']
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                        ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                        ('admin_state', YLeaf(YType.str, 'admin-state')),
                                        ('oper_state', YLeaf(YType.str, 'oper_state')),
                                        ('error_state', YLeaf(YType.str, 'error_state')),
                                    ])
                                    self.history_idx = None
                                    self.time_stamp = None
                                    self.admin_state = None
                                    self.oper_state = None
                                    self.error_state = None
                                    self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.Fabric.Oper.Sfe.Rack.AsicStages.AsicList.History, [u'history_idx', u'time_stamp', u'admin_state', u'oper_state', u'error_state'], name, value)


                        class Brief(Entity):
                            """
                            
                            
                            .. attribute:: asic_list
                            
                            	
                            	**type**\: list of  		 :py:class:`AsicList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Sfe.Rack.AsicStages.Brief.AsicList>`
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Fabric.Oper.Sfe.Rack.AsicStages.Brief, self).__init__()

                                self.yang_name = "brief"
                                self.yang_parent_name = "asic_stages"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("asic_list", ("asic_list", Controller.Fabric.Oper.Sfe.Rack.AsicStages.Brief.AsicList))])
                                self._leafs = OrderedDict()

                                self.asic_list = YList(self)
                                self._segment_path = lambda: "brief"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Fabric.Oper.Sfe.Rack.AsicStages.Brief, [], name, value)


                            class AsicList(Entity):
                                """
                                
                                
                                .. attribute:: asic_idx  (key)
                                
                                	
                                	**type**\: int
                                
                                	**range:** \-9223372036854775808..9223372036854775807
                                
                                .. attribute:: asic_loc_str
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: admin_state
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: oper_state
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: down_flags
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: fab_group
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: history
                                
                                	
                                	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Sfe.Rack.AsicStages.Brief.AsicList.History>`
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.Fabric.Oper.Sfe.Rack.AsicStages.Brief.AsicList, self).__init__()

                                    self.yang_name = "asic_list"
                                    self.yang_parent_name = "brief"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['asic_idx']
                                    self._child_classes = OrderedDict([("history", ("history", Controller.Fabric.Oper.Sfe.Rack.AsicStages.Brief.AsicList.History))])
                                    self._leafs = OrderedDict([
                                        ('asic_idx', YLeaf(YType.int64, 'asic_idx')),
                                        ('asic_loc_str', YLeaf(YType.str, 'asic_loc_str')),
                                        ('admin_state', YLeaf(YType.str, 'admin-state')),
                                        ('oper_state', YLeaf(YType.str, 'oper_state')),
                                        ('down_flags', YLeaf(YType.str, 'down_flags')),
                                        ('fab_group', YLeaf(YType.str, 'fab_group')),
                                    ])
                                    self.asic_idx = None
                                    self.asic_loc_str = None
                                    self.admin_state = None
                                    self.oper_state = None
                                    self.down_flags = None
                                    self.fab_group = None

                                    self.history = YList(self)
                                    self._segment_path = lambda: "asic_list" + "[asic_idx='" + str(self.asic_idx) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.Fabric.Oper.Sfe.Rack.AsicStages.Brief.AsicList, [u'asic_idx', u'asic_loc_str', u'admin_state', u'oper_state', u'down_flags', u'fab_group'], name, value)


                                class History(Entity):
                                    """
                                    
                                    
                                    .. attribute:: history_idx  (key)
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    .. attribute:: time_stamp
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: admin_state
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: oper_state
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: error_state
                                    
                                    	
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.Fabric.Oper.Sfe.Rack.AsicStages.Brief.AsicList.History, self).__init__()

                                        self.yang_name = "history"
                                        self.yang_parent_name = "asic_list"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['history_idx']
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                            ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                            ('admin_state', YLeaf(YType.str, 'admin-state')),
                                            ('oper_state', YLeaf(YType.str, 'oper_state')),
                                            ('error_state', YLeaf(YType.str, 'error_state')),
                                        ])
                                        self.history_idx = None
                                        self.time_stamp = None
                                        self.admin_state = None
                                        self.oper_state = None
                                        self.error_state = None
                                        self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.Fabric.Oper.Sfe.Rack.AsicStages.Brief.AsicList.History, [u'history_idx', u'time_stamp', u'admin_state', u'oper_state', u'error_state'], name, value)


                        class Detail(Entity):
                            """
                            
                            
                            .. attribute:: asic_list
                            
                            	
                            	**type**\: list of  		 :py:class:`AsicList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Sfe.Rack.AsicStages.Detail.AsicList>`
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Fabric.Oper.Sfe.Rack.AsicStages.Detail, self).__init__()

                                self.yang_name = "detail"
                                self.yang_parent_name = "asic_stages"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("asic_list", ("asic_list", Controller.Fabric.Oper.Sfe.Rack.AsicStages.Detail.AsicList))])
                                self._leafs = OrderedDict()

                                self.asic_list = YList(self)
                                self._segment_path = lambda: "detail"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Fabric.Oper.Sfe.Rack.AsicStages.Detail, [], name, value)


                            class AsicList(Entity):
                                """
                                
                                
                                .. attribute:: asic_idx  (key)
                                
                                	
                                	**type**\: int
                                
                                	**range:** \-9223372036854775808..9223372036854775807
                                
                                .. attribute:: asic_loc_str
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: admin_state
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: oper_state
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: down_flags
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: fab_group
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: history
                                
                                	
                                	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.Sfe.Rack.AsicStages.Detail.AsicList.History>`
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.Fabric.Oper.Sfe.Rack.AsicStages.Detail.AsicList, self).__init__()

                                    self.yang_name = "asic_list"
                                    self.yang_parent_name = "detail"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['asic_idx']
                                    self._child_classes = OrderedDict([("history", ("history", Controller.Fabric.Oper.Sfe.Rack.AsicStages.Detail.AsicList.History))])
                                    self._leafs = OrderedDict([
                                        ('asic_idx', YLeaf(YType.int64, 'asic_idx')),
                                        ('asic_loc_str', YLeaf(YType.str, 'asic_loc_str')),
                                        ('admin_state', YLeaf(YType.str, 'admin-state')),
                                        ('oper_state', YLeaf(YType.str, 'oper_state')),
                                        ('down_flags', YLeaf(YType.str, 'down_flags')),
                                        ('fab_group', YLeaf(YType.str, 'fab_group')),
                                    ])
                                    self.asic_idx = None
                                    self.asic_loc_str = None
                                    self.admin_state = None
                                    self.oper_state = None
                                    self.down_flags = None
                                    self.fab_group = None

                                    self.history = YList(self)
                                    self._segment_path = lambda: "asic_list" + "[asic_idx='" + str(self.asic_idx) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.Fabric.Oper.Sfe.Rack.AsicStages.Detail.AsicList, [u'asic_idx', u'asic_loc_str', u'admin_state', u'oper_state', u'down_flags', u'fab_group'], name, value)


                                class History(Entity):
                                    """
                                    
                                    
                                    .. attribute:: history_idx  (key)
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    .. attribute:: time_stamp
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: admin_state
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: oper_state
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: error_state
                                    
                                    	
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.Fabric.Oper.Sfe.Rack.AsicStages.Detail.AsicList.History, self).__init__()

                                        self.yang_name = "history"
                                        self.yang_parent_name = "asic_list"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['history_idx']
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                            ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                            ('admin_state', YLeaf(YType.str, 'admin-state')),
                                            ('oper_state', YLeaf(YType.str, 'oper_state')),
                                            ('error_state', YLeaf(YType.str, 'error_state')),
                                        ])
                                        self.history_idx = None
                                        self.time_stamp = None
                                        self.admin_state = None
                                        self.oper_state = None
                                        self.error_state = None
                                        self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.Fabric.Oper.Sfe.Rack.AsicStages.Detail.AsicList.History, [u'history_idx', u'time_stamp', u'admin_state', u'oper_state', u'error_state'], name, value)


            class FsdbPla(Entity):
                """
                plane availability status option
                
                .. attribute:: rack
                
                	Rack
                	**type**\: list of  		 :py:class:`Rack <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.FsdbPla.Rack>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Controller.Fabric.Oper.FsdbPla, self).__init__()

                    self.yang_name = "fsdb_pla"
                    self.yang_parent_name = "oper"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("rack", ("rack", Controller.Fabric.Oper.FsdbPla.Rack))])
                    self._leafs = OrderedDict()

                    self.rack = YList(self)
                    self._segment_path = lambda: "fsdb_pla"
                    self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/oper/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Controller.Fabric.Oper.FsdbPla, [], name, value)


                class Rack(Entity):
                    """
                    Rack
                    
                    .. attribute:: rack_number  (key)
                    
                    	
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: asic_stages
                    
                    	
                    	**type**\: list of  		 :py:class:`AsicStages <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.FsdbPla.Rack.AsicStages>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.Fabric.Oper.FsdbPla.Rack, self).__init__()

                        self.yang_name = "rack"
                        self.yang_parent_name = "fsdb_pla"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['rack_number']
                        self._child_classes = OrderedDict([("asic_stages", ("asic_stages", Controller.Fabric.Oper.FsdbPla.Rack.AsicStages))])
                        self._leafs = OrderedDict([
                            ('rack_number', YLeaf(YType.int32, 'rack_number')),
                        ])
                        self.rack_number = None

                        self.asic_stages = YList(self)
                        self._segment_path = lambda: "rack" + "[rack_number='" + str(self.rack_number) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/oper/fsdb_pla/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.Fabric.Oper.FsdbPla.Rack, [u'rack_number'], name, value)


                    class AsicStages(Entity):
                        """
                        
                        
                        .. attribute:: asic_stage_idx  (key)
                        
                        	
                        	**type**\: str
                        
                        	**pattern:** s1\|s2\|s3\|s123
                        
                        .. attribute:: asic_stage_name
                        
                        	
                        	**type**\: str
                        
                        	**pattern:** s1\|s2\|s3\|s123
                        
                        .. attribute:: rack_number
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: plane_number
                        
                        	
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: fabids
                        
                        	
                        	**type**\: list of  		 :py:class:`Fabids <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.FsdbPla.Rack.AsicStages.Fabids>`
                        
                        .. attribute:: down_fabids
                        
                        	
                        	**type**\: list of  		 :py:class:`DownFabids <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.FsdbPla.Rack.AsicStages.DownFabids>`
                        
                        .. attribute:: destination
                        
                        	
                        	**type**\: list of  		 :py:class:`Destination <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.FsdbPla.Rack.AsicStages.Destination>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Fabric.Oper.FsdbPla.Rack.AsicStages, self).__init__()

                            self.yang_name = "asic_stages"
                            self.yang_parent_name = "rack"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['asic_stage_idx']
                            self._child_classes = OrderedDict([("fabids", ("fabids", Controller.Fabric.Oper.FsdbPla.Rack.AsicStages.Fabids)), ("down_fabids", ("down_fabids", Controller.Fabric.Oper.FsdbPla.Rack.AsicStages.DownFabids)), ("destination", ("destination", Controller.Fabric.Oper.FsdbPla.Rack.AsicStages.Destination))])
                            self._leafs = OrderedDict([
                                ('asic_stage_idx', YLeaf(YType.str, 'asic_stage_idx')),
                                ('asic_stage_name', YLeaf(YType.str, 'asic_stage_name')),
                                ('rack_number', YLeaf(YType.str, 'rack_number')),
                                ('plane_number', YLeaf(YType.int32, 'plane_number')),
                            ])
                            self.asic_stage_idx = None
                            self.asic_stage_name = None
                            self.rack_number = None
                            self.plane_number = None

                            self.fabids = YList(self)
                            self.down_fabids = YList(self)
                            self.destination = YList(self)
                            self._segment_path = lambda: "asic_stages" + "[asic_stage_idx='" + str(self.asic_stage_idx) + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Fabric.Oper.FsdbPla.Rack.AsicStages, [u'asic_stage_idx', u'asic_stage_name', u'rack_number', u'plane_number'], name, value)


                        class Fabids(Entity):
                            """
                            
                            
                            .. attribute:: idx  (key)
                            
                            	
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: fabid_address
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: plane_num
                            
                            	
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: plane_0_mask
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: plane_1_mask
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: plane_2_mask
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: plane_3_mask
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: plane_4_mask
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: plane_5_mask
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: min_links_per_asic
                            
                            	
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: max_links_per_asic
                            
                            	
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: total_links
                            
                            	
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: min_up_links_per_asic
                            
                            	
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: max_up_links_per_asic
                            
                            	
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: total_up_links
                            
                            	
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Fabric.Oper.FsdbPla.Rack.AsicStages.Fabids, self).__init__()

                                self.yang_name = "fabids"
                                self.yang_parent_name = "asic_stages"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['idx']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('idx', YLeaf(YType.int32, 'idx')),
                                    ('fabid_address', YLeaf(YType.str, 'fabid_address')),
                                    ('plane_num', YLeaf(YType.int32, 'plane_num')),
                                    ('plane_0_mask', YLeaf(YType.str, 'plane_0_mask')),
                                    ('plane_1_mask', YLeaf(YType.str, 'plane_1_mask')),
                                    ('plane_2_mask', YLeaf(YType.str, 'plane_2_mask')),
                                    ('plane_3_mask', YLeaf(YType.str, 'plane_3_mask')),
                                    ('plane_4_mask', YLeaf(YType.str, 'plane_4_mask')),
                                    ('plane_5_mask', YLeaf(YType.str, 'plane_5_mask')),
                                    ('min_links_per_asic', YLeaf(YType.int32, 'min_links_per_asic')),
                                    ('max_links_per_asic', YLeaf(YType.int32, 'max_links_per_asic')),
                                    ('total_links', YLeaf(YType.int32, 'total_links')),
                                    ('min_up_links_per_asic', YLeaf(YType.int32, 'min_up_links_per_asic')),
                                    ('max_up_links_per_asic', YLeaf(YType.int32, 'max_up_links_per_asic')),
                                    ('total_up_links', YLeaf(YType.int32, 'total_up_links')),
                                ])
                                self.idx = None
                                self.fabid_address = None
                                self.plane_num = None
                                self.plane_0_mask = None
                                self.plane_1_mask = None
                                self.plane_2_mask = None
                                self.plane_3_mask = None
                                self.plane_4_mask = None
                                self.plane_5_mask = None
                                self.min_links_per_asic = None
                                self.max_links_per_asic = None
                                self.total_links = None
                                self.min_up_links_per_asic = None
                                self.max_up_links_per_asic = None
                                self.total_up_links = None
                                self._segment_path = lambda: "fabids" + "[idx='" + str(self.idx) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Fabric.Oper.FsdbPla.Rack.AsicStages.Fabids, [u'idx', u'fabid_address', u'plane_num', u'plane_0_mask', u'plane_1_mask', u'plane_2_mask', u'plane_3_mask', u'plane_4_mask', u'plane_5_mask', u'min_links_per_asic', u'max_links_per_asic', u'total_links', u'min_up_links_per_asic', u'max_up_links_per_asic', u'total_up_links'], name, value)


                        class DownFabids(Entity):
                            """
                            
                            
                            .. attribute:: idx  (key)
                            
                            	
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: fabid_address
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: fabid_status
                            
                            	
                            	**type**\: str
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Fabric.Oper.FsdbPla.Rack.AsicStages.DownFabids, self).__init__()

                                self.yang_name = "down_fabids"
                                self.yang_parent_name = "asic_stages"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['idx']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('idx', YLeaf(YType.int32, 'idx')),
                                    ('fabid_address', YLeaf(YType.str, 'fabid_address')),
                                    ('fabid_status', YLeaf(YType.str, 'fabid_status')),
                                ])
                                self.idx = None
                                self.fabid_address = None
                                self.fabid_status = None
                                self._segment_path = lambda: "down_fabids" + "[idx='" + str(self.idx) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Fabric.Oper.FsdbPla.Rack.AsicStages.DownFabids, [u'idx', u'fabid_address', u'fabid_status'], name, value)


                        class Destination(Entity):
                            """
                            
                            
                            .. attribute:: amba_id  (key)
                            
                            	
                            	**type**\: str
                            
                            	**pattern:** (0?[0\-9]\|1[0\-5])/(0?[0\-7])/(0?[0\-5])\|([0\-9]\|[1\-9][0\-9]\|[1\-9][0\-9][0\-9]\|10[0\-1][0\-9]\|102[0\-3])
                            
                            .. attribute:: planes
                            
                            	
                            	**type**\: list of  		 :py:class:`Planes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.FsdbPla.Rack.AsicStages.Destination.Planes>`
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Fabric.Oper.FsdbPla.Rack.AsicStages.Destination, self).__init__()

                                self.yang_name = "destination"
                                self.yang_parent_name = "asic_stages"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['amba_id']
                                self._child_classes = OrderedDict([("planes", ("planes", Controller.Fabric.Oper.FsdbPla.Rack.AsicStages.Destination.Planes))])
                                self._leafs = OrderedDict([
                                    ('amba_id', YLeaf(YType.str, 'amba_id')),
                                ])
                                self.amba_id = None

                                self.planes = YList(self)
                                self._segment_path = lambda: "destination" + "[amba_id='" + str(self.amba_id) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Fabric.Oper.FsdbPla.Rack.AsicStages.Destination, [u'amba_id'], name, value)


                            class Planes(Entity):
                                """
                                
                                
                                .. attribute:: plane_idx  (key)
                                
                                	
                                	**type**\: int
                                
                                	**range:** \-2147483648..2147483647
                                
                                .. attribute:: plane_num
                                
                                	
                                	**type**\: int
                                
                                	**range:** \-2147483648..2147483647
                                
                                .. attribute:: fabid_name
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: show_fabid
                                
                                	
                                	**type**\: bool
                                
                                .. attribute:: asic_stage
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: cards
                                
                                	
                                	**type**\: list of  		 :py:class:`Cards <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.FsdbPla.Rack.AsicStages.Destination.Planes.Cards>`
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.Fabric.Oper.FsdbPla.Rack.AsicStages.Destination.Planes, self).__init__()

                                    self.yang_name = "planes"
                                    self.yang_parent_name = "destination"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['plane_idx']
                                    self._child_classes = OrderedDict([("cards", ("cards", Controller.Fabric.Oper.FsdbPla.Rack.AsicStages.Destination.Planes.Cards))])
                                    self._leafs = OrderedDict([
                                        ('plane_idx', YLeaf(YType.int32, 'plane_idx')),
                                        ('plane_num', YLeaf(YType.int32, 'plane_num')),
                                        ('fabid_name', YLeaf(YType.str, 'fabid_name')),
                                        ('show_fabid', YLeaf(YType.boolean, 'show_fabid')),
                                        ('asic_stage', YLeaf(YType.str, 'asic_stage')),
                                    ])
                                    self.plane_idx = None
                                    self.plane_num = None
                                    self.fabid_name = None
                                    self.show_fabid = None
                                    self.asic_stage = None

                                    self.cards = YList(self)
                                    self._segment_path = lambda: "planes" + "[plane_idx='" + str(self.plane_idx) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.Fabric.Oper.FsdbPla.Rack.AsicStages.Destination.Planes, [u'plane_idx', u'plane_num', u'fabid_name', u'show_fabid', u'asic_stage'], name, value)


                                class Cards(Entity):
                                    """
                                    
                                    
                                    .. attribute:: card_idx  (key)
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    .. attribute:: asics
                                    
                                    	
                                    	**type**\: list of  		 :py:class:`Asics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.FsdbPla.Rack.AsicStages.Destination.Planes.Cards.Asics>`
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.Fabric.Oper.FsdbPla.Rack.AsicStages.Destination.Planes.Cards, self).__init__()

                                        self.yang_name = "cards"
                                        self.yang_parent_name = "planes"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['card_idx']
                                        self._child_classes = OrderedDict([("asics", ("asics", Controller.Fabric.Oper.FsdbPla.Rack.AsicStages.Destination.Planes.Cards.Asics))])
                                        self._leafs = OrderedDict([
                                            ('card_idx', YLeaf(YType.int32, 'card_idx')),
                                        ])
                                        self.card_idx = None

                                        self.asics = YList(self)
                                        self._segment_path = lambda: "cards" + "[card_idx='" + str(self.card_idx) + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.Fabric.Oper.FsdbPla.Rack.AsicStages.Destination.Planes.Cards, [u'card_idx'], name, value)


                                    class Asics(Entity):
                                        """
                                        
                                        
                                        .. attribute:: asic_idx  (key)
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** \-2147483648..2147483647
                                        
                                        .. attribute:: asic_rsa
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: reachability_mask
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: linkup_mask
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: all_reach_mask
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: total_links
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** \-2147483648..2147483647
                                        
                                        .. attribute:: total_up_links
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** \-2147483648..2147483647
                                        
                                        .. attribute:: total_all_reach_links
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** \-2147483648..2147483647
                                        
                                        .. attribute:: asic_stage_name
                                        
                                        	
                                        	**type**\: str
                                        
                                        	**pattern:** s1\|s2\|s3\|s123
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Fabric.Oper.FsdbPla.Rack.AsicStages.Destination.Planes.Cards.Asics, self).__init__()

                                            self.yang_name = "asics"
                                            self.yang_parent_name = "cards"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['asic_idx']
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('asic_idx', YLeaf(YType.int32, 'asic_idx')),
                                                ('asic_rsa', YLeaf(YType.str, 'asic_RSA')),
                                                ('reachability_mask', YLeaf(YType.str, 'reachability_mask')),
                                                ('linkup_mask', YLeaf(YType.str, 'linkup_mask')),
                                                ('all_reach_mask', YLeaf(YType.str, 'all_reach_mask')),
                                                ('total_links', YLeaf(YType.int32, 'total_links')),
                                                ('total_up_links', YLeaf(YType.int32, 'total_up_links')),
                                                ('total_all_reach_links', YLeaf(YType.int32, 'total_all_reach_links')),
                                                ('asic_stage_name', YLeaf(YType.str, 'asic_stage_name')),
                                            ])
                                            self.asic_idx = None
                                            self.asic_rsa = None
                                            self.reachability_mask = None
                                            self.linkup_mask = None
                                            self.all_reach_mask = None
                                            self.total_links = None
                                            self.total_up_links = None
                                            self.total_all_reach_links = None
                                            self.asic_stage_name = None
                                            self._segment_path = lambda: "asics" + "[asic_idx='" + str(self.asic_idx) + "']"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Fabric.Oper.FsdbPla.Rack.AsicStages.Destination.Planes.Cards.Asics, [u'asic_idx', u'asic_rsa', u'reachability_mask', u'linkup_mask', u'all_reach_mask', u'total_links', u'total_up_links', u'total_all_reach_links', u'asic_stage_name'], name, value)


            class FsdbSrvr(Entity):
                """
                FSDB Server information
                
                .. attribute:: fsdb_server
                
                	
                	**type**\:  :py:class:`FsdbServer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.FsdbSrvr.FsdbServer>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Controller.Fabric.Oper.FsdbSrvr, self).__init__()

                    self.yang_name = "fsdb_srvr"
                    self.yang_parent_name = "oper"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("fsdb_server", ("fsdb_server", Controller.Fabric.Oper.FsdbSrvr.FsdbServer))])
                    self._leafs = OrderedDict()

                    self.fsdb_server = Controller.Fabric.Oper.FsdbSrvr.FsdbServer()
                    self.fsdb_server.parent = self
                    self._children_name_map["fsdb_server"] = "fsdb_server"
                    self._segment_path = lambda: "fsdb_srvr"
                    self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/oper/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Controller.Fabric.Oper.FsdbSrvr, [], name, value)


                class FsdbServer(Entity):
                    """
                    
                    
                    .. attribute:: trace
                    
                    	show traceable processes
                    	**type**\: list of  		 :py:class:`Trace <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.FsdbSrvr.FsdbServer.Trace>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.Fabric.Oper.FsdbSrvr.FsdbServer, self).__init__()

                        self.yang_name = "fsdb_server"
                        self.yang_parent_name = "fsdb_srvr"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("trace", ("trace", Controller.Fabric.Oper.FsdbSrvr.FsdbServer.Trace))])
                        self._leafs = OrderedDict()

                        self.trace = YList(self)
                        self._segment_path = lambda: "fsdb_server"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/oper/fsdb_srvr/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.Fabric.Oper.FsdbSrvr.FsdbServer, [], name, value)


                    class Trace(Entity):
                        """
                        show traceable processes
                        
                        .. attribute:: buffer  (key)
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: location
                        
                        	
                        	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.FsdbSrvr.FsdbServer.Trace.Location>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Fabric.Oper.FsdbSrvr.FsdbServer.Trace, self).__init__()

                            self.yang_name = "trace"
                            self.yang_parent_name = "fsdb_server"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = ['buffer']
                            self._child_classes = OrderedDict([("location", ("location", Controller.Fabric.Oper.FsdbSrvr.FsdbServer.Trace.Location))])
                            self._leafs = OrderedDict([
                                ('buffer', YLeaf(YType.str, 'buffer')),
                            ])
                            self.buffer = None

                            self.location = YList(self)
                            self._segment_path = lambda: "trace" + "[buffer='" + str(self.buffer) + "']"
                            self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric/oper/fsdb_srvr/fsdb_server/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Fabric.Oper.FsdbSrvr.FsdbServer.Trace, [u'buffer'], name, value)


                        class Location(Entity):
                            """
                            
                            
                            .. attribute:: location_name  (key)
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: all_options
                            
                            	
                            	**type**\: list of  		 :py:class:`AllOptions <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.FsdbSrvr.FsdbServer.Trace.Location.AllOptions>`
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Fabric.Oper.FsdbSrvr.FsdbServer.Trace.Location, self).__init__()

                                self.yang_name = "location"
                                self.yang_parent_name = "trace"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['location_name']
                                self._child_classes = OrderedDict([("all-options", ("all_options", Controller.Fabric.Oper.FsdbSrvr.FsdbServer.Trace.Location.AllOptions))])
                                self._leafs = OrderedDict([
                                    ('location_name', YLeaf(YType.str, 'location_name')),
                                ])
                                self.location_name = None

                                self.all_options = YList(self)
                                self._segment_path = lambda: "location" + "[location_name='" + str(self.location_name) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Fabric.Oper.FsdbSrvr.FsdbServer.Trace.Location, [u'location_name'], name, value)


                            class AllOptions(Entity):
                                """
                                
                                
                                .. attribute:: option  (key)
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: trace_blocks
                                
                                	
                                	**type**\: list of  		 :py:class:`TraceBlocks <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Fabric.Oper.FsdbSrvr.FsdbServer.Trace.Location.AllOptions.TraceBlocks>`
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.Fabric.Oper.FsdbSrvr.FsdbServer.Trace.Location.AllOptions, self).__init__()

                                    self.yang_name = "all-options"
                                    self.yang_parent_name = "location"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['option']
                                    self._child_classes = OrderedDict([("trace-blocks", ("trace_blocks", Controller.Fabric.Oper.FsdbSrvr.FsdbServer.Trace.Location.AllOptions.TraceBlocks))])
                                    self._leafs = OrderedDict([
                                        ('option', YLeaf(YType.str, 'option')),
                                    ])
                                    self.option = None

                                    self.trace_blocks = YList(self)
                                    self._segment_path = lambda: "all-options" + "[option='" + str(self.option) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.Fabric.Oper.FsdbSrvr.FsdbServer.Trace.Location.AllOptions, [u'option'], name, value)


                                class TraceBlocks(Entity):
                                    """
                                    
                                    
                                    .. attribute:: data
                                    
                                    	Trace output block
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.Fabric.Oper.FsdbSrvr.FsdbServer.Trace.Location.AllOptions.TraceBlocks, self).__init__()

                                        self.yang_name = "trace-blocks"
                                        self.yang_parent_name = "all-options"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('data', YLeaf(YType.str, 'data')),
                                        ])
                                        self.data = None
                                        self._segment_path = lambda: "trace-blocks"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.Fabric.Oper.FsdbSrvr.FsdbServer.Trace.Location.AllOptions.TraceBlocks, [u'data'], name, value)


    class SfeOper(Entity):
        """
        
        
        .. attribute:: sfe
        
        	Fabric SFE driver commands
        	**type**\:  :py:class:`Sfe <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe>`
        
        .. attribute:: sfe_trace
        
        	
        	**type**\:  :py:class:`SfeTrace <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.SfeTrace>`
        
        

        """

        _prefix = 'calvados_controllers'
        _revision = '2017-01-31'

        def __init__(self):
            super(Controller.SfeOper, self).__init__()

            self.yang_name = "sfe_oper"
            self.yang_parent_name = "controller"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([("sfe", ("sfe", Controller.SfeOper.Sfe)), ("sfe_trace", ("sfe_trace", Controller.SfeOper.SfeTrace))])
            self._leafs = OrderedDict()

            self.sfe = Controller.SfeOper.Sfe()
            self.sfe.parent = self
            self._children_name_map["sfe"] = "sfe"

            self.sfe_trace = Controller.SfeOper.SfeTrace()
            self.sfe_trace.parent = self
            self._children_name_map["sfe_trace"] = "sfe_trace"
            self._segment_path = lambda: "sfe_oper"
            self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Controller.SfeOper, [], name, value)


        class Sfe(Entity):
            """
            Fabric SFE driver commands
            
            .. attribute:: driver
            
            	
            	**type**\:  :py:class:`Driver <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.Driver>`
            
            .. attribute:: statistics
            
            	
            	**type**\:  :py:class:`Statistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.Statistics>`
            
            .. attribute:: link_info
            
            	
            	**type**\:  :py:class:`LinkInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.LinkInfo>`
            
            .. attribute:: diagshell
            
            	
            	**type**\:  :py:class:`Diagshell <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.Diagshell>`
            
            .. attribute:: register
            
            	
            	**type**\:  :py:class:`Register <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.Register>`
            
            .. attribute:: dump_file
            
            	
            	**type**\:  :py:class:`DumpFile <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.DumpFile>`
            
            .. attribute:: parse
            
            	
            	**type**\:  :py:class:`Parse <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.Parse>`
            
            

            """

            _prefix = 'calvados_controllers'
            _revision = '2017-01-31'

            def __init__(self):
                super(Controller.SfeOper.Sfe, self).__init__()

                self.yang_name = "sfe"
                self.yang_parent_name = "sfe_oper"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("driver", ("driver", Controller.SfeOper.Sfe.Driver)), ("statistics", ("statistics", Controller.SfeOper.Sfe.Statistics)), ("link-info", ("link_info", Controller.SfeOper.Sfe.LinkInfo)), ("diagshell", ("diagshell", Controller.SfeOper.Sfe.Diagshell)), ("register", ("register", Controller.SfeOper.Sfe.Register)), ("dump-file", ("dump_file", Controller.SfeOper.Sfe.DumpFile)), ("parse", ("parse", Controller.SfeOper.Sfe.Parse))])
                self._leafs = OrderedDict()

                self.driver = Controller.SfeOper.Sfe.Driver()
                self.driver.parent = self
                self._children_name_map["driver"] = "driver"

                self.statistics = Controller.SfeOper.Sfe.Statistics()
                self.statistics.parent = self
                self._children_name_map["statistics"] = "statistics"

                self.link_info = Controller.SfeOper.Sfe.LinkInfo()
                self.link_info.parent = self
                self._children_name_map["link_info"] = "link-info"

                self.diagshell = Controller.SfeOper.Sfe.Diagshell()
                self.diagshell.parent = self
                self._children_name_map["diagshell"] = "diagshell"

                self.register = Controller.SfeOper.Sfe.Register()
                self.register.parent = self
                self._children_name_map["register"] = "register"

                self.dump_file = Controller.SfeOper.Sfe.DumpFile()
                self.dump_file.parent = self
                self._children_name_map["dump_file"] = "dump-file"

                self.parse = Controller.SfeOper.Sfe.Parse()
                self.parse.parent = self
                self._children_name_map["parse"] = "parse"
                self._segment_path = lambda: "sfe"
                self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/sfe_oper/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Controller.SfeOper.Sfe, [], name, value)


            class Driver(Entity):
                """
                
                
                .. attribute:: rack
                
                	
                	**type**\: list of  		 :py:class:`Rack <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.Driver.Rack>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Controller.SfeOper.Sfe.Driver, self).__init__()

                    self.yang_name = "driver"
                    self.yang_parent_name = "sfe"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("rack", ("rack", Controller.SfeOper.Sfe.Driver.Rack))])
                    self._leafs = OrderedDict()

                    self.rack = YList(self)
                    self._segment_path = lambda: "driver"
                    self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/sfe_oper/sfe/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Controller.SfeOper.Sfe.Driver, [], name, value)


                class Rack(Entity):
                    """
                    
                    
                    .. attribute:: rack_num  (key)
                    
                    	
                    	**type**\: str
                    
                    	**pattern:** (0?[0\-9])\|(1[0\-5])\|([F\|f][0\-3])
                    
                    .. attribute:: description
                    
                    	
                    	**type**\: str
                    
                    	**default value**\: rack no.
                    
                    .. attribute:: drvr_info
                    
                    	
                    	**type**\: list of  		 :py:class:`DrvrInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.Driver.Rack.DrvrInfo>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.SfeOper.Sfe.Driver.Rack, self).__init__()

                        self.yang_name = "rack"
                        self.yang_parent_name = "driver"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['rack_num']
                        self._child_classes = OrderedDict([("drvr_info", ("drvr_info", Controller.SfeOper.Sfe.Driver.Rack.DrvrInfo))])
                        self._leafs = OrderedDict([
                            ('rack_num', YLeaf(YType.str, 'rack_num')),
                            ('description', YLeaf(YType.str, 'description')),
                        ])
                        self.rack_num = None
                        self.description = None

                        self.drvr_info = YList(self)
                        self._segment_path = lambda: "rack" + "[rack_num='" + str(self.rack_num) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/sfe_oper/sfe/driver/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.SfeOper.Sfe.Driver.Rack, ['rack_num', 'description'], name, value)


                    class DrvrInfo(Entity):
                        """
                        
                        
                        .. attribute:: idx  (key)
                        
                        	
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: drv_version
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: coeff_major_rev
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: coeff_minor_rev
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: func_role
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: issu_role
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: rack_name
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: rack_type
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: rack_num
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: ip_address
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: card_avail_mask
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: asic_avail_mask
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        .. attribute:: exp_asic_avail_mask
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        .. attribute:: ucmc_ratio
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: pm_conn_active
                        
                        	
                        	**type**\: bool
                        
                        .. attribute:: platform_local_conn_active
                        
                        	
                        	**type**\: bool
                        
                        .. attribute:: fsdb_conn_active
                        
                        	
                        	**type**\: bool
                        
                        .. attribute:: fgid_conn_active
                        
                        	
                        	**type**\: bool
                        
                        .. attribute:: cm_conn_active
                        
                        	
                        	**type**\: bool
                        
                        .. attribute:: ccc_conn_active
                        
                        	
                        	**type**\: bool
                        
                        .. attribute:: issu_mgr_conn_active
                        
                        	
                        	**type**\: bool
                        
                        .. attribute:: peer_sfe_conn_active
                        
                        	
                        	**type**\: bool
                        
                        .. attribute:: cxp_conn_active
                        
                        	
                        	**type**\: bool
                        
                        .. attribute:: pm_reg_active
                        
                        	
                        	**type**\: bool
                        
                        .. attribute:: platform_local_reg_active
                        
                        	
                        	**type**\: bool
                        
                        .. attribute:: fsdb_reg_active
                        
                        	
                        	**type**\: bool
                        
                        .. attribute:: fgid_reg_active
                        
                        	
                        	**type**\: bool
                        
                        .. attribute:: cm_reg_active
                        
                        	
                        	**type**\: bool
                        
                        .. attribute:: issu_mgr_reg_active
                        
                        	
                        	**type**\: bool
                        
                        .. attribute:: peer_sfe_reg_active
                        
                        	
                        	**type**\: bool
                        
                        .. attribute:: cxp_reg_active
                        
                        	
                        	**type**\: bool
                        
                        .. attribute:: num_pm_conn_reqs
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: num_platform_local_conn_reqs
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: num_fsdb_conn_reqs
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: num_fgid_conn_reqs
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: num_fstats_conn_reqs
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: num_cm_conn_reqs
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: num_ccc_conn_reqs
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: num_issu_mgr_conn_reqs
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: num_peer_sfe_conn_reqs
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: num_cxp_conn_reqs
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: is_gaspp_registered
                        
                        	
                        	**type**\: bool
                        
                        .. attribute:: is_cih_registered
                        
                        	
                        	**type**\: bool
                        
                        .. attribute:: startup_time
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: asic_list
                        
                        	
                        	**type**\: list of  		 :py:class:`AsicList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.Driver.Rack.DrvrInfo.AsicList>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.SfeOper.Sfe.Driver.Rack.DrvrInfo, self).__init__()

                            self.yang_name = "drvr_info"
                            self.yang_parent_name = "rack"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['idx']
                            self._child_classes = OrderedDict([("asic_list", ("asic_list", Controller.SfeOper.Sfe.Driver.Rack.DrvrInfo.AsicList))])
                            self._leafs = OrderedDict([
                                ('idx', YLeaf(YType.int32, 'idx')),
                                ('drv_version', YLeaf(YType.uint32, 'drv_version')),
                                ('coeff_major_rev', YLeaf(YType.uint32, 'coeff_major_rev')),
                                ('coeff_minor_rev', YLeaf(YType.uint32, 'coeff_minor_rev')),
                                ('func_role', YLeaf(YType.str, 'func_role')),
                                ('issu_role', YLeaf(YType.str, 'issu_role')),
                                ('rack_name', YLeaf(YType.str, 'rack_name')),
                                ('rack_type', YLeaf(YType.str, 'rack_type')),
                                ('rack_num', YLeaf(YType.str, 'rack_num')),
                                ('ip_address', YLeaf(YType.str, 'ip_address')),
                                ('card_avail_mask', YLeaf(YType.uint32, 'card_avail_mask')),
                                ('asic_avail_mask', YLeaf(YType.uint64, 'asic_avail_mask')),
                                ('exp_asic_avail_mask', YLeaf(YType.uint64, 'exp_asic_avail_mask')),
                                ('ucmc_ratio', YLeaf(YType.uint32, 'ucmc_ratio')),
                                ('pm_conn_active', YLeaf(YType.boolean, 'pm_conn_active')),
                                ('platform_local_conn_active', YLeaf(YType.boolean, 'platform_local_conn_active')),
                                ('fsdb_conn_active', YLeaf(YType.boolean, 'fsdb_conn_active')),
                                ('fgid_conn_active', YLeaf(YType.boolean, 'fgid_conn_active')),
                                ('cm_conn_active', YLeaf(YType.boolean, 'cm_conn_active')),
                                ('ccc_conn_active', YLeaf(YType.boolean, 'ccc_conn_active')),
                                ('issu_mgr_conn_active', YLeaf(YType.boolean, 'issu_mgr_conn_active')),
                                ('peer_sfe_conn_active', YLeaf(YType.boolean, 'peer_sfe_conn_active')),
                                ('cxp_conn_active', YLeaf(YType.boolean, 'cxp_conn_active')),
                                ('pm_reg_active', YLeaf(YType.boolean, 'pm_reg_active')),
                                ('platform_local_reg_active', YLeaf(YType.boolean, 'platform_local_reg_active')),
                                ('fsdb_reg_active', YLeaf(YType.boolean, 'fsdb_reg_active')),
                                ('fgid_reg_active', YLeaf(YType.boolean, 'fgid_reg_active')),
                                ('cm_reg_active', YLeaf(YType.boolean, 'cm_reg_active')),
                                ('issu_mgr_reg_active', YLeaf(YType.boolean, 'issu_mgr_reg_active')),
                                ('peer_sfe_reg_active', YLeaf(YType.boolean, 'peer_sfe_reg_active')),
                                ('cxp_reg_active', YLeaf(YType.boolean, 'cxp_reg_active')),
                                ('num_pm_conn_reqs', YLeaf(YType.uint8, 'num_pm_conn_reqs')),
                                ('num_platform_local_conn_reqs', YLeaf(YType.uint8, 'num_platform_local_conn_reqs')),
                                ('num_fsdb_conn_reqs', YLeaf(YType.uint8, 'num_fsdb_conn_reqs')),
                                ('num_fgid_conn_reqs', YLeaf(YType.uint8, 'num_fgid_conn_reqs')),
                                ('num_fstats_conn_reqs', YLeaf(YType.uint8, 'num_fstats_conn_reqs')),
                                ('num_cm_conn_reqs', YLeaf(YType.uint8, 'num_cm_conn_reqs')),
                                ('num_ccc_conn_reqs', YLeaf(YType.uint8, 'num_ccc_conn_reqs')),
                                ('num_issu_mgr_conn_reqs', YLeaf(YType.uint8, 'num_issu_mgr_conn_reqs')),
                                ('num_peer_sfe_conn_reqs', YLeaf(YType.uint8, 'num_peer_sfe_conn_reqs')),
                                ('num_cxp_conn_reqs', YLeaf(YType.uint8, 'num_cxp_conn_reqs')),
                                ('is_gaspp_registered', YLeaf(YType.boolean, 'is_gaspp_registered')),
                                ('is_cih_registered', YLeaf(YType.boolean, 'is_cih_registered')),
                                ('startup_time', YLeaf(YType.str, 'startup_time')),
                            ])
                            self.idx = None
                            self.drv_version = None
                            self.coeff_major_rev = None
                            self.coeff_minor_rev = None
                            self.func_role = None
                            self.issu_role = None
                            self.rack_name = None
                            self.rack_type = None
                            self.rack_num = None
                            self.ip_address = None
                            self.card_avail_mask = None
                            self.asic_avail_mask = None
                            self.exp_asic_avail_mask = None
                            self.ucmc_ratio = None
                            self.pm_conn_active = None
                            self.platform_local_conn_active = None
                            self.fsdb_conn_active = None
                            self.fgid_conn_active = None
                            self.cm_conn_active = None
                            self.ccc_conn_active = None
                            self.issu_mgr_conn_active = None
                            self.peer_sfe_conn_active = None
                            self.cxp_conn_active = None
                            self.pm_reg_active = None
                            self.platform_local_reg_active = None
                            self.fsdb_reg_active = None
                            self.fgid_reg_active = None
                            self.cm_reg_active = None
                            self.issu_mgr_reg_active = None
                            self.peer_sfe_reg_active = None
                            self.cxp_reg_active = None
                            self.num_pm_conn_reqs = None
                            self.num_platform_local_conn_reqs = None
                            self.num_fsdb_conn_reqs = None
                            self.num_fgid_conn_reqs = None
                            self.num_fstats_conn_reqs = None
                            self.num_cm_conn_reqs = None
                            self.num_ccc_conn_reqs = None
                            self.num_issu_mgr_conn_reqs = None
                            self.num_peer_sfe_conn_reqs = None
                            self.num_cxp_conn_reqs = None
                            self.is_gaspp_registered = None
                            self.is_cih_registered = None
                            self.startup_time = None

                            self.asic_list = YList(self)
                            self._segment_path = lambda: "drvr_info" + "[idx='" + str(self.idx) + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.SfeOper.Sfe.Driver.Rack.DrvrInfo, ['idx', 'drv_version', 'coeff_major_rev', 'coeff_minor_rev', 'func_role', 'issu_role', 'rack_name', 'rack_type', 'rack_num', 'ip_address', 'card_avail_mask', 'asic_avail_mask', 'exp_asic_avail_mask', 'ucmc_ratio', 'pm_conn_active', 'platform_local_conn_active', 'fsdb_conn_active', 'fgid_conn_active', 'cm_conn_active', 'ccc_conn_active', 'issu_mgr_conn_active', 'peer_sfe_conn_active', 'cxp_conn_active', 'pm_reg_active', 'platform_local_reg_active', 'fsdb_reg_active', 'fgid_reg_active', 'cm_reg_active', 'issu_mgr_reg_active', 'peer_sfe_reg_active', 'cxp_reg_active', 'num_pm_conn_reqs', 'num_platform_local_conn_reqs', 'num_fsdb_conn_reqs', 'num_fgid_conn_reqs', 'num_fstats_conn_reqs', 'num_cm_conn_reqs', 'num_ccc_conn_reqs', 'num_issu_mgr_conn_reqs', 'num_peer_sfe_conn_reqs', 'num_cxp_conn_reqs', 'is_gaspp_registered', 'is_cih_registered', 'startup_time'], name, value)


                        class AsicList(Entity):
                            """
                            
                            
                            .. attribute:: asic_idx  (key)
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: asic_instance
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: card_present
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: card_powered
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: hotplug_event
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: asic_type
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: asic_cardname
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: admin_state
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: oper_state
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: fab_plane
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: fab_group
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: fgid_download
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: asic_state
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: asic_disconnect_signal
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: last_init_cause
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: num_pon_resets
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: num_hard_resets
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.SfeOper.Sfe.Driver.Rack.DrvrInfo.AsicList, self).__init__()

                                self.yang_name = "asic_list"
                                self.yang_parent_name = "drvr_info"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['asic_idx']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('asic_idx', YLeaf(YType.uint32, 'asic_idx')),
                                    ('asic_instance', YLeaf(YType.str, 'asic_instance')),
                                    ('card_present', YLeaf(YType.str, 'card_present')),
                                    ('card_powered', YLeaf(YType.str, 'card_powered')),
                                    ('hotplug_event', YLeaf(YType.uint32, 'hotplug_event')),
                                    ('asic_type', YLeaf(YType.str, 'asic_type')),
                                    ('asic_cardname', YLeaf(YType.str, 'asic_cardname')),
                                    ('admin_state', YLeaf(YType.str, 'admin-state')),
                                    ('oper_state', YLeaf(YType.str, 'oper_state')),
                                    ('fab_plane', YLeaf(YType.str, 'fab_plane')),
                                    ('fab_group', YLeaf(YType.str, 'fab_group')),
                                    ('fgid_download', YLeaf(YType.str, 'fgid_download')),
                                    ('asic_state', YLeaf(YType.str, 'asic_state')),
                                    ('asic_disconnect_signal', YLeaf(YType.str, 'asic_disconnect_signal')),
                                    ('last_init_cause', YLeaf(YType.str, 'last_init_cause')),
                                    ('num_pon_resets', YLeaf(YType.uint32, 'num_pon_resets')),
                                    ('num_hard_resets', YLeaf(YType.uint32, 'num_hard_resets')),
                                ])
                                self.asic_idx = None
                                self.asic_instance = None
                                self.card_present = None
                                self.card_powered = None
                                self.hotplug_event = None
                                self.asic_type = None
                                self.asic_cardname = None
                                self.admin_state = None
                                self.oper_state = None
                                self.fab_plane = None
                                self.fab_group = None
                                self.fgid_download = None
                                self.asic_state = None
                                self.asic_disconnect_signal = None
                                self.last_init_cause = None
                                self.num_pon_resets = None
                                self.num_hard_resets = None
                                self._segment_path = lambda: "asic_list" + "[asic_idx='" + str(self.asic_idx) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.SfeOper.Sfe.Driver.Rack.DrvrInfo.AsicList, ['asic_idx', 'asic_instance', 'card_present', 'card_powered', 'hotplug_event', 'asic_type', 'asic_cardname', 'admin_state', 'oper_state', 'fab_plane', 'fab_group', 'fgid_download', 'asic_state', 'asic_disconnect_signal', 'last_init_cause', 'num_pon_resets', 'num_hard_resets'], name, value)


            class Statistics(Entity):
                """
                
                
                .. attribute:: location
                
                	
                	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.Statistics.Location>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Controller.SfeOper.Sfe.Statistics, self).__init__()

                    self.yang_name = "statistics"
                    self.yang_parent_name = "sfe"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("location", ("location", Controller.SfeOper.Sfe.Statistics.Location))])
                    self._leafs = OrderedDict()

                    self.location = YList(self)
                    self._segment_path = lambda: "statistics"
                    self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/sfe_oper/sfe/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Controller.SfeOper.Sfe.Statistics, [], name, value)


                class Location(Entity):
                    """
                    
                    
                    .. attribute:: loc_str  (key)
                    
                    	
                    	**type**\: str
                    
                    	**pattern:** ((0?[0\-9]\|1[0\-5])/([F\|f][C\|c](0?[0\-5])))\|(([F\|f][0\-3])/([F\|f][C\|c](0?[0\-9]\|1[0\-1])))
                    
                    .. attribute:: description
                    
                    	
                    	**type**\: str
                    
                    	**default value**\: location (R/S).
                    
                    .. attribute:: asic_types
                    
                    	
                    	**type**\: list of  		 :py:class:`AsicTypes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.Statistics.Location.AsicTypes>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.SfeOper.Sfe.Statistics.Location, self).__init__()

                        self.yang_name = "location"
                        self.yang_parent_name = "statistics"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['loc_str']
                        self._child_classes = OrderedDict([("asic_types", ("asic_types", Controller.SfeOper.Sfe.Statistics.Location.AsicTypes))])
                        self._leafs = OrderedDict([
                            ('loc_str', YLeaf(YType.str, 'loc_str')),
                            ('description', YLeaf(YType.str, 'description')),
                        ])
                        self.loc_str = None
                        self.description = None

                        self.asic_types = YList(self)
                        self._segment_path = lambda: "location" + "[loc_str='" + str(self.loc_str) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/sfe_oper/sfe/statistics/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.SfeOper.Sfe.Statistics.Location, ['loc_str', 'description'], name, value)


                    class AsicTypes(Entity):
                        """
                        
                        
                        .. attribute:: asicname  (key)
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: block
                        
                        	
                        	**type**\: list of  		 :py:class:`Block <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.Statistics.Location.AsicTypes.Block>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.SfeOper.Sfe.Statistics.Location.AsicTypes, self).__init__()

                            self.yang_name = "asic_types"
                            self.yang_parent_name = "location"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['asicname']
                            self._child_classes = OrderedDict([("block", ("block", Controller.SfeOper.Sfe.Statistics.Location.AsicTypes.Block))])
                            self._leafs = OrderedDict([
                                ('asicname', YLeaf(YType.str, 'asicname')),
                            ])
                            self.asicname = None

                            self.block = YList(self)
                            self._segment_path = lambda: "asic_types" + "[asicname='" + str(self.asicname) + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.SfeOper.Sfe.Statistics.Location.AsicTypes, ['asicname'], name, value)


                        class Block(Entity):
                            """
                            
                            
                            .. attribute:: blockname  (key)
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: instance
                            
                            	
                            	**type**\: list of  		 :py:class:`Instance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.Statistics.Location.AsicTypes.Block.Instance>`
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.SfeOper.Sfe.Statistics.Location.AsicTypes.Block, self).__init__()

                                self.yang_name = "block"
                                self.yang_parent_name = "asic_types"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['blockname']
                                self._child_classes = OrderedDict([("instance", ("instance", Controller.SfeOper.Sfe.Statistics.Location.AsicTypes.Block.Instance))])
                                self._leafs = OrderedDict([
                                    ('blockname', YLeaf(YType.str, 'blockname')),
                                ])
                                self.blockname = None

                                self.instance = YList(self)
                                self._segment_path = lambda: "block" + "[blockname='" + str(self.blockname) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.SfeOper.Sfe.Statistics.Location.AsicTypes.Block, ['blockname'], name, value)


                            class Instance(Entity):
                                """
                                
                                
                                .. attribute:: instance_id  (key)
                                
                                	
                                	**type**\: str
                                
                                	**pattern:** [0\-5]\|all
                                
                                .. attribute:: stats_output
                                
                                	
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.SfeOper.Sfe.Statistics.Location.AsicTypes.Block.Instance, self).__init__()

                                    self.yang_name = "instance"
                                    self.yang_parent_name = "block"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['instance_id']
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('instance_id', YLeaf(YType.str, 'instance-id')),
                                        ('stats_output', YLeaf(YType.str, 'stats_output')),
                                    ])
                                    self.instance_id = None
                                    self.stats_output = None
                                    self._segment_path = lambda: "instance" + "[instance-id='" + str(self.instance_id) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.SfeOper.Sfe.Statistics.Location.AsicTypes.Block.Instance, ['instance_id', 'stats_output'], name, value)


            class LinkInfo(Entity):
                """
                
                
                .. attribute:: location
                
                	
                	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.LinkInfo.Location>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Controller.SfeOper.Sfe.LinkInfo, self).__init__()

                    self.yang_name = "link-info"
                    self.yang_parent_name = "sfe"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("location", ("location", Controller.SfeOper.Sfe.LinkInfo.Location))])
                    self._leafs = OrderedDict()

                    self.location = YList(self)
                    self._segment_path = lambda: "link-info"
                    self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/sfe_oper/sfe/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Controller.SfeOper.Sfe.LinkInfo, [], name, value)


                class Location(Entity):
                    """
                    
                    
                    .. attribute:: loc_str  (key)
                    
                    	
                    	**type**\: str
                    
                    	**pattern:** ((0?[0\-9]\|1[0\-5])/([F\|f][C\|c](0?[0\-5])))\|(([F\|f][0\-3])/([F\|f][C\|c](0?[0\-9]\|1[0\-1])))
                    
                    .. attribute:: description
                    
                    	
                    	**type**\: str
                    
                    	**default value**\: location (R/S)
                    
                    .. attribute:: rx
                    
                    	
                    	**type**\: list of  		 :py:class:`Rx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.LinkInfo.Location.Rx>`
                    
                    .. attribute:: tx
                    
                    	
                    	**type**\: list of  		 :py:class:`Tx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.LinkInfo.Location.Tx>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.SfeOper.Sfe.LinkInfo.Location, self).__init__()

                        self.yang_name = "location"
                        self.yang_parent_name = "link-info"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['loc_str']
                        self._child_classes = OrderedDict([("rx", ("rx", Controller.SfeOper.Sfe.LinkInfo.Location.Rx)), ("tx", ("tx", Controller.SfeOper.Sfe.LinkInfo.Location.Tx))])
                        self._leafs = OrderedDict([
                            ('loc_str', YLeaf(YType.str, 'loc_str')),
                            ('description', YLeaf(YType.str, 'description')),
                        ])
                        self.loc_str = None
                        self.description = None

                        self.rx = YList(self)
                        self.tx = YList(self)
                        self._segment_path = lambda: "location" + "[loc_str='" + str(self.loc_str) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/sfe_oper/sfe/link-info/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.SfeOper.Sfe.LinkInfo.Location, ['loc_str', 'description'], name, value)


                    class Rx(Entity):
                        """
                        
                        
                        .. attribute:: start  (key)
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..143
                        
                        .. attribute:: end  (key)
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..143
                        
                        .. attribute:: detail
                        
                        	
                        	**type**\:  :py:class:`Detail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Detail>`
                        
                        .. attribute:: topo
                        
                        	
                        	**type**\:  :py:class:`Topo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Topo>`
                        
                        .. attribute:: flap
                        
                        	
                        	**type**\:  :py:class:`Flap <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Flap>`
                        
                        .. attribute:: stats
                        
                        	
                        	**type**\:  :py:class:`Stats <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Stats>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.SfeOper.Sfe.LinkInfo.Location.Rx, self).__init__()

                            self.yang_name = "rx"
                            self.yang_parent_name = "location"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['start','end']
                            self._child_classes = OrderedDict([("detail", ("detail", Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Detail)), ("topo", ("topo", Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Topo)), ("flap", ("flap", Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Flap)), ("stats", ("stats", Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Stats))])
                            self._leafs = OrderedDict([
                                ('start', YLeaf(YType.int32, 'start')),
                                ('end', YLeaf(YType.int32, 'end')),
                            ])
                            self.start = None
                            self.end = None

                            self.detail = Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Detail()
                            self.detail.parent = self
                            self._children_name_map["detail"] = "detail"

                            self.topo = Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Topo()
                            self.topo.parent = self
                            self._children_name_map["topo"] = "topo"

                            self.flap = Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Flap()
                            self.flap.parent = self
                            self._children_name_map["flap"] = "flap"

                            self.stats = Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Stats()
                            self.stats.parent = self
                            self._children_name_map["stats"] = "stats"
                            self._segment_path = lambda: "rx" + "[start='" + str(self.start) + "']" + "[end='" + str(self.end) + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.SfeOper.Sfe.LinkInfo.Location.Rx, ['start', 'end'], name, value)


                        class Detail(Entity):
                            """
                            
                            
                            .. attribute:: topo
                            
                            	
                            	**type**\:  :py:class:`Topo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Detail.Topo>`
                            
                            .. attribute:: flap
                            
                            	
                            	**type**\:  :py:class:`Flap <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Detail.Flap>`
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Detail, self).__init__()

                                self.yang_name = "detail"
                                self.yang_parent_name = "rx"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("topo", ("topo", Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Detail.Topo)), ("flap", ("flap", Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Detail.Flap))])
                                self._leafs = OrderedDict()

                                self.topo = Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Detail.Topo()
                                self.topo.parent = self
                                self._children_name_map["topo"] = "topo"

                                self.flap = Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Detail.Flap()
                                self.flap.parent = self
                                self._children_name_map["flap"] = "flap"
                                self._segment_path = lambda: "detail"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Detail, [], name, value)


                            class Topo(Entity):
                                """
                                
                                
                                .. attribute:: instance
                                
                                	
                                	**type**\: list of  		 :py:class:`Instance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Detail.Topo.Instance>`
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Detail.Topo, self).__init__()

                                    self.yang_name = "topo"
                                    self.yang_parent_name = "detail"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([("instance", ("instance", Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Detail.Topo.Instance))])
                                    self._leafs = OrderedDict()

                                    self.instance = YList(self)
                                    self._segment_path = lambda: "topo"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Detail.Topo, [], name, value)


                                class Instance(Entity):
                                    """
                                    
                                    
                                    .. attribute:: instance_id  (key)
                                    
                                    	
                                    	**type**\: str
                                    
                                    	**pattern:** [0\-5]\|all
                                    
                                    .. attribute:: nodeid_str
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: is_show
                                    
                                    	
                                    	**type**\: bool
                                    
                                    .. attribute:: link_idx_list
                                    
                                    	
                                    	**type**\: list of  		 :py:class:`LinkIdxList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Detail.Topo.Instance.LinkIdxList>`
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Detail.Topo.Instance, self).__init__()

                                        self.yang_name = "instance"
                                        self.yang_parent_name = "topo"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['instance_id']
                                        self._child_classes = OrderedDict([("link_idx_list", ("link_idx_list", Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Detail.Topo.Instance.LinkIdxList))])
                                        self._leafs = OrderedDict([
                                            ('instance_id', YLeaf(YType.str, 'instance-id')),
                                            ('nodeid_str', YLeaf(YType.str, 'nodeid_str')),
                                            ('is_show', YLeaf(YType.boolean, 'is_show')),
                                        ])
                                        self.instance_id = None
                                        self.nodeid_str = None
                                        self.is_show = None

                                        self.link_idx_list = YList(self)
                                        self._segment_path = lambda: "instance" + "[instance-id='" + str(self.instance_id) + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Detail.Topo.Instance, ['instance_id', 'nodeid_str', 'is_show'], name, value)


                                    class LinkIdxList(Entity):
                                        """
                                        
                                        
                                        .. attribute:: link_idx  (key)
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** \-9223372036854775808..9223372036854775807
                                        
                                        .. attribute:: link_id_str
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: phy_link
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: speed
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: stage
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: fab_plane
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: fab_group
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: flap_cnt
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: num_admin_shuts
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: admin_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: oper_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: flags
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: far_end_link_fsdb
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: far_end_link_hw
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: coeff1
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: coeff2
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: tx_control_cells_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: tx_data_cell_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: tx_data_byte_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: tx_bec_retransmit
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: tx_asyn_fifo_rate
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_control_cells_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_data_cell_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_data_byte_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_bec_retransmit
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_asyn_fifo_rate
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_crc_errors_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_lfec_fec_correctable_error
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_lfec_fec_uncorrectable_errors
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_dropped_retransmitted_control
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: fsm_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: history
                                        
                                        	
                                        	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Detail.Topo.Instance.LinkIdxList.History>`
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Detail.Topo.Instance.LinkIdxList, self).__init__()

                                            self.yang_name = "link_idx_list"
                                            self.yang_parent_name = "instance"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['link_idx']
                                            self._child_classes = OrderedDict([("history", ("history", Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Detail.Topo.Instance.LinkIdxList.History))])
                                            self._leafs = OrderedDict([
                                                ('link_idx', YLeaf(YType.int64, 'link_idx')),
                                                ('link_id_str', YLeaf(YType.str, 'link_id_str')),
                                                ('phy_link', YLeaf(YType.str, 'phy_link')),
                                                ('speed', YLeaf(YType.str, 'speed')),
                                                ('stage', YLeaf(YType.str, 'stage')),
                                                ('fab_plane', YLeaf(YType.uint32, 'fab_plane')),
                                                ('fab_group', YLeaf(YType.uint32, 'fab_group')),
                                                ('flap_cnt', YLeaf(YType.uint32, 'flap_cnt')),
                                                ('num_admin_shuts', YLeaf(YType.uint32, 'num_admin_shuts')),
                                                ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                ('flags', YLeaf(YType.str, 'flags')),
                                                ('far_end_link_fsdb', YLeaf(YType.str, 'far_end_link_fsdb')),
                                                ('far_end_link_hw', YLeaf(YType.str, 'far_end_link_hw')),
                                                ('coeff1', YLeaf(YType.uint32, 'coeff1')),
                                                ('coeff2', YLeaf(YType.uint32, 'coeff2')),
                                                ('tx_control_cells_counter', YLeaf(YType.uint64, 'TX_Control_cells_counter')),
                                                ('tx_data_cell_counter', YLeaf(YType.uint64, 'TX_Data_cell_counter')),
                                                ('tx_data_byte_counter', YLeaf(YType.uint64, 'TX_Data_byte_counter')),
                                                ('tx_bec_retransmit', YLeaf(YType.uint64, 'TX_BEC_retransmit')),
                                                ('tx_asyn_fifo_rate', YLeaf(YType.uint64, 'TX_Asyn_fifo_rate')),
                                                ('rx_control_cells_counter', YLeaf(YType.uint64, 'RX_Control_cells_counter')),
                                                ('rx_data_cell_counter', YLeaf(YType.uint64, 'RX_Data_cell_counter')),
                                                ('rx_data_byte_counter', YLeaf(YType.uint64, 'RX_Data_byte_counter')),
                                                ('rx_bec_retransmit', YLeaf(YType.uint64, 'RX_BEC_retransmit')),
                                                ('rx_asyn_fifo_rate', YLeaf(YType.uint64, 'RX_Asyn_fifo_rate')),
                                                ('rx_crc_errors_counter', YLeaf(YType.uint64, 'RX_CRC_errors_counter')),
                                                ('rx_lfec_fec_correctable_error', YLeaf(YType.uint64, 'RX_LFEC_FEC_correctable_error')),
                                                ('rx_lfec_fec_uncorrectable_errors', YLeaf(YType.uint64, 'RX_LFEC_FEC_uncorrectable_errors')),
                                                ('rx_dropped_retransmitted_control', YLeaf(YType.uint64, 'RX_dropped_retransmitted_control')),
                                                ('fsm_state', YLeaf(YType.str, 'fsm_state')),
                                            ])
                                            self.link_idx = None
                                            self.link_id_str = None
                                            self.phy_link = None
                                            self.speed = None
                                            self.stage = None
                                            self.fab_plane = None
                                            self.fab_group = None
                                            self.flap_cnt = None
                                            self.num_admin_shuts = None
                                            self.admin_state = None
                                            self.oper_state = None
                                            self.flags = None
                                            self.far_end_link_fsdb = None
                                            self.far_end_link_hw = None
                                            self.coeff1 = None
                                            self.coeff2 = None
                                            self.tx_control_cells_counter = None
                                            self.tx_data_cell_counter = None
                                            self.tx_data_byte_counter = None
                                            self.tx_bec_retransmit = None
                                            self.tx_asyn_fifo_rate = None
                                            self.rx_control_cells_counter = None
                                            self.rx_data_cell_counter = None
                                            self.rx_data_byte_counter = None
                                            self.rx_bec_retransmit = None
                                            self.rx_asyn_fifo_rate = None
                                            self.rx_crc_errors_counter = None
                                            self.rx_lfec_fec_correctable_error = None
                                            self.rx_lfec_fec_uncorrectable_errors = None
                                            self.rx_dropped_retransmitted_control = None
                                            self.fsm_state = None

                                            self.history = YList(self)
                                            self._segment_path = lambda: "link_idx_list" + "[link_idx='" + str(self.link_idx) + "']"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Detail.Topo.Instance.LinkIdxList, ['link_idx', 'link_id_str', 'phy_link', 'speed', 'stage', 'fab_plane', 'fab_group', 'flap_cnt', 'num_admin_shuts', 'admin_state', 'oper_state', 'flags', 'far_end_link_fsdb', 'far_end_link_hw', 'coeff1', 'coeff2', 'tx_control_cells_counter', 'tx_data_cell_counter', 'tx_data_byte_counter', 'tx_bec_retransmit', 'tx_asyn_fifo_rate', 'rx_control_cells_counter', 'rx_data_cell_counter', 'rx_data_byte_counter', 'rx_bec_retransmit', 'rx_asyn_fifo_rate', 'rx_crc_errors_counter', 'rx_lfec_fec_correctable_error', 'rx_lfec_fec_uncorrectable_errors', 'rx_dropped_retransmitted_control', 'fsm_state'], name, value)


                                        class History(Entity):
                                            """
                                            
                                            
                                            .. attribute:: history_idx  (key)
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: time_stamp
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: admin_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: oper_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: error_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: down_reasons
                                            
                                            	
                                            	**type**\: str
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Detail.Topo.Instance.LinkIdxList.History, self).__init__()

                                                self.yang_name = "history"
                                                self.yang_parent_name = "link_idx_list"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['history_idx']
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                                    ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                                    ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                    ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                    ('error_state', YLeaf(YType.str, 'error_state')),
                                                    ('down_reasons', YLeaf(YType.str, 'down_reasons')),
                                                ])
                                                self.history_idx = None
                                                self.time_stamp = None
                                                self.admin_state = None
                                                self.oper_state = None
                                                self.error_state = None
                                                self.down_reasons = None
                                                self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Detail.Topo.Instance.LinkIdxList.History, ['history_idx', 'time_stamp', 'admin_state', 'oper_state', 'error_state', 'down_reasons'], name, value)


                            class Flap(Entity):
                                """
                                
                                
                                .. attribute:: instance
                                
                                	
                                	**type**\: list of  		 :py:class:`Instance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Detail.Flap.Instance>`
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Detail.Flap, self).__init__()

                                    self.yang_name = "flap"
                                    self.yang_parent_name = "detail"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([("instance", ("instance", Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Detail.Flap.Instance))])
                                    self._leafs = OrderedDict()

                                    self.instance = YList(self)
                                    self._segment_path = lambda: "flap"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Detail.Flap, [], name, value)


                                class Instance(Entity):
                                    """
                                    
                                    
                                    .. attribute:: instance_id  (key)
                                    
                                    	
                                    	**type**\: str
                                    
                                    	**pattern:** [0\-5]\|all
                                    
                                    .. attribute:: nodeid_str
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: is_show
                                    
                                    	
                                    	**type**\: bool
                                    
                                    .. attribute:: link_idx_list
                                    
                                    	
                                    	**type**\: list of  		 :py:class:`LinkIdxList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Detail.Flap.Instance.LinkIdxList>`
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Detail.Flap.Instance, self).__init__()

                                        self.yang_name = "instance"
                                        self.yang_parent_name = "flap"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['instance_id']
                                        self._child_classes = OrderedDict([("link_idx_list", ("link_idx_list", Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Detail.Flap.Instance.LinkIdxList))])
                                        self._leafs = OrderedDict([
                                            ('instance_id', YLeaf(YType.str, 'instance-id')),
                                            ('nodeid_str', YLeaf(YType.str, 'nodeid_str')),
                                            ('is_show', YLeaf(YType.boolean, 'is_show')),
                                        ])
                                        self.instance_id = None
                                        self.nodeid_str = None
                                        self.is_show = None

                                        self.link_idx_list = YList(self)
                                        self._segment_path = lambda: "instance" + "[instance-id='" + str(self.instance_id) + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Detail.Flap.Instance, ['instance_id', 'nodeid_str', 'is_show'], name, value)


                                    class LinkIdxList(Entity):
                                        """
                                        
                                        
                                        .. attribute:: link_idx  (key)
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** \-9223372036854775808..9223372036854775807
                                        
                                        .. attribute:: link_id_str
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: phy_link
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: speed
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: stage
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: fab_plane
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: fab_group
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: flap_cnt
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: num_admin_shuts
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: admin_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: oper_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: flags
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: far_end_link_fsdb
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: far_end_link_hw
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: coeff1
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: coeff2
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: tx_control_cells_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: tx_data_cell_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: tx_data_byte_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: tx_bec_retransmit
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: tx_asyn_fifo_rate
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_control_cells_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_data_cell_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_data_byte_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_bec_retransmit
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_asyn_fifo_rate
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_crc_errors_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_lfec_fec_correctable_error
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_lfec_fec_uncorrectable_errors
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_dropped_retransmitted_control
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: fsm_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: history
                                        
                                        	
                                        	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Detail.Flap.Instance.LinkIdxList.History>`
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Detail.Flap.Instance.LinkIdxList, self).__init__()

                                            self.yang_name = "link_idx_list"
                                            self.yang_parent_name = "instance"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['link_idx']
                                            self._child_classes = OrderedDict([("history", ("history", Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Detail.Flap.Instance.LinkIdxList.History))])
                                            self._leafs = OrderedDict([
                                                ('link_idx', YLeaf(YType.int64, 'link_idx')),
                                                ('link_id_str', YLeaf(YType.str, 'link_id_str')),
                                                ('phy_link', YLeaf(YType.str, 'phy_link')),
                                                ('speed', YLeaf(YType.str, 'speed')),
                                                ('stage', YLeaf(YType.str, 'stage')),
                                                ('fab_plane', YLeaf(YType.uint32, 'fab_plane')),
                                                ('fab_group', YLeaf(YType.uint32, 'fab_group')),
                                                ('flap_cnt', YLeaf(YType.uint32, 'flap_cnt')),
                                                ('num_admin_shuts', YLeaf(YType.uint32, 'num_admin_shuts')),
                                                ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                ('flags', YLeaf(YType.str, 'flags')),
                                                ('far_end_link_fsdb', YLeaf(YType.str, 'far_end_link_fsdb')),
                                                ('far_end_link_hw', YLeaf(YType.str, 'far_end_link_hw')),
                                                ('coeff1', YLeaf(YType.uint32, 'coeff1')),
                                                ('coeff2', YLeaf(YType.uint32, 'coeff2')),
                                                ('tx_control_cells_counter', YLeaf(YType.uint64, 'TX_Control_cells_counter')),
                                                ('tx_data_cell_counter', YLeaf(YType.uint64, 'TX_Data_cell_counter')),
                                                ('tx_data_byte_counter', YLeaf(YType.uint64, 'TX_Data_byte_counter')),
                                                ('tx_bec_retransmit', YLeaf(YType.uint64, 'TX_BEC_retransmit')),
                                                ('tx_asyn_fifo_rate', YLeaf(YType.uint64, 'TX_Asyn_fifo_rate')),
                                                ('rx_control_cells_counter', YLeaf(YType.uint64, 'RX_Control_cells_counter')),
                                                ('rx_data_cell_counter', YLeaf(YType.uint64, 'RX_Data_cell_counter')),
                                                ('rx_data_byte_counter', YLeaf(YType.uint64, 'RX_Data_byte_counter')),
                                                ('rx_bec_retransmit', YLeaf(YType.uint64, 'RX_BEC_retransmit')),
                                                ('rx_asyn_fifo_rate', YLeaf(YType.uint64, 'RX_Asyn_fifo_rate')),
                                                ('rx_crc_errors_counter', YLeaf(YType.uint64, 'RX_CRC_errors_counter')),
                                                ('rx_lfec_fec_correctable_error', YLeaf(YType.uint64, 'RX_LFEC_FEC_correctable_error')),
                                                ('rx_lfec_fec_uncorrectable_errors', YLeaf(YType.uint64, 'RX_LFEC_FEC_uncorrectable_errors')),
                                                ('rx_dropped_retransmitted_control', YLeaf(YType.uint64, 'RX_dropped_retransmitted_control')),
                                                ('fsm_state', YLeaf(YType.str, 'fsm_state')),
                                            ])
                                            self.link_idx = None
                                            self.link_id_str = None
                                            self.phy_link = None
                                            self.speed = None
                                            self.stage = None
                                            self.fab_plane = None
                                            self.fab_group = None
                                            self.flap_cnt = None
                                            self.num_admin_shuts = None
                                            self.admin_state = None
                                            self.oper_state = None
                                            self.flags = None
                                            self.far_end_link_fsdb = None
                                            self.far_end_link_hw = None
                                            self.coeff1 = None
                                            self.coeff2 = None
                                            self.tx_control_cells_counter = None
                                            self.tx_data_cell_counter = None
                                            self.tx_data_byte_counter = None
                                            self.tx_bec_retransmit = None
                                            self.tx_asyn_fifo_rate = None
                                            self.rx_control_cells_counter = None
                                            self.rx_data_cell_counter = None
                                            self.rx_data_byte_counter = None
                                            self.rx_bec_retransmit = None
                                            self.rx_asyn_fifo_rate = None
                                            self.rx_crc_errors_counter = None
                                            self.rx_lfec_fec_correctable_error = None
                                            self.rx_lfec_fec_uncorrectable_errors = None
                                            self.rx_dropped_retransmitted_control = None
                                            self.fsm_state = None

                                            self.history = YList(self)
                                            self._segment_path = lambda: "link_idx_list" + "[link_idx='" + str(self.link_idx) + "']"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Detail.Flap.Instance.LinkIdxList, ['link_idx', 'link_id_str', 'phy_link', 'speed', 'stage', 'fab_plane', 'fab_group', 'flap_cnt', 'num_admin_shuts', 'admin_state', 'oper_state', 'flags', 'far_end_link_fsdb', 'far_end_link_hw', 'coeff1', 'coeff2', 'tx_control_cells_counter', 'tx_data_cell_counter', 'tx_data_byte_counter', 'tx_bec_retransmit', 'tx_asyn_fifo_rate', 'rx_control_cells_counter', 'rx_data_cell_counter', 'rx_data_byte_counter', 'rx_bec_retransmit', 'rx_asyn_fifo_rate', 'rx_crc_errors_counter', 'rx_lfec_fec_correctable_error', 'rx_lfec_fec_uncorrectable_errors', 'rx_dropped_retransmitted_control', 'fsm_state'], name, value)


                                        class History(Entity):
                                            """
                                            
                                            
                                            .. attribute:: history_idx  (key)
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: time_stamp
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: admin_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: oper_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: error_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: down_reasons
                                            
                                            	
                                            	**type**\: str
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Detail.Flap.Instance.LinkIdxList.History, self).__init__()

                                                self.yang_name = "history"
                                                self.yang_parent_name = "link_idx_list"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['history_idx']
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                                    ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                                    ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                    ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                    ('error_state', YLeaf(YType.str, 'error_state')),
                                                    ('down_reasons', YLeaf(YType.str, 'down_reasons')),
                                                ])
                                                self.history_idx = None
                                                self.time_stamp = None
                                                self.admin_state = None
                                                self.oper_state = None
                                                self.error_state = None
                                                self.down_reasons = None
                                                self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Detail.Flap.Instance.LinkIdxList.History, ['history_idx', 'time_stamp', 'admin_state', 'oper_state', 'error_state', 'down_reasons'], name, value)


                        class Topo(Entity):
                            """
                            
                            
                            .. attribute:: instance
                            
                            	
                            	**type**\: list of  		 :py:class:`Instance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Topo.Instance>`
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Topo, self).__init__()

                                self.yang_name = "topo"
                                self.yang_parent_name = "rx"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("instance", ("instance", Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Topo.Instance))])
                                self._leafs = OrderedDict()

                                self.instance = YList(self)
                                self._segment_path = lambda: "topo"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Topo, [], name, value)


                            class Instance(Entity):
                                """
                                
                                
                                .. attribute:: instance_id  (key)
                                
                                	
                                	**type**\: str
                                
                                	**pattern:** [0\-5]\|all
                                
                                .. attribute:: nodeid_str
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: is_show
                                
                                	
                                	**type**\: bool
                                
                                .. attribute:: link_idx_list
                                
                                	
                                	**type**\: list of  		 :py:class:`LinkIdxList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Topo.Instance.LinkIdxList>`
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Topo.Instance, self).__init__()

                                    self.yang_name = "instance"
                                    self.yang_parent_name = "topo"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['instance_id']
                                    self._child_classes = OrderedDict([("link_idx_list", ("link_idx_list", Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Topo.Instance.LinkIdxList))])
                                    self._leafs = OrderedDict([
                                        ('instance_id', YLeaf(YType.str, 'instance-id')),
                                        ('nodeid_str', YLeaf(YType.str, 'nodeid_str')),
                                        ('is_show', YLeaf(YType.boolean, 'is_show')),
                                    ])
                                    self.instance_id = None
                                    self.nodeid_str = None
                                    self.is_show = None

                                    self.link_idx_list = YList(self)
                                    self._segment_path = lambda: "instance" + "[instance-id='" + str(self.instance_id) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Topo.Instance, ['instance_id', 'nodeid_str', 'is_show'], name, value)


                                class LinkIdxList(Entity):
                                    """
                                    
                                    
                                    .. attribute:: link_idx  (key)
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** \-9223372036854775808..9223372036854775807
                                    
                                    .. attribute:: link_id_str
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: phy_link
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: speed
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: stage
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: fab_plane
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: fab_group
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: flap_cnt
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: num_admin_shuts
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: admin_state
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: oper_state
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: flags
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: far_end_link_fsdb
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: far_end_link_hw
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: coeff1
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: coeff2
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: tx_control_cells_counter
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: tx_data_cell_counter
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: tx_data_byte_counter
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: tx_bec_retransmit
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: tx_asyn_fifo_rate
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: rx_control_cells_counter
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: rx_data_cell_counter
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: rx_data_byte_counter
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: rx_bec_retransmit
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: rx_asyn_fifo_rate
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: rx_crc_errors_counter
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: rx_lfec_fec_correctable_error
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: rx_lfec_fec_uncorrectable_errors
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: rx_dropped_retransmitted_control
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: fsm_state
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: history
                                    
                                    	
                                    	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Topo.Instance.LinkIdxList.History>`
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Topo.Instance.LinkIdxList, self).__init__()

                                        self.yang_name = "link_idx_list"
                                        self.yang_parent_name = "instance"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['link_idx']
                                        self._child_classes = OrderedDict([("history", ("history", Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Topo.Instance.LinkIdxList.History))])
                                        self._leafs = OrderedDict([
                                            ('link_idx', YLeaf(YType.int64, 'link_idx')),
                                            ('link_id_str', YLeaf(YType.str, 'link_id_str')),
                                            ('phy_link', YLeaf(YType.str, 'phy_link')),
                                            ('speed', YLeaf(YType.str, 'speed')),
                                            ('stage', YLeaf(YType.str, 'stage')),
                                            ('fab_plane', YLeaf(YType.uint32, 'fab_plane')),
                                            ('fab_group', YLeaf(YType.uint32, 'fab_group')),
                                            ('flap_cnt', YLeaf(YType.uint32, 'flap_cnt')),
                                            ('num_admin_shuts', YLeaf(YType.uint32, 'num_admin_shuts')),
                                            ('admin_state', YLeaf(YType.str, 'admin-state')),
                                            ('oper_state', YLeaf(YType.str, 'oper_state')),
                                            ('flags', YLeaf(YType.str, 'flags')),
                                            ('far_end_link_fsdb', YLeaf(YType.str, 'far_end_link_fsdb')),
                                            ('far_end_link_hw', YLeaf(YType.str, 'far_end_link_hw')),
                                            ('coeff1', YLeaf(YType.uint32, 'coeff1')),
                                            ('coeff2', YLeaf(YType.uint32, 'coeff2')),
                                            ('tx_control_cells_counter', YLeaf(YType.uint64, 'TX_Control_cells_counter')),
                                            ('tx_data_cell_counter', YLeaf(YType.uint64, 'TX_Data_cell_counter')),
                                            ('tx_data_byte_counter', YLeaf(YType.uint64, 'TX_Data_byte_counter')),
                                            ('tx_bec_retransmit', YLeaf(YType.uint64, 'TX_BEC_retransmit')),
                                            ('tx_asyn_fifo_rate', YLeaf(YType.uint64, 'TX_Asyn_fifo_rate')),
                                            ('rx_control_cells_counter', YLeaf(YType.uint64, 'RX_Control_cells_counter')),
                                            ('rx_data_cell_counter', YLeaf(YType.uint64, 'RX_Data_cell_counter')),
                                            ('rx_data_byte_counter', YLeaf(YType.uint64, 'RX_Data_byte_counter')),
                                            ('rx_bec_retransmit', YLeaf(YType.uint64, 'RX_BEC_retransmit')),
                                            ('rx_asyn_fifo_rate', YLeaf(YType.uint64, 'RX_Asyn_fifo_rate')),
                                            ('rx_crc_errors_counter', YLeaf(YType.uint64, 'RX_CRC_errors_counter')),
                                            ('rx_lfec_fec_correctable_error', YLeaf(YType.uint64, 'RX_LFEC_FEC_correctable_error')),
                                            ('rx_lfec_fec_uncorrectable_errors', YLeaf(YType.uint64, 'RX_LFEC_FEC_uncorrectable_errors')),
                                            ('rx_dropped_retransmitted_control', YLeaf(YType.uint64, 'RX_dropped_retransmitted_control')),
                                            ('fsm_state', YLeaf(YType.str, 'fsm_state')),
                                        ])
                                        self.link_idx = None
                                        self.link_id_str = None
                                        self.phy_link = None
                                        self.speed = None
                                        self.stage = None
                                        self.fab_plane = None
                                        self.fab_group = None
                                        self.flap_cnt = None
                                        self.num_admin_shuts = None
                                        self.admin_state = None
                                        self.oper_state = None
                                        self.flags = None
                                        self.far_end_link_fsdb = None
                                        self.far_end_link_hw = None
                                        self.coeff1 = None
                                        self.coeff2 = None
                                        self.tx_control_cells_counter = None
                                        self.tx_data_cell_counter = None
                                        self.tx_data_byte_counter = None
                                        self.tx_bec_retransmit = None
                                        self.tx_asyn_fifo_rate = None
                                        self.rx_control_cells_counter = None
                                        self.rx_data_cell_counter = None
                                        self.rx_data_byte_counter = None
                                        self.rx_bec_retransmit = None
                                        self.rx_asyn_fifo_rate = None
                                        self.rx_crc_errors_counter = None
                                        self.rx_lfec_fec_correctable_error = None
                                        self.rx_lfec_fec_uncorrectable_errors = None
                                        self.rx_dropped_retransmitted_control = None
                                        self.fsm_state = None

                                        self.history = YList(self)
                                        self._segment_path = lambda: "link_idx_list" + "[link_idx='" + str(self.link_idx) + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Topo.Instance.LinkIdxList, ['link_idx', 'link_id_str', 'phy_link', 'speed', 'stage', 'fab_plane', 'fab_group', 'flap_cnt', 'num_admin_shuts', 'admin_state', 'oper_state', 'flags', 'far_end_link_fsdb', 'far_end_link_hw', 'coeff1', 'coeff2', 'tx_control_cells_counter', 'tx_data_cell_counter', 'tx_data_byte_counter', 'tx_bec_retransmit', 'tx_asyn_fifo_rate', 'rx_control_cells_counter', 'rx_data_cell_counter', 'rx_data_byte_counter', 'rx_bec_retransmit', 'rx_asyn_fifo_rate', 'rx_crc_errors_counter', 'rx_lfec_fec_correctable_error', 'rx_lfec_fec_uncorrectable_errors', 'rx_dropped_retransmitted_control', 'fsm_state'], name, value)


                                    class History(Entity):
                                        """
                                        
                                        
                                        .. attribute:: history_idx  (key)
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** \-2147483648..2147483647
                                        
                                        .. attribute:: time_stamp
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: admin_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: oper_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: error_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: down_reasons
                                        
                                        	
                                        	**type**\: str
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Topo.Instance.LinkIdxList.History, self).__init__()

                                            self.yang_name = "history"
                                            self.yang_parent_name = "link_idx_list"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['history_idx']
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                                ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                                ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                ('error_state', YLeaf(YType.str, 'error_state')),
                                                ('down_reasons', YLeaf(YType.str, 'down_reasons')),
                                            ])
                                            self.history_idx = None
                                            self.time_stamp = None
                                            self.admin_state = None
                                            self.oper_state = None
                                            self.error_state = None
                                            self.down_reasons = None
                                            self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Topo.Instance.LinkIdxList.History, ['history_idx', 'time_stamp', 'admin_state', 'oper_state', 'error_state', 'down_reasons'], name, value)


                        class Flap(Entity):
                            """
                            
                            
                            .. attribute:: instance
                            
                            	
                            	**type**\: list of  		 :py:class:`Instance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Flap.Instance>`
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Flap, self).__init__()

                                self.yang_name = "flap"
                                self.yang_parent_name = "rx"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("instance", ("instance", Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Flap.Instance))])
                                self._leafs = OrderedDict()

                                self.instance = YList(self)
                                self._segment_path = lambda: "flap"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Flap, [], name, value)


                            class Instance(Entity):
                                """
                                
                                
                                .. attribute:: instance_id  (key)
                                
                                	
                                	**type**\: str
                                
                                	**pattern:** [0\-5]\|all
                                
                                .. attribute:: nodeid_str
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: is_show
                                
                                	
                                	**type**\: bool
                                
                                .. attribute:: link_idx_list
                                
                                	
                                	**type**\: list of  		 :py:class:`LinkIdxList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Flap.Instance.LinkIdxList>`
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Flap.Instance, self).__init__()

                                    self.yang_name = "instance"
                                    self.yang_parent_name = "flap"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['instance_id']
                                    self._child_classes = OrderedDict([("link_idx_list", ("link_idx_list", Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Flap.Instance.LinkIdxList))])
                                    self._leafs = OrderedDict([
                                        ('instance_id', YLeaf(YType.str, 'instance-id')),
                                        ('nodeid_str', YLeaf(YType.str, 'nodeid_str')),
                                        ('is_show', YLeaf(YType.boolean, 'is_show')),
                                    ])
                                    self.instance_id = None
                                    self.nodeid_str = None
                                    self.is_show = None

                                    self.link_idx_list = YList(self)
                                    self._segment_path = lambda: "instance" + "[instance-id='" + str(self.instance_id) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Flap.Instance, ['instance_id', 'nodeid_str', 'is_show'], name, value)


                                class LinkIdxList(Entity):
                                    """
                                    
                                    
                                    .. attribute:: link_idx  (key)
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** \-9223372036854775808..9223372036854775807
                                    
                                    .. attribute:: link_id_str
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: phy_link
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: speed
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: stage
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: fab_plane
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: fab_group
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: flap_cnt
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: num_admin_shuts
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: admin_state
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: oper_state
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: flags
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: far_end_link_fsdb
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: far_end_link_hw
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: coeff1
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: coeff2
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: tx_control_cells_counter
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: tx_data_cell_counter
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: tx_data_byte_counter
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: tx_bec_retransmit
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: tx_asyn_fifo_rate
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: rx_control_cells_counter
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: rx_data_cell_counter
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: rx_data_byte_counter
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: rx_bec_retransmit
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: rx_asyn_fifo_rate
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: rx_crc_errors_counter
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: rx_lfec_fec_correctable_error
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: rx_lfec_fec_uncorrectable_errors
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: rx_dropped_retransmitted_control
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: fsm_state
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: history
                                    
                                    	
                                    	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Flap.Instance.LinkIdxList.History>`
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Flap.Instance.LinkIdxList, self).__init__()

                                        self.yang_name = "link_idx_list"
                                        self.yang_parent_name = "instance"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['link_idx']
                                        self._child_classes = OrderedDict([("history", ("history", Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Flap.Instance.LinkIdxList.History))])
                                        self._leafs = OrderedDict([
                                            ('link_idx', YLeaf(YType.int64, 'link_idx')),
                                            ('link_id_str', YLeaf(YType.str, 'link_id_str')),
                                            ('phy_link', YLeaf(YType.str, 'phy_link')),
                                            ('speed', YLeaf(YType.str, 'speed')),
                                            ('stage', YLeaf(YType.str, 'stage')),
                                            ('fab_plane', YLeaf(YType.uint32, 'fab_plane')),
                                            ('fab_group', YLeaf(YType.uint32, 'fab_group')),
                                            ('flap_cnt', YLeaf(YType.uint32, 'flap_cnt')),
                                            ('num_admin_shuts', YLeaf(YType.uint32, 'num_admin_shuts')),
                                            ('admin_state', YLeaf(YType.str, 'admin-state')),
                                            ('oper_state', YLeaf(YType.str, 'oper_state')),
                                            ('flags', YLeaf(YType.str, 'flags')),
                                            ('far_end_link_fsdb', YLeaf(YType.str, 'far_end_link_fsdb')),
                                            ('far_end_link_hw', YLeaf(YType.str, 'far_end_link_hw')),
                                            ('coeff1', YLeaf(YType.uint32, 'coeff1')),
                                            ('coeff2', YLeaf(YType.uint32, 'coeff2')),
                                            ('tx_control_cells_counter', YLeaf(YType.uint64, 'TX_Control_cells_counter')),
                                            ('tx_data_cell_counter', YLeaf(YType.uint64, 'TX_Data_cell_counter')),
                                            ('tx_data_byte_counter', YLeaf(YType.uint64, 'TX_Data_byte_counter')),
                                            ('tx_bec_retransmit', YLeaf(YType.uint64, 'TX_BEC_retransmit')),
                                            ('tx_asyn_fifo_rate', YLeaf(YType.uint64, 'TX_Asyn_fifo_rate')),
                                            ('rx_control_cells_counter', YLeaf(YType.uint64, 'RX_Control_cells_counter')),
                                            ('rx_data_cell_counter', YLeaf(YType.uint64, 'RX_Data_cell_counter')),
                                            ('rx_data_byte_counter', YLeaf(YType.uint64, 'RX_Data_byte_counter')),
                                            ('rx_bec_retransmit', YLeaf(YType.uint64, 'RX_BEC_retransmit')),
                                            ('rx_asyn_fifo_rate', YLeaf(YType.uint64, 'RX_Asyn_fifo_rate')),
                                            ('rx_crc_errors_counter', YLeaf(YType.uint64, 'RX_CRC_errors_counter')),
                                            ('rx_lfec_fec_correctable_error', YLeaf(YType.uint64, 'RX_LFEC_FEC_correctable_error')),
                                            ('rx_lfec_fec_uncorrectable_errors', YLeaf(YType.uint64, 'RX_LFEC_FEC_uncorrectable_errors')),
                                            ('rx_dropped_retransmitted_control', YLeaf(YType.uint64, 'RX_dropped_retransmitted_control')),
                                            ('fsm_state', YLeaf(YType.str, 'fsm_state')),
                                        ])
                                        self.link_idx = None
                                        self.link_id_str = None
                                        self.phy_link = None
                                        self.speed = None
                                        self.stage = None
                                        self.fab_plane = None
                                        self.fab_group = None
                                        self.flap_cnt = None
                                        self.num_admin_shuts = None
                                        self.admin_state = None
                                        self.oper_state = None
                                        self.flags = None
                                        self.far_end_link_fsdb = None
                                        self.far_end_link_hw = None
                                        self.coeff1 = None
                                        self.coeff2 = None
                                        self.tx_control_cells_counter = None
                                        self.tx_data_cell_counter = None
                                        self.tx_data_byte_counter = None
                                        self.tx_bec_retransmit = None
                                        self.tx_asyn_fifo_rate = None
                                        self.rx_control_cells_counter = None
                                        self.rx_data_cell_counter = None
                                        self.rx_data_byte_counter = None
                                        self.rx_bec_retransmit = None
                                        self.rx_asyn_fifo_rate = None
                                        self.rx_crc_errors_counter = None
                                        self.rx_lfec_fec_correctable_error = None
                                        self.rx_lfec_fec_uncorrectable_errors = None
                                        self.rx_dropped_retransmitted_control = None
                                        self.fsm_state = None

                                        self.history = YList(self)
                                        self._segment_path = lambda: "link_idx_list" + "[link_idx='" + str(self.link_idx) + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Flap.Instance.LinkIdxList, ['link_idx', 'link_id_str', 'phy_link', 'speed', 'stage', 'fab_plane', 'fab_group', 'flap_cnt', 'num_admin_shuts', 'admin_state', 'oper_state', 'flags', 'far_end_link_fsdb', 'far_end_link_hw', 'coeff1', 'coeff2', 'tx_control_cells_counter', 'tx_data_cell_counter', 'tx_data_byte_counter', 'tx_bec_retransmit', 'tx_asyn_fifo_rate', 'rx_control_cells_counter', 'rx_data_cell_counter', 'rx_data_byte_counter', 'rx_bec_retransmit', 'rx_asyn_fifo_rate', 'rx_crc_errors_counter', 'rx_lfec_fec_correctable_error', 'rx_lfec_fec_uncorrectable_errors', 'rx_dropped_retransmitted_control', 'fsm_state'], name, value)


                                    class History(Entity):
                                        """
                                        
                                        
                                        .. attribute:: history_idx  (key)
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** \-2147483648..2147483647
                                        
                                        .. attribute:: time_stamp
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: admin_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: oper_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: error_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: down_reasons
                                        
                                        	
                                        	**type**\: str
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Flap.Instance.LinkIdxList.History, self).__init__()

                                            self.yang_name = "history"
                                            self.yang_parent_name = "link_idx_list"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['history_idx']
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                                ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                                ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                ('error_state', YLeaf(YType.str, 'error_state')),
                                                ('down_reasons', YLeaf(YType.str, 'down_reasons')),
                                            ])
                                            self.history_idx = None
                                            self.time_stamp = None
                                            self.admin_state = None
                                            self.oper_state = None
                                            self.error_state = None
                                            self.down_reasons = None
                                            self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Flap.Instance.LinkIdxList.History, ['history_idx', 'time_stamp', 'admin_state', 'oper_state', 'error_state', 'down_reasons'], name, value)


                        class Stats(Entity):
                            """
                            
                            
                            .. attribute:: data
                            
                            	
                            	**type**\:  :py:class:`Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Stats.Data>`
                            
                            .. attribute:: ctrl
                            
                            	
                            	**type**\:  :py:class:`Ctrl <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Stats.Ctrl>`
                            
                            .. attribute:: all
                            
                            	
                            	**type**\:  :py:class:`All <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Stats.All>`
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Stats, self).__init__()

                                self.yang_name = "stats"
                                self.yang_parent_name = "rx"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("data", ("data", Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Stats.Data)), ("ctrl", ("ctrl", Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Stats.Ctrl)), ("all", ("all", Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Stats.All))])
                                self._leafs = OrderedDict()

                                self.data = Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Stats.Data()
                                self.data.parent = self
                                self._children_name_map["data"] = "data"

                                self.ctrl = Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Stats.Ctrl()
                                self.ctrl.parent = self
                                self._children_name_map["ctrl"] = "ctrl"

                                self.all = Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Stats.All()
                                self.all.parent = self
                                self._children_name_map["all"] = "all"
                                self._segment_path = lambda: "stats"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Stats, [], name, value)


                            class Data(Entity):
                                """
                                
                                
                                .. attribute:: instance
                                
                                	
                                	**type**\: list of  		 :py:class:`Instance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Stats.Data.Instance>`
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Stats.Data, self).__init__()

                                    self.yang_name = "data"
                                    self.yang_parent_name = "stats"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([("instance", ("instance", Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Stats.Data.Instance))])
                                    self._leafs = OrderedDict()

                                    self.instance = YList(self)
                                    self._segment_path = lambda: "data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Stats.Data, [], name, value)


                                class Instance(Entity):
                                    """
                                    
                                    
                                    .. attribute:: instance_id  (key)
                                    
                                    	
                                    	**type**\: str
                                    
                                    	**pattern:** [0\-5]\|all
                                    
                                    .. attribute:: nodeid_str
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: is_show
                                    
                                    	
                                    	**type**\: bool
                                    
                                    .. attribute:: link_idx_list
                                    
                                    	
                                    	**type**\: list of  		 :py:class:`LinkIdxList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Stats.Data.Instance.LinkIdxList>`
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Stats.Data.Instance, self).__init__()

                                        self.yang_name = "instance"
                                        self.yang_parent_name = "data"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['instance_id']
                                        self._child_classes = OrderedDict([("link_idx_list", ("link_idx_list", Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Stats.Data.Instance.LinkIdxList))])
                                        self._leafs = OrderedDict([
                                            ('instance_id', YLeaf(YType.str, 'instance-id')),
                                            ('nodeid_str', YLeaf(YType.str, 'nodeid_str')),
                                            ('is_show', YLeaf(YType.boolean, 'is_show')),
                                        ])
                                        self.instance_id = None
                                        self.nodeid_str = None
                                        self.is_show = None

                                        self.link_idx_list = YList(self)
                                        self._segment_path = lambda: "instance" + "[instance-id='" + str(self.instance_id) + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Stats.Data.Instance, ['instance_id', 'nodeid_str', 'is_show'], name, value)


                                    class LinkIdxList(Entity):
                                        """
                                        
                                        
                                        .. attribute:: link_idx  (key)
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** \-9223372036854775808..9223372036854775807
                                        
                                        .. attribute:: link_id_str
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: phy_link
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: speed
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: stage
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: fab_plane
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: fab_group
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: flap_cnt
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: num_admin_shuts
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: admin_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: oper_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: flags
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: far_end_link_fsdb
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: far_end_link_hw
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: coeff1
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: coeff2
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: tx_control_cells_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: tx_data_cell_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: tx_data_byte_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: tx_bec_retransmit
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: tx_asyn_fifo_rate
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_control_cells_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_data_cell_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_data_byte_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_bec_retransmit
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_asyn_fifo_rate
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_crc_errors_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_lfec_fec_correctable_error
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_lfec_fec_uncorrectable_errors
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_dropped_retransmitted_control
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: fsm_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: history
                                        
                                        	
                                        	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Stats.Data.Instance.LinkIdxList.History>`
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Stats.Data.Instance.LinkIdxList, self).__init__()

                                            self.yang_name = "link_idx_list"
                                            self.yang_parent_name = "instance"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['link_idx']
                                            self._child_classes = OrderedDict([("history", ("history", Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Stats.Data.Instance.LinkIdxList.History))])
                                            self._leafs = OrderedDict([
                                                ('link_idx', YLeaf(YType.int64, 'link_idx')),
                                                ('link_id_str', YLeaf(YType.str, 'link_id_str')),
                                                ('phy_link', YLeaf(YType.str, 'phy_link')),
                                                ('speed', YLeaf(YType.str, 'speed')),
                                                ('stage', YLeaf(YType.str, 'stage')),
                                                ('fab_plane', YLeaf(YType.uint32, 'fab_plane')),
                                                ('fab_group', YLeaf(YType.uint32, 'fab_group')),
                                                ('flap_cnt', YLeaf(YType.uint32, 'flap_cnt')),
                                                ('num_admin_shuts', YLeaf(YType.uint32, 'num_admin_shuts')),
                                                ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                ('flags', YLeaf(YType.str, 'flags')),
                                                ('far_end_link_fsdb', YLeaf(YType.str, 'far_end_link_fsdb')),
                                                ('far_end_link_hw', YLeaf(YType.str, 'far_end_link_hw')),
                                                ('coeff1', YLeaf(YType.uint32, 'coeff1')),
                                                ('coeff2', YLeaf(YType.uint32, 'coeff2')),
                                                ('tx_control_cells_counter', YLeaf(YType.uint64, 'TX_Control_cells_counter')),
                                                ('tx_data_cell_counter', YLeaf(YType.uint64, 'TX_Data_cell_counter')),
                                                ('tx_data_byte_counter', YLeaf(YType.uint64, 'TX_Data_byte_counter')),
                                                ('tx_bec_retransmit', YLeaf(YType.uint64, 'TX_BEC_retransmit')),
                                                ('tx_asyn_fifo_rate', YLeaf(YType.uint64, 'TX_Asyn_fifo_rate')),
                                                ('rx_control_cells_counter', YLeaf(YType.uint64, 'RX_Control_cells_counter')),
                                                ('rx_data_cell_counter', YLeaf(YType.uint64, 'RX_Data_cell_counter')),
                                                ('rx_data_byte_counter', YLeaf(YType.uint64, 'RX_Data_byte_counter')),
                                                ('rx_bec_retransmit', YLeaf(YType.uint64, 'RX_BEC_retransmit')),
                                                ('rx_asyn_fifo_rate', YLeaf(YType.uint64, 'RX_Asyn_fifo_rate')),
                                                ('rx_crc_errors_counter', YLeaf(YType.uint64, 'RX_CRC_errors_counter')),
                                                ('rx_lfec_fec_correctable_error', YLeaf(YType.uint64, 'RX_LFEC_FEC_correctable_error')),
                                                ('rx_lfec_fec_uncorrectable_errors', YLeaf(YType.uint64, 'RX_LFEC_FEC_uncorrectable_errors')),
                                                ('rx_dropped_retransmitted_control', YLeaf(YType.uint64, 'RX_dropped_retransmitted_control')),
                                                ('fsm_state', YLeaf(YType.str, 'fsm_state')),
                                            ])
                                            self.link_idx = None
                                            self.link_id_str = None
                                            self.phy_link = None
                                            self.speed = None
                                            self.stage = None
                                            self.fab_plane = None
                                            self.fab_group = None
                                            self.flap_cnt = None
                                            self.num_admin_shuts = None
                                            self.admin_state = None
                                            self.oper_state = None
                                            self.flags = None
                                            self.far_end_link_fsdb = None
                                            self.far_end_link_hw = None
                                            self.coeff1 = None
                                            self.coeff2 = None
                                            self.tx_control_cells_counter = None
                                            self.tx_data_cell_counter = None
                                            self.tx_data_byte_counter = None
                                            self.tx_bec_retransmit = None
                                            self.tx_asyn_fifo_rate = None
                                            self.rx_control_cells_counter = None
                                            self.rx_data_cell_counter = None
                                            self.rx_data_byte_counter = None
                                            self.rx_bec_retransmit = None
                                            self.rx_asyn_fifo_rate = None
                                            self.rx_crc_errors_counter = None
                                            self.rx_lfec_fec_correctable_error = None
                                            self.rx_lfec_fec_uncorrectable_errors = None
                                            self.rx_dropped_retransmitted_control = None
                                            self.fsm_state = None

                                            self.history = YList(self)
                                            self._segment_path = lambda: "link_idx_list" + "[link_idx='" + str(self.link_idx) + "']"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Stats.Data.Instance.LinkIdxList, ['link_idx', 'link_id_str', 'phy_link', 'speed', 'stage', 'fab_plane', 'fab_group', 'flap_cnt', 'num_admin_shuts', 'admin_state', 'oper_state', 'flags', 'far_end_link_fsdb', 'far_end_link_hw', 'coeff1', 'coeff2', 'tx_control_cells_counter', 'tx_data_cell_counter', 'tx_data_byte_counter', 'tx_bec_retransmit', 'tx_asyn_fifo_rate', 'rx_control_cells_counter', 'rx_data_cell_counter', 'rx_data_byte_counter', 'rx_bec_retransmit', 'rx_asyn_fifo_rate', 'rx_crc_errors_counter', 'rx_lfec_fec_correctable_error', 'rx_lfec_fec_uncorrectable_errors', 'rx_dropped_retransmitted_control', 'fsm_state'], name, value)


                                        class History(Entity):
                                            """
                                            
                                            
                                            .. attribute:: history_idx  (key)
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: time_stamp
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: admin_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: oper_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: error_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: down_reasons
                                            
                                            	
                                            	**type**\: str
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Stats.Data.Instance.LinkIdxList.History, self).__init__()

                                                self.yang_name = "history"
                                                self.yang_parent_name = "link_idx_list"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['history_idx']
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                                    ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                                    ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                    ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                    ('error_state', YLeaf(YType.str, 'error_state')),
                                                    ('down_reasons', YLeaf(YType.str, 'down_reasons')),
                                                ])
                                                self.history_idx = None
                                                self.time_stamp = None
                                                self.admin_state = None
                                                self.oper_state = None
                                                self.error_state = None
                                                self.down_reasons = None
                                                self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Stats.Data.Instance.LinkIdxList.History, ['history_idx', 'time_stamp', 'admin_state', 'oper_state', 'error_state', 'down_reasons'], name, value)


                            class Ctrl(Entity):
                                """
                                
                                
                                .. attribute:: instance
                                
                                	
                                	**type**\: list of  		 :py:class:`Instance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Stats.Ctrl.Instance>`
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Stats.Ctrl, self).__init__()

                                    self.yang_name = "ctrl"
                                    self.yang_parent_name = "stats"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([("instance", ("instance", Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Stats.Ctrl.Instance))])
                                    self._leafs = OrderedDict()

                                    self.instance = YList(self)
                                    self._segment_path = lambda: "ctrl"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Stats.Ctrl, [], name, value)


                                class Instance(Entity):
                                    """
                                    
                                    
                                    .. attribute:: instance_id  (key)
                                    
                                    	
                                    	**type**\: str
                                    
                                    	**pattern:** [0\-5]\|all
                                    
                                    .. attribute:: nodeid_str
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: is_show
                                    
                                    	
                                    	**type**\: bool
                                    
                                    .. attribute:: link_idx_list
                                    
                                    	
                                    	**type**\: list of  		 :py:class:`LinkIdxList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Stats.Ctrl.Instance.LinkIdxList>`
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Stats.Ctrl.Instance, self).__init__()

                                        self.yang_name = "instance"
                                        self.yang_parent_name = "ctrl"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['instance_id']
                                        self._child_classes = OrderedDict([("link_idx_list", ("link_idx_list", Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Stats.Ctrl.Instance.LinkIdxList))])
                                        self._leafs = OrderedDict([
                                            ('instance_id', YLeaf(YType.str, 'instance-id')),
                                            ('nodeid_str', YLeaf(YType.str, 'nodeid_str')),
                                            ('is_show', YLeaf(YType.boolean, 'is_show')),
                                        ])
                                        self.instance_id = None
                                        self.nodeid_str = None
                                        self.is_show = None

                                        self.link_idx_list = YList(self)
                                        self._segment_path = lambda: "instance" + "[instance-id='" + str(self.instance_id) + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Stats.Ctrl.Instance, ['instance_id', 'nodeid_str', 'is_show'], name, value)


                                    class LinkIdxList(Entity):
                                        """
                                        
                                        
                                        .. attribute:: link_idx  (key)
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** \-9223372036854775808..9223372036854775807
                                        
                                        .. attribute:: link_id_str
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: phy_link
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: speed
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: stage
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: fab_plane
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: fab_group
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: flap_cnt
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: num_admin_shuts
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: admin_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: oper_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: flags
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: far_end_link_fsdb
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: far_end_link_hw
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: coeff1
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: coeff2
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: tx_control_cells_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: tx_data_cell_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: tx_data_byte_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: tx_bec_retransmit
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: tx_asyn_fifo_rate
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_control_cells_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_data_cell_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_data_byte_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_bec_retransmit
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_asyn_fifo_rate
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_crc_errors_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_lfec_fec_correctable_error
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_lfec_fec_uncorrectable_errors
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_dropped_retransmitted_control
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: fsm_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: history
                                        
                                        	
                                        	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Stats.Ctrl.Instance.LinkIdxList.History>`
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Stats.Ctrl.Instance.LinkIdxList, self).__init__()

                                            self.yang_name = "link_idx_list"
                                            self.yang_parent_name = "instance"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['link_idx']
                                            self._child_classes = OrderedDict([("history", ("history", Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Stats.Ctrl.Instance.LinkIdxList.History))])
                                            self._leafs = OrderedDict([
                                                ('link_idx', YLeaf(YType.int64, 'link_idx')),
                                                ('link_id_str', YLeaf(YType.str, 'link_id_str')),
                                                ('phy_link', YLeaf(YType.str, 'phy_link')),
                                                ('speed', YLeaf(YType.str, 'speed')),
                                                ('stage', YLeaf(YType.str, 'stage')),
                                                ('fab_plane', YLeaf(YType.uint32, 'fab_plane')),
                                                ('fab_group', YLeaf(YType.uint32, 'fab_group')),
                                                ('flap_cnt', YLeaf(YType.uint32, 'flap_cnt')),
                                                ('num_admin_shuts', YLeaf(YType.uint32, 'num_admin_shuts')),
                                                ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                ('flags', YLeaf(YType.str, 'flags')),
                                                ('far_end_link_fsdb', YLeaf(YType.str, 'far_end_link_fsdb')),
                                                ('far_end_link_hw', YLeaf(YType.str, 'far_end_link_hw')),
                                                ('coeff1', YLeaf(YType.uint32, 'coeff1')),
                                                ('coeff2', YLeaf(YType.uint32, 'coeff2')),
                                                ('tx_control_cells_counter', YLeaf(YType.uint64, 'TX_Control_cells_counter')),
                                                ('tx_data_cell_counter', YLeaf(YType.uint64, 'TX_Data_cell_counter')),
                                                ('tx_data_byte_counter', YLeaf(YType.uint64, 'TX_Data_byte_counter')),
                                                ('tx_bec_retransmit', YLeaf(YType.uint64, 'TX_BEC_retransmit')),
                                                ('tx_asyn_fifo_rate', YLeaf(YType.uint64, 'TX_Asyn_fifo_rate')),
                                                ('rx_control_cells_counter', YLeaf(YType.uint64, 'RX_Control_cells_counter')),
                                                ('rx_data_cell_counter', YLeaf(YType.uint64, 'RX_Data_cell_counter')),
                                                ('rx_data_byte_counter', YLeaf(YType.uint64, 'RX_Data_byte_counter')),
                                                ('rx_bec_retransmit', YLeaf(YType.uint64, 'RX_BEC_retransmit')),
                                                ('rx_asyn_fifo_rate', YLeaf(YType.uint64, 'RX_Asyn_fifo_rate')),
                                                ('rx_crc_errors_counter', YLeaf(YType.uint64, 'RX_CRC_errors_counter')),
                                                ('rx_lfec_fec_correctable_error', YLeaf(YType.uint64, 'RX_LFEC_FEC_correctable_error')),
                                                ('rx_lfec_fec_uncorrectable_errors', YLeaf(YType.uint64, 'RX_LFEC_FEC_uncorrectable_errors')),
                                                ('rx_dropped_retransmitted_control', YLeaf(YType.uint64, 'RX_dropped_retransmitted_control')),
                                                ('fsm_state', YLeaf(YType.str, 'fsm_state')),
                                            ])
                                            self.link_idx = None
                                            self.link_id_str = None
                                            self.phy_link = None
                                            self.speed = None
                                            self.stage = None
                                            self.fab_plane = None
                                            self.fab_group = None
                                            self.flap_cnt = None
                                            self.num_admin_shuts = None
                                            self.admin_state = None
                                            self.oper_state = None
                                            self.flags = None
                                            self.far_end_link_fsdb = None
                                            self.far_end_link_hw = None
                                            self.coeff1 = None
                                            self.coeff2 = None
                                            self.tx_control_cells_counter = None
                                            self.tx_data_cell_counter = None
                                            self.tx_data_byte_counter = None
                                            self.tx_bec_retransmit = None
                                            self.tx_asyn_fifo_rate = None
                                            self.rx_control_cells_counter = None
                                            self.rx_data_cell_counter = None
                                            self.rx_data_byte_counter = None
                                            self.rx_bec_retransmit = None
                                            self.rx_asyn_fifo_rate = None
                                            self.rx_crc_errors_counter = None
                                            self.rx_lfec_fec_correctable_error = None
                                            self.rx_lfec_fec_uncorrectable_errors = None
                                            self.rx_dropped_retransmitted_control = None
                                            self.fsm_state = None

                                            self.history = YList(self)
                                            self._segment_path = lambda: "link_idx_list" + "[link_idx='" + str(self.link_idx) + "']"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Stats.Ctrl.Instance.LinkIdxList, ['link_idx', 'link_id_str', 'phy_link', 'speed', 'stage', 'fab_plane', 'fab_group', 'flap_cnt', 'num_admin_shuts', 'admin_state', 'oper_state', 'flags', 'far_end_link_fsdb', 'far_end_link_hw', 'coeff1', 'coeff2', 'tx_control_cells_counter', 'tx_data_cell_counter', 'tx_data_byte_counter', 'tx_bec_retransmit', 'tx_asyn_fifo_rate', 'rx_control_cells_counter', 'rx_data_cell_counter', 'rx_data_byte_counter', 'rx_bec_retransmit', 'rx_asyn_fifo_rate', 'rx_crc_errors_counter', 'rx_lfec_fec_correctable_error', 'rx_lfec_fec_uncorrectable_errors', 'rx_dropped_retransmitted_control', 'fsm_state'], name, value)


                                        class History(Entity):
                                            """
                                            
                                            
                                            .. attribute:: history_idx  (key)
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: time_stamp
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: admin_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: oper_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: error_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: down_reasons
                                            
                                            	
                                            	**type**\: str
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Stats.Ctrl.Instance.LinkIdxList.History, self).__init__()

                                                self.yang_name = "history"
                                                self.yang_parent_name = "link_idx_list"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['history_idx']
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                                    ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                                    ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                    ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                    ('error_state', YLeaf(YType.str, 'error_state')),
                                                    ('down_reasons', YLeaf(YType.str, 'down_reasons')),
                                                ])
                                                self.history_idx = None
                                                self.time_stamp = None
                                                self.admin_state = None
                                                self.oper_state = None
                                                self.error_state = None
                                                self.down_reasons = None
                                                self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Stats.Ctrl.Instance.LinkIdxList.History, ['history_idx', 'time_stamp', 'admin_state', 'oper_state', 'error_state', 'down_reasons'], name, value)


                            class All(Entity):
                                """
                                
                                
                                .. attribute:: instance
                                
                                	
                                	**type**\: list of  		 :py:class:`Instance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Stats.All.Instance>`
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Stats.All, self).__init__()

                                    self.yang_name = "all"
                                    self.yang_parent_name = "stats"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([("instance", ("instance", Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Stats.All.Instance))])
                                    self._leafs = OrderedDict()

                                    self.instance = YList(self)
                                    self._segment_path = lambda: "all"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Stats.All, [], name, value)


                                class Instance(Entity):
                                    """
                                    
                                    
                                    .. attribute:: instance_id  (key)
                                    
                                    	
                                    	**type**\: str
                                    
                                    	**pattern:** [0\-5]\|all
                                    
                                    .. attribute:: nodeid_str
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: is_show
                                    
                                    	
                                    	**type**\: bool
                                    
                                    .. attribute:: link_idx_list
                                    
                                    	
                                    	**type**\: list of  		 :py:class:`LinkIdxList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Stats.All.Instance.LinkIdxList>`
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Stats.All.Instance, self).__init__()

                                        self.yang_name = "instance"
                                        self.yang_parent_name = "all"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['instance_id']
                                        self._child_classes = OrderedDict([("link_idx_list", ("link_idx_list", Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Stats.All.Instance.LinkIdxList))])
                                        self._leafs = OrderedDict([
                                            ('instance_id', YLeaf(YType.str, 'instance-id')),
                                            ('nodeid_str', YLeaf(YType.str, 'nodeid_str')),
                                            ('is_show', YLeaf(YType.boolean, 'is_show')),
                                        ])
                                        self.instance_id = None
                                        self.nodeid_str = None
                                        self.is_show = None

                                        self.link_idx_list = YList(self)
                                        self._segment_path = lambda: "instance" + "[instance-id='" + str(self.instance_id) + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Stats.All.Instance, ['instance_id', 'nodeid_str', 'is_show'], name, value)


                                    class LinkIdxList(Entity):
                                        """
                                        
                                        
                                        .. attribute:: link_idx  (key)
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** \-9223372036854775808..9223372036854775807
                                        
                                        .. attribute:: link_id_str
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: phy_link
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: speed
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: stage
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: fab_plane
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: fab_group
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: flap_cnt
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: num_admin_shuts
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: admin_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: oper_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: flags
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: far_end_link_fsdb
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: far_end_link_hw
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: coeff1
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: coeff2
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: tx_control_cells_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: tx_data_cell_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: tx_data_byte_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: tx_bec_retransmit
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: tx_asyn_fifo_rate
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_control_cells_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_data_cell_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_data_byte_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_bec_retransmit
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_asyn_fifo_rate
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_crc_errors_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_lfec_fec_correctable_error
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_lfec_fec_uncorrectable_errors
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_dropped_retransmitted_control
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: fsm_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: history
                                        
                                        	
                                        	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Stats.All.Instance.LinkIdxList.History>`
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Stats.All.Instance.LinkIdxList, self).__init__()

                                            self.yang_name = "link_idx_list"
                                            self.yang_parent_name = "instance"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['link_idx']
                                            self._child_classes = OrderedDict([("history", ("history", Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Stats.All.Instance.LinkIdxList.History))])
                                            self._leafs = OrderedDict([
                                                ('link_idx', YLeaf(YType.int64, 'link_idx')),
                                                ('link_id_str', YLeaf(YType.str, 'link_id_str')),
                                                ('phy_link', YLeaf(YType.str, 'phy_link')),
                                                ('speed', YLeaf(YType.str, 'speed')),
                                                ('stage', YLeaf(YType.str, 'stage')),
                                                ('fab_plane', YLeaf(YType.uint32, 'fab_plane')),
                                                ('fab_group', YLeaf(YType.uint32, 'fab_group')),
                                                ('flap_cnt', YLeaf(YType.uint32, 'flap_cnt')),
                                                ('num_admin_shuts', YLeaf(YType.uint32, 'num_admin_shuts')),
                                                ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                ('flags', YLeaf(YType.str, 'flags')),
                                                ('far_end_link_fsdb', YLeaf(YType.str, 'far_end_link_fsdb')),
                                                ('far_end_link_hw', YLeaf(YType.str, 'far_end_link_hw')),
                                                ('coeff1', YLeaf(YType.uint32, 'coeff1')),
                                                ('coeff2', YLeaf(YType.uint32, 'coeff2')),
                                                ('tx_control_cells_counter', YLeaf(YType.uint64, 'TX_Control_cells_counter')),
                                                ('tx_data_cell_counter', YLeaf(YType.uint64, 'TX_Data_cell_counter')),
                                                ('tx_data_byte_counter', YLeaf(YType.uint64, 'TX_Data_byte_counter')),
                                                ('tx_bec_retransmit', YLeaf(YType.uint64, 'TX_BEC_retransmit')),
                                                ('tx_asyn_fifo_rate', YLeaf(YType.uint64, 'TX_Asyn_fifo_rate')),
                                                ('rx_control_cells_counter', YLeaf(YType.uint64, 'RX_Control_cells_counter')),
                                                ('rx_data_cell_counter', YLeaf(YType.uint64, 'RX_Data_cell_counter')),
                                                ('rx_data_byte_counter', YLeaf(YType.uint64, 'RX_Data_byte_counter')),
                                                ('rx_bec_retransmit', YLeaf(YType.uint64, 'RX_BEC_retransmit')),
                                                ('rx_asyn_fifo_rate', YLeaf(YType.uint64, 'RX_Asyn_fifo_rate')),
                                                ('rx_crc_errors_counter', YLeaf(YType.uint64, 'RX_CRC_errors_counter')),
                                                ('rx_lfec_fec_correctable_error', YLeaf(YType.uint64, 'RX_LFEC_FEC_correctable_error')),
                                                ('rx_lfec_fec_uncorrectable_errors', YLeaf(YType.uint64, 'RX_LFEC_FEC_uncorrectable_errors')),
                                                ('rx_dropped_retransmitted_control', YLeaf(YType.uint64, 'RX_dropped_retransmitted_control')),
                                                ('fsm_state', YLeaf(YType.str, 'fsm_state')),
                                            ])
                                            self.link_idx = None
                                            self.link_id_str = None
                                            self.phy_link = None
                                            self.speed = None
                                            self.stage = None
                                            self.fab_plane = None
                                            self.fab_group = None
                                            self.flap_cnt = None
                                            self.num_admin_shuts = None
                                            self.admin_state = None
                                            self.oper_state = None
                                            self.flags = None
                                            self.far_end_link_fsdb = None
                                            self.far_end_link_hw = None
                                            self.coeff1 = None
                                            self.coeff2 = None
                                            self.tx_control_cells_counter = None
                                            self.tx_data_cell_counter = None
                                            self.tx_data_byte_counter = None
                                            self.tx_bec_retransmit = None
                                            self.tx_asyn_fifo_rate = None
                                            self.rx_control_cells_counter = None
                                            self.rx_data_cell_counter = None
                                            self.rx_data_byte_counter = None
                                            self.rx_bec_retransmit = None
                                            self.rx_asyn_fifo_rate = None
                                            self.rx_crc_errors_counter = None
                                            self.rx_lfec_fec_correctable_error = None
                                            self.rx_lfec_fec_uncorrectable_errors = None
                                            self.rx_dropped_retransmitted_control = None
                                            self.fsm_state = None

                                            self.history = YList(self)
                                            self._segment_path = lambda: "link_idx_list" + "[link_idx='" + str(self.link_idx) + "']"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Stats.All.Instance.LinkIdxList, ['link_idx', 'link_id_str', 'phy_link', 'speed', 'stage', 'fab_plane', 'fab_group', 'flap_cnt', 'num_admin_shuts', 'admin_state', 'oper_state', 'flags', 'far_end_link_fsdb', 'far_end_link_hw', 'coeff1', 'coeff2', 'tx_control_cells_counter', 'tx_data_cell_counter', 'tx_data_byte_counter', 'tx_bec_retransmit', 'tx_asyn_fifo_rate', 'rx_control_cells_counter', 'rx_data_cell_counter', 'rx_data_byte_counter', 'rx_bec_retransmit', 'rx_asyn_fifo_rate', 'rx_crc_errors_counter', 'rx_lfec_fec_correctable_error', 'rx_lfec_fec_uncorrectable_errors', 'rx_dropped_retransmitted_control', 'fsm_state'], name, value)


                                        class History(Entity):
                                            """
                                            
                                            
                                            .. attribute:: history_idx  (key)
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: time_stamp
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: admin_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: oper_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: error_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: down_reasons
                                            
                                            	
                                            	**type**\: str
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Stats.All.Instance.LinkIdxList.History, self).__init__()

                                                self.yang_name = "history"
                                                self.yang_parent_name = "link_idx_list"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['history_idx']
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                                    ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                                    ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                    ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                    ('error_state', YLeaf(YType.str, 'error_state')),
                                                    ('down_reasons', YLeaf(YType.str, 'down_reasons')),
                                                ])
                                                self.history_idx = None
                                                self.time_stamp = None
                                                self.admin_state = None
                                                self.oper_state = None
                                                self.error_state = None
                                                self.down_reasons = None
                                                self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.SfeOper.Sfe.LinkInfo.Location.Rx.Stats.All.Instance.LinkIdxList.History, ['history_idx', 'time_stamp', 'admin_state', 'oper_state', 'error_state', 'down_reasons'], name, value)


                    class Tx(Entity):
                        """
                        
                        
                        .. attribute:: start  (key)
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..143
                        
                        .. attribute:: end  (key)
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..143
                        
                        .. attribute:: detail
                        
                        	
                        	**type**\:  :py:class:`Detail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Detail>`
                        
                        .. attribute:: instance
                        
                        	
                        	**type**\: list of  		 :py:class:`Instance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Instance>`
                        
                        .. attribute:: stats
                        
                        	
                        	**type**\:  :py:class:`Stats <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Stats>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.SfeOper.Sfe.LinkInfo.Location.Tx, self).__init__()

                            self.yang_name = "tx"
                            self.yang_parent_name = "location"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['start','end']
                            self._child_classes = OrderedDict([("detail", ("detail", Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Detail)), ("instance", ("instance", Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Instance)), ("stats", ("stats", Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Stats))])
                            self._leafs = OrderedDict([
                                ('start', YLeaf(YType.int32, 'start')),
                                ('end', YLeaf(YType.int32, 'end')),
                            ])
                            self.start = None
                            self.end = None

                            self.detail = Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Detail()
                            self.detail.parent = self
                            self._children_name_map["detail"] = "detail"

                            self.stats = Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Stats()
                            self.stats.parent = self
                            self._children_name_map["stats"] = "stats"

                            self.instance = YList(self)
                            self._segment_path = lambda: "tx" + "[start='" + str(self.start) + "']" + "[end='" + str(self.end) + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.SfeOper.Sfe.LinkInfo.Location.Tx, ['start', 'end'], name, value)


                        class Detail(Entity):
                            """
                            
                            
                            .. attribute:: instance
                            
                            	
                            	**type**\: list of  		 :py:class:`Instance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Detail.Instance>`
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Detail, self).__init__()

                                self.yang_name = "detail"
                                self.yang_parent_name = "tx"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("instance", ("instance", Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Detail.Instance))])
                                self._leafs = OrderedDict()

                                self.instance = YList(self)
                                self._segment_path = lambda: "detail"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Detail, [], name, value)


                            class Instance(Entity):
                                """
                                
                                
                                .. attribute:: instance_id  (key)
                                
                                	
                                	**type**\: str
                                
                                	**pattern:** [0\-5]\|all
                                
                                .. attribute:: nodeid_str
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: is_show
                                
                                	
                                	**type**\: bool
                                
                                .. attribute:: link_idx_list
                                
                                	
                                	**type**\: list of  		 :py:class:`LinkIdxList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Detail.Instance.LinkIdxList>`
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Detail.Instance, self).__init__()

                                    self.yang_name = "instance"
                                    self.yang_parent_name = "detail"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['instance_id']
                                    self._child_classes = OrderedDict([("link_idx_list", ("link_idx_list", Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Detail.Instance.LinkIdxList))])
                                    self._leafs = OrderedDict([
                                        ('instance_id', YLeaf(YType.str, 'instance-id')),
                                        ('nodeid_str', YLeaf(YType.str, 'nodeid_str')),
                                        ('is_show', YLeaf(YType.boolean, 'is_show')),
                                    ])
                                    self.instance_id = None
                                    self.nodeid_str = None
                                    self.is_show = None

                                    self.link_idx_list = YList(self)
                                    self._segment_path = lambda: "instance" + "[instance-id='" + str(self.instance_id) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Detail.Instance, ['instance_id', 'nodeid_str', 'is_show'], name, value)


                                class LinkIdxList(Entity):
                                    """
                                    
                                    
                                    .. attribute:: link_idx  (key)
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** \-9223372036854775808..9223372036854775807
                                    
                                    .. attribute:: link_id_str
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: phy_link
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: speed
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: stage
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: fab_plane
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: fab_group
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: flap_cnt
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: num_admin_shuts
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: admin_state
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: oper_state
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: flags
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: far_end_link_fsdb
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: far_end_link_hw
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: coeff1
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: coeff2
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: tx_control_cells_counter
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: tx_data_cell_counter
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: tx_data_byte_counter
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: tx_bec_retransmit
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: tx_asyn_fifo_rate
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: rx_control_cells_counter
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: rx_data_cell_counter
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: rx_data_byte_counter
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: rx_bec_retransmit
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: rx_asyn_fifo_rate
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: rx_crc_errors_counter
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: rx_lfec_fec_correctable_error
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: rx_lfec_fec_uncorrectable_errors
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: rx_dropped_retransmitted_control
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: fsm_state
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: history
                                    
                                    	
                                    	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Detail.Instance.LinkIdxList.History>`
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Detail.Instance.LinkIdxList, self).__init__()

                                        self.yang_name = "link_idx_list"
                                        self.yang_parent_name = "instance"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['link_idx']
                                        self._child_classes = OrderedDict([("history", ("history", Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Detail.Instance.LinkIdxList.History))])
                                        self._leafs = OrderedDict([
                                            ('link_idx', YLeaf(YType.int64, 'link_idx')),
                                            ('link_id_str', YLeaf(YType.str, 'link_id_str')),
                                            ('phy_link', YLeaf(YType.str, 'phy_link')),
                                            ('speed', YLeaf(YType.str, 'speed')),
                                            ('stage', YLeaf(YType.str, 'stage')),
                                            ('fab_plane', YLeaf(YType.uint32, 'fab_plane')),
                                            ('fab_group', YLeaf(YType.uint32, 'fab_group')),
                                            ('flap_cnt', YLeaf(YType.uint32, 'flap_cnt')),
                                            ('num_admin_shuts', YLeaf(YType.uint32, 'num_admin_shuts')),
                                            ('admin_state', YLeaf(YType.str, 'admin-state')),
                                            ('oper_state', YLeaf(YType.str, 'oper_state')),
                                            ('flags', YLeaf(YType.str, 'flags')),
                                            ('far_end_link_fsdb', YLeaf(YType.str, 'far_end_link_fsdb')),
                                            ('far_end_link_hw', YLeaf(YType.str, 'far_end_link_hw')),
                                            ('coeff1', YLeaf(YType.uint32, 'coeff1')),
                                            ('coeff2', YLeaf(YType.uint32, 'coeff2')),
                                            ('tx_control_cells_counter', YLeaf(YType.uint64, 'TX_Control_cells_counter')),
                                            ('tx_data_cell_counter', YLeaf(YType.uint64, 'TX_Data_cell_counter')),
                                            ('tx_data_byte_counter', YLeaf(YType.uint64, 'TX_Data_byte_counter')),
                                            ('tx_bec_retransmit', YLeaf(YType.uint64, 'TX_BEC_retransmit')),
                                            ('tx_asyn_fifo_rate', YLeaf(YType.uint64, 'TX_Asyn_fifo_rate')),
                                            ('rx_control_cells_counter', YLeaf(YType.uint64, 'RX_Control_cells_counter')),
                                            ('rx_data_cell_counter', YLeaf(YType.uint64, 'RX_Data_cell_counter')),
                                            ('rx_data_byte_counter', YLeaf(YType.uint64, 'RX_Data_byte_counter')),
                                            ('rx_bec_retransmit', YLeaf(YType.uint64, 'RX_BEC_retransmit')),
                                            ('rx_asyn_fifo_rate', YLeaf(YType.uint64, 'RX_Asyn_fifo_rate')),
                                            ('rx_crc_errors_counter', YLeaf(YType.uint64, 'RX_CRC_errors_counter')),
                                            ('rx_lfec_fec_correctable_error', YLeaf(YType.uint64, 'RX_LFEC_FEC_correctable_error')),
                                            ('rx_lfec_fec_uncorrectable_errors', YLeaf(YType.uint64, 'RX_LFEC_FEC_uncorrectable_errors')),
                                            ('rx_dropped_retransmitted_control', YLeaf(YType.uint64, 'RX_dropped_retransmitted_control')),
                                            ('fsm_state', YLeaf(YType.str, 'fsm_state')),
                                        ])
                                        self.link_idx = None
                                        self.link_id_str = None
                                        self.phy_link = None
                                        self.speed = None
                                        self.stage = None
                                        self.fab_plane = None
                                        self.fab_group = None
                                        self.flap_cnt = None
                                        self.num_admin_shuts = None
                                        self.admin_state = None
                                        self.oper_state = None
                                        self.flags = None
                                        self.far_end_link_fsdb = None
                                        self.far_end_link_hw = None
                                        self.coeff1 = None
                                        self.coeff2 = None
                                        self.tx_control_cells_counter = None
                                        self.tx_data_cell_counter = None
                                        self.tx_data_byte_counter = None
                                        self.tx_bec_retransmit = None
                                        self.tx_asyn_fifo_rate = None
                                        self.rx_control_cells_counter = None
                                        self.rx_data_cell_counter = None
                                        self.rx_data_byte_counter = None
                                        self.rx_bec_retransmit = None
                                        self.rx_asyn_fifo_rate = None
                                        self.rx_crc_errors_counter = None
                                        self.rx_lfec_fec_correctable_error = None
                                        self.rx_lfec_fec_uncorrectable_errors = None
                                        self.rx_dropped_retransmitted_control = None
                                        self.fsm_state = None

                                        self.history = YList(self)
                                        self._segment_path = lambda: "link_idx_list" + "[link_idx='" + str(self.link_idx) + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Detail.Instance.LinkIdxList, ['link_idx', 'link_id_str', 'phy_link', 'speed', 'stage', 'fab_plane', 'fab_group', 'flap_cnt', 'num_admin_shuts', 'admin_state', 'oper_state', 'flags', 'far_end_link_fsdb', 'far_end_link_hw', 'coeff1', 'coeff2', 'tx_control_cells_counter', 'tx_data_cell_counter', 'tx_data_byte_counter', 'tx_bec_retransmit', 'tx_asyn_fifo_rate', 'rx_control_cells_counter', 'rx_data_cell_counter', 'rx_data_byte_counter', 'rx_bec_retransmit', 'rx_asyn_fifo_rate', 'rx_crc_errors_counter', 'rx_lfec_fec_correctable_error', 'rx_lfec_fec_uncorrectable_errors', 'rx_dropped_retransmitted_control', 'fsm_state'], name, value)


                                    class History(Entity):
                                        """
                                        
                                        
                                        .. attribute:: history_idx  (key)
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** \-2147483648..2147483647
                                        
                                        .. attribute:: time_stamp
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: admin_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: oper_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: error_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: down_reasons
                                        
                                        	
                                        	**type**\: str
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Detail.Instance.LinkIdxList.History, self).__init__()

                                            self.yang_name = "history"
                                            self.yang_parent_name = "link_idx_list"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['history_idx']
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                                ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                                ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                ('error_state', YLeaf(YType.str, 'error_state')),
                                                ('down_reasons', YLeaf(YType.str, 'down_reasons')),
                                            ])
                                            self.history_idx = None
                                            self.time_stamp = None
                                            self.admin_state = None
                                            self.oper_state = None
                                            self.error_state = None
                                            self.down_reasons = None
                                            self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Detail.Instance.LinkIdxList.History, ['history_idx', 'time_stamp', 'admin_state', 'oper_state', 'error_state', 'down_reasons'], name, value)


                        class Instance(Entity):
                            """
                            
                            
                            .. attribute:: instance_id  (key)
                            
                            	
                            	**type**\: str
                            
                            	**pattern:** [0\-5]\|all
                            
                            .. attribute:: nodeid_str
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: is_show
                            
                            	
                            	**type**\: bool
                            
                            .. attribute:: link_idx_list
                            
                            	
                            	**type**\: list of  		 :py:class:`LinkIdxList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Instance.LinkIdxList>`
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Instance, self).__init__()

                                self.yang_name = "instance"
                                self.yang_parent_name = "tx"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['instance_id']
                                self._child_classes = OrderedDict([("link_idx_list", ("link_idx_list", Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Instance.LinkIdxList))])
                                self._leafs = OrderedDict([
                                    ('instance_id', YLeaf(YType.str, 'instance-id')),
                                    ('nodeid_str', YLeaf(YType.str, 'nodeid_str')),
                                    ('is_show', YLeaf(YType.boolean, 'is_show')),
                                ])
                                self.instance_id = None
                                self.nodeid_str = None
                                self.is_show = None

                                self.link_idx_list = YList(self)
                                self._segment_path = lambda: "instance" + "[instance-id='" + str(self.instance_id) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Instance, ['instance_id', 'nodeid_str', 'is_show'], name, value)


                            class LinkIdxList(Entity):
                                """
                                
                                
                                .. attribute:: link_idx  (key)
                                
                                	
                                	**type**\: int
                                
                                	**range:** \-9223372036854775808..9223372036854775807
                                
                                .. attribute:: link_id_str
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: phy_link
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: speed
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: stage
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: fab_plane
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: fab_group
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: flap_cnt
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: num_admin_shuts
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: admin_state
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: oper_state
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: flags
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: far_end_link_fsdb
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: far_end_link_hw
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: coeff1
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: coeff2
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: tx_control_cells_counter
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: tx_data_cell_counter
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: tx_data_byte_counter
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: tx_bec_retransmit
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: tx_asyn_fifo_rate
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: rx_control_cells_counter
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: rx_data_cell_counter
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: rx_data_byte_counter
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: rx_bec_retransmit
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: rx_asyn_fifo_rate
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: rx_crc_errors_counter
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: rx_lfec_fec_correctable_error
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: rx_lfec_fec_uncorrectable_errors
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: rx_dropped_retransmitted_control
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: fsm_state
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: history
                                
                                	
                                	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Instance.LinkIdxList.History>`
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Instance.LinkIdxList, self).__init__()

                                    self.yang_name = "link_idx_list"
                                    self.yang_parent_name = "instance"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['link_idx']
                                    self._child_classes = OrderedDict([("history", ("history", Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Instance.LinkIdxList.History))])
                                    self._leafs = OrderedDict([
                                        ('link_idx', YLeaf(YType.int64, 'link_idx')),
                                        ('link_id_str', YLeaf(YType.str, 'link_id_str')),
                                        ('phy_link', YLeaf(YType.str, 'phy_link')),
                                        ('speed', YLeaf(YType.str, 'speed')),
                                        ('stage', YLeaf(YType.str, 'stage')),
                                        ('fab_plane', YLeaf(YType.uint32, 'fab_plane')),
                                        ('fab_group', YLeaf(YType.uint32, 'fab_group')),
                                        ('flap_cnt', YLeaf(YType.uint32, 'flap_cnt')),
                                        ('num_admin_shuts', YLeaf(YType.uint32, 'num_admin_shuts')),
                                        ('admin_state', YLeaf(YType.str, 'admin-state')),
                                        ('oper_state', YLeaf(YType.str, 'oper_state')),
                                        ('flags', YLeaf(YType.str, 'flags')),
                                        ('far_end_link_fsdb', YLeaf(YType.str, 'far_end_link_fsdb')),
                                        ('far_end_link_hw', YLeaf(YType.str, 'far_end_link_hw')),
                                        ('coeff1', YLeaf(YType.uint32, 'coeff1')),
                                        ('coeff2', YLeaf(YType.uint32, 'coeff2')),
                                        ('tx_control_cells_counter', YLeaf(YType.uint64, 'TX_Control_cells_counter')),
                                        ('tx_data_cell_counter', YLeaf(YType.uint64, 'TX_Data_cell_counter')),
                                        ('tx_data_byte_counter', YLeaf(YType.uint64, 'TX_Data_byte_counter')),
                                        ('tx_bec_retransmit', YLeaf(YType.uint64, 'TX_BEC_retransmit')),
                                        ('tx_asyn_fifo_rate', YLeaf(YType.uint64, 'TX_Asyn_fifo_rate')),
                                        ('rx_control_cells_counter', YLeaf(YType.uint64, 'RX_Control_cells_counter')),
                                        ('rx_data_cell_counter', YLeaf(YType.uint64, 'RX_Data_cell_counter')),
                                        ('rx_data_byte_counter', YLeaf(YType.uint64, 'RX_Data_byte_counter')),
                                        ('rx_bec_retransmit', YLeaf(YType.uint64, 'RX_BEC_retransmit')),
                                        ('rx_asyn_fifo_rate', YLeaf(YType.uint64, 'RX_Asyn_fifo_rate')),
                                        ('rx_crc_errors_counter', YLeaf(YType.uint64, 'RX_CRC_errors_counter')),
                                        ('rx_lfec_fec_correctable_error', YLeaf(YType.uint64, 'RX_LFEC_FEC_correctable_error')),
                                        ('rx_lfec_fec_uncorrectable_errors', YLeaf(YType.uint64, 'RX_LFEC_FEC_uncorrectable_errors')),
                                        ('rx_dropped_retransmitted_control', YLeaf(YType.uint64, 'RX_dropped_retransmitted_control')),
                                        ('fsm_state', YLeaf(YType.str, 'fsm_state')),
                                    ])
                                    self.link_idx = None
                                    self.link_id_str = None
                                    self.phy_link = None
                                    self.speed = None
                                    self.stage = None
                                    self.fab_plane = None
                                    self.fab_group = None
                                    self.flap_cnt = None
                                    self.num_admin_shuts = None
                                    self.admin_state = None
                                    self.oper_state = None
                                    self.flags = None
                                    self.far_end_link_fsdb = None
                                    self.far_end_link_hw = None
                                    self.coeff1 = None
                                    self.coeff2 = None
                                    self.tx_control_cells_counter = None
                                    self.tx_data_cell_counter = None
                                    self.tx_data_byte_counter = None
                                    self.tx_bec_retransmit = None
                                    self.tx_asyn_fifo_rate = None
                                    self.rx_control_cells_counter = None
                                    self.rx_data_cell_counter = None
                                    self.rx_data_byte_counter = None
                                    self.rx_bec_retransmit = None
                                    self.rx_asyn_fifo_rate = None
                                    self.rx_crc_errors_counter = None
                                    self.rx_lfec_fec_correctable_error = None
                                    self.rx_lfec_fec_uncorrectable_errors = None
                                    self.rx_dropped_retransmitted_control = None
                                    self.fsm_state = None

                                    self.history = YList(self)
                                    self._segment_path = lambda: "link_idx_list" + "[link_idx='" + str(self.link_idx) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Instance.LinkIdxList, ['link_idx', 'link_id_str', 'phy_link', 'speed', 'stage', 'fab_plane', 'fab_group', 'flap_cnt', 'num_admin_shuts', 'admin_state', 'oper_state', 'flags', 'far_end_link_fsdb', 'far_end_link_hw', 'coeff1', 'coeff2', 'tx_control_cells_counter', 'tx_data_cell_counter', 'tx_data_byte_counter', 'tx_bec_retransmit', 'tx_asyn_fifo_rate', 'rx_control_cells_counter', 'rx_data_cell_counter', 'rx_data_byte_counter', 'rx_bec_retransmit', 'rx_asyn_fifo_rate', 'rx_crc_errors_counter', 'rx_lfec_fec_correctable_error', 'rx_lfec_fec_uncorrectable_errors', 'rx_dropped_retransmitted_control', 'fsm_state'], name, value)


                                class History(Entity):
                                    """
                                    
                                    
                                    .. attribute:: history_idx  (key)
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    .. attribute:: time_stamp
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: admin_state
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: oper_state
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: error_state
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: down_reasons
                                    
                                    	
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Instance.LinkIdxList.History, self).__init__()

                                        self.yang_name = "history"
                                        self.yang_parent_name = "link_idx_list"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['history_idx']
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                            ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                            ('admin_state', YLeaf(YType.str, 'admin-state')),
                                            ('oper_state', YLeaf(YType.str, 'oper_state')),
                                            ('error_state', YLeaf(YType.str, 'error_state')),
                                            ('down_reasons', YLeaf(YType.str, 'down_reasons')),
                                        ])
                                        self.history_idx = None
                                        self.time_stamp = None
                                        self.admin_state = None
                                        self.oper_state = None
                                        self.error_state = None
                                        self.down_reasons = None
                                        self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Instance.LinkIdxList.History, ['history_idx', 'time_stamp', 'admin_state', 'oper_state', 'error_state', 'down_reasons'], name, value)


                        class Stats(Entity):
                            """
                            
                            
                            .. attribute:: data
                            
                            	
                            	**type**\:  :py:class:`Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Stats.Data>`
                            
                            .. attribute:: ctrl
                            
                            	
                            	**type**\:  :py:class:`Ctrl <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Stats.Ctrl>`
                            
                            .. attribute:: all
                            
                            	
                            	**type**\:  :py:class:`All <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Stats.All>`
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Stats, self).__init__()

                                self.yang_name = "stats"
                                self.yang_parent_name = "tx"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("data", ("data", Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Stats.Data)), ("ctrl", ("ctrl", Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Stats.Ctrl)), ("all", ("all", Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Stats.All))])
                                self._leafs = OrderedDict()

                                self.data = Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Stats.Data()
                                self.data.parent = self
                                self._children_name_map["data"] = "data"

                                self.ctrl = Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Stats.Ctrl()
                                self.ctrl.parent = self
                                self._children_name_map["ctrl"] = "ctrl"

                                self.all = Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Stats.All()
                                self.all.parent = self
                                self._children_name_map["all"] = "all"
                                self._segment_path = lambda: "stats"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Stats, [], name, value)


                            class Data(Entity):
                                """
                                
                                
                                .. attribute:: instance
                                
                                	
                                	**type**\: list of  		 :py:class:`Instance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Stats.Data.Instance>`
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Stats.Data, self).__init__()

                                    self.yang_name = "data"
                                    self.yang_parent_name = "stats"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([("instance", ("instance", Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Stats.Data.Instance))])
                                    self._leafs = OrderedDict()

                                    self.instance = YList(self)
                                    self._segment_path = lambda: "data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Stats.Data, [], name, value)


                                class Instance(Entity):
                                    """
                                    
                                    
                                    .. attribute:: instance_id  (key)
                                    
                                    	
                                    	**type**\: str
                                    
                                    	**pattern:** [0\-5]\|all
                                    
                                    .. attribute:: nodeid_str
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: is_show
                                    
                                    	
                                    	**type**\: bool
                                    
                                    .. attribute:: link_idx_list
                                    
                                    	
                                    	**type**\: list of  		 :py:class:`LinkIdxList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Stats.Data.Instance.LinkIdxList>`
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Stats.Data.Instance, self).__init__()

                                        self.yang_name = "instance"
                                        self.yang_parent_name = "data"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['instance_id']
                                        self._child_classes = OrderedDict([("link_idx_list", ("link_idx_list", Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Stats.Data.Instance.LinkIdxList))])
                                        self._leafs = OrderedDict([
                                            ('instance_id', YLeaf(YType.str, 'instance-id')),
                                            ('nodeid_str', YLeaf(YType.str, 'nodeid_str')),
                                            ('is_show', YLeaf(YType.boolean, 'is_show')),
                                        ])
                                        self.instance_id = None
                                        self.nodeid_str = None
                                        self.is_show = None

                                        self.link_idx_list = YList(self)
                                        self._segment_path = lambda: "instance" + "[instance-id='" + str(self.instance_id) + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Stats.Data.Instance, ['instance_id', 'nodeid_str', 'is_show'], name, value)


                                    class LinkIdxList(Entity):
                                        """
                                        
                                        
                                        .. attribute:: link_idx  (key)
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** \-9223372036854775808..9223372036854775807
                                        
                                        .. attribute:: link_id_str
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: phy_link
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: speed
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: stage
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: fab_plane
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: fab_group
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: flap_cnt
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: num_admin_shuts
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: admin_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: oper_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: flags
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: far_end_link_fsdb
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: far_end_link_hw
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: coeff1
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: coeff2
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: tx_control_cells_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: tx_data_cell_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: tx_data_byte_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: tx_bec_retransmit
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: tx_asyn_fifo_rate
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_control_cells_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_data_cell_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_data_byte_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_bec_retransmit
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_asyn_fifo_rate
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_crc_errors_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_lfec_fec_correctable_error
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_lfec_fec_uncorrectable_errors
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_dropped_retransmitted_control
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: fsm_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: history
                                        
                                        	
                                        	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Stats.Data.Instance.LinkIdxList.History>`
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Stats.Data.Instance.LinkIdxList, self).__init__()

                                            self.yang_name = "link_idx_list"
                                            self.yang_parent_name = "instance"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['link_idx']
                                            self._child_classes = OrderedDict([("history", ("history", Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Stats.Data.Instance.LinkIdxList.History))])
                                            self._leafs = OrderedDict([
                                                ('link_idx', YLeaf(YType.int64, 'link_idx')),
                                                ('link_id_str', YLeaf(YType.str, 'link_id_str')),
                                                ('phy_link', YLeaf(YType.str, 'phy_link')),
                                                ('speed', YLeaf(YType.str, 'speed')),
                                                ('stage', YLeaf(YType.str, 'stage')),
                                                ('fab_plane', YLeaf(YType.uint32, 'fab_plane')),
                                                ('fab_group', YLeaf(YType.uint32, 'fab_group')),
                                                ('flap_cnt', YLeaf(YType.uint32, 'flap_cnt')),
                                                ('num_admin_shuts', YLeaf(YType.uint32, 'num_admin_shuts')),
                                                ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                ('flags', YLeaf(YType.str, 'flags')),
                                                ('far_end_link_fsdb', YLeaf(YType.str, 'far_end_link_fsdb')),
                                                ('far_end_link_hw', YLeaf(YType.str, 'far_end_link_hw')),
                                                ('coeff1', YLeaf(YType.uint32, 'coeff1')),
                                                ('coeff2', YLeaf(YType.uint32, 'coeff2')),
                                                ('tx_control_cells_counter', YLeaf(YType.uint64, 'TX_Control_cells_counter')),
                                                ('tx_data_cell_counter', YLeaf(YType.uint64, 'TX_Data_cell_counter')),
                                                ('tx_data_byte_counter', YLeaf(YType.uint64, 'TX_Data_byte_counter')),
                                                ('tx_bec_retransmit', YLeaf(YType.uint64, 'TX_BEC_retransmit')),
                                                ('tx_asyn_fifo_rate', YLeaf(YType.uint64, 'TX_Asyn_fifo_rate')),
                                                ('rx_control_cells_counter', YLeaf(YType.uint64, 'RX_Control_cells_counter')),
                                                ('rx_data_cell_counter', YLeaf(YType.uint64, 'RX_Data_cell_counter')),
                                                ('rx_data_byte_counter', YLeaf(YType.uint64, 'RX_Data_byte_counter')),
                                                ('rx_bec_retransmit', YLeaf(YType.uint64, 'RX_BEC_retransmit')),
                                                ('rx_asyn_fifo_rate', YLeaf(YType.uint64, 'RX_Asyn_fifo_rate')),
                                                ('rx_crc_errors_counter', YLeaf(YType.uint64, 'RX_CRC_errors_counter')),
                                                ('rx_lfec_fec_correctable_error', YLeaf(YType.uint64, 'RX_LFEC_FEC_correctable_error')),
                                                ('rx_lfec_fec_uncorrectable_errors', YLeaf(YType.uint64, 'RX_LFEC_FEC_uncorrectable_errors')),
                                                ('rx_dropped_retransmitted_control', YLeaf(YType.uint64, 'RX_dropped_retransmitted_control')),
                                                ('fsm_state', YLeaf(YType.str, 'fsm_state')),
                                            ])
                                            self.link_idx = None
                                            self.link_id_str = None
                                            self.phy_link = None
                                            self.speed = None
                                            self.stage = None
                                            self.fab_plane = None
                                            self.fab_group = None
                                            self.flap_cnt = None
                                            self.num_admin_shuts = None
                                            self.admin_state = None
                                            self.oper_state = None
                                            self.flags = None
                                            self.far_end_link_fsdb = None
                                            self.far_end_link_hw = None
                                            self.coeff1 = None
                                            self.coeff2 = None
                                            self.tx_control_cells_counter = None
                                            self.tx_data_cell_counter = None
                                            self.tx_data_byte_counter = None
                                            self.tx_bec_retransmit = None
                                            self.tx_asyn_fifo_rate = None
                                            self.rx_control_cells_counter = None
                                            self.rx_data_cell_counter = None
                                            self.rx_data_byte_counter = None
                                            self.rx_bec_retransmit = None
                                            self.rx_asyn_fifo_rate = None
                                            self.rx_crc_errors_counter = None
                                            self.rx_lfec_fec_correctable_error = None
                                            self.rx_lfec_fec_uncorrectable_errors = None
                                            self.rx_dropped_retransmitted_control = None
                                            self.fsm_state = None

                                            self.history = YList(self)
                                            self._segment_path = lambda: "link_idx_list" + "[link_idx='" + str(self.link_idx) + "']"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Stats.Data.Instance.LinkIdxList, ['link_idx', 'link_id_str', 'phy_link', 'speed', 'stage', 'fab_plane', 'fab_group', 'flap_cnt', 'num_admin_shuts', 'admin_state', 'oper_state', 'flags', 'far_end_link_fsdb', 'far_end_link_hw', 'coeff1', 'coeff2', 'tx_control_cells_counter', 'tx_data_cell_counter', 'tx_data_byte_counter', 'tx_bec_retransmit', 'tx_asyn_fifo_rate', 'rx_control_cells_counter', 'rx_data_cell_counter', 'rx_data_byte_counter', 'rx_bec_retransmit', 'rx_asyn_fifo_rate', 'rx_crc_errors_counter', 'rx_lfec_fec_correctable_error', 'rx_lfec_fec_uncorrectable_errors', 'rx_dropped_retransmitted_control', 'fsm_state'], name, value)


                                        class History(Entity):
                                            """
                                            
                                            
                                            .. attribute:: history_idx  (key)
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: time_stamp
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: admin_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: oper_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: error_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: down_reasons
                                            
                                            	
                                            	**type**\: str
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Stats.Data.Instance.LinkIdxList.History, self).__init__()

                                                self.yang_name = "history"
                                                self.yang_parent_name = "link_idx_list"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['history_idx']
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                                    ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                                    ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                    ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                    ('error_state', YLeaf(YType.str, 'error_state')),
                                                    ('down_reasons', YLeaf(YType.str, 'down_reasons')),
                                                ])
                                                self.history_idx = None
                                                self.time_stamp = None
                                                self.admin_state = None
                                                self.oper_state = None
                                                self.error_state = None
                                                self.down_reasons = None
                                                self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Stats.Data.Instance.LinkIdxList.History, ['history_idx', 'time_stamp', 'admin_state', 'oper_state', 'error_state', 'down_reasons'], name, value)


                            class Ctrl(Entity):
                                """
                                
                                
                                .. attribute:: instance
                                
                                	
                                	**type**\: list of  		 :py:class:`Instance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Stats.Ctrl.Instance>`
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Stats.Ctrl, self).__init__()

                                    self.yang_name = "ctrl"
                                    self.yang_parent_name = "stats"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([("instance", ("instance", Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Stats.Ctrl.Instance))])
                                    self._leafs = OrderedDict()

                                    self.instance = YList(self)
                                    self._segment_path = lambda: "ctrl"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Stats.Ctrl, [], name, value)


                                class Instance(Entity):
                                    """
                                    
                                    
                                    .. attribute:: instance_id  (key)
                                    
                                    	
                                    	**type**\: str
                                    
                                    	**pattern:** [0\-5]\|all
                                    
                                    .. attribute:: nodeid_str
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: is_show
                                    
                                    	
                                    	**type**\: bool
                                    
                                    .. attribute:: link_idx_list
                                    
                                    	
                                    	**type**\: list of  		 :py:class:`LinkIdxList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Stats.Ctrl.Instance.LinkIdxList>`
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Stats.Ctrl.Instance, self).__init__()

                                        self.yang_name = "instance"
                                        self.yang_parent_name = "ctrl"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['instance_id']
                                        self._child_classes = OrderedDict([("link_idx_list", ("link_idx_list", Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Stats.Ctrl.Instance.LinkIdxList))])
                                        self._leafs = OrderedDict([
                                            ('instance_id', YLeaf(YType.str, 'instance-id')),
                                            ('nodeid_str', YLeaf(YType.str, 'nodeid_str')),
                                            ('is_show', YLeaf(YType.boolean, 'is_show')),
                                        ])
                                        self.instance_id = None
                                        self.nodeid_str = None
                                        self.is_show = None

                                        self.link_idx_list = YList(self)
                                        self._segment_path = lambda: "instance" + "[instance-id='" + str(self.instance_id) + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Stats.Ctrl.Instance, ['instance_id', 'nodeid_str', 'is_show'], name, value)


                                    class LinkIdxList(Entity):
                                        """
                                        
                                        
                                        .. attribute:: link_idx  (key)
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** \-9223372036854775808..9223372036854775807
                                        
                                        .. attribute:: link_id_str
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: phy_link
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: speed
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: stage
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: fab_plane
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: fab_group
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: flap_cnt
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: num_admin_shuts
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: admin_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: oper_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: flags
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: far_end_link_fsdb
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: far_end_link_hw
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: coeff1
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: coeff2
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: tx_control_cells_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: tx_data_cell_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: tx_data_byte_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: tx_bec_retransmit
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: tx_asyn_fifo_rate
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_control_cells_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_data_cell_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_data_byte_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_bec_retransmit
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_asyn_fifo_rate
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_crc_errors_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_lfec_fec_correctable_error
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_lfec_fec_uncorrectable_errors
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_dropped_retransmitted_control
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: fsm_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: history
                                        
                                        	
                                        	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Stats.Ctrl.Instance.LinkIdxList.History>`
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Stats.Ctrl.Instance.LinkIdxList, self).__init__()

                                            self.yang_name = "link_idx_list"
                                            self.yang_parent_name = "instance"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['link_idx']
                                            self._child_classes = OrderedDict([("history", ("history", Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Stats.Ctrl.Instance.LinkIdxList.History))])
                                            self._leafs = OrderedDict([
                                                ('link_idx', YLeaf(YType.int64, 'link_idx')),
                                                ('link_id_str', YLeaf(YType.str, 'link_id_str')),
                                                ('phy_link', YLeaf(YType.str, 'phy_link')),
                                                ('speed', YLeaf(YType.str, 'speed')),
                                                ('stage', YLeaf(YType.str, 'stage')),
                                                ('fab_plane', YLeaf(YType.uint32, 'fab_plane')),
                                                ('fab_group', YLeaf(YType.uint32, 'fab_group')),
                                                ('flap_cnt', YLeaf(YType.uint32, 'flap_cnt')),
                                                ('num_admin_shuts', YLeaf(YType.uint32, 'num_admin_shuts')),
                                                ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                ('flags', YLeaf(YType.str, 'flags')),
                                                ('far_end_link_fsdb', YLeaf(YType.str, 'far_end_link_fsdb')),
                                                ('far_end_link_hw', YLeaf(YType.str, 'far_end_link_hw')),
                                                ('coeff1', YLeaf(YType.uint32, 'coeff1')),
                                                ('coeff2', YLeaf(YType.uint32, 'coeff2')),
                                                ('tx_control_cells_counter', YLeaf(YType.uint64, 'TX_Control_cells_counter')),
                                                ('tx_data_cell_counter', YLeaf(YType.uint64, 'TX_Data_cell_counter')),
                                                ('tx_data_byte_counter', YLeaf(YType.uint64, 'TX_Data_byte_counter')),
                                                ('tx_bec_retransmit', YLeaf(YType.uint64, 'TX_BEC_retransmit')),
                                                ('tx_asyn_fifo_rate', YLeaf(YType.uint64, 'TX_Asyn_fifo_rate')),
                                                ('rx_control_cells_counter', YLeaf(YType.uint64, 'RX_Control_cells_counter')),
                                                ('rx_data_cell_counter', YLeaf(YType.uint64, 'RX_Data_cell_counter')),
                                                ('rx_data_byte_counter', YLeaf(YType.uint64, 'RX_Data_byte_counter')),
                                                ('rx_bec_retransmit', YLeaf(YType.uint64, 'RX_BEC_retransmit')),
                                                ('rx_asyn_fifo_rate', YLeaf(YType.uint64, 'RX_Asyn_fifo_rate')),
                                                ('rx_crc_errors_counter', YLeaf(YType.uint64, 'RX_CRC_errors_counter')),
                                                ('rx_lfec_fec_correctable_error', YLeaf(YType.uint64, 'RX_LFEC_FEC_correctable_error')),
                                                ('rx_lfec_fec_uncorrectable_errors', YLeaf(YType.uint64, 'RX_LFEC_FEC_uncorrectable_errors')),
                                                ('rx_dropped_retransmitted_control', YLeaf(YType.uint64, 'RX_dropped_retransmitted_control')),
                                                ('fsm_state', YLeaf(YType.str, 'fsm_state')),
                                            ])
                                            self.link_idx = None
                                            self.link_id_str = None
                                            self.phy_link = None
                                            self.speed = None
                                            self.stage = None
                                            self.fab_plane = None
                                            self.fab_group = None
                                            self.flap_cnt = None
                                            self.num_admin_shuts = None
                                            self.admin_state = None
                                            self.oper_state = None
                                            self.flags = None
                                            self.far_end_link_fsdb = None
                                            self.far_end_link_hw = None
                                            self.coeff1 = None
                                            self.coeff2 = None
                                            self.tx_control_cells_counter = None
                                            self.tx_data_cell_counter = None
                                            self.tx_data_byte_counter = None
                                            self.tx_bec_retransmit = None
                                            self.tx_asyn_fifo_rate = None
                                            self.rx_control_cells_counter = None
                                            self.rx_data_cell_counter = None
                                            self.rx_data_byte_counter = None
                                            self.rx_bec_retransmit = None
                                            self.rx_asyn_fifo_rate = None
                                            self.rx_crc_errors_counter = None
                                            self.rx_lfec_fec_correctable_error = None
                                            self.rx_lfec_fec_uncorrectable_errors = None
                                            self.rx_dropped_retransmitted_control = None
                                            self.fsm_state = None

                                            self.history = YList(self)
                                            self._segment_path = lambda: "link_idx_list" + "[link_idx='" + str(self.link_idx) + "']"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Stats.Ctrl.Instance.LinkIdxList, ['link_idx', 'link_id_str', 'phy_link', 'speed', 'stage', 'fab_plane', 'fab_group', 'flap_cnt', 'num_admin_shuts', 'admin_state', 'oper_state', 'flags', 'far_end_link_fsdb', 'far_end_link_hw', 'coeff1', 'coeff2', 'tx_control_cells_counter', 'tx_data_cell_counter', 'tx_data_byte_counter', 'tx_bec_retransmit', 'tx_asyn_fifo_rate', 'rx_control_cells_counter', 'rx_data_cell_counter', 'rx_data_byte_counter', 'rx_bec_retransmit', 'rx_asyn_fifo_rate', 'rx_crc_errors_counter', 'rx_lfec_fec_correctable_error', 'rx_lfec_fec_uncorrectable_errors', 'rx_dropped_retransmitted_control', 'fsm_state'], name, value)


                                        class History(Entity):
                                            """
                                            
                                            
                                            .. attribute:: history_idx  (key)
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: time_stamp
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: admin_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: oper_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: error_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: down_reasons
                                            
                                            	
                                            	**type**\: str
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Stats.Ctrl.Instance.LinkIdxList.History, self).__init__()

                                                self.yang_name = "history"
                                                self.yang_parent_name = "link_idx_list"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['history_idx']
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                                    ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                                    ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                    ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                    ('error_state', YLeaf(YType.str, 'error_state')),
                                                    ('down_reasons', YLeaf(YType.str, 'down_reasons')),
                                                ])
                                                self.history_idx = None
                                                self.time_stamp = None
                                                self.admin_state = None
                                                self.oper_state = None
                                                self.error_state = None
                                                self.down_reasons = None
                                                self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Stats.Ctrl.Instance.LinkIdxList.History, ['history_idx', 'time_stamp', 'admin_state', 'oper_state', 'error_state', 'down_reasons'], name, value)


                            class All(Entity):
                                """
                                
                                
                                .. attribute:: instance
                                
                                	
                                	**type**\: list of  		 :py:class:`Instance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Stats.All.Instance>`
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Stats.All, self).__init__()

                                    self.yang_name = "all"
                                    self.yang_parent_name = "stats"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([("instance", ("instance", Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Stats.All.Instance))])
                                    self._leafs = OrderedDict()

                                    self.instance = YList(self)
                                    self._segment_path = lambda: "all"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Stats.All, [], name, value)


                                class Instance(Entity):
                                    """
                                    
                                    
                                    .. attribute:: instance_id  (key)
                                    
                                    	
                                    	**type**\: str
                                    
                                    	**pattern:** [0\-5]\|all
                                    
                                    .. attribute:: nodeid_str
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: is_show
                                    
                                    	
                                    	**type**\: bool
                                    
                                    .. attribute:: link_idx_list
                                    
                                    	
                                    	**type**\: list of  		 :py:class:`LinkIdxList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Stats.All.Instance.LinkIdxList>`
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Stats.All.Instance, self).__init__()

                                        self.yang_name = "instance"
                                        self.yang_parent_name = "all"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['instance_id']
                                        self._child_classes = OrderedDict([("link_idx_list", ("link_idx_list", Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Stats.All.Instance.LinkIdxList))])
                                        self._leafs = OrderedDict([
                                            ('instance_id', YLeaf(YType.str, 'instance-id')),
                                            ('nodeid_str', YLeaf(YType.str, 'nodeid_str')),
                                            ('is_show', YLeaf(YType.boolean, 'is_show')),
                                        ])
                                        self.instance_id = None
                                        self.nodeid_str = None
                                        self.is_show = None

                                        self.link_idx_list = YList(self)
                                        self._segment_path = lambda: "instance" + "[instance-id='" + str(self.instance_id) + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Stats.All.Instance, ['instance_id', 'nodeid_str', 'is_show'], name, value)


                                    class LinkIdxList(Entity):
                                        """
                                        
                                        
                                        .. attribute:: link_idx  (key)
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** \-9223372036854775808..9223372036854775807
                                        
                                        .. attribute:: link_id_str
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: phy_link
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: speed
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: stage
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: fab_plane
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: fab_group
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: flap_cnt
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: num_admin_shuts
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: admin_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: oper_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: flags
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: far_end_link_fsdb
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: far_end_link_hw
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: coeff1
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: coeff2
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: tx_control_cells_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: tx_data_cell_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: tx_data_byte_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: tx_bec_retransmit
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: tx_asyn_fifo_rate
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_control_cells_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_data_cell_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_data_byte_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_bec_retransmit
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_asyn_fifo_rate
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_crc_errors_counter
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_lfec_fec_correctable_error
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_lfec_fec_uncorrectable_errors
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: rx_dropped_retransmitted_control
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: fsm_state
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: history
                                        
                                        	
                                        	**type**\: list of  		 :py:class:`History <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Stats.All.Instance.LinkIdxList.History>`
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Stats.All.Instance.LinkIdxList, self).__init__()

                                            self.yang_name = "link_idx_list"
                                            self.yang_parent_name = "instance"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['link_idx']
                                            self._child_classes = OrderedDict([("history", ("history", Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Stats.All.Instance.LinkIdxList.History))])
                                            self._leafs = OrderedDict([
                                                ('link_idx', YLeaf(YType.int64, 'link_idx')),
                                                ('link_id_str', YLeaf(YType.str, 'link_id_str')),
                                                ('phy_link', YLeaf(YType.str, 'phy_link')),
                                                ('speed', YLeaf(YType.str, 'speed')),
                                                ('stage', YLeaf(YType.str, 'stage')),
                                                ('fab_plane', YLeaf(YType.uint32, 'fab_plane')),
                                                ('fab_group', YLeaf(YType.uint32, 'fab_group')),
                                                ('flap_cnt', YLeaf(YType.uint32, 'flap_cnt')),
                                                ('num_admin_shuts', YLeaf(YType.uint32, 'num_admin_shuts')),
                                                ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                ('flags', YLeaf(YType.str, 'flags')),
                                                ('far_end_link_fsdb', YLeaf(YType.str, 'far_end_link_fsdb')),
                                                ('far_end_link_hw', YLeaf(YType.str, 'far_end_link_hw')),
                                                ('coeff1', YLeaf(YType.uint32, 'coeff1')),
                                                ('coeff2', YLeaf(YType.uint32, 'coeff2')),
                                                ('tx_control_cells_counter', YLeaf(YType.uint64, 'TX_Control_cells_counter')),
                                                ('tx_data_cell_counter', YLeaf(YType.uint64, 'TX_Data_cell_counter')),
                                                ('tx_data_byte_counter', YLeaf(YType.uint64, 'TX_Data_byte_counter')),
                                                ('tx_bec_retransmit', YLeaf(YType.uint64, 'TX_BEC_retransmit')),
                                                ('tx_asyn_fifo_rate', YLeaf(YType.uint64, 'TX_Asyn_fifo_rate')),
                                                ('rx_control_cells_counter', YLeaf(YType.uint64, 'RX_Control_cells_counter')),
                                                ('rx_data_cell_counter', YLeaf(YType.uint64, 'RX_Data_cell_counter')),
                                                ('rx_data_byte_counter', YLeaf(YType.uint64, 'RX_Data_byte_counter')),
                                                ('rx_bec_retransmit', YLeaf(YType.uint64, 'RX_BEC_retransmit')),
                                                ('rx_asyn_fifo_rate', YLeaf(YType.uint64, 'RX_Asyn_fifo_rate')),
                                                ('rx_crc_errors_counter', YLeaf(YType.uint64, 'RX_CRC_errors_counter')),
                                                ('rx_lfec_fec_correctable_error', YLeaf(YType.uint64, 'RX_LFEC_FEC_correctable_error')),
                                                ('rx_lfec_fec_uncorrectable_errors', YLeaf(YType.uint64, 'RX_LFEC_FEC_uncorrectable_errors')),
                                                ('rx_dropped_retransmitted_control', YLeaf(YType.uint64, 'RX_dropped_retransmitted_control')),
                                                ('fsm_state', YLeaf(YType.str, 'fsm_state')),
                                            ])
                                            self.link_idx = None
                                            self.link_id_str = None
                                            self.phy_link = None
                                            self.speed = None
                                            self.stage = None
                                            self.fab_plane = None
                                            self.fab_group = None
                                            self.flap_cnt = None
                                            self.num_admin_shuts = None
                                            self.admin_state = None
                                            self.oper_state = None
                                            self.flags = None
                                            self.far_end_link_fsdb = None
                                            self.far_end_link_hw = None
                                            self.coeff1 = None
                                            self.coeff2 = None
                                            self.tx_control_cells_counter = None
                                            self.tx_data_cell_counter = None
                                            self.tx_data_byte_counter = None
                                            self.tx_bec_retransmit = None
                                            self.tx_asyn_fifo_rate = None
                                            self.rx_control_cells_counter = None
                                            self.rx_data_cell_counter = None
                                            self.rx_data_byte_counter = None
                                            self.rx_bec_retransmit = None
                                            self.rx_asyn_fifo_rate = None
                                            self.rx_crc_errors_counter = None
                                            self.rx_lfec_fec_correctable_error = None
                                            self.rx_lfec_fec_uncorrectable_errors = None
                                            self.rx_dropped_retransmitted_control = None
                                            self.fsm_state = None

                                            self.history = YList(self)
                                            self._segment_path = lambda: "link_idx_list" + "[link_idx='" + str(self.link_idx) + "']"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Stats.All.Instance.LinkIdxList, ['link_idx', 'link_id_str', 'phy_link', 'speed', 'stage', 'fab_plane', 'fab_group', 'flap_cnt', 'num_admin_shuts', 'admin_state', 'oper_state', 'flags', 'far_end_link_fsdb', 'far_end_link_hw', 'coeff1', 'coeff2', 'tx_control_cells_counter', 'tx_data_cell_counter', 'tx_data_byte_counter', 'tx_bec_retransmit', 'tx_asyn_fifo_rate', 'rx_control_cells_counter', 'rx_data_cell_counter', 'rx_data_byte_counter', 'rx_bec_retransmit', 'rx_asyn_fifo_rate', 'rx_crc_errors_counter', 'rx_lfec_fec_correctable_error', 'rx_lfec_fec_uncorrectable_errors', 'rx_dropped_retransmitted_control', 'fsm_state'], name, value)


                                        class History(Entity):
                                            """
                                            
                                            
                                            .. attribute:: history_idx  (key)
                                            
                                            	
                                            	**type**\: int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: time_stamp
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: admin_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: oper_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: error_state
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: down_reasons
                                            
                                            	
                                            	**type**\: str
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Stats.All.Instance.LinkIdxList.History, self).__init__()

                                                self.yang_name = "history"
                                                self.yang_parent_name = "link_idx_list"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['history_idx']
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('history_idx', YLeaf(YType.int32, 'history_idx')),
                                                    ('time_stamp', YLeaf(YType.str, 'time_stamp')),
                                                    ('admin_state', YLeaf(YType.str, 'admin-state')),
                                                    ('oper_state', YLeaf(YType.str, 'oper_state')),
                                                    ('error_state', YLeaf(YType.str, 'error_state')),
                                                    ('down_reasons', YLeaf(YType.str, 'down_reasons')),
                                                ])
                                                self.history_idx = None
                                                self.time_stamp = None
                                                self.admin_state = None
                                                self.oper_state = None
                                                self.error_state = None
                                                self.down_reasons = None
                                                self._segment_path = lambda: "history" + "[history_idx='" + str(self.history_idx) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.SfeOper.Sfe.LinkInfo.Location.Tx.Stats.All.Instance.LinkIdxList.History, ['history_idx', 'time_stamp', 'admin_state', 'oper_state', 'error_state', 'down_reasons'], name, value)


            class Diagshell(Entity):
                """
                
                
                .. attribute:: location
                
                	
                	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.Diagshell.Location>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Controller.SfeOper.Sfe.Diagshell, self).__init__()

                    self.yang_name = "diagshell"
                    self.yang_parent_name = "sfe"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("location", ("location", Controller.SfeOper.Sfe.Diagshell.Location))])
                    self._leafs = OrderedDict()

                    self.location = YList(self)
                    self._segment_path = lambda: "diagshell"
                    self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/sfe_oper/sfe/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Controller.SfeOper.Sfe.Diagshell, [], name, value)


                class Location(Entity):
                    """
                    
                    
                    .. attribute:: loc_str  (key)
                    
                    	
                    	**type**\: str
                    
                    	**pattern:** ((0?[0\-9]\|1[0\-5])/([F\|f][C\|c](0?[0\-5])))\|(([F\|f][0\-3])/([F\|f][C\|c](0?[0\-9]\|1[0\-1])))
                    
                    .. attribute:: description
                    
                    	
                    	**type**\: str
                    
                    	**default value**\: location (R/S)
                    
                    .. attribute:: instance
                    
                    	
                    	**type**\: list of  		 :py:class:`Instance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.Diagshell.Location.Instance>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.SfeOper.Sfe.Diagshell.Location, self).__init__()

                        self.yang_name = "location"
                        self.yang_parent_name = "diagshell"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['loc_str']
                        self._child_classes = OrderedDict([("instance", ("instance", Controller.SfeOper.Sfe.Diagshell.Location.Instance))])
                        self._leafs = OrderedDict([
                            ('loc_str', YLeaf(YType.str, 'loc_str')),
                            ('description', YLeaf(YType.str, 'description')),
                        ])
                        self.loc_str = None
                        self.description = None

                        self.instance = YList(self)
                        self._segment_path = lambda: "location" + "[loc_str='" + str(self.loc_str) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/sfe_oper/sfe/diagshell/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.SfeOper.Sfe.Diagshell.Location, ['loc_str', 'description'], name, value)


                    class Instance(Entity):
                        """
                        
                        
                        .. attribute:: instance_num  (key)
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..5
                        
                        .. attribute:: diag_cmd
                        
                        	
                        	**type**\: list of  		 :py:class:`DiagCmd <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.Diagshell.Location.Instance.DiagCmd>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.SfeOper.Sfe.Diagshell.Location.Instance, self).__init__()

                            self.yang_name = "instance"
                            self.yang_parent_name = "location"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['instance_num']
                            self._child_classes = OrderedDict([("diag_cmd", ("diag_cmd", Controller.SfeOper.Sfe.Diagshell.Location.Instance.DiagCmd))])
                            self._leafs = OrderedDict([
                                ('instance_num', YLeaf(YType.int32, 'instance_num')),
                            ])
                            self.instance_num = None

                            self.diag_cmd = YList(self)
                            self._segment_path = lambda: "instance" + "[instance_num='" + str(self.instance_num) + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.SfeOper.Sfe.Diagshell.Location.Instance, ['instance_num'], name, value)


                        class DiagCmd(Entity):
                            """
                            
                            
                            .. attribute:: cmd_str  (key)
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: bytes
                            
                            	
                            	**type**\: list of  		 :py:class:`Bytes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.Diagshell.Location.Instance.DiagCmd.Bytes>`
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.SfeOper.Sfe.Diagshell.Location.Instance.DiagCmd, self).__init__()

                                self.yang_name = "diag_cmd"
                                self.yang_parent_name = "instance"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['cmd_str']
                                self._child_classes = OrderedDict([("bytes", ("bytes", Controller.SfeOper.Sfe.Diagshell.Location.Instance.DiagCmd.Bytes))])
                                self._leafs = OrderedDict([
                                    ('cmd_str', YLeaf(YType.str, 'cmd_str')),
                                ])
                                self.cmd_str = None

                                self.bytes = YList(self)
                                self._segment_path = lambda: "diag_cmd" + "[cmd_str='" + str(self.cmd_str) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.SfeOper.Sfe.Diagshell.Location.Instance.DiagCmd, ['cmd_str'], name, value)


                            class Bytes(Entity):
                                """
                                
                                
                                .. attribute:: byte_idx  (key)
                                
                                	
                                	**type**\: int
                                
                                	**range:** \-9223372036854775808..9223372036854775807
                                
                                .. attribute:: data
                                
                                	
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.SfeOper.Sfe.Diagshell.Location.Instance.DiagCmd.Bytes, self).__init__()

                                    self.yang_name = "bytes"
                                    self.yang_parent_name = "diag_cmd"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['byte_idx']
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('byte_idx', YLeaf(YType.int64, 'byte_idx')),
                                        ('data', YLeaf(YType.str, 'data')),
                                    ])
                                    self.byte_idx = None
                                    self.data = None
                                    self._segment_path = lambda: "bytes" + "[byte_idx='" + str(self.byte_idx) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.SfeOper.Sfe.Diagshell.Location.Instance.DiagCmd.Bytes, ['byte_idx', 'data'], name, value)


            class Register(Entity):
                """
                
                
                .. attribute:: location
                
                	
                	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.Register.Location>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Controller.SfeOper.Sfe.Register, self).__init__()

                    self.yang_name = "register"
                    self.yang_parent_name = "sfe"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("location", ("location", Controller.SfeOper.Sfe.Register.Location))])
                    self._leafs = OrderedDict()

                    self.location = YList(self)
                    self._segment_path = lambda: "register"
                    self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/sfe_oper/sfe/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Controller.SfeOper.Sfe.Register, [], name, value)


                class Location(Entity):
                    """
                    
                    
                    .. attribute:: loc_str  (key)
                    
                    	
                    	**type**\: str
                    
                    	**pattern:** ((0?[0\-9]\|1[0\-5])/([F\|f][C\|c](0?[0\-5])))\|(([F\|f][0\-3])/([F\|f][C\|c](0?[0\-9]\|1[0\-1])))
                    
                    .. attribute:: description
                    
                    	
                    	**type**\: str
                    
                    	**default value**\: location (R/S)
                    
                    .. attribute:: instance
                    
                    	
                    	**type**\: list of  		 :py:class:`Instance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.Register.Location.Instance>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.SfeOper.Sfe.Register.Location, self).__init__()

                        self.yang_name = "location"
                        self.yang_parent_name = "register"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['loc_str']
                        self._child_classes = OrderedDict([("instance", ("instance", Controller.SfeOper.Sfe.Register.Location.Instance))])
                        self._leafs = OrderedDict([
                            ('loc_str', YLeaf(YType.str, 'loc_str')),
                            ('description', YLeaf(YType.str, 'description')),
                        ])
                        self.loc_str = None
                        self.description = None

                        self.instance = YList(self)
                        self._segment_path = lambda: "location" + "[loc_str='" + str(self.loc_str) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/sfe_oper/sfe/register/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.SfeOper.Sfe.Register.Location, ['loc_str', 'description'], name, value)


                    class Instance(Entity):
                        """
                        
                        
                        .. attribute:: instance_num  (key)
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..5
                        
                        .. attribute:: bytes
                        
                        	
                        	**type**\: list of  		 :py:class:`Bytes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.Register.Location.Instance.Bytes>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.SfeOper.Sfe.Register.Location.Instance, self).__init__()

                            self.yang_name = "instance"
                            self.yang_parent_name = "location"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['instance_num']
                            self._child_classes = OrderedDict([("bytes", ("bytes", Controller.SfeOper.Sfe.Register.Location.Instance.Bytes))])
                            self._leafs = OrderedDict([
                                ('instance_num', YLeaf(YType.int32, 'instance_num')),
                            ])
                            self.instance_num = None

                            self.bytes = YList(self)
                            self._segment_path = lambda: "instance" + "[instance_num='" + str(self.instance_num) + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.SfeOper.Sfe.Register.Location.Instance, ['instance_num'], name, value)


                        class Bytes(Entity):
                            """
                            
                            
                            .. attribute:: byte_idx  (key)
                            
                            	
                            	**type**\: int
                            
                            	**range:** \-9223372036854775808..9223372036854775807
                            
                            .. attribute:: data
                            
                            	
                            	**type**\: str
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.SfeOper.Sfe.Register.Location.Instance.Bytes, self).__init__()

                                self.yang_name = "bytes"
                                self.yang_parent_name = "instance"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['byte_idx']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('byte_idx', YLeaf(YType.int64, 'byte_idx')),
                                    ('data', YLeaf(YType.str, 'data')),
                                ])
                                self.byte_idx = None
                                self.data = None
                                self._segment_path = lambda: "bytes" + "[byte_idx='" + str(self.byte_idx) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.SfeOper.Sfe.Register.Location.Instance.Bytes, ['byte_idx', 'data'], name, value)


            class DumpFile(Entity):
                """
                
                
                .. attribute:: location
                
                	
                	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.DumpFile.Location>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Controller.SfeOper.Sfe.DumpFile, self).__init__()

                    self.yang_name = "dump-file"
                    self.yang_parent_name = "sfe"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("location", ("location", Controller.SfeOper.Sfe.DumpFile.Location))])
                    self._leafs = OrderedDict()

                    self.location = YList(self)
                    self._segment_path = lambda: "dump-file"
                    self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/sfe_oper/sfe/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Controller.SfeOper.Sfe.DumpFile, [], name, value)


                class Location(Entity):
                    """
                    
                    
                    .. attribute:: loc_str  (key)
                    
                    	
                    	**type**\: str
                    
                    	**pattern:** ((0?[0\-9]\|1[0\-5])/([F\|f][C\|c](0?[0\-5])))\|(([F\|f][0\-3])/([F\|f][C\|c](0?[0\-9]\|1[0\-1])))
                    
                    .. attribute:: description
                    
                    	
                    	**type**\: str
                    
                    	**default value**\: location (R/S)
                    
                    .. attribute:: file
                    
                    	
                    	**type**\: list of  		 :py:class:`File <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.DumpFile.Location.File>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.SfeOper.Sfe.DumpFile.Location, self).__init__()

                        self.yang_name = "location"
                        self.yang_parent_name = "dump-file"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['loc_str']
                        self._child_classes = OrderedDict([("file", ("file", Controller.SfeOper.Sfe.DumpFile.Location.File))])
                        self._leafs = OrderedDict([
                            ('loc_str', YLeaf(YType.str, 'loc_str')),
                            ('description', YLeaf(YType.str, 'description')),
                        ])
                        self.loc_str = None
                        self.description = None

                        self.file = YList(self)
                        self._segment_path = lambda: "location" + "[loc_str='" + str(self.loc_str) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/sfe_oper/sfe/dump-file/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.SfeOper.Sfe.DumpFile.Location, ['loc_str', 'description'], name, value)


                    class File(Entity):
                        """
                        
                        
                        .. attribute:: file_name  (key)
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: bytes
                        
                        	
                        	**type**\: list of  		 :py:class:`Bytes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.DumpFile.Location.File.Bytes>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.SfeOper.Sfe.DumpFile.Location.File, self).__init__()

                            self.yang_name = "file"
                            self.yang_parent_name = "location"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['file_name']
                            self._child_classes = OrderedDict([("bytes", ("bytes", Controller.SfeOper.Sfe.DumpFile.Location.File.Bytes))])
                            self._leafs = OrderedDict([
                                ('file_name', YLeaf(YType.str, 'file_name')),
                            ])
                            self.file_name = None

                            self.bytes = YList(self)
                            self._segment_path = lambda: "file" + "[file_name='" + str(self.file_name) + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.SfeOper.Sfe.DumpFile.Location.File, ['file_name'], name, value)


                        class Bytes(Entity):
                            """
                            
                            
                            .. attribute:: byte_idx  (key)
                            
                            	
                            	**type**\: int
                            
                            	**range:** \-9223372036854775808..9223372036854775807
                            
                            .. attribute:: data
                            
                            	
                            	**type**\: str
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.SfeOper.Sfe.DumpFile.Location.File.Bytes, self).__init__()

                                self.yang_name = "bytes"
                                self.yang_parent_name = "file"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['byte_idx']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('byte_idx', YLeaf(YType.int64, 'byte_idx')),
                                    ('data', YLeaf(YType.str, 'data')),
                                ])
                                self.byte_idx = None
                                self.data = None
                                self._segment_path = lambda: "bytes" + "[byte_idx='" + str(self.byte_idx) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.SfeOper.Sfe.DumpFile.Location.File.Bytes, ['byte_idx', 'data'], name, value)


            class Parse(Entity):
                """
                
                
                .. attribute:: location
                
                	
                	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.Parse.Location>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Controller.SfeOper.Sfe.Parse, self).__init__()

                    self.yang_name = "parse"
                    self.yang_parent_name = "sfe"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("location", ("location", Controller.SfeOper.Sfe.Parse.Location))])
                    self._leafs = OrderedDict()

                    self.location = YList(self)
                    self._segment_path = lambda: "parse"
                    self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/sfe_oper/sfe/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Controller.SfeOper.Sfe.Parse, [], name, value)


                class Location(Entity):
                    """
                    
                    
                    .. attribute:: loc_str  (key)
                    
                    	
                    	**type**\: str
                    
                    	**pattern:** ((0?[0\-9]\|1[0\-5])/([F\|f][C\|c](0?[0\-5])))\|(([F\|f][0\-3])/([F\|f][C\|c](0?[0\-9]\|1[0\-1])))
                    
                    .. attribute:: description
                    
                    	
                    	**type**\: str
                    
                    	**default value**\: location (R/S)
                    
                    .. attribute:: link
                    
                    	
                    	**type**\: list of  		 :py:class:`Link <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.Parse.Location.Link>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.SfeOper.Sfe.Parse.Location, self).__init__()

                        self.yang_name = "location"
                        self.yang_parent_name = "parse"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['loc_str']
                        self._child_classes = OrderedDict([("link", ("link", Controller.SfeOper.Sfe.Parse.Location.Link))])
                        self._leafs = OrderedDict([
                            ('loc_str', YLeaf(YType.str, 'loc_str')),
                            ('description', YLeaf(YType.str, 'description')),
                        ])
                        self.loc_str = None
                        self.description = None

                        self.link = YList(self)
                        self._segment_path = lambda: "location" + "[loc_str='" + str(self.loc_str) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/sfe_oper/sfe/parse/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.SfeOper.Sfe.Parse.Location, ['loc_str', 'description'], name, value)


                    class Link(Entity):
                        """
                        
                        
                        .. attribute:: start  (key)
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..143
                        
                        .. attribute:: end  (key)
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..143
                        
                        .. attribute:: instance
                        
                        	
                        	**type**\: list of  		 :py:class:`Instance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.Parse.Location.Link.Instance>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.SfeOper.Sfe.Parse.Location.Link, self).__init__()

                            self.yang_name = "link"
                            self.yang_parent_name = "location"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['start','end']
                            self._child_classes = OrderedDict([("instance", ("instance", Controller.SfeOper.Sfe.Parse.Location.Link.Instance))])
                            self._leafs = OrderedDict([
                                ('start', YLeaf(YType.int32, 'start')),
                                ('end', YLeaf(YType.int32, 'end')),
                            ])
                            self.start = None
                            self.end = None

                            self.instance = YList(self)
                            self._segment_path = lambda: "link" + "[start='" + str(self.start) + "']" + "[end='" + str(self.end) + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.SfeOper.Sfe.Parse.Location.Link, ['start', 'end'], name, value)


                        class Instance(Entity):
                            """
                            
                            
                            .. attribute:: instance_id  (key)
                            
                            	
                            	**type**\: str
                            
                            	**pattern:** [0\-5]\|all
                            
                            .. attribute:: is_show
                            
                            	
                            	**type**\: bool
                            
                            .. attribute:: link_idx_list
                            
                            	
                            	**type**\: list of  		 :py:class:`LinkIdxList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.Sfe.Parse.Location.Link.Instance.LinkIdxList>`
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.SfeOper.Sfe.Parse.Location.Link.Instance, self).__init__()

                                self.yang_name = "instance"
                                self.yang_parent_name = "link"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['instance_id']
                                self._child_classes = OrderedDict([("link_idx_list", ("link_idx_list", Controller.SfeOper.Sfe.Parse.Location.Link.Instance.LinkIdxList))])
                                self._leafs = OrderedDict([
                                    ('instance_id', YLeaf(YType.str, 'instance-id')),
                                    ('is_show', YLeaf(YType.boolean, 'is_show')),
                                ])
                                self.instance_id = None
                                self.is_show = None

                                self.link_idx_list = YList(self)
                                self._segment_path = lambda: "instance" + "[instance-id='" + str(self.instance_id) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.SfeOper.Sfe.Parse.Location.Link.Instance, ['instance_id', 'is_show'], name, value)


                            class LinkIdxList(Entity):
                                """
                                
                                
                                .. attribute:: link_idx  (key)
                                
                                	
                                	**type**\: int
                                
                                	**range:** \-9223372036854775808..9223372036854775807
                                
                                .. attribute:: rack_id_str
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: slot_id_str
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: asic_inst_id
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: link_num_id
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: log_slot
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: phy_slot
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: fap_id
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: unit
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: sfi_id
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ip_addr
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: driver_run
                                
                                	
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.SfeOper.Sfe.Parse.Location.Link.Instance.LinkIdxList, self).__init__()

                                    self.yang_name = "link_idx_list"
                                    self.yang_parent_name = "instance"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['link_idx']
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('link_idx', YLeaf(YType.int64, 'link_idx')),
                                        ('rack_id_str', YLeaf(YType.str, 'rack_id_str')),
                                        ('slot_id_str', YLeaf(YType.str, 'slot_id_str')),
                                        ('asic_inst_id', YLeaf(YType.uint32, 'asic_inst_id')),
                                        ('link_num_id', YLeaf(YType.uint32, 'link_num_id')),
                                        ('log_slot', YLeaf(YType.uint32, 'log_slot')),
                                        ('phy_slot', YLeaf(YType.uint32, 'phy_slot')),
                                        ('fap_id', YLeaf(YType.uint32, 'fap_id')),
                                        ('unit', YLeaf(YType.uint32, 'unit')),
                                        ('sfi_id', YLeaf(YType.uint32, 'sfi_id')),
                                        ('ip_addr', YLeaf(YType.str, 'ip_addr')),
                                        ('driver_run', YLeaf(YType.str, 'driver_run')),
                                    ])
                                    self.link_idx = None
                                    self.rack_id_str = None
                                    self.slot_id_str = None
                                    self.asic_inst_id = None
                                    self.link_num_id = None
                                    self.log_slot = None
                                    self.phy_slot = None
                                    self.fap_id = None
                                    self.unit = None
                                    self.sfi_id = None
                                    self.ip_addr = None
                                    self.driver_run = None
                                    self._segment_path = lambda: "link_idx_list" + "[link_idx='" + str(self.link_idx) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.SfeOper.Sfe.Parse.Location.Link.Instance.LinkIdxList, ['link_idx', 'rack_id_str', 'slot_id_str', 'asic_inst_id', 'link_num_id', 'log_slot', 'phy_slot', 'fap_id', 'unit', 'sfi_id', 'ip_addr', 'driver_run'], name, value)


        class SfeTrace(Entity):
            """
            
            
            .. attribute:: sfe_driver
            
            	
            	**type**\:  :py:class:`SfeDriver <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.SfeTrace.SfeDriver>`
            
            

            """

            _prefix = 'calvados_controllers'
            _revision = '2017-01-31'

            def __init__(self):
                super(Controller.SfeOper.SfeTrace, self).__init__()

                self.yang_name = "sfe_trace"
                self.yang_parent_name = "sfe_oper"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("sfe_driver", ("sfe_driver", Controller.SfeOper.SfeTrace.SfeDriver))])
                self._leafs = OrderedDict()

                self.sfe_driver = Controller.SfeOper.SfeTrace.SfeDriver()
                self.sfe_driver.parent = self
                self._children_name_map["sfe_driver"] = "sfe_driver"
                self._segment_path = lambda: "sfe_trace"
                self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/sfe_oper/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Controller.SfeOper.SfeTrace, [], name, value)


            class SfeDriver(Entity):
                """
                
                
                .. attribute:: trace
                
                	show traceable processes
                	**type**\: list of  		 :py:class:`Trace <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.SfeTrace.SfeDriver.Trace>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Controller.SfeOper.SfeTrace.SfeDriver, self).__init__()

                    self.yang_name = "sfe_driver"
                    self.yang_parent_name = "sfe_trace"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("trace", ("trace", Controller.SfeOper.SfeTrace.SfeDriver.Trace))])
                    self._leafs = OrderedDict()

                    self.trace = YList(self)
                    self._segment_path = lambda: "sfe_driver"
                    self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/sfe_oper/sfe_trace/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Controller.SfeOper.SfeTrace.SfeDriver, [], name, value)


                class Trace(Entity):
                    """
                    show traceable processes
                    
                    .. attribute:: buffer  (key)
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: location
                    
                    	
                    	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.SfeTrace.SfeDriver.Trace.Location>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.SfeOper.SfeTrace.SfeDriver.Trace, self).__init__()

                        self.yang_name = "trace"
                        self.yang_parent_name = "sfe_driver"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['buffer']
                        self._child_classes = OrderedDict([("location", ("location", Controller.SfeOper.SfeTrace.SfeDriver.Trace.Location))])
                        self._leafs = OrderedDict([
                            ('buffer', YLeaf(YType.str, 'buffer')),
                        ])
                        self.buffer = None

                        self.location = YList(self)
                        self._segment_path = lambda: "trace" + "[buffer='" + str(self.buffer) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/sfe_oper/sfe_trace/sfe_driver/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.SfeOper.SfeTrace.SfeDriver.Trace, [u'buffer'], name, value)


                    class Location(Entity):
                        """
                        
                        
                        .. attribute:: location_name  (key)
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: all_options
                        
                        	
                        	**type**\: list of  		 :py:class:`AllOptions <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.SfeTrace.SfeDriver.Trace.Location.AllOptions>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.SfeOper.SfeTrace.SfeDriver.Trace.Location, self).__init__()

                            self.yang_name = "location"
                            self.yang_parent_name = "trace"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['location_name']
                            self._child_classes = OrderedDict([("all-options", ("all_options", Controller.SfeOper.SfeTrace.SfeDriver.Trace.Location.AllOptions))])
                            self._leafs = OrderedDict([
                                ('location_name', YLeaf(YType.str, 'location_name')),
                            ])
                            self.location_name = None

                            self.all_options = YList(self)
                            self._segment_path = lambda: "location" + "[location_name='" + str(self.location_name) + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.SfeOper.SfeTrace.SfeDriver.Trace.Location, [u'location_name'], name, value)


                        class AllOptions(Entity):
                            """
                            
                            
                            .. attribute:: option  (key)
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: trace_blocks
                            
                            	
                            	**type**\: list of  		 :py:class:`TraceBlocks <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.SfeOper.SfeTrace.SfeDriver.Trace.Location.AllOptions.TraceBlocks>`
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.SfeOper.SfeTrace.SfeDriver.Trace.Location.AllOptions, self).__init__()

                                self.yang_name = "all-options"
                                self.yang_parent_name = "location"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['option']
                                self._child_classes = OrderedDict([("trace-blocks", ("trace_blocks", Controller.SfeOper.SfeTrace.SfeDriver.Trace.Location.AllOptions.TraceBlocks))])
                                self._leafs = OrderedDict([
                                    ('option', YLeaf(YType.str, 'option')),
                                ])
                                self.option = None

                                self.trace_blocks = YList(self)
                                self._segment_path = lambda: "all-options" + "[option='" + str(self.option) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.SfeOper.SfeTrace.SfeDriver.Trace.Location.AllOptions, [u'option'], name, value)


                            class TraceBlocks(Entity):
                                """
                                
                                
                                .. attribute:: data
                                
                                	Trace output block
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.SfeOper.SfeTrace.SfeDriver.Trace.Location.AllOptions.TraceBlocks, self).__init__()

                                    self.yang_name = "trace-blocks"
                                    self.yang_parent_name = "all-options"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('data', YLeaf(YType.str, 'data')),
                                    ])
                                    self.data = None
                                    self._segment_path = lambda: "trace-blocks"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.SfeOper.SfeTrace.SfeDriver.Trace.Location.AllOptions.TraceBlocks, [u'data'], name, value)


    class Asic(Entity):
        """
        
        
        .. attribute:: asic_name  (key)
        
        	
        	**type**\: str
        
        .. attribute:: instance
        
        	
        	**type**\: list of  		 :py:class:`Instance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Asic.Instance>`
        
        

        """

        _prefix = 'calvados_controllers'
        _revision = '2017-01-31'

        def __init__(self):
            super(Controller.Asic, self).__init__()

            self.yang_name = "asic"
            self.yang_parent_name = "controller"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = ['asic_name']
            self._child_classes = OrderedDict([("instance", ("instance", Controller.Asic.Instance))])
            self._leafs = OrderedDict([
                ('asic_name', YLeaf(YType.str, 'asic-name')),
            ])
            self.asic_name = None

            self.instance = YList(self)
            self._segment_path = lambda: "asic" + "[asic-name='" + str(self.asic_name) + "']"
            self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Controller.Asic, ['asic_name'], name, value)


        class Instance(Entity):
            """
            
            
            .. attribute:: instance_id  (key)
            
            	
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: instance_name
            
            	
            	**type**\: str
            
            .. attribute:: address
            
            	
            	**type**\: list of  		 :py:class:`Address <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Asic.Instance.Address>`
            
            .. attribute:: block_name
            
            	
            	**type**\: list of  		 :py:class:`BlockName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Asic.Instance.BlockName>`
            
            .. attribute:: block_number
            
            	
            	**type**\: list of  		 :py:class:`BlockNumber <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Asic.Instance.BlockNumber>`
            
            

            """

            _prefix = 'calvados_controllers'
            _revision = '2017-01-31'

            def __init__(self):
                super(Controller.Asic.Instance, self).__init__()

                self.yang_name = "instance"
                self.yang_parent_name = "asic"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = ['instance_id']
                self._child_classes = OrderedDict([("address", ("address", Controller.Asic.Instance.Address)), ("block-name", ("block_name", Controller.Asic.Instance.BlockName)), ("block-number", ("block_number", Controller.Asic.Instance.BlockNumber))])
                self._leafs = OrderedDict([
                    ('instance_id', YLeaf(YType.uint32, 'instance-id')),
                    ('instance_name', YLeaf(YType.str, 'instance-name')),
                ])
                self.instance_id = None
                self.instance_name = None

                self.address = YList(self)
                self.block_name = YList(self)
                self.block_number = YList(self)
                self._segment_path = lambda: "instance" + "[instance-id='" + str(self.instance_id) + "']"

            def __setattr__(self, name, value):
                self._perform_setattr(Controller.Asic.Instance, ['instance_id', 'instance_name'], name, value)


            class Address(Entity):
                """
                
                
                .. attribute:: addr  (key)
                
                	
                	**type**\: str
                
                	**mandatory**\: True
                
                .. attribute:: size  (key)
                
                	
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: entries  (key)
                
                	
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**mandatory**\: True
                
                .. attribute:: width
                
                	
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**mandatory**\: True
                
                .. attribute:: location
                
                	
                	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Asic.Instance.Address.Location>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Controller.Asic.Instance.Address, self).__init__()

                    self.yang_name = "address"
                    self.yang_parent_name = "instance"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = ['addr','size','entries']
                    self._child_classes = OrderedDict([("location", ("location", Controller.Asic.Instance.Address.Location))])
                    self._leafs = OrderedDict([
                        ('addr', YLeaf(YType.str, 'addr')),
                        ('size', YLeaf(YType.uint32, 'size')),
                        ('entries', YLeaf(YType.uint32, 'entries')),
                        ('width', YLeaf(YType.uint32, 'width')),
                    ])
                    self.addr = None
                    self.size = None
                    self.entries = None
                    self.width = None

                    self.location = YList(self)
                    self._segment_path = lambda: "address" + "[addr='" + str(self.addr) + "']" + "[size='" + str(self.size) + "']" + "[entries='" + str(self.entries) + "']"

                def __setattr__(self, name, value):
                    self._perform_setattr(Controller.Asic.Instance.Address, ['addr', 'size', 'entries', 'width'], name, value)


                class Location(Entity):
                    """
                    
                    
                    .. attribute:: location_name  (key)
                    
                    	
                    	**type**\: str
                    
                    	**mandatory**\: True
                    
                    .. attribute:: direct_data
                    
                    	
                    	**type**\: list of  		 :py:class:`DirectData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Asic.Instance.Address.Location.DirectData>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.Asic.Instance.Address.Location, self).__init__()

                        self.yang_name = "location"
                        self.yang_parent_name = "address"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['location_name']
                        self._child_classes = OrderedDict([("direct_data", ("direct_data", Controller.Asic.Instance.Address.Location.DirectData))])
                        self._leafs = OrderedDict([
                            ('location_name', YLeaf(YType.str, 'location_name')),
                        ])
                        self.location_name = None

                        self.direct_data = YList(self)
                        self._segment_path = lambda: "location" + "[location_name='" + str(self.location_name) + "']"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.Asic.Instance.Address.Location, ['location_name'], name, value)


                    class DirectData(Entity):
                        """
                        
                        
                        .. attribute:: address
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        .. attribute:: name
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: value
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: size
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Asic.Instance.Address.Location.DirectData, self).__init__()

                            self.yang_name = "direct_data"
                            self.yang_parent_name = "location"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('address', YLeaf(YType.uint64, 'address')),
                                ('name', YLeaf(YType.str, 'name')),
                                ('value', YLeaf(YType.str, 'value')),
                                ('size', YLeaf(YType.uint32, 'size')),
                            ])
                            self.address = None
                            self.name = None
                            self.value = None
                            self.size = None
                            self._segment_path = lambda: "direct_data"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Asic.Instance.Address.Location.DirectData, ['address', 'name', 'value', 'size'], name, value)


            class BlockName(Entity):
                """
                
                
                .. attribute:: block_nm  (key)
                
                	
                	**type**\: str
                
                .. attribute:: block_num  (key)
                
                	
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: register_name
                
                	
                	**type**\: list of  		 :py:class:`RegisterName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Asic.Instance.BlockName.RegisterName>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Controller.Asic.Instance.BlockName, self).__init__()

                    self.yang_name = "block-name"
                    self.yang_parent_name = "instance"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = ['block_nm','block_num']
                    self._child_classes = OrderedDict([("register-name", ("register_name", Controller.Asic.Instance.BlockName.RegisterName))])
                    self._leafs = OrderedDict([
                        ('block_nm', YLeaf(YType.str, 'block-nm')),
                        ('block_num', YLeaf(YType.uint32, 'block-num')),
                    ])
                    self.block_nm = None
                    self.block_num = None

                    self.register_name = YList(self)
                    self._segment_path = lambda: "block-name" + "[block-nm='" + str(self.block_nm) + "']" + "[block-num='" + str(self.block_num) + "']"

                def __setattr__(self, name, value):
                    self._perform_setattr(Controller.Asic.Instance.BlockName, ['block_nm', 'block_num'], name, value)


                class RegisterName(Entity):
                    """
                    
                    
                    .. attribute:: name  (key)
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: register
                    
                    	
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: data
                    
                    	
                    	**type**\: list of  		 :py:class:`Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Asic.Instance.BlockName.RegisterName.Data>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.Asic.Instance.BlockName.RegisterName, self).__init__()

                        self.yang_name = "register-name"
                        self.yang_parent_name = "block-name"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['name']
                        self._child_classes = OrderedDict([("data", ("data", Controller.Asic.Instance.BlockName.RegisterName.Data))])
                        self._leafs = OrderedDict([
                            ('name', YLeaf(YType.str, 'name')),
                            ('register', YLeaf(YType.uint32, 'register')),
                        ])
                        self.name = None
                        self.register = None

                        self.data = YList(self)
                        self._segment_path = lambda: "register-name" + "[name='" + str(self.name) + "']"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.Asic.Instance.BlockName.RegisterName, ['name', 'register'], name, value)


                    class Data(Entity):
                        """
                        
                        
                        .. attribute:: address
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        .. attribute:: name
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: value
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: size
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Asic.Instance.BlockName.RegisterName.Data, self).__init__()

                            self.yang_name = "data"
                            self.yang_parent_name = "register-name"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('address', YLeaf(YType.uint64, 'address')),
                                ('name', YLeaf(YType.str, 'name')),
                                ('value', YLeaf(YType.str, 'value')),
                                ('size', YLeaf(YType.uint32, 'size')),
                            ])
                            self.address = None
                            self.name = None
                            self.value = None
                            self.size = None
                            self._segment_path = lambda: "data"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Asic.Instance.BlockName.RegisterName.Data, ['address', 'name', 'value', 'size'], name, value)


            class BlockNumber(Entity):
                """
                
                
                .. attribute:: block_num  (key)
                
                	
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: block_nm
                
                	
                	**type**\: str
                
                .. attribute:: register_number
                
                	
                	**type**\: list of  		 :py:class:`RegisterNumber <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Asic.Instance.BlockNumber.RegisterNumber>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Controller.Asic.Instance.BlockNumber, self).__init__()

                    self.yang_name = "block-number"
                    self.yang_parent_name = "instance"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = ['block_num']
                    self._child_classes = OrderedDict([("register-number", ("register_number", Controller.Asic.Instance.BlockNumber.RegisterNumber))])
                    self._leafs = OrderedDict([
                        ('block_num', YLeaf(YType.uint32, 'block-num')),
                        ('block_nm', YLeaf(YType.str, 'block-nm')),
                    ])
                    self.block_num = None
                    self.block_nm = None

                    self.register_number = YList(self)
                    self._segment_path = lambda: "block-number" + "[block-num='" + str(self.block_num) + "']"

                def __setattr__(self, name, value):
                    self._perform_setattr(Controller.Asic.Instance.BlockNumber, ['block_num', 'block_nm'], name, value)


                class RegisterNumber(Entity):
                    """
                    
                    
                    .. attribute:: register  (key)
                    
                    	
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: register_name
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: register_offsets
                    
                    	
                    	**type**\: list of  		 :py:class:`RegisterOffsets <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Asic.Instance.BlockNumber.RegisterNumber.RegisterOffsets>`
                    
                    .. attribute:: location
                    
                    	
                    	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Asic.Instance.BlockNumber.RegisterNumber.Location>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.Asic.Instance.BlockNumber.RegisterNumber, self).__init__()

                        self.yang_name = "register-number"
                        self.yang_parent_name = "block-number"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['register']
                        self._child_classes = OrderedDict([("register-offsets", ("register_offsets", Controller.Asic.Instance.BlockNumber.RegisterNumber.RegisterOffsets)), ("location", ("location", Controller.Asic.Instance.BlockNumber.RegisterNumber.Location))])
                        self._leafs = OrderedDict([
                            ('register', YLeaf(YType.uint32, 'register')),
                            ('register_name', YLeaf(YType.str, 'register-name')),
                        ])
                        self.register = None
                        self.register_name = None

                        self.register_offsets = YList(self)
                        self.location = YList(self)
                        self._segment_path = lambda: "register-number" + "[register='" + str(self.register) + "']"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.Asic.Instance.BlockNumber.RegisterNumber, ['register', 'register_name'], name, value)


                    class RegisterOffsets(Entity):
                        """
                        
                        
                        .. attribute:: reg_start  (key)
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: num_entries  (key)
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: location
                        
                        	
                        	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Asic.Instance.BlockNumber.RegisterNumber.RegisterOffsets.Location>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Asic.Instance.BlockNumber.RegisterNumber.RegisterOffsets, self).__init__()

                            self.yang_name = "register-offsets"
                            self.yang_parent_name = "register-number"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['reg_start','num_entries']
                            self._child_classes = OrderedDict([("location", ("location", Controller.Asic.Instance.BlockNumber.RegisterNumber.RegisterOffsets.Location))])
                            self._leafs = OrderedDict([
                                ('reg_start', YLeaf(YType.uint32, 'reg-start')),
                                ('num_entries', YLeaf(YType.uint32, 'num-entries')),
                            ])
                            self.reg_start = None
                            self.num_entries = None

                            self.location = YList(self)
                            self._segment_path = lambda: "register-offsets" + "[reg-start='" + str(self.reg_start) + "']" + "[num-entries='" + str(self.num_entries) + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Asic.Instance.BlockNumber.RegisterNumber.RegisterOffsets, ['reg_start', 'num_entries'], name, value)


                        class Location(Entity):
                            """
                            
                            
                            .. attribute:: location_name  (key)
                            
                            	
                            	**type**\: str
                            
                            	**mandatory**\: True
                            
                            .. attribute:: data
                            
                            	
                            	**type**\: list of  		 :py:class:`Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Asic.Instance.BlockNumber.RegisterNumber.RegisterOffsets.Location.Data>`
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Asic.Instance.BlockNumber.RegisterNumber.RegisterOffsets.Location, self).__init__()

                                self.yang_name = "location"
                                self.yang_parent_name = "register-offsets"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['location_name']
                                self._child_classes = OrderedDict([("data", ("data", Controller.Asic.Instance.BlockNumber.RegisterNumber.RegisterOffsets.Location.Data))])
                                self._leafs = OrderedDict([
                                    ('location_name', YLeaf(YType.str, 'location_name')),
                                ])
                                self.location_name = None

                                self.data = YList(self)
                                self._segment_path = lambda: "location" + "[location_name='" + str(self.location_name) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Asic.Instance.BlockNumber.RegisterNumber.RegisterOffsets.Location, ['location_name'], name, value)


                            class Data(Entity):
                                """
                                
                                
                                .. attribute:: address
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: name
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: value
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: size
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.Asic.Instance.BlockNumber.RegisterNumber.RegisterOffsets.Location.Data, self).__init__()

                                    self.yang_name = "data"
                                    self.yang_parent_name = "location"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('address', YLeaf(YType.uint64, 'address')),
                                        ('name', YLeaf(YType.str, 'name')),
                                        ('value', YLeaf(YType.str, 'value')),
                                        ('size', YLeaf(YType.uint32, 'size')),
                                    ])
                                    self.address = None
                                    self.name = None
                                    self.value = None
                                    self.size = None
                                    self._segment_path = lambda: "data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.Asic.Instance.BlockNumber.RegisterNumber.RegisterOffsets.Location.Data, ['address', 'name', 'value', 'size'], name, value)


                    class Location(Entity):
                        """
                        
                        
                        .. attribute:: location_name  (key)
                        
                        	
                        	**type**\: str
                        
                        	**mandatory**\: True
                        
                        .. attribute:: data
                        
                        	
                        	**type**\: list of  		 :py:class:`Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Asic.Instance.BlockNumber.RegisterNumber.Location.Data>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Asic.Instance.BlockNumber.RegisterNumber.Location, self).__init__()

                            self.yang_name = "location"
                            self.yang_parent_name = "register-number"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['location_name']
                            self._child_classes = OrderedDict([("data", ("data", Controller.Asic.Instance.BlockNumber.RegisterNumber.Location.Data))])
                            self._leafs = OrderedDict([
                                ('location_name', YLeaf(YType.str, 'location_name')),
                            ])
                            self.location_name = None

                            self.data = YList(self)
                            self._segment_path = lambda: "location" + "[location_name='" + str(self.location_name) + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Asic.Instance.BlockNumber.RegisterNumber.Location, ['location_name'], name, value)


                        class Data(Entity):
                            """
                            
                            
                            .. attribute:: address
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: name
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: value
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: size
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Asic.Instance.BlockNumber.RegisterNumber.Location.Data, self).__init__()

                                self.yang_name = "data"
                                self.yang_parent_name = "location"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('address', YLeaf(YType.uint64, 'address')),
                                    ('name', YLeaf(YType.str, 'name')),
                                    ('value', YLeaf(YType.str, 'value')),
                                    ('size', YLeaf(YType.uint32, 'size')),
                                ])
                                self.address = None
                                self.name = None
                                self.value = None
                                self.size = None
                                self._segment_path = lambda: "data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Asic.Instance.BlockNumber.RegisterNumber.Location.Data, ['address', 'name', 'value', 'size'], name, value)


    class Oper(Entity):
        """
        
        
        .. attribute:: slice_control
        
        	
        	**type**\:  :py:class:`SliceControl <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Oper.SliceControl>`
        
        

        """

        _prefix = 'calvados_controllers'
        _revision = '2017-01-31'

        def __init__(self):
            super(Controller.Oper, self).__init__()

            self.yang_name = "oper"
            self.yang_parent_name = "controller"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([("slice_control", ("slice_control", Controller.Oper.SliceControl))])
            self._leafs = OrderedDict()

            self.slice_control = Controller.Oper.SliceControl()
            self.slice_control.parent = self
            self._children_name_map["slice_control"] = "slice_control"
            self._segment_path = lambda: "oper"
            self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Controller.Oper, [], name, value)


        class SliceControl(Entity):
            """
            
            
            .. attribute:: location_list
            
            	
            	**type**\: list of  		 :py:class:`LocationList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Oper.SliceControl.LocationList>`
            
            

            """

            _prefix = 'calvados_controllers'
            _revision = '2017-01-31'

            def __init__(self):
                super(Controller.Oper.SliceControl, self).__init__()

                self.yang_name = "slice_control"
                self.yang_parent_name = "oper"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("location_list", ("location_list", Controller.Oper.SliceControl.LocationList))])
                self._leafs = OrderedDict()

                self.location_list = YList(self)
                self._segment_path = lambda: "slice_control"
                self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/oper/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Controller.Oper.SliceControl, [], name, value)


            class LocationList(Entity):
                """
                
                
                .. attribute:: loc_str  (key)
                
                	
                	**type**\: str
                
                	**pattern:** ((0?[0\-9]\|1[0\-5])/(0?[0\-7]))
                
                .. attribute:: description
                
                	
                	**type**\: str
                
                .. attribute:: manager_context_info
                
                	
                	**type**\: list of  		 :py:class:`ManagerContextInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Oper.SliceControl.LocationList.ManagerContextInfo>`
                
                .. attribute:: fpga
                
                	
                	**type**\: list of  		 :py:class:`FPGA <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Oper.SliceControl.LocationList.FPGA>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Controller.Oper.SliceControl.LocationList, self).__init__()

                    self.yang_name = "location_list"
                    self.yang_parent_name = "slice_control"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = ['loc_str']
                    self._child_classes = OrderedDict([("manager_context_info", ("manager_context_info", Controller.Oper.SliceControl.LocationList.ManagerContextInfo)), ("FPGA", ("fpga", Controller.Oper.SliceControl.LocationList.FPGA))])
                    self._leafs = OrderedDict([
                        ('loc_str', YLeaf(YType.str, 'loc_str')),
                        ('description', YLeaf(YType.str, 'description')),
                    ])
                    self.loc_str = None
                    self.description = None

                    self.manager_context_info = YList(self)
                    self.fpga = YList(self)
                    self._segment_path = lambda: "location_list" + "[loc_str='" + str(self.loc_str) + "']"
                    self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/oper/slice_control/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Controller.Oper.SliceControl.LocationList, ['loc_str', 'description'], name, value)


                class ManagerContextInfo(Entity):
                    """
                    
                    
                    .. attribute:: id  (key)
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: num_controllers
                    
                    	
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    .. attribute:: levm
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: ccc_hdl
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: trace
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: xm_hdl
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: fm_hdl
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: sim
                    
                    	
                    	**type**\: bool
                    
                    	**default value**\: false
                    
                    .. attribute:: debug
                    
                    	
                    	**type**\: bool
                    
                    	**default value**\: false
                    
                    .. attribute:: card_type
                    
                    	
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: slot_num
                    
                    	
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.Oper.SliceControl.LocationList.ManagerContextInfo, self).__init__()

                        self.yang_name = "manager_context_info"
                        self.yang_parent_name = "location_list"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['id']
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('id', YLeaf(YType.str, 'id')),
                            ('num_controllers', YLeaf(YType.uint8, 'num_controllers')),
                            ('levm', YLeaf(YType.str, 'levm')),
                            ('ccc_hdl', YLeaf(YType.str, 'ccc_hdl')),
                            ('trace', YLeaf(YType.str, 'trace')),
                            ('xm_hdl', YLeaf(YType.str, 'xm_hdl')),
                            ('fm_hdl', YLeaf(YType.str, 'fm_hdl')),
                            ('sim', YLeaf(YType.boolean, 'sim')),
                            ('debug', YLeaf(YType.boolean, 'debug')),
                            ('card_type', YLeaf(YType.uint32, 'card_type')),
                            ('slot_num', YLeaf(YType.uint32, 'slot_num')),
                        ])
                        self.id = None
                        self.num_controllers = None
                        self.levm = None
                        self.ccc_hdl = None
                        self.trace = None
                        self.xm_hdl = None
                        self.fm_hdl = None
                        self.sim = None
                        self.debug = None
                        self.card_type = None
                        self.slot_num = None
                        self._segment_path = lambda: "manager_context_info" + "[id='" + str(self.id) + "']"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.Oper.SliceControl.LocationList.ManagerContextInfo, ['id', 'num_controllers', 'levm', 'ccc_hdl', 'trace', 'xm_hdl', 'fm_hdl', 'sim', 'debug', 'card_type', 'slot_num'], name, value)


                class FPGA(Entity):
                    """
                    
                    
                    .. attribute:: slice_controller_id  (key)
                    
                    	
                    	**type**\: str
                    
                    	**pattern:** [0\-1]\|all
                    
                    .. attribute:: slice_context_info
                    
                    	
                    	**type**\: list of  		 :py:class:`SliceContextInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Oper.SliceControl.LocationList.FPGA.SliceContextInfo>`
                    
                    .. attribute:: clocking_devices
                    
                    	
                    	**type**\: list of  		 :py:class:`ClockingDevices <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Oper.SliceControl.LocationList.FPGA.ClockingDevices>`
                    
                    .. attribute:: slice
                    
                    	
                    	**type**\: list of  		 :py:class:`Slice <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Oper.SliceControl.LocationList.FPGA.Slice>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.Oper.SliceControl.LocationList.FPGA, self).__init__()

                        self.yang_name = "FPGA"
                        self.yang_parent_name = "location_list"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['slice_controller_id']
                        self._child_classes = OrderedDict([("slice_context_info", ("slice_context_info", Controller.Oper.SliceControl.LocationList.FPGA.SliceContextInfo)), ("clocking_devices", ("clocking_devices", Controller.Oper.SliceControl.LocationList.FPGA.ClockingDevices)), ("slice", ("slice", Controller.Oper.SliceControl.LocationList.FPGA.Slice))])
                        self._leafs = OrderedDict([
                            ('slice_controller_id', YLeaf(YType.str, 'slice_controller_id')),
                        ])
                        self.slice_controller_id = None

                        self.slice_context_info = YList(self)
                        self.clocking_devices = YList(self)
                        self.slice = YList(self)
                        self._segment_path = lambda: "FPGA" + "[slice_controller_id='" + str(self.slice_controller_id) + "']"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.Oper.SliceControl.LocationList.FPGA, ['slice_controller_id'], name, value)


                    class SliceContextInfo(Entity):
                        """
                        
                        
                        .. attribute:: id  (key)
                        
                        	
                        	**type**\: str
                        
                        	**pattern:** [0\-1]\|all
                        
                        .. attribute:: slice_controller_id
                        
                        	
                        	**type**\: str
                        
                        	**pattern:** [0\-1]\|all
                        
                        .. attribute:: slices
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: oper_state
                        
                        	
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: pci_status
                        
                        	
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: bao_desc
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: handle
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: irq
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: msi
                        
                        	
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: regs
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: num_pll
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: c_hd
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: d_hd
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: i_hd
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: fm_hdl
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: trace
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: levm
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: hw_ver
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: pca_ver
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: tcam_vendor
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: is_data_available
                        
                        	
                        	**type**\: bool
                        
                        	**default value**\: false
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Oper.SliceControl.LocationList.FPGA.SliceContextInfo, self).__init__()

                            self.yang_name = "slice_context_info"
                            self.yang_parent_name = "FPGA"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['id']
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('id', YLeaf(YType.str, 'id')),
                                ('slice_controller_id', YLeaf(YType.str, 'slice_controller_id')),
                                ('slices', YLeaf(YType.uint8, 'slices')),
                                ('oper_state', YLeaf(YType.int32, 'oper_state')),
                                ('pci_status', YLeaf(YType.int32, 'pci_status')),
                                ('bao_desc', YLeaf(YType.str, 'bao_desc')),
                                ('handle', YLeaf(YType.str, 'handle')),
                                ('irq', YLeaf(YType.str, 'irq')),
                                ('msi', YLeaf(YType.int32, 'msi')),
                                ('regs', YLeaf(YType.str, 'regs')),
                                ('num_pll', YLeaf(YType.uint8, 'num_pll')),
                                ('c_hd', YLeaf(YType.str, 'c_hd')),
                                ('d_hd', YLeaf(YType.str, 'd_hd')),
                                ('i_hd', YLeaf(YType.str, 'i_hd')),
                                ('fm_hdl', YLeaf(YType.str, 'fm_hdl')),
                                ('trace', YLeaf(YType.str, 'trace')),
                                ('levm', YLeaf(YType.str, 'levm')),
                                ('hw_ver', YLeaf(YType.str, 'hw_ver')),
                                ('pca_ver', YLeaf(YType.str, 'pca_ver')),
                                ('tcam_vendor', YLeaf(YType.str, 'tcam_vendor')),
                                ('is_data_available', YLeaf(YType.boolean, 'is_data_available')),
                            ])
                            self.id = None
                            self.slice_controller_id = None
                            self.slices = None
                            self.oper_state = None
                            self.pci_status = None
                            self.bao_desc = None
                            self.handle = None
                            self.irq = None
                            self.msi = None
                            self.regs = None
                            self.num_pll = None
                            self.c_hd = None
                            self.d_hd = None
                            self.i_hd = None
                            self.fm_hdl = None
                            self.trace = None
                            self.levm = None
                            self.hw_ver = None
                            self.pca_ver = None
                            self.tcam_vendor = None
                            self.is_data_available = None
                            self._segment_path = lambda: "slice_context_info" + "[id='" + str(self.id) + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Oper.SliceControl.LocationList.FPGA.SliceContextInfo, ['id', 'slice_controller_id', 'slices', 'oper_state', 'pci_status', 'bao_desc', 'handle', 'irq', 'msi', 'regs', 'num_pll', 'c_hd', 'd_hd', 'i_hd', 'fm_hdl', 'trace', 'levm', 'hw_ver', 'pca_ver', 'tcam_vendor', 'is_data_available'], name, value)


                    class ClockingDevices(Entity):
                        """
                        
                        
                        .. attribute:: pll_device_id  (key)
                        
                        	
                        	**type**\: str
                        
                        	**pattern:** all\|[0\-2]
                        
                        .. attribute:: is_data_available
                        
                        	
                        	**type**\: bool
                        
                        	**default value**\: false
                        
                        .. attribute:: pll
                        
                        	
                        	**type**\: list of  		 :py:class:`Pll <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Oper.SliceControl.LocationList.FPGA.ClockingDevices.Pll>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Oper.SliceControl.LocationList.FPGA.ClockingDevices, self).__init__()

                            self.yang_name = "clocking_devices"
                            self.yang_parent_name = "FPGA"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['pll_device_id']
                            self._child_classes = OrderedDict([("pll", ("pll", Controller.Oper.SliceControl.LocationList.FPGA.ClockingDevices.Pll))])
                            self._leafs = OrderedDict([
                                ('pll_device_id', YLeaf(YType.str, 'pll_device_id')),
                                ('is_data_available', YLeaf(YType.boolean, 'is_data_available')),
                            ])
                            self.pll_device_id = None
                            self.is_data_available = None

                            self.pll = YList(self)
                            self._segment_path = lambda: "clocking_devices" + "[pll_device_id='" + str(self.pll_device_id) + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Oper.SliceControl.LocationList.FPGA.ClockingDevices, ['pll_device_id', 'is_data_available'], name, value)


                        class Pll(Entity):
                            """
                            
                            
                            .. attribute:: pll_id  (key)
                            
                            	
                            	**type**\: str
                            
                            	**pattern:** [0\-3]
                            
                            .. attribute:: clocking_bus
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: clocking_mode
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: clocking_dev_addr
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: clocking_i2c_regs
                            
                            	
                            	**type**\: str
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Oper.SliceControl.LocationList.FPGA.ClockingDevices.Pll, self).__init__()

                                self.yang_name = "pll"
                                self.yang_parent_name = "clocking_devices"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['pll_id']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('pll_id', YLeaf(YType.str, 'pll_id')),
                                    ('clocking_bus', YLeaf(YType.str, 'clocking_bus')),
                                    ('clocking_mode', YLeaf(YType.str, 'clocking_mode')),
                                    ('clocking_dev_addr', YLeaf(YType.str, 'clocking_dev_addr')),
                                    ('clocking_i2c_regs', YLeaf(YType.str, 'clocking_i2c_regs')),
                                ])
                                self.pll_id = None
                                self.clocking_bus = None
                                self.clocking_mode = None
                                self.clocking_dev_addr = None
                                self.clocking_i2c_regs = None
                                self._segment_path = lambda: "pll" + "[pll_id='" + str(self.pll_id) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Oper.SliceControl.LocationList.FPGA.ClockingDevices.Pll, ['pll_id', 'clocking_bus', 'clocking_mode', 'clocking_dev_addr', 'clocking_i2c_regs'], name, value)


                    class Slice(Entity):
                        """
                        
                        
                        .. attribute:: slice_id  (key)
                        
                        	
                        	**type**\: str
                        
                        	**pattern:** [0\-2]\|all
                        
                        .. attribute:: summary
                        
                        	
                        	**type**\:  :py:class:`Summary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Oper.SliceControl.LocationList.FPGA.Slice.Summary>`
                        
                        .. attribute:: curr_sensor
                        
                        	
                        	**type**\: list of  		 :py:class:`CurrSensor <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Oper.SliceControl.LocationList.FPGA.Slice.CurrSensor>`
                        
                        .. attribute:: eeprom
                        
                        	
                        	**type**\: list of  		 :py:class:`Eeprom <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Oper.SliceControl.LocationList.FPGA.Slice.Eeprom>`
                        
                        .. attribute:: optics_summary
                        
                        	
                        	**type**\: list of  		 :py:class:`OpticsSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Oper.SliceControl.LocationList.FPGA.Slice.OpticsSummary>`
                        
                        .. attribute:: optics
                        
                        	
                        	**type**\: list of  		 :py:class:`Optics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Oper.SliceControl.LocationList.FPGA.Slice.Optics>`
                        
                        .. attribute:: phy
                        
                        	
                        	**type**\: list of  		 :py:class:`Phy <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Oper.SliceControl.LocationList.FPGA.Slice.Phy>`
                        
                        .. attribute:: temp_sensor
                        
                        	
                        	**type**\: list of  		 :py:class:`TempSensor <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Oper.SliceControl.LocationList.FPGA.Slice.TempSensor>`
                        
                        .. attribute:: volt_sensor
                        
                        	
                        	**type**\: list of  		 :py:class:`VoltSensor <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Oper.SliceControl.LocationList.FPGA.Slice.VoltSensor>`
                        
                        .. attribute:: gearbox_summary
                        
                        	
                        	**type**\: list of  		 :py:class:`GearboxSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Oper.SliceControl.LocationList.FPGA.Slice.GearboxSummary>`
                        
                        .. attribute:: gearbox2_summary
                        
                        	
                        	**type**\: list of  		 :py:class:`Gearbox2Summary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Oper.SliceControl.LocationList.FPGA.Slice.Gearbox2Summary>`
                        
                        .. attribute:: dual_gearbox_summary
                        
                        	
                        	**type**\: list of  		 :py:class:`DualGearboxSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Oper.SliceControl.LocationList.FPGA.Slice.DualGearboxSummary>`
                        
                        .. attribute:: gearbox
                        
                        	
                        	**type**\: list of  		 :py:class:`Gearbox <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Oper.SliceControl.LocationList.FPGA.Slice.Gearbox>`
                        
                        .. attribute:: gearbox2
                        
                        	
                        	**type**\: list of  		 :py:class:`Gearbox2 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Oper.SliceControl.LocationList.FPGA.Slice.Gearbox2>`
                        
                        .. attribute:: dual_gearbox
                        
                        	
                        	**type**\: list of  		 :py:class:`DualGearbox <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Oper.SliceControl.LocationList.FPGA.Slice.DualGearbox>`
                        
                        .. attribute:: cpak
                        
                        	
                        	**type**\: list of  		 :py:class:`Cpak <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Oper.SliceControl.LocationList.FPGA.Slice.Cpak>`
                        
                        .. attribute:: modena_summary
                        
                        	
                        	**type**\: list of  		 :py:class:`ModenaSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Oper.SliceControl.LocationList.FPGA.Slice.ModenaSummary>`
                        
                        .. attribute:: modena
                        
                        	
                        	**type**\: list of  		 :py:class:`Modena <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Oper.SliceControl.LocationList.FPGA.Slice.Modena>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Oper.SliceControl.LocationList.FPGA.Slice, self).__init__()

                            self.yang_name = "slice"
                            self.yang_parent_name = "FPGA"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['slice_id']
                            self._child_classes = OrderedDict([("summary", ("summary", Controller.Oper.SliceControl.LocationList.FPGA.Slice.Summary)), ("curr_sensor", ("curr_sensor", Controller.Oper.SliceControl.LocationList.FPGA.Slice.CurrSensor)), ("eeprom", ("eeprom", Controller.Oper.SliceControl.LocationList.FPGA.Slice.Eeprom)), ("optics_summary", ("optics_summary", Controller.Oper.SliceControl.LocationList.FPGA.Slice.OpticsSummary)), ("optics", ("optics", Controller.Oper.SliceControl.LocationList.FPGA.Slice.Optics)), ("phy", ("phy", Controller.Oper.SliceControl.LocationList.FPGA.Slice.Phy)), ("temp_sensor", ("temp_sensor", Controller.Oper.SliceControl.LocationList.FPGA.Slice.TempSensor)), ("volt_sensor", ("volt_sensor", Controller.Oper.SliceControl.LocationList.FPGA.Slice.VoltSensor)), ("gearbox_summary", ("gearbox_summary", Controller.Oper.SliceControl.LocationList.FPGA.Slice.GearboxSummary)), ("gearbox2_summary", ("gearbox2_summary", Controller.Oper.SliceControl.LocationList.FPGA.Slice.Gearbox2Summary)), ("dual_gearbox_summary", ("dual_gearbox_summary", Controller.Oper.SliceControl.LocationList.FPGA.Slice.DualGearboxSummary)), ("gearbox", ("gearbox", Controller.Oper.SliceControl.LocationList.FPGA.Slice.Gearbox)), ("gearbox2", ("gearbox2", Controller.Oper.SliceControl.LocationList.FPGA.Slice.Gearbox2)), ("dual_gearbox", ("dual_gearbox", Controller.Oper.SliceControl.LocationList.FPGA.Slice.DualGearbox)), ("cpak", ("cpak", Controller.Oper.SliceControl.LocationList.FPGA.Slice.Cpak)), ("modena_summary", ("modena_summary", Controller.Oper.SliceControl.LocationList.FPGA.Slice.ModenaSummary)), ("modena", ("modena", Controller.Oper.SliceControl.LocationList.FPGA.Slice.Modena))])
                            self._leafs = OrderedDict([
                                ('slice_id', YLeaf(YType.str, 'slice_id')),
                            ])
                            self.slice_id = None

                            self.summary = Controller.Oper.SliceControl.LocationList.FPGA.Slice.Summary()
                            self.summary.parent = self
                            self._children_name_map["summary"] = "summary"

                            self.curr_sensor = YList(self)
                            self.eeprom = YList(self)
                            self.optics_summary = YList(self)
                            self.optics = YList(self)
                            self.phy = YList(self)
                            self.temp_sensor = YList(self)
                            self.volt_sensor = YList(self)
                            self.gearbox_summary = YList(self)
                            self.gearbox2_summary = YList(self)
                            self.dual_gearbox_summary = YList(self)
                            self.gearbox = YList(self)
                            self.gearbox2 = YList(self)
                            self.dual_gearbox = YList(self)
                            self.cpak = YList(self)
                            self.modena_summary = YList(self)
                            self.modena = YList(self)
                            self._segment_path = lambda: "slice" + "[slice_id='" + str(self.slice_id) + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Oper.SliceControl.LocationList.FPGA.Slice, ['slice_id'], name, value)


                        class Summary(Entity):
                            """
                            
                            
                            .. attribute:: slice_summary
                            
                            	
                            	**type**\: list of  		 :py:class:`SliceSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Oper.SliceControl.LocationList.FPGA.Slice.Summary.SliceSummary>`
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Oper.SliceControl.LocationList.FPGA.Slice.Summary, self).__init__()

                                self.yang_name = "summary"
                                self.yang_parent_name = "slice"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("slice_summary", ("slice_summary", Controller.Oper.SliceControl.LocationList.FPGA.Slice.Summary.SliceSummary))])
                                self._leafs = OrderedDict()

                                self.slice_summary = YList(self)
                                self._segment_path = lambda: "summary"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Oper.SliceControl.LocationList.FPGA.Slice.Summary, [], name, value)


                            class SliceSummary(Entity):
                                """
                                
                                
                                .. attribute:: slice_summ_id  (key)
                                
                                	
                                	**type**\: str
                                
                                	**pattern:** [0\-2]\|all
                                
                                .. attribute:: slice_id
                                
                                	
                                	**type**\: str
                                
                                	**pattern:** [0\-2]\|all
                                
                                .. attribute:: num_phy
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: num_optics
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: num_eeprom
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: num_temp_sensors
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: num_volt_sensors
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: num_curr_sensors
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: is_data_available
                                
                                	
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.Oper.SliceControl.LocationList.FPGA.Slice.Summary.SliceSummary, self).__init__()

                                    self.yang_name = "slice_summary"
                                    self.yang_parent_name = "summary"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['slice_summ_id']
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('slice_summ_id', YLeaf(YType.str, 'slice_summ_id')),
                                        ('slice_id', YLeaf(YType.str, 'slice_id')),
                                        ('num_phy', YLeaf(YType.uint8, 'num_phy')),
                                        ('num_optics', YLeaf(YType.uint8, 'num_optics')),
                                        ('num_eeprom', YLeaf(YType.uint8, 'num_eeprom')),
                                        ('num_temp_sensors', YLeaf(YType.uint8, 'num_temp_sensors')),
                                        ('num_volt_sensors', YLeaf(YType.uint8, 'num_volt_sensors')),
                                        ('num_curr_sensors', YLeaf(YType.uint8, 'num_curr_sensors')),
                                        ('is_data_available', YLeaf(YType.boolean, 'is_data_available')),
                                    ])
                                    self.slice_summ_id = None
                                    self.slice_id = None
                                    self.num_phy = None
                                    self.num_optics = None
                                    self.num_eeprom = None
                                    self.num_temp_sensors = None
                                    self.num_volt_sensors = None
                                    self.num_curr_sensors = None
                                    self.is_data_available = None
                                    self._segment_path = lambda: "slice_summary" + "[slice_summ_id='" + str(self.slice_summ_id) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.Oper.SliceControl.LocationList.FPGA.Slice.Summary.SliceSummary, ['slice_summ_id', 'slice_id', 'num_phy', 'num_optics', 'num_eeprom', 'num_temp_sensors', 'num_volt_sensors', 'num_curr_sensors', 'is_data_available'], name, value)


                        class CurrSensor(Entity):
                            """
                            
                            
                            .. attribute:: sensor_id  (key)
                            
                            	
                            	**type**\: str
                            
                            	**pattern:** all\|(0?[0\-9]\|1[0\-5])
                            
                            .. attribute:: curr_sensor_id
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: curr_dev_addr
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: curr_poll_intvl
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: curr_delta
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: curr_raw_data
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: curr_sensor_value
                            
                            	
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: curr_unit
                            
                            	
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: curr_last_value
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: curr_send_update
                            
                            	
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            .. attribute:: curr_num_1sec_intervals
                            
                            	
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: is_data_available
                            
                            	
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Oper.SliceControl.LocationList.FPGA.Slice.CurrSensor, self).__init__()

                                self.yang_name = "curr_sensor"
                                self.yang_parent_name = "slice"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['sensor_id']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('sensor_id', YLeaf(YType.str, 'sensor_id')),
                                    ('curr_sensor_id', YLeaf(YType.str, 'curr_sensor_id')),
                                    ('curr_dev_addr', YLeaf(YType.uint32, 'curr_dev_addr')),
                                    ('curr_poll_intvl', YLeaf(YType.uint32, 'curr_poll_intvl')),
                                    ('curr_delta', YLeaf(YType.uint32, 'curr_delta')),
                                    ('curr_raw_data', YLeaf(YType.uint32, 'curr_raw_data')),
                                    ('curr_sensor_value', YLeaf(YType.int32, 'curr_sensor_value')),
                                    ('curr_unit', YLeaf(YType.int32, 'curr_unit')),
                                    ('curr_last_value', YLeaf(YType.uint32, 'curr_last_value')),
                                    ('curr_send_update', YLeaf(YType.boolean, 'curr_send_update')),
                                    ('curr_num_1sec_intervals', YLeaf(YType.int32, 'curr_num_1sec_intervals')),
                                    ('is_data_available', YLeaf(YType.boolean, 'is_data_available')),
                                ])
                                self.sensor_id = None
                                self.curr_sensor_id = None
                                self.curr_dev_addr = None
                                self.curr_poll_intvl = None
                                self.curr_delta = None
                                self.curr_raw_data = None
                                self.curr_sensor_value = None
                                self.curr_unit = None
                                self.curr_last_value = None
                                self.curr_send_update = None
                                self.curr_num_1sec_intervals = None
                                self.is_data_available = None
                                self._segment_path = lambda: "curr_sensor" + "[sensor_id='" + str(self.sensor_id) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Oper.SliceControl.LocationList.FPGA.Slice.CurrSensor, ['sensor_id', 'curr_sensor_id', 'curr_dev_addr', 'curr_poll_intvl', 'curr_delta', 'curr_raw_data', 'curr_sensor_value', 'curr_unit', 'curr_last_value', 'curr_send_update', 'curr_num_1sec_intervals', 'is_data_available'], name, value)


                        class Eeprom(Entity):
                            """
                            
                            
                            .. attribute:: eeprom_id  (key)
                            
                            	
                            	**type**\: str
                            
                            	**pattern:** all\|[0\-1]
                            
                            .. attribute:: eeprom_type
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: eeprom_bus
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: eeprom_i2c_regs
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: is_data_available
                            
                            	
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Oper.SliceControl.LocationList.FPGA.Slice.Eeprom, self).__init__()

                                self.yang_name = "eeprom"
                                self.yang_parent_name = "slice"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['eeprom_id']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('eeprom_id', YLeaf(YType.str, 'eeprom_id')),
                                    ('eeprom_type', YLeaf(YType.str, 'eeprom_type')),
                                    ('eeprom_bus', YLeaf(YType.str, 'eeprom_bus')),
                                    ('eeprom_i2c_regs', YLeaf(YType.str, 'eeprom_i2c_regs')),
                                    ('is_data_available', YLeaf(YType.boolean, 'is_data_available')),
                                ])
                                self.eeprom_id = None
                                self.eeprom_type = None
                                self.eeprom_bus = None
                                self.eeprom_i2c_regs = None
                                self.is_data_available = None
                                self._segment_path = lambda: "eeprom" + "[eeprom_id='" + str(self.eeprom_id) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Oper.SliceControl.LocationList.FPGA.Slice.Eeprom, ['eeprom_id', 'eeprom_type', 'eeprom_bus', 'eeprom_i2c_regs', 'is_data_available'], name, value)


                        class OpticsSummary(Entity):
                            """
                            
                            
                            .. attribute:: optics_id  (key)
                            
                            	
                            	**type**\: str
                            
                            	**pattern:** all\|[0\-4]
                            
                            .. attribute:: optics_type
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: optics_bus
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: optics_i2c_regs
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: is_data_available
                            
                            	
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Oper.SliceControl.LocationList.FPGA.Slice.OpticsSummary, self).__init__()

                                self.yang_name = "optics_summary"
                                self.yang_parent_name = "slice"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['optics_id']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('optics_id', YLeaf(YType.str, 'optics_id')),
                                    ('optics_type', YLeaf(YType.str, 'optics_type')),
                                    ('optics_bus', YLeaf(YType.str, 'optics_bus')),
                                    ('optics_i2c_regs', YLeaf(YType.str, 'optics_i2c_regs')),
                                    ('is_data_available', YLeaf(YType.boolean, 'is_data_available')),
                                ])
                                self.optics_id = None
                                self.optics_type = None
                                self.optics_bus = None
                                self.optics_i2c_regs = None
                                self.is_data_available = None
                                self._segment_path = lambda: "optics_summary" + "[optics_id='" + str(self.optics_id) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Oper.SliceControl.LocationList.FPGA.Slice.OpticsSummary, ['optics_id', 'optics_type', 'optics_bus', 'optics_i2c_regs', 'is_data_available'], name, value)


                        class Optics(Entity):
                            """
                            
                            
                            .. attribute:: optics_id  (key)
                            
                            	
                            	**type**\: str
                            
                            	**pattern:** all\|[0\-4]
                            
                            .. attribute:: cxp
                            
                            	
                            	**type**\: list of  		 :py:class:`Cxp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Oper.SliceControl.LocationList.FPGA.Slice.Optics.Cxp>`
                            
                            .. attribute:: tx_info
                            
                            	
                            	**type**\: list of  		 :py:class:`TxInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Oper.SliceControl.LocationList.FPGA.Slice.Optics.TxInfo>`
                            
                            .. attribute:: rx_info
                            
                            	
                            	**type**\: list of  		 :py:class:`RxInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Oper.SliceControl.LocationList.FPGA.Slice.Optics.RxInfo>`
                            
                            .. attribute:: tx_coefficients
                            
                            	
                            	**type**\: list of  		 :py:class:`TxCoefficients <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Oper.SliceControl.LocationList.FPGA.Slice.Optics.TxCoefficients>`
                            
                            .. attribute:: rx_coefficients
                            
                            	
                            	**type**\: list of  		 :py:class:`RxCoefficients <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Oper.SliceControl.LocationList.FPGA.Slice.Optics.RxCoefficients>`
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Oper.SliceControl.LocationList.FPGA.Slice.Optics, self).__init__()

                                self.yang_name = "optics"
                                self.yang_parent_name = "slice"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['optics_id']
                                self._child_classes = OrderedDict([("cxp", ("cxp", Controller.Oper.SliceControl.LocationList.FPGA.Slice.Optics.Cxp)), ("tx_info", ("tx_info", Controller.Oper.SliceControl.LocationList.FPGA.Slice.Optics.TxInfo)), ("rx_info", ("rx_info", Controller.Oper.SliceControl.LocationList.FPGA.Slice.Optics.RxInfo)), ("tx_coefficients", ("tx_coefficients", Controller.Oper.SliceControl.LocationList.FPGA.Slice.Optics.TxCoefficients)), ("rx_coefficients", ("rx_coefficients", Controller.Oper.SliceControl.LocationList.FPGA.Slice.Optics.RxCoefficients))])
                                self._leafs = OrderedDict([
                                    ('optics_id', YLeaf(YType.str, 'optics_id')),
                                ])
                                self.optics_id = None

                                self.cxp = YList(self)
                                self.tx_info = YList(self)
                                self.rx_info = YList(self)
                                self.tx_coefficients = YList(self)
                                self.rx_coefficients = YList(self)
                                self._segment_path = lambda: "optics" + "[optics_id='" + str(self.optics_id) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Oper.SliceControl.LocationList.FPGA.Slice.Optics, ['optics_id'], name, value)


                            class Cxp(Entity):
                                """
                                
                                
                                .. attribute:: cxp_id  (key)
                                
                                	
                                	**type**\: str
                                
                                	**pattern:** all\|[0\-2]
                                
                                .. attribute:: signature
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: cxp_port_ready
                                
                                	
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: opaque
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: nodeid
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: slice
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: capabilities
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: vendor_name
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: vendor_part_num
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: vendor_rev_num
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: vendor_serial_num
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: passive
                                
                                	
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: is_data_available
                                
                                	
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.Oper.SliceControl.LocationList.FPGA.Slice.Optics.Cxp, self).__init__()

                                    self.yang_name = "cxp"
                                    self.yang_parent_name = "optics"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['cxp_id']
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('cxp_id', YLeaf(YType.str, 'cxp_id')),
                                        ('signature', YLeaf(YType.str, 'signature')),
                                        ('cxp_port_ready', YLeaf(YType.boolean, 'cxp_port_ready')),
                                        ('opaque', YLeaf(YType.str, 'opaque')),
                                        ('nodeid', YLeaf(YType.str, 'nodeid')),
                                        ('slice', YLeaf(YType.uint32, 'slice')),
                                        ('capabilities', YLeaf(YType.str, 'capabilities')),
                                        ('vendor_name', YLeaf(YType.str, 'vendor_name')),
                                        ('vendor_part_num', YLeaf(YType.str, 'vendor_part_num')),
                                        ('vendor_rev_num', YLeaf(YType.str, 'vendor_rev_num')),
                                        ('vendor_serial_num', YLeaf(YType.str, 'vendor_serial_num')),
                                        ('passive', YLeaf(YType.boolean, 'passive')),
                                        ('is_data_available', YLeaf(YType.boolean, 'is_data_available')),
                                    ])
                                    self.cxp_id = None
                                    self.signature = None
                                    self.cxp_port_ready = None
                                    self.opaque = None
                                    self.nodeid = None
                                    self.slice = None
                                    self.capabilities = None
                                    self.vendor_name = None
                                    self.vendor_part_num = None
                                    self.vendor_rev_num = None
                                    self.vendor_serial_num = None
                                    self.passive = None
                                    self.is_data_available = None
                                    self._segment_path = lambda: "cxp" + "[cxp_id='" + str(self.cxp_id) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.Oper.SliceControl.LocationList.FPGA.Slice.Optics.Cxp, ['cxp_id', 'signature', 'cxp_port_ready', 'opaque', 'nodeid', 'slice', 'capabilities', 'vendor_name', 'vendor_part_num', 'vendor_rev_num', 'vendor_serial_num', 'passive', 'is_data_available'], name, value)


                            class TxInfo(Entity):
                                """
                                
                                
                                .. attribute:: tx_channel_id  (key)
                                
                                	
                                	**type**\: str
                                
                                	**pattern:** all\|(0?[0\-9]\|1[0\-1])
                                
                                .. attribute:: tx_status_flag
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: tx_error_flag
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: is_data_available
                                
                                	
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.Oper.SliceControl.LocationList.FPGA.Slice.Optics.TxInfo, self).__init__()

                                    self.yang_name = "tx_info"
                                    self.yang_parent_name = "optics"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['tx_channel_id']
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('tx_channel_id', YLeaf(YType.str, 'tx_channel_id')),
                                        ('tx_status_flag', YLeaf(YType.str, 'tx_status_flag')),
                                        ('tx_error_flag', YLeaf(YType.str, 'tx_error_flag')),
                                        ('is_data_available', YLeaf(YType.boolean, 'is_data_available')),
                                    ])
                                    self.tx_channel_id = None
                                    self.tx_status_flag = None
                                    self.tx_error_flag = None
                                    self.is_data_available = None
                                    self._segment_path = lambda: "tx_info" + "[tx_channel_id='" + str(self.tx_channel_id) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.Oper.SliceControl.LocationList.FPGA.Slice.Optics.TxInfo, ['tx_channel_id', 'tx_status_flag', 'tx_error_flag', 'is_data_available'], name, value)


                            class RxInfo(Entity):
                                """
                                
                                
                                .. attribute:: rx_channel_id  (key)
                                
                                	
                                	**type**\: str
                                
                                	**pattern:** all\|(0?[0\-9]\|1[0\-1])
                                
                                .. attribute:: rx_status_flag
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: rx_error_flag
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: is_data_available
                                
                                	
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.Oper.SliceControl.LocationList.FPGA.Slice.Optics.RxInfo, self).__init__()

                                    self.yang_name = "rx_info"
                                    self.yang_parent_name = "optics"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['rx_channel_id']
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('rx_channel_id', YLeaf(YType.str, 'rx_channel_id')),
                                        ('rx_status_flag', YLeaf(YType.str, 'rx_status_flag')),
                                        ('rx_error_flag', YLeaf(YType.str, 'rx_error_flag')),
                                        ('is_data_available', YLeaf(YType.boolean, 'is_data_available')),
                                    ])
                                    self.rx_channel_id = None
                                    self.rx_status_flag = None
                                    self.rx_error_flag = None
                                    self.is_data_available = None
                                    self._segment_path = lambda: "rx_info" + "[rx_channel_id='" + str(self.rx_channel_id) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.Oper.SliceControl.LocationList.FPGA.Slice.Optics.RxInfo, ['rx_channel_id', 'rx_status_flag', 'rx_error_flag', 'is_data_available'], name, value)


                            class TxCoefficients(Entity):
                                """
                                
                                
                                .. attribute:: tx_channel_id  (key)
                                
                                	
                                	**type**\: str
                                
                                	**pattern:** all\|(0?[0\-9]\|1[0\-1])
                                
                                .. attribute:: equalization
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: is_data_available
                                
                                	
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.Oper.SliceControl.LocationList.FPGA.Slice.Optics.TxCoefficients, self).__init__()

                                    self.yang_name = "tx_coefficients"
                                    self.yang_parent_name = "optics"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['tx_channel_id']
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('tx_channel_id', YLeaf(YType.str, 'tx_channel_id')),
                                        ('equalization', YLeaf(YType.str, 'equalization')),
                                        ('is_data_available', YLeaf(YType.boolean, 'is_data_available')),
                                    ])
                                    self.tx_channel_id = None
                                    self.equalization = None
                                    self.is_data_available = None
                                    self._segment_path = lambda: "tx_coefficients" + "[tx_channel_id='" + str(self.tx_channel_id) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.Oper.SliceControl.LocationList.FPGA.Slice.Optics.TxCoefficients, ['tx_channel_id', 'equalization', 'is_data_available'], name, value)


                            class RxCoefficients(Entity):
                                """
                                
                                
                                .. attribute:: rx_channel_id  (key)
                                
                                	
                                	**type**\: str
                                
                                	**pattern:** all\|(0?[0\-9]\|1[0\-1])
                                
                                .. attribute:: amplitude
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: de_emphasis
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: is_data_available
                                
                                	
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.Oper.SliceControl.LocationList.FPGA.Slice.Optics.RxCoefficients, self).__init__()

                                    self.yang_name = "rx_coefficients"
                                    self.yang_parent_name = "optics"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['rx_channel_id']
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('rx_channel_id', YLeaf(YType.str, 'rx_channel_id')),
                                        ('amplitude', YLeaf(YType.str, 'amplitude')),
                                        ('de_emphasis', YLeaf(YType.str, 'de_emphasis')),
                                        ('is_data_available', YLeaf(YType.boolean, 'is_data_available')),
                                    ])
                                    self.rx_channel_id = None
                                    self.amplitude = None
                                    self.de_emphasis = None
                                    self.is_data_available = None
                                    self._segment_path = lambda: "rx_coefficients" + "[rx_channel_id='" + str(self.rx_channel_id) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.Oper.SliceControl.LocationList.FPGA.Slice.Optics.RxCoefficients, ['rx_channel_id', 'amplitude', 'de_emphasis', 'is_data_available'], name, value)


                        class Phy(Entity):
                            """
                            
                            
                            .. attribute:: phy_id  (key)
                            
                            	
                            	**type**\: str
                            
                            	**pattern:** all\|[0\-9]
                            
                            .. attribute:: phy_type
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: phy_bus
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: phy_i2c_regs
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: is_data_available
                            
                            	
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Oper.SliceControl.LocationList.FPGA.Slice.Phy, self).__init__()

                                self.yang_name = "phy"
                                self.yang_parent_name = "slice"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['phy_id']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('phy_id', YLeaf(YType.str, 'phy_id')),
                                    ('phy_type', YLeaf(YType.str, 'phy_type')),
                                    ('phy_bus', YLeaf(YType.str, 'phy_bus')),
                                    ('phy_i2c_regs', YLeaf(YType.str, 'phy_i2c_regs')),
                                    ('is_data_available', YLeaf(YType.boolean, 'is_data_available')),
                                ])
                                self.phy_id = None
                                self.phy_type = None
                                self.phy_bus = None
                                self.phy_i2c_regs = None
                                self.is_data_available = None
                                self._segment_path = lambda: "phy" + "[phy_id='" + str(self.phy_id) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Oper.SliceControl.LocationList.FPGA.Slice.Phy, ['phy_id', 'phy_type', 'phy_bus', 'phy_i2c_regs', 'is_data_available'], name, value)


                        class TempSensor(Entity):
                            """
                            
                            
                            .. attribute:: sensor_id  (key)
                            
                            	
                            	**type**\: str
                            
                            	**pattern:** all\|(0?[0\-9]\|1[0\-9]\|2[0\-1])
                            
                            .. attribute:: temp_sensor_id
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: temp_dev_addr
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: temp_poll_intvl
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: temp_delta
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: temp_raw_data
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: temp_sensor_value
                            
                            	
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: temp_unit
                            
                            	
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: temp_last_value
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: temp_send_update
                            
                            	
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            .. attribute:: temp_num_1sec_intervals
                            
                            	
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: is_data_available
                            
                            	
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Oper.SliceControl.LocationList.FPGA.Slice.TempSensor, self).__init__()

                                self.yang_name = "temp_sensor"
                                self.yang_parent_name = "slice"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['sensor_id']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('sensor_id', YLeaf(YType.str, 'sensor_id')),
                                    ('temp_sensor_id', YLeaf(YType.str, 'temp_sensor_id')),
                                    ('temp_dev_addr', YLeaf(YType.uint32, 'temp_dev_addr')),
                                    ('temp_poll_intvl', YLeaf(YType.uint32, 'temp_poll_intvl')),
                                    ('temp_delta', YLeaf(YType.uint32, 'temp_delta')),
                                    ('temp_raw_data', YLeaf(YType.uint32, 'temp_raw_data')),
                                    ('temp_sensor_value', YLeaf(YType.int32, 'temp_sensor_value')),
                                    ('temp_unit', YLeaf(YType.int32, 'temp_unit')),
                                    ('temp_last_value', YLeaf(YType.uint32, 'temp_last_value')),
                                    ('temp_send_update', YLeaf(YType.boolean, 'temp_send_update')),
                                    ('temp_num_1sec_intervals', YLeaf(YType.int32, 'temp_num_1sec_intervals')),
                                    ('is_data_available', YLeaf(YType.boolean, 'is_data_available')),
                                ])
                                self.sensor_id = None
                                self.temp_sensor_id = None
                                self.temp_dev_addr = None
                                self.temp_poll_intvl = None
                                self.temp_delta = None
                                self.temp_raw_data = None
                                self.temp_sensor_value = None
                                self.temp_unit = None
                                self.temp_last_value = None
                                self.temp_send_update = None
                                self.temp_num_1sec_intervals = None
                                self.is_data_available = None
                                self._segment_path = lambda: "temp_sensor" + "[sensor_id='" + str(self.sensor_id) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Oper.SliceControl.LocationList.FPGA.Slice.TempSensor, ['sensor_id', 'temp_sensor_id', 'temp_dev_addr', 'temp_poll_intvl', 'temp_delta', 'temp_raw_data', 'temp_sensor_value', 'temp_unit', 'temp_last_value', 'temp_send_update', 'temp_num_1sec_intervals', 'is_data_available'], name, value)


                        class VoltSensor(Entity):
                            """
                            
                            
                            .. attribute:: sensor_id  (key)
                            
                            	
                            	**type**\: str
                            
                            	**pattern:** all\|(0?[0\-9]\|1[0\-9]\|2[0\-1])
                            
                            .. attribute:: volt_sensor_id
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: volt_dev_addr
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: volt_poll_intvl
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: volt_delta
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: volt_raw_data
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: volt_sensor_value
                            
                            	
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: volt_unit
                            
                            	
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: volt_last_value
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: volt_send_update
                            
                            	
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            .. attribute:: volt_num_1sec_intervals
                            
                            	
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: is_data_available
                            
                            	
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Oper.SliceControl.LocationList.FPGA.Slice.VoltSensor, self).__init__()

                                self.yang_name = "volt_sensor"
                                self.yang_parent_name = "slice"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['sensor_id']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('sensor_id', YLeaf(YType.str, 'sensor_id')),
                                    ('volt_sensor_id', YLeaf(YType.str, 'volt_sensor_id')),
                                    ('volt_dev_addr', YLeaf(YType.uint32, 'volt_dev_addr')),
                                    ('volt_poll_intvl', YLeaf(YType.uint32, 'volt_poll_intvl')),
                                    ('volt_delta', YLeaf(YType.uint32, 'volt_delta')),
                                    ('volt_raw_data', YLeaf(YType.uint32, 'volt_raw_data')),
                                    ('volt_sensor_value', YLeaf(YType.int32, 'volt_sensor_value')),
                                    ('volt_unit', YLeaf(YType.int32, 'volt_unit')),
                                    ('volt_last_value', YLeaf(YType.uint32, 'volt_last_value')),
                                    ('volt_send_update', YLeaf(YType.boolean, 'volt_send_update')),
                                    ('volt_num_1sec_intervals', YLeaf(YType.int32, 'volt_num_1sec_intervals')),
                                    ('is_data_available', YLeaf(YType.boolean, 'is_data_available')),
                                ])
                                self.sensor_id = None
                                self.volt_sensor_id = None
                                self.volt_dev_addr = None
                                self.volt_poll_intvl = None
                                self.volt_delta = None
                                self.volt_raw_data = None
                                self.volt_sensor_value = None
                                self.volt_unit = None
                                self.volt_last_value = None
                                self.volt_send_update = None
                                self.volt_num_1sec_intervals = None
                                self.is_data_available = None
                                self._segment_path = lambda: "volt_sensor" + "[sensor_id='" + str(self.sensor_id) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Oper.SliceControl.LocationList.FPGA.Slice.VoltSensor, ['sensor_id', 'volt_sensor_id', 'volt_dev_addr', 'volt_poll_intvl', 'volt_delta', 'volt_raw_data', 'volt_sensor_value', 'volt_unit', 'volt_last_value', 'volt_send_update', 'volt_num_1sec_intervals', 'is_data_available'], name, value)


                        class GearboxSummary(Entity):
                            """
                            
                            
                            .. attribute:: gearbox_id  (key)
                            
                            	
                            	**type**\: str
                            
                            	**pattern:** all\|[0\-1]
                            
                            .. attribute:: is_data_available
                            
                            	
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            .. attribute:: inited
                            
                            	
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            .. attribute:: gopaque
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: gnodeid
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: gslice
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: gport
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: gdev_addr
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            .. attribute:: gdev_type
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            .. attribute:: gctrace_err_hdl
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: gctrace_evt_hdl
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: gctrace_intr_hdl
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: gnext
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: gparent
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: syslanelosmask
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: linelanelosmask
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: syslaneenablemask
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: linelaneenablemask
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: line_lane_cnt
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: sys_lane_cnt
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: verbose
                            
                            	
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            .. attribute:: dwnld_done
                            
                            	
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            .. attribute:: chip_version
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: reversion
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: firmware_version
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: ucode_checksum
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: chip_modesel
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: chip_ref_clocksel
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: line_side_tx_pll
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: line_tx_vco
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: line_tx_vco_state
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: line_side_rx_pll
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: line_rx_vco
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: line_rx_vco_state
                            
                            	
                            	**type**\: str
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Oper.SliceControl.LocationList.FPGA.Slice.GearboxSummary, self).__init__()

                                self.yang_name = "gearbox_summary"
                                self.yang_parent_name = "slice"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['gearbox_id']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('gearbox_id', YLeaf(YType.str, 'gearbox_id')),
                                    ('is_data_available', YLeaf(YType.boolean, 'is_data_available')),
                                    ('inited', YLeaf(YType.boolean, 'inited')),
                                    ('gopaque', YLeaf(YType.str, 'gopaque')),
                                    ('gnodeid', YLeaf(YType.str, 'gnodeid')),
                                    ('gslice', YLeaf(YType.uint32, 'gslice')),
                                    ('gport', YLeaf(YType.uint32, 'gport')),
                                    ('gdev_addr', YLeaf(YType.uint8, 'gdev_addr')),
                                    ('gdev_type', YLeaf(YType.uint8, 'gdev_type')),
                                    ('gctrace_err_hdl', YLeaf(YType.str, 'gctrace_err_hdl')),
                                    ('gctrace_evt_hdl', YLeaf(YType.str, 'gctrace_evt_hdl')),
                                    ('gctrace_intr_hdl', YLeaf(YType.str, 'gctrace_intr_hdl')),
                                    ('gnext', YLeaf(YType.str, 'gnext')),
                                    ('gparent', YLeaf(YType.str, 'gparent')),
                                    ('syslanelosmask', YLeaf(YType.str, 'syslaneLOSMask')),
                                    ('linelanelosmask', YLeaf(YType.str, 'linelaneLOSMask')),
                                    ('syslaneenablemask', YLeaf(YType.str, 'syslaneEnableMask')),
                                    ('linelaneenablemask', YLeaf(YType.str, 'linelaneEnableMask')),
                                    ('line_lane_cnt', YLeaf(YType.str, 'line_lane_cnt')),
                                    ('sys_lane_cnt', YLeaf(YType.str, 'sys_lane_cnt')),
                                    ('verbose', YLeaf(YType.boolean, 'verbose')),
                                    ('dwnld_done', YLeaf(YType.boolean, 'dwnld_done')),
                                    ('chip_version', YLeaf(YType.str, 'chip_version')),
                                    ('reversion', YLeaf(YType.str, 'reversion')),
                                    ('firmware_version', YLeaf(YType.str, 'firmware_version')),
                                    ('ucode_checksum', YLeaf(YType.str, 'ucode_checksum')),
                                    ('chip_modesel', YLeaf(YType.str, 'chip_modesel')),
                                    ('chip_ref_clocksel', YLeaf(YType.str, 'chip_ref_clocksel')),
                                    ('line_side_tx_pll', YLeaf(YType.str, 'line_side_tx_pll')),
                                    ('line_tx_vco', YLeaf(YType.str, 'line_tx_vco')),
                                    ('line_tx_vco_state', YLeaf(YType.str, 'line_tx_vco_state')),
                                    ('line_side_rx_pll', YLeaf(YType.str, 'line_side_rx_pll')),
                                    ('line_rx_vco', YLeaf(YType.str, 'line_rx_vco')),
                                    ('line_rx_vco_state', YLeaf(YType.str, 'line_rx_vco_state')),
                                ])
                                self.gearbox_id = None
                                self.is_data_available = None
                                self.inited = None
                                self.gopaque = None
                                self.gnodeid = None
                                self.gslice = None
                                self.gport = None
                                self.gdev_addr = None
                                self.gdev_type = None
                                self.gctrace_err_hdl = None
                                self.gctrace_evt_hdl = None
                                self.gctrace_intr_hdl = None
                                self.gnext = None
                                self.gparent = None
                                self.syslanelosmask = None
                                self.linelanelosmask = None
                                self.syslaneenablemask = None
                                self.linelaneenablemask = None
                                self.line_lane_cnt = None
                                self.sys_lane_cnt = None
                                self.verbose = None
                                self.dwnld_done = None
                                self.chip_version = None
                                self.reversion = None
                                self.firmware_version = None
                                self.ucode_checksum = None
                                self.chip_modesel = None
                                self.chip_ref_clocksel = None
                                self.line_side_tx_pll = None
                                self.line_tx_vco = None
                                self.line_tx_vco_state = None
                                self.line_side_rx_pll = None
                                self.line_rx_vco = None
                                self.line_rx_vco_state = None
                                self._segment_path = lambda: "gearbox_summary" + "[gearbox_id='" + str(self.gearbox_id) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Oper.SliceControl.LocationList.FPGA.Slice.GearboxSummary, ['gearbox_id', 'is_data_available', 'inited', 'gopaque', 'gnodeid', 'gslice', 'gport', 'gdev_addr', 'gdev_type', 'gctrace_err_hdl', 'gctrace_evt_hdl', 'gctrace_intr_hdl', 'gnext', 'gparent', 'syslanelosmask', 'linelanelosmask', 'syslaneenablemask', 'linelaneenablemask', 'line_lane_cnt', 'sys_lane_cnt', 'verbose', 'dwnld_done', 'chip_version', 'reversion', 'firmware_version', 'ucode_checksum', 'chip_modesel', 'chip_ref_clocksel', 'line_side_tx_pll', 'line_tx_vco', 'line_tx_vco_state', 'line_side_rx_pll', 'line_rx_vco', 'line_rx_vco_state'], name, value)


                        class Gearbox2Summary(Entity):
                            """
                            
                            
                            .. attribute:: gearbox2_id  (key)
                            
                            	
                            	**type**\: str
                            
                            	**pattern:** all\|[0\-3]
                            
                            .. attribute:: is_data_available
                            
                            	
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            .. attribute:: inited
                            
                            	
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            .. attribute:: gopaque
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: gnodeid
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: gslice
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: gport
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: gdev_addr
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            .. attribute:: gdev_type
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            .. attribute:: gctrace_err_hdl
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: gctrace_evt_hdl
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: gctrace_intr_hdl
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: gparent
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: line_lane_cnt
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: sys_lane_cnt
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: verbose
                            
                            	
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            .. attribute:: dwnld_done
                            
                            	
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            .. attribute:: chip_version
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: reversion
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: firmware_version
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: ucode_checksum
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: chip_modesel
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: chip_ref_clocksel
                            
                            	
                            	**type**\: str
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Oper.SliceControl.LocationList.FPGA.Slice.Gearbox2Summary, self).__init__()

                                self.yang_name = "gearbox2_summary"
                                self.yang_parent_name = "slice"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['gearbox2_id']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('gearbox2_id', YLeaf(YType.str, 'gearbox2_id')),
                                    ('is_data_available', YLeaf(YType.boolean, 'is_data_available')),
                                    ('inited', YLeaf(YType.boolean, 'inited')),
                                    ('gopaque', YLeaf(YType.str, 'gopaque')),
                                    ('gnodeid', YLeaf(YType.str, 'gnodeid')),
                                    ('gslice', YLeaf(YType.uint32, 'gslice')),
                                    ('gport', YLeaf(YType.uint32, 'gport')),
                                    ('gdev_addr', YLeaf(YType.uint8, 'gdev_addr')),
                                    ('gdev_type', YLeaf(YType.uint8, 'gdev_type')),
                                    ('gctrace_err_hdl', YLeaf(YType.str, 'gctrace_err_hdl')),
                                    ('gctrace_evt_hdl', YLeaf(YType.str, 'gctrace_evt_hdl')),
                                    ('gctrace_intr_hdl', YLeaf(YType.str, 'gctrace_intr_hdl')),
                                    ('gparent', YLeaf(YType.str, 'gparent')),
                                    ('line_lane_cnt', YLeaf(YType.str, 'line_lane_cnt')),
                                    ('sys_lane_cnt', YLeaf(YType.str, 'sys_lane_cnt')),
                                    ('verbose', YLeaf(YType.boolean, 'verbose')),
                                    ('dwnld_done', YLeaf(YType.boolean, 'dwnld_done')),
                                    ('chip_version', YLeaf(YType.str, 'chip_version')),
                                    ('reversion', YLeaf(YType.str, 'reversion')),
                                    ('firmware_version', YLeaf(YType.str, 'firmware_version')),
                                    ('ucode_checksum', YLeaf(YType.str, 'ucode_checksum')),
                                    ('chip_modesel', YLeaf(YType.str, 'chip_modesel')),
                                    ('chip_ref_clocksel', YLeaf(YType.str, 'chip_ref_clocksel')),
                                ])
                                self.gearbox2_id = None
                                self.is_data_available = None
                                self.inited = None
                                self.gopaque = None
                                self.gnodeid = None
                                self.gslice = None
                                self.gport = None
                                self.gdev_addr = None
                                self.gdev_type = None
                                self.gctrace_err_hdl = None
                                self.gctrace_evt_hdl = None
                                self.gctrace_intr_hdl = None
                                self.gparent = None
                                self.line_lane_cnt = None
                                self.sys_lane_cnt = None
                                self.verbose = None
                                self.dwnld_done = None
                                self.chip_version = None
                                self.reversion = None
                                self.firmware_version = None
                                self.ucode_checksum = None
                                self.chip_modesel = None
                                self.chip_ref_clocksel = None
                                self._segment_path = lambda: "gearbox2_summary" + "[gearbox2_id='" + str(self.gearbox2_id) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Oper.SliceControl.LocationList.FPGA.Slice.Gearbox2Summary, ['gearbox2_id', 'is_data_available', 'inited', 'gopaque', 'gnodeid', 'gslice', 'gport', 'gdev_addr', 'gdev_type', 'gctrace_err_hdl', 'gctrace_evt_hdl', 'gctrace_intr_hdl', 'gparent', 'line_lane_cnt', 'sys_lane_cnt', 'verbose', 'dwnld_done', 'chip_version', 'reversion', 'firmware_version', 'ucode_checksum', 'chip_modesel', 'chip_ref_clocksel'], name, value)


                        class DualGearboxSummary(Entity):
                            """
                            
                            
                            .. attribute:: dual_gearbox_id  (key)
                            
                            	
                            	**type**\: str
                            
                            	**pattern:** all\|[0\-1]
                            
                            .. attribute:: is_data_available
                            
                            	
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            .. attribute:: inited
                            
                            	
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            .. attribute:: gopaque
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: gnodeid
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: gslice
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: gport
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: gdev_addr
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            .. attribute:: gdev_type
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            .. attribute:: gctrace_err_hdl
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: gctrace_evt_hdl
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: gctrace_intr_hdl
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: gnext
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: gparent
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: syslanelosmask
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: linelanelosmask
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: syslaneenablemask
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: linelaneenablemask
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: line_lane_cnt
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: sys_lane_cnt
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: verbose
                            
                            	
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            .. attribute:: dwnld_done
                            
                            	
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            .. attribute:: chip_version
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: reversion
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: firmware_version
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: ucode_checksum
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: chip_modesel
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: chip_ref_clocksel
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: line_side_tx_pll
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: line_tx_vco
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: line_tx_vco_state
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: line_side_rx_pll
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: line_rx_vco
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: line_rx_vco_state
                            
                            	
                            	**type**\: str
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Oper.SliceControl.LocationList.FPGA.Slice.DualGearboxSummary, self).__init__()

                                self.yang_name = "dual_gearbox_summary"
                                self.yang_parent_name = "slice"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['dual_gearbox_id']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('dual_gearbox_id', YLeaf(YType.str, 'dual_gearbox_id')),
                                    ('is_data_available', YLeaf(YType.boolean, 'is_data_available')),
                                    ('inited', YLeaf(YType.boolean, 'inited')),
                                    ('gopaque', YLeaf(YType.str, 'gopaque')),
                                    ('gnodeid', YLeaf(YType.str, 'gnodeid')),
                                    ('gslice', YLeaf(YType.uint32, 'gslice')),
                                    ('gport', YLeaf(YType.uint32, 'gport')),
                                    ('gdev_addr', YLeaf(YType.uint8, 'gdev_addr')),
                                    ('gdev_type', YLeaf(YType.uint8, 'gdev_type')),
                                    ('gctrace_err_hdl', YLeaf(YType.str, 'gctrace_err_hdl')),
                                    ('gctrace_evt_hdl', YLeaf(YType.str, 'gctrace_evt_hdl')),
                                    ('gctrace_intr_hdl', YLeaf(YType.str, 'gctrace_intr_hdl')),
                                    ('gnext', YLeaf(YType.str, 'gnext')),
                                    ('gparent', YLeaf(YType.str, 'gparent')),
                                    ('syslanelosmask', YLeaf(YType.str, 'syslaneLOSMask')),
                                    ('linelanelosmask', YLeaf(YType.str, 'linelaneLOSMask')),
                                    ('syslaneenablemask', YLeaf(YType.str, 'syslaneEnableMask')),
                                    ('linelaneenablemask', YLeaf(YType.str, 'linelaneEnableMask')),
                                    ('line_lane_cnt', YLeaf(YType.str, 'line_lane_cnt')),
                                    ('sys_lane_cnt', YLeaf(YType.str, 'sys_lane_cnt')),
                                    ('verbose', YLeaf(YType.boolean, 'verbose')),
                                    ('dwnld_done', YLeaf(YType.boolean, 'dwnld_done')),
                                    ('chip_version', YLeaf(YType.str, 'chip_version')),
                                    ('reversion', YLeaf(YType.str, 'reversion')),
                                    ('firmware_version', YLeaf(YType.str, 'firmware_version')),
                                    ('ucode_checksum', YLeaf(YType.str, 'ucode_checksum')),
                                    ('chip_modesel', YLeaf(YType.str, 'chip_modesel')),
                                    ('chip_ref_clocksel', YLeaf(YType.str, 'chip_ref_clocksel')),
                                    ('line_side_tx_pll', YLeaf(YType.str, 'line_side_tx_pll')),
                                    ('line_tx_vco', YLeaf(YType.str, 'line_tx_vco')),
                                    ('line_tx_vco_state', YLeaf(YType.str, 'line_tx_vco_state')),
                                    ('line_side_rx_pll', YLeaf(YType.str, 'line_side_rx_pll')),
                                    ('line_rx_vco', YLeaf(YType.str, 'line_rx_vco')),
                                    ('line_rx_vco_state', YLeaf(YType.str, 'line_rx_vco_state')),
                                ])
                                self.dual_gearbox_id = None
                                self.is_data_available = None
                                self.inited = None
                                self.gopaque = None
                                self.gnodeid = None
                                self.gslice = None
                                self.gport = None
                                self.gdev_addr = None
                                self.gdev_type = None
                                self.gctrace_err_hdl = None
                                self.gctrace_evt_hdl = None
                                self.gctrace_intr_hdl = None
                                self.gnext = None
                                self.gparent = None
                                self.syslanelosmask = None
                                self.linelanelosmask = None
                                self.syslaneenablemask = None
                                self.linelaneenablemask = None
                                self.line_lane_cnt = None
                                self.sys_lane_cnt = None
                                self.verbose = None
                                self.dwnld_done = None
                                self.chip_version = None
                                self.reversion = None
                                self.firmware_version = None
                                self.ucode_checksum = None
                                self.chip_modesel = None
                                self.chip_ref_clocksel = None
                                self.line_side_tx_pll = None
                                self.line_tx_vco = None
                                self.line_tx_vco_state = None
                                self.line_side_rx_pll = None
                                self.line_rx_vco = None
                                self.line_rx_vco_state = None
                                self._segment_path = lambda: "dual_gearbox_summary" + "[dual_gearbox_id='" + str(self.dual_gearbox_id) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Oper.SliceControl.LocationList.FPGA.Slice.DualGearboxSummary, ['dual_gearbox_id', 'is_data_available', 'inited', 'gopaque', 'gnodeid', 'gslice', 'gport', 'gdev_addr', 'gdev_type', 'gctrace_err_hdl', 'gctrace_evt_hdl', 'gctrace_intr_hdl', 'gnext', 'gparent', 'syslanelosmask', 'linelanelosmask', 'syslaneenablemask', 'linelaneenablemask', 'line_lane_cnt', 'sys_lane_cnt', 'verbose', 'dwnld_done', 'chip_version', 'reversion', 'firmware_version', 'ucode_checksum', 'chip_modesel', 'chip_ref_clocksel', 'line_side_tx_pll', 'line_tx_vco', 'line_tx_vco_state', 'line_side_rx_pll', 'line_rx_vco', 'line_rx_vco_state'], name, value)


                        class Gearbox(Entity):
                            """
                            
                            
                            .. attribute:: gearbox_id  (key)
                            
                            	
                            	**type**\: str
                            
                            	**pattern:** all\|[0\-1]
                            
                            .. attribute:: gearbox_lane
                            
                            	
                            	**type**\: list of  		 :py:class:`GearboxLane <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Oper.SliceControl.LocationList.FPGA.Slice.Gearbox.GearboxLane>`
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Oper.SliceControl.LocationList.FPGA.Slice.Gearbox, self).__init__()

                                self.yang_name = "gearbox"
                                self.yang_parent_name = "slice"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['gearbox_id']
                                self._child_classes = OrderedDict([("gearbox_lane", ("gearbox_lane", Controller.Oper.SliceControl.LocationList.FPGA.Slice.Gearbox.GearboxLane))])
                                self._leafs = OrderedDict([
                                    ('gearbox_id', YLeaf(YType.str, 'gearbox_id')),
                                ])
                                self.gearbox_id = None

                                self.gearbox_lane = YList(self)
                                self._segment_path = lambda: "gearbox" + "[gearbox_id='" + str(self.gearbox_id) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Oper.SliceControl.LocationList.FPGA.Slice.Gearbox, ['gearbox_id'], name, value)


                            class GearboxLane(Entity):
                                """
                                
                                
                                .. attribute:: gearbox_lane_id  (key)
                                
                                	
                                	**type**\: str
                                
                                	**pattern:** all\|[0\-9]
                                
                                .. attribute:: is_data_available
                                
                                	
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: system_side_lanes
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: cdr_lock_status_caui
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: line_side_lanes
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: lane_status_cdr
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: lane_status_sig
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: los_status
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: system_side_loopback
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: lane_side_loopback
                                
                                	
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.Oper.SliceControl.LocationList.FPGA.Slice.Gearbox.GearboxLane, self).__init__()

                                    self.yang_name = "gearbox_lane"
                                    self.yang_parent_name = "gearbox"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['gearbox_lane_id']
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('gearbox_lane_id', YLeaf(YType.str, 'gearbox_lane_id')),
                                        ('is_data_available', YLeaf(YType.boolean, 'is_data_available')),
                                        ('system_side_lanes', YLeaf(YType.str, 'system_side_lanes')),
                                        ('cdr_lock_status_caui', YLeaf(YType.str, 'cdr_lock_status_caui')),
                                        ('line_side_lanes', YLeaf(YType.str, 'line_side_lanes')),
                                        ('lane_status_cdr', YLeaf(YType.str, 'lane_status_cdr')),
                                        ('lane_status_sig', YLeaf(YType.str, 'lane_status_sig')),
                                        ('los_status', YLeaf(YType.str, 'los_status')),
                                        ('system_side_loopback', YLeaf(YType.str, 'system_side_loopback')),
                                        ('lane_side_loopback', YLeaf(YType.str, 'lane_side_loopback')),
                                    ])
                                    self.gearbox_lane_id = None
                                    self.is_data_available = None
                                    self.system_side_lanes = None
                                    self.cdr_lock_status_caui = None
                                    self.line_side_lanes = None
                                    self.lane_status_cdr = None
                                    self.lane_status_sig = None
                                    self.los_status = None
                                    self.system_side_loopback = None
                                    self.lane_side_loopback = None
                                    self._segment_path = lambda: "gearbox_lane" + "[gearbox_lane_id='" + str(self.gearbox_lane_id) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.Oper.SliceControl.LocationList.FPGA.Slice.Gearbox.GearboxLane, ['gearbox_lane_id', 'is_data_available', 'system_side_lanes', 'cdr_lock_status_caui', 'line_side_lanes', 'lane_status_cdr', 'lane_status_sig', 'los_status', 'system_side_loopback', 'lane_side_loopback'], name, value)


                        class Gearbox2(Entity):
                            """
                            
                            
                            .. attribute:: gearbox2_id  (key)
                            
                            	
                            	**type**\: str
                            
                            	**pattern:** all\|[0\-3]
                            
                            .. attribute:: gearbox2_lane
                            
                            	
                            	**type**\: list of  		 :py:class:`Gearbox2Lane <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Oper.SliceControl.LocationList.FPGA.Slice.Gearbox2.Gearbox2Lane>`
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Oper.SliceControl.LocationList.FPGA.Slice.Gearbox2, self).__init__()

                                self.yang_name = "gearbox2"
                                self.yang_parent_name = "slice"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['gearbox2_id']
                                self._child_classes = OrderedDict([("gearbox2_lane", ("gearbox2_lane", Controller.Oper.SliceControl.LocationList.FPGA.Slice.Gearbox2.Gearbox2Lane))])
                                self._leafs = OrderedDict([
                                    ('gearbox2_id', YLeaf(YType.str, 'gearbox2_id')),
                                ])
                                self.gearbox2_id = None

                                self.gearbox2_lane = YList(self)
                                self._segment_path = lambda: "gearbox2" + "[gearbox2_id='" + str(self.gearbox2_id) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Oper.SliceControl.LocationList.FPGA.Slice.Gearbox2, ['gearbox2_id'], name, value)


                            class Gearbox2Lane(Entity):
                                """
                                
                                
                                .. attribute:: gearbox2_lane_id  (key)
                                
                                	
                                	**type**\: str
                                
                                	**pattern:** all\|[0\-9]
                                
                                .. attribute:: is_data_available
                                
                                	
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: system_side_lanes
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: cdr_lock_status_caui
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: line_side_lanes
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: lane_status_cdr
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: lane_status_sig
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: los_status
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: system_side_loopback
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: lane_side_loopback
                                
                                	
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.Oper.SliceControl.LocationList.FPGA.Slice.Gearbox2.Gearbox2Lane, self).__init__()

                                    self.yang_name = "gearbox2_lane"
                                    self.yang_parent_name = "gearbox2"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['gearbox2_lane_id']
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('gearbox2_lane_id', YLeaf(YType.str, 'gearbox2_lane_id')),
                                        ('is_data_available', YLeaf(YType.boolean, 'is_data_available')),
                                        ('system_side_lanes', YLeaf(YType.str, 'system_side_lanes')),
                                        ('cdr_lock_status_caui', YLeaf(YType.str, 'cdr_lock_status_caui')),
                                        ('line_side_lanes', YLeaf(YType.str, 'line_side_lanes')),
                                        ('lane_status_cdr', YLeaf(YType.str, 'lane_status_cdr')),
                                        ('lane_status_sig', YLeaf(YType.str, 'lane_status_sig')),
                                        ('los_status', YLeaf(YType.str, 'los_status')),
                                        ('system_side_loopback', YLeaf(YType.str, 'system_side_loopback')),
                                        ('lane_side_loopback', YLeaf(YType.str, 'lane_side_loopback')),
                                    ])
                                    self.gearbox2_lane_id = None
                                    self.is_data_available = None
                                    self.system_side_lanes = None
                                    self.cdr_lock_status_caui = None
                                    self.line_side_lanes = None
                                    self.lane_status_cdr = None
                                    self.lane_status_sig = None
                                    self.los_status = None
                                    self.system_side_loopback = None
                                    self.lane_side_loopback = None
                                    self._segment_path = lambda: "gearbox2_lane" + "[gearbox2_lane_id='" + str(self.gearbox2_lane_id) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.Oper.SliceControl.LocationList.FPGA.Slice.Gearbox2.Gearbox2Lane, ['gearbox2_lane_id', 'is_data_available', 'system_side_lanes', 'cdr_lock_status_caui', 'line_side_lanes', 'lane_status_cdr', 'lane_status_sig', 'los_status', 'system_side_loopback', 'lane_side_loopback'], name, value)


                        class DualGearbox(Entity):
                            """
                            
                            
                            .. attribute:: dual_gearbox_id  (key)
                            
                            	
                            	**type**\: str
                            
                            	**pattern:** all\|[0\-1]
                            
                            .. attribute:: dual_gearbox_lane
                            
                            	
                            	**type**\: list of  		 :py:class:`DualGearboxLane <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Oper.SliceControl.LocationList.FPGA.Slice.DualGearbox.DualGearboxLane>`
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Oper.SliceControl.LocationList.FPGA.Slice.DualGearbox, self).__init__()

                                self.yang_name = "dual_gearbox"
                                self.yang_parent_name = "slice"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['dual_gearbox_id']
                                self._child_classes = OrderedDict([("dual_gearbox_lane", ("dual_gearbox_lane", Controller.Oper.SliceControl.LocationList.FPGA.Slice.DualGearbox.DualGearboxLane))])
                                self._leafs = OrderedDict([
                                    ('dual_gearbox_id', YLeaf(YType.str, 'dual_gearbox_id')),
                                ])
                                self.dual_gearbox_id = None

                                self.dual_gearbox_lane = YList(self)
                                self._segment_path = lambda: "dual_gearbox" + "[dual_gearbox_id='" + str(self.dual_gearbox_id) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Oper.SliceControl.LocationList.FPGA.Slice.DualGearbox, ['dual_gearbox_id'], name, value)


                            class DualGearboxLane(Entity):
                                """
                                
                                
                                .. attribute:: dual_gearbox_lane_id  (key)
                                
                                	
                                	**type**\: str
                                
                                	**pattern:** all\|[0\-9]
                                
                                .. attribute:: is_data_available
                                
                                	
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: system_side_lanes
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: cdr_lock_status_caui
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: line_side_lanes
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: lane_status_cdr
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: lane_status_sig
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: los_status
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: system_side_loopback
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: lane_side_loopback
                                
                                	
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.Oper.SliceControl.LocationList.FPGA.Slice.DualGearbox.DualGearboxLane, self).__init__()

                                    self.yang_name = "dual_gearbox_lane"
                                    self.yang_parent_name = "dual_gearbox"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['dual_gearbox_lane_id']
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('dual_gearbox_lane_id', YLeaf(YType.str, 'dual_gearbox_lane_id')),
                                        ('is_data_available', YLeaf(YType.boolean, 'is_data_available')),
                                        ('system_side_lanes', YLeaf(YType.str, 'system_side_lanes')),
                                        ('cdr_lock_status_caui', YLeaf(YType.str, 'cdr_lock_status_caui')),
                                        ('line_side_lanes', YLeaf(YType.str, 'line_side_lanes')),
                                        ('lane_status_cdr', YLeaf(YType.str, 'lane_status_cdr')),
                                        ('lane_status_sig', YLeaf(YType.str, 'lane_status_sig')),
                                        ('los_status', YLeaf(YType.str, 'los_status')),
                                        ('system_side_loopback', YLeaf(YType.str, 'system_side_loopback')),
                                        ('lane_side_loopback', YLeaf(YType.str, 'lane_side_loopback')),
                                    ])
                                    self.dual_gearbox_lane_id = None
                                    self.is_data_available = None
                                    self.system_side_lanes = None
                                    self.cdr_lock_status_caui = None
                                    self.line_side_lanes = None
                                    self.lane_status_cdr = None
                                    self.lane_status_sig = None
                                    self.los_status = None
                                    self.system_side_loopback = None
                                    self.lane_side_loopback = None
                                    self._segment_path = lambda: "dual_gearbox_lane" + "[dual_gearbox_lane_id='" + str(self.dual_gearbox_lane_id) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.Oper.SliceControl.LocationList.FPGA.Slice.DualGearbox.DualGearboxLane, ['dual_gearbox_lane_id', 'is_data_available', 'system_side_lanes', 'cdr_lock_status_caui', 'line_side_lanes', 'lane_status_cdr', 'lane_status_sig', 'los_status', 'system_side_loopback', 'lane_side_loopback'], name, value)


                        class Cpak(Entity):
                            """
                            
                            
                            .. attribute:: cpak_id  (key)
                            
                            	
                            	**type**\: str
                            
                            	**pattern:** all\|[0\-3]
                            
                            .. attribute:: is_data_available
                            
                            	
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            .. attribute:: csignature
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: cready
                            
                            	
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            .. attribute:: cpassive
                            
                            	
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            .. attribute:: chw_ver_major
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            .. attribute:: chw_ver_minor
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            .. attribute:: copaque
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: cnodeid
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: cslice
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: cport
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: cprt_addr
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            .. attribute:: cdev_addr
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            .. attribute:: cdev_sel
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            .. attribute:: cupgrade_inprogress
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            .. attribute:: coptics_type
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: cctrace_err_hdl
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: cctrace_evt_hdl
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: cnext
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: cparent
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: crunning_image
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: ccommitted_image
                            
                            	
                            	**type**\: str
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Oper.SliceControl.LocationList.FPGA.Slice.Cpak, self).__init__()

                                self.yang_name = "cpak"
                                self.yang_parent_name = "slice"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['cpak_id']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('cpak_id', YLeaf(YType.str, 'cpak_id')),
                                    ('is_data_available', YLeaf(YType.boolean, 'is_data_available')),
                                    ('csignature', YLeaf(YType.str, 'csignature')),
                                    ('cready', YLeaf(YType.boolean, 'cready')),
                                    ('cpassive', YLeaf(YType.boolean, 'cpassive')),
                                    ('chw_ver_major', YLeaf(YType.uint8, 'chw_ver_major')),
                                    ('chw_ver_minor', YLeaf(YType.uint8, 'chw_ver_minor')),
                                    ('copaque', YLeaf(YType.str, 'copaque')),
                                    ('cnodeid', YLeaf(YType.str, 'cnodeid')),
                                    ('cslice', YLeaf(YType.uint32, 'cslice')),
                                    ('cport', YLeaf(YType.uint32, 'cport')),
                                    ('cprt_addr', YLeaf(YType.uint8, 'cprt_addr')),
                                    ('cdev_addr', YLeaf(YType.uint8, 'cdev_addr')),
                                    ('cdev_sel', YLeaf(YType.uint8, 'cdev_sel')),
                                    ('cupgrade_inprogress', YLeaf(YType.uint8, 'cupgrade_inprogress')),
                                    ('coptics_type', YLeaf(YType.str, 'coptics_type')),
                                    ('cctrace_err_hdl', YLeaf(YType.str, 'cctrace_err_hdl')),
                                    ('cctrace_evt_hdl', YLeaf(YType.str, 'cctrace_evt_hdl')),
                                    ('cnext', YLeaf(YType.str, 'cnext')),
                                    ('cparent', YLeaf(YType.str, 'cparent')),
                                    ('crunning_image', YLeaf(YType.str, 'crunning_image')),
                                    ('ccommitted_image', YLeaf(YType.str, 'ccommitted_image')),
                                ])
                                self.cpak_id = None
                                self.is_data_available = None
                                self.csignature = None
                                self.cready = None
                                self.cpassive = None
                                self.chw_ver_major = None
                                self.chw_ver_minor = None
                                self.copaque = None
                                self.cnodeid = None
                                self.cslice = None
                                self.cport = None
                                self.cprt_addr = None
                                self.cdev_addr = None
                                self.cdev_sel = None
                                self.cupgrade_inprogress = None
                                self.coptics_type = None
                                self.cctrace_err_hdl = None
                                self.cctrace_evt_hdl = None
                                self.cnext = None
                                self.cparent = None
                                self.crunning_image = None
                                self.ccommitted_image = None
                                self._segment_path = lambda: "cpak" + "[cpak_id='" + str(self.cpak_id) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Oper.SliceControl.LocationList.FPGA.Slice.Cpak, [u'cpak_id', u'is_data_available', u'csignature', u'cready', u'cpassive', u'chw_ver_major', u'chw_ver_minor', u'copaque', u'cnodeid', u'cslice', u'cport', u'cprt_addr', u'cdev_addr', u'cdev_sel', u'cupgrade_inprogress', u'coptics_type', u'cctrace_err_hdl', u'cctrace_evt_hdl', u'cnext', u'cparent', u'crunning_image', u'ccommitted_image'], name, value)


                        class ModenaSummary(Entity):
                            """
                            
                            
                            .. attribute:: modena_id  (key)
                            
                            	
                            	**type**\: str
                            
                            	**pattern:** all\|[0\-19]
                            
                            .. attribute:: is_data_available
                            
                            	
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            .. attribute:: mready
                            
                            	
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            .. attribute:: mport_ctx_p
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: mlevm
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: mctrace_err_hdl
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: mctrace_evt_hdl
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: msignature
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: mlpc_ready
                            
                            	
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            .. attribute:: mopaque
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: mnodeid
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: mslice
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: mport
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: mdev_addr
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            .. attribute:: mrd_func
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: mwr_func
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: mnext
                            
                            	
                            	**type**\: str
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Oper.SliceControl.LocationList.FPGA.Slice.ModenaSummary, self).__init__()

                                self.yang_name = "modena_summary"
                                self.yang_parent_name = "slice"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['modena_id']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('modena_id', YLeaf(YType.str, 'modena_id')),
                                    ('is_data_available', YLeaf(YType.boolean, 'is_data_available')),
                                    ('mready', YLeaf(YType.boolean, 'mready')),
                                    ('mport_ctx_p', YLeaf(YType.str, 'mport_ctx_p')),
                                    ('mlevm', YLeaf(YType.str, 'mlevm')),
                                    ('mctrace_err_hdl', YLeaf(YType.str, 'mctrace_err_hdl')),
                                    ('mctrace_evt_hdl', YLeaf(YType.str, 'mctrace_evt_hdl')),
                                    ('msignature', YLeaf(YType.str, 'msignature')),
                                    ('mlpc_ready', YLeaf(YType.boolean, 'mlpc_ready')),
                                    ('mopaque', YLeaf(YType.str, 'mopaque')),
                                    ('mnodeid', YLeaf(YType.str, 'mnodeid')),
                                    ('mslice', YLeaf(YType.uint32, 'mslice')),
                                    ('mport', YLeaf(YType.uint32, 'mport')),
                                    ('mdev_addr', YLeaf(YType.uint8, 'mdev_addr')),
                                    ('mrd_func', YLeaf(YType.str, 'mrd_func')),
                                    ('mwr_func', YLeaf(YType.str, 'mwr_func')),
                                    ('mnext', YLeaf(YType.str, 'mnext')),
                                ])
                                self.modena_id = None
                                self.is_data_available = None
                                self.mready = None
                                self.mport_ctx_p = None
                                self.mlevm = None
                                self.mctrace_err_hdl = None
                                self.mctrace_evt_hdl = None
                                self.msignature = None
                                self.mlpc_ready = None
                                self.mopaque = None
                                self.mnodeid = None
                                self.mslice = None
                                self.mport = None
                                self.mdev_addr = None
                                self.mrd_func = None
                                self.mwr_func = None
                                self.mnext = None
                                self._segment_path = lambda: "modena_summary" + "[modena_id='" + str(self.modena_id) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Oper.SliceControl.LocationList.FPGA.Slice.ModenaSummary, ['modena_id', 'is_data_available', 'mready', 'mport_ctx_p', 'mlevm', 'mctrace_err_hdl', 'mctrace_evt_hdl', 'msignature', 'mlpc_ready', 'mopaque', 'mnodeid', 'mslice', 'mport', 'mdev_addr', 'mrd_func', 'mwr_func', 'mnext'], name, value)


                        class Modena(Entity):
                            """
                            
                            
                            .. attribute:: modena_id  (key)
                            
                            	
                            	**type**\: str
                            
                            	**pattern:** all\|[0\-19]
                            
                            .. attribute:: modena_lane
                            
                            	
                            	**type**\: list of  		 :py:class:`ModenaLane <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Oper.SliceControl.LocationList.FPGA.Slice.Modena.ModenaLane>`
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Oper.SliceControl.LocationList.FPGA.Slice.Modena, self).__init__()

                                self.yang_name = "modena"
                                self.yang_parent_name = "slice"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['modena_id']
                                self._child_classes = OrderedDict([("modena_lane", ("modena_lane", Controller.Oper.SliceControl.LocationList.FPGA.Slice.Modena.ModenaLane))])
                                self._leafs = OrderedDict([
                                    ('modena_id', YLeaf(YType.str, 'modena_id')),
                                ])
                                self.modena_id = None

                                self.modena_lane = YList(self)
                                self._segment_path = lambda: "modena" + "[modena_id='" + str(self.modena_id) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Oper.SliceControl.LocationList.FPGA.Slice.Modena, ['modena_id'], name, value)


                            class ModenaLane(Entity):
                                """
                                
                                
                                .. attribute:: modena_lane_id  (key)
                                
                                	
                                	**type**\: str
                                
                                	**pattern:** all\|[0\-3]
                                
                                .. attribute:: is_data_available
                                
                                	
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: oper_mode
                                
                                	
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.Oper.SliceControl.LocationList.FPGA.Slice.Modena.ModenaLane, self).__init__()

                                    self.yang_name = "modena_lane"
                                    self.yang_parent_name = "modena"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['modena_lane_id']
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('modena_lane_id', YLeaf(YType.str, 'modena_lane_id')),
                                        ('is_data_available', YLeaf(YType.boolean, 'is_data_available')),
                                        ('oper_mode', YLeaf(YType.str, 'oper_mode')),
                                    ])
                                    self.modena_lane_id = None
                                    self.is_data_available = None
                                    self.oper_mode = None
                                    self._segment_path = lambda: "modena_lane" + "[modena_lane_id='" + str(self.modena_lane_id) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.Oper.SliceControl.LocationList.FPGA.Slice.Modena.ModenaLane, ['modena_lane_id', 'is_data_available', 'oper_mode'], name, value)


    class Zen(Entity):
        """
        
        
        .. attribute:: zen_oper
        
        	
        	**type**\:  :py:class:`ZenOper <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Zen.ZenOper>`
        
        .. attribute:: trace
        
        	show traceable processes
        	**type**\: list of  		 :py:class:`Trace <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Zen.Trace>`
        
        

        """

        _prefix = 'calvados_controllers'
        _revision = '2017-01-31'

        def __init__(self):
            super(Controller.Zen, self).__init__()

            self.yang_name = "zen"
            self.yang_parent_name = "controller"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([("zen_oper", ("zen_oper", Controller.Zen.ZenOper)), ("trace", ("trace", Controller.Zen.Trace))])
            self._leafs = OrderedDict()

            self.zen_oper = Controller.Zen.ZenOper()
            self.zen_oper.parent = self
            self._children_name_map["zen_oper"] = "zen_oper"

            self.trace = YList(self)
            self._segment_path = lambda: "zen"
            self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Controller.Zen, [], name, value)


        class ZenOper(Entity):
            """
            
            
            .. attribute:: zen_location
            
            	
            	**type**\: list of  		 :py:class:`ZenLocation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Zen.ZenOper.ZenLocation>`
            
            

            """

            _prefix = 'calvados_controllers'
            _revision = '2017-01-31'

            def __init__(self):
                super(Controller.Zen.ZenOper, self).__init__()

                self.yang_name = "zen_oper"
                self.yang_parent_name = "zen"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("zen_location", ("zen_location", Controller.Zen.ZenOper.ZenLocation))])
                self._leafs = OrderedDict()

                self.zen_location = YList(self)
                self._segment_path = lambda: "zen_oper"
                self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/zen/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Controller.Zen.ZenOper, [], name, value)


            class ZenLocation(Entity):
                """
                
                
                .. attribute:: zen_location  (key)
                
                	
                	**type**\: str
                
                .. attribute:: zen_pci_base_address
                
                	
                	**type**\: str
                
                .. attribute:: zen_pci_dev_vendor_id
                
                	
                	**type**\: str
                
                .. attribute:: zen_pci_dev_device_id
                
                	
                	**type**\: str
                
                .. attribute:: zen_hp_desc
                
                	
                	**type**\: str
                
                .. attribute:: zen_handle
                
                	
                	**type**\: str
                
                .. attribute:: zen_msi
                
                	
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: zen_irq
                
                	
                	**type**\: str
                
                .. attribute:: zen_regs
                
                	
                	**type**\: str
                
                .. attribute:: zen_trace
                
                	
                	**type**\: str
                
                .. attribute:: zen_levm
                
                	
                	**type**\: str
                
                .. attribute:: zen_sensor_poll_timer_tree
                
                	
                	**type**\: str
                
                .. attribute:: zen_sensor_poll_timer
                
                	
                	**type**\: str
                
                .. attribute:: zen_sensor_data
                
                	
                	**type**\: str
                
                .. attribute:: zen_sim
                
                	
                	**type**\: bool
                
                	**default value**\: false
                
                .. attribute:: zen_debug
                
                	
                	**type**\: bool
                
                	**default value**\: false
                
                .. attribute:: zen_card_type
                
                	
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: zen_slot_num
                
                	
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: zen_pm_hdl
                
                	
                	**type**\: str
                
                .. attribute:: zen_hdl
                
                	
                	**type**\: str
                
                .. attribute:: zen_ccc_hdl
                
                	
                	**type**\: str
                
                .. attribute:: zen_platform_local_hdl
                
                	
                	**type**\: str
                
                .. attribute:: zen_cdui_srvr_hdl
                
                	
                	**type**\: str
                
                .. attribute:: zen_temp_sensor_default
                
                	
                	**type**\:  :py:class:`ZenTempSensorDefault <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Zen.ZenOper.ZenLocation.ZenTempSensorDefault>`
                
                .. attribute:: zen_volt_sensor_default
                
                	
                	**type**\:  :py:class:`ZenVoltSensorDefault <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Zen.ZenOper.ZenLocation.ZenVoltSensorDefault>`
                
                .. attribute:: zen_curr_sensor_default
                
                	
                	**type**\:  :py:class:`ZenCurrSensorDefault <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Zen.ZenOper.ZenLocation.ZenCurrSensorDefault>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Controller.Zen.ZenOper.ZenLocation, self).__init__()

                    self.yang_name = "zen_location"
                    self.yang_parent_name = "zen_oper"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = ['zen_location']
                    self._child_classes = OrderedDict([("zen_temp_sensor_default", ("zen_temp_sensor_default", Controller.Zen.ZenOper.ZenLocation.ZenTempSensorDefault)), ("zen_volt_sensor_default", ("zen_volt_sensor_default", Controller.Zen.ZenOper.ZenLocation.ZenVoltSensorDefault)), ("zen_curr_sensor_default", ("zen_curr_sensor_default", Controller.Zen.ZenOper.ZenLocation.ZenCurrSensorDefault))])
                    self._leafs = OrderedDict([
                        ('zen_location', YLeaf(YType.str, 'zen_location')),
                        ('zen_pci_base_address', YLeaf(YType.str, 'zen_pci_base_address')),
                        ('zen_pci_dev_vendor_id', YLeaf(YType.str, 'zen_pci_dev_vendor_id')),
                        ('zen_pci_dev_device_id', YLeaf(YType.str, 'zen_pci_dev_device_id')),
                        ('zen_hp_desc', YLeaf(YType.str, 'zen_hp_desc')),
                        ('zen_handle', YLeaf(YType.str, 'zen_handle')),
                        ('zen_msi', YLeaf(YType.uint32, 'zen_msi')),
                        ('zen_irq', YLeaf(YType.str, 'zen_irq')),
                        ('zen_regs', YLeaf(YType.str, 'zen_regs')),
                        ('zen_trace', YLeaf(YType.str, 'zen_trace')),
                        ('zen_levm', YLeaf(YType.str, 'zen_levm')),
                        ('zen_sensor_poll_timer_tree', YLeaf(YType.str, 'zen_sensor_poll_timer_tree')),
                        ('zen_sensor_poll_timer', YLeaf(YType.str, 'zen_sensor_poll_timer')),
                        ('zen_sensor_data', YLeaf(YType.str, 'zen_sensor_data')),
                        ('zen_sim', YLeaf(YType.boolean, 'zen_sim')),
                        ('zen_debug', YLeaf(YType.boolean, 'zen_debug')),
                        ('zen_card_type', YLeaf(YType.uint32, 'zen_card_type')),
                        ('zen_slot_num', YLeaf(YType.uint32, 'zen_slot_num')),
                        ('zen_pm_hdl', YLeaf(YType.str, 'zen_pm_hdl')),
                        ('zen_hdl', YLeaf(YType.str, 'zen_hdl')),
                        ('zen_ccc_hdl', YLeaf(YType.str, 'zen_ccc_hdl')),
                        ('zen_platform_local_hdl', YLeaf(YType.str, 'zen_platform_local_hdl')),
                        ('zen_cdui_srvr_hdl', YLeaf(YType.str, 'zen_cdui_srvr_hdl')),
                    ])
                    self.zen_location = None
                    self.zen_pci_base_address = None
                    self.zen_pci_dev_vendor_id = None
                    self.zen_pci_dev_device_id = None
                    self.zen_hp_desc = None
                    self.zen_handle = None
                    self.zen_msi = None
                    self.zen_irq = None
                    self.zen_regs = None
                    self.zen_trace = None
                    self.zen_levm = None
                    self.zen_sensor_poll_timer_tree = None
                    self.zen_sensor_poll_timer = None
                    self.zen_sensor_data = None
                    self.zen_sim = None
                    self.zen_debug = None
                    self.zen_card_type = None
                    self.zen_slot_num = None
                    self.zen_pm_hdl = None
                    self.zen_hdl = None
                    self.zen_ccc_hdl = None
                    self.zen_platform_local_hdl = None
                    self.zen_cdui_srvr_hdl = None

                    self.zen_temp_sensor_default = Controller.Zen.ZenOper.ZenLocation.ZenTempSensorDefault()
                    self.zen_temp_sensor_default.parent = self
                    self._children_name_map["zen_temp_sensor_default"] = "zen_temp_sensor_default"

                    self.zen_volt_sensor_default = Controller.Zen.ZenOper.ZenLocation.ZenVoltSensorDefault()
                    self.zen_volt_sensor_default.parent = self
                    self._children_name_map["zen_volt_sensor_default"] = "zen_volt_sensor_default"

                    self.zen_curr_sensor_default = Controller.Zen.ZenOper.ZenLocation.ZenCurrSensorDefault()
                    self.zen_curr_sensor_default.parent = self
                    self._children_name_map["zen_curr_sensor_default"] = "zen_curr_sensor_default"
                    self._segment_path = lambda: "zen_location" + "[zen_location='" + str(self.zen_location) + "']"
                    self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/zen/zen_oper/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Controller.Zen.ZenOper.ZenLocation, ['zen_location', 'zen_pci_base_address', 'zen_pci_dev_vendor_id', 'zen_pci_dev_device_id', 'zen_hp_desc', 'zen_handle', 'zen_msi', 'zen_irq', 'zen_regs', 'zen_trace', 'zen_levm', 'zen_sensor_poll_timer_tree', 'zen_sensor_poll_timer', 'zen_sensor_data', 'zen_sim', 'zen_debug', 'zen_card_type', 'zen_slot_num', 'zen_pm_hdl', 'zen_hdl', 'zen_ccc_hdl', 'zen_platform_local_hdl', 'zen_cdui_srvr_hdl'], name, value)


                class ZenTempSensorDefault(Entity):
                    """
                    
                    
                    .. attribute:: zen_temp_sensor_data
                    
                    	
                    	**type**\:  :py:class:`ZenTempSensorData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Zen.ZenOper.ZenLocation.ZenTempSensorDefault.ZenTempSensorData>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.Zen.ZenOper.ZenLocation.ZenTempSensorDefault, self).__init__()

                        self.yang_name = "zen_temp_sensor_default"
                        self.yang_parent_name = "zen_location"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("zen_temp_sensor_data", ("zen_temp_sensor_data", Controller.Zen.ZenOper.ZenLocation.ZenTempSensorDefault.ZenTempSensorData))])
                        self._leafs = OrderedDict()

                        self.zen_temp_sensor_data = Controller.Zen.ZenOper.ZenLocation.ZenTempSensorDefault.ZenTempSensorData()
                        self.zen_temp_sensor_data.parent = self
                        self._children_name_map["zen_temp_sensor_data"] = "zen_temp_sensor_data"
                        self._segment_path = lambda: "zen_temp_sensor_default"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.Zen.ZenOper.ZenLocation.ZenTempSensorDefault, [], name, value)


                    class ZenTempSensorData(Entity):
                        """
                        
                        
                        .. attribute:: zen_temp_sensor
                        
                        	
                        	**type**\: list of  		 :py:class:`ZenTempSensor <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Zen.ZenOper.ZenLocation.ZenTempSensorDefault.ZenTempSensorData.ZenTempSensor>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Zen.ZenOper.ZenLocation.ZenTempSensorDefault.ZenTempSensorData, self).__init__()

                            self.yang_name = "zen_temp_sensor_data"
                            self.yang_parent_name = "zen_temp_sensor_default"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("zen_temp_sensor", ("zen_temp_sensor", Controller.Zen.ZenOper.ZenLocation.ZenTempSensorDefault.ZenTempSensorData.ZenTempSensor))])
                            self._leafs = OrderedDict()

                            self.zen_temp_sensor = YList(self)
                            self._segment_path = lambda: "zen_temp_sensor_data"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Zen.ZenOper.ZenLocation.ZenTempSensorDefault.ZenTempSensorData, [], name, value)


                        class ZenTempSensor(Entity):
                            """
                            
                            
                            .. attribute:: zen_temp_sensor  (key)
                            
                            	
                            	**type**\: str
                            
                            	**pattern:** all\|[0\-4]
                            
                            .. attribute:: zen_temp_sensor_id
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: zen_temp_dev_addr
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: zen_temp_poll_intvl
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: zen_temp_delta
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: zen_temp_raw_data
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: zen_temp_sensor_value
                            
                            	
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: zen_temp_unit
                            
                            	
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: zen_temp_last_value
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: zen_temp_send_update
                            
                            	
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            .. attribute:: zen_temp_num_1sec_intervals
                            
                            	
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Zen.ZenOper.ZenLocation.ZenTempSensorDefault.ZenTempSensorData.ZenTempSensor, self).__init__()

                                self.yang_name = "zen_temp_sensor"
                                self.yang_parent_name = "zen_temp_sensor_data"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['zen_temp_sensor']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('zen_temp_sensor', YLeaf(YType.str, 'zen_temp_sensor')),
                                    ('zen_temp_sensor_id', YLeaf(YType.str, 'zen_temp_sensor_id')),
                                    ('zen_temp_dev_addr', YLeaf(YType.uint32, 'zen_temp_dev_addr')),
                                    ('zen_temp_poll_intvl', YLeaf(YType.uint32, 'zen_temp_poll_intvl')),
                                    ('zen_temp_delta', YLeaf(YType.uint32, 'zen_temp_delta')),
                                    ('zen_temp_raw_data', YLeaf(YType.uint32, 'zen_temp_raw_data')),
                                    ('zen_temp_sensor_value', YLeaf(YType.int32, 'zen_temp_sensor_value')),
                                    ('zen_temp_unit', YLeaf(YType.int32, 'zen_temp_unit')),
                                    ('zen_temp_last_value', YLeaf(YType.uint32, 'zen_temp_last_value')),
                                    ('zen_temp_send_update', YLeaf(YType.boolean, 'zen_temp_send_update')),
                                    ('zen_temp_num_1sec_intervals', YLeaf(YType.int32, 'zen_temp_num_1sec_intervals')),
                                ])
                                self.zen_temp_sensor = None
                                self.zen_temp_sensor_id = None
                                self.zen_temp_dev_addr = None
                                self.zen_temp_poll_intvl = None
                                self.zen_temp_delta = None
                                self.zen_temp_raw_data = None
                                self.zen_temp_sensor_value = None
                                self.zen_temp_unit = None
                                self.zen_temp_last_value = None
                                self.zen_temp_send_update = None
                                self.zen_temp_num_1sec_intervals = None
                                self._segment_path = lambda: "zen_temp_sensor" + "[zen_temp_sensor='" + str(self.zen_temp_sensor) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Zen.ZenOper.ZenLocation.ZenTempSensorDefault.ZenTempSensorData.ZenTempSensor, ['zen_temp_sensor', 'zen_temp_sensor_id', 'zen_temp_dev_addr', 'zen_temp_poll_intvl', 'zen_temp_delta', 'zen_temp_raw_data', 'zen_temp_sensor_value', 'zen_temp_unit', 'zen_temp_last_value', 'zen_temp_send_update', 'zen_temp_num_1sec_intervals'], name, value)


                class ZenVoltSensorDefault(Entity):
                    """
                    
                    
                    .. attribute:: zen_volt_sensor_data
                    
                    	
                    	**type**\:  :py:class:`ZenVoltSensorData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Zen.ZenOper.ZenLocation.ZenVoltSensorDefault.ZenVoltSensorData>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.Zen.ZenOper.ZenLocation.ZenVoltSensorDefault, self).__init__()

                        self.yang_name = "zen_volt_sensor_default"
                        self.yang_parent_name = "zen_location"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("zen_volt_sensor_data", ("zen_volt_sensor_data", Controller.Zen.ZenOper.ZenLocation.ZenVoltSensorDefault.ZenVoltSensorData))])
                        self._leafs = OrderedDict()

                        self.zen_volt_sensor_data = Controller.Zen.ZenOper.ZenLocation.ZenVoltSensorDefault.ZenVoltSensorData()
                        self.zen_volt_sensor_data.parent = self
                        self._children_name_map["zen_volt_sensor_data"] = "zen_volt_sensor_data"
                        self._segment_path = lambda: "zen_volt_sensor_default"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.Zen.ZenOper.ZenLocation.ZenVoltSensorDefault, [], name, value)


                    class ZenVoltSensorData(Entity):
                        """
                        
                        
                        .. attribute:: zen_volt_sensor
                        
                        	
                        	**type**\: list of  		 :py:class:`ZenVoltSensor <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Zen.ZenOper.ZenLocation.ZenVoltSensorDefault.ZenVoltSensorData.ZenVoltSensor>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Zen.ZenOper.ZenLocation.ZenVoltSensorDefault.ZenVoltSensorData, self).__init__()

                            self.yang_name = "zen_volt_sensor_data"
                            self.yang_parent_name = "zen_volt_sensor_default"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("zen_volt_sensor", ("zen_volt_sensor", Controller.Zen.ZenOper.ZenLocation.ZenVoltSensorDefault.ZenVoltSensorData.ZenVoltSensor))])
                            self._leafs = OrderedDict()

                            self.zen_volt_sensor = YList(self)
                            self._segment_path = lambda: "zen_volt_sensor_data"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Zen.ZenOper.ZenLocation.ZenVoltSensorDefault.ZenVoltSensorData, [], name, value)


                        class ZenVoltSensor(Entity):
                            """
                            
                            
                            .. attribute:: zen_volt_sensor  (key)
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..17
                            
                            .. attribute:: zen_volt_sensor_id
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: zen_volt_dev_addr
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: zen_volt_poll_intvl
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: zen_volt_delta
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: zen_volt_raw_data
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: zen_volt_sensor_value
                            
                            	
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: zen_volt_unit
                            
                            	
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: zen_volt_last_value
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: zen_volt_send_update
                            
                            	
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            .. attribute:: zen_volt_num_1sec_intervals
                            
                            	
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Zen.ZenOper.ZenLocation.ZenVoltSensorDefault.ZenVoltSensorData.ZenVoltSensor, self).__init__()

                                self.yang_name = "zen_volt_sensor"
                                self.yang_parent_name = "zen_volt_sensor_data"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['zen_volt_sensor']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('zen_volt_sensor', YLeaf(YType.int32, 'zen_volt_sensor')),
                                    ('zen_volt_sensor_id', YLeaf(YType.str, 'zen_volt_sensor_id')),
                                    ('zen_volt_dev_addr', YLeaf(YType.uint32, 'zen_volt_dev_addr')),
                                    ('zen_volt_poll_intvl', YLeaf(YType.uint32, 'zen_volt_poll_intvl')),
                                    ('zen_volt_delta', YLeaf(YType.uint32, 'zen_volt_delta')),
                                    ('zen_volt_raw_data', YLeaf(YType.uint32, 'zen_volt_raw_data')),
                                    ('zen_volt_sensor_value', YLeaf(YType.int32, 'zen_volt_sensor_value')),
                                    ('zen_volt_unit', YLeaf(YType.int32, 'zen_volt_unit')),
                                    ('zen_volt_last_value', YLeaf(YType.uint32, 'zen_volt_last_value')),
                                    ('zen_volt_send_update', YLeaf(YType.boolean, 'zen_volt_send_update')),
                                    ('zen_volt_num_1sec_intervals', YLeaf(YType.int32, 'zen_volt_num_1sec_intervals')),
                                ])
                                self.zen_volt_sensor = None
                                self.zen_volt_sensor_id = None
                                self.zen_volt_dev_addr = None
                                self.zen_volt_poll_intvl = None
                                self.zen_volt_delta = None
                                self.zen_volt_raw_data = None
                                self.zen_volt_sensor_value = None
                                self.zen_volt_unit = None
                                self.zen_volt_last_value = None
                                self.zen_volt_send_update = None
                                self.zen_volt_num_1sec_intervals = None
                                self._segment_path = lambda: "zen_volt_sensor" + "[zen_volt_sensor='" + str(self.zen_volt_sensor) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Zen.ZenOper.ZenLocation.ZenVoltSensorDefault.ZenVoltSensorData.ZenVoltSensor, ['zen_volt_sensor', 'zen_volt_sensor_id', 'zen_volt_dev_addr', 'zen_volt_poll_intvl', 'zen_volt_delta', 'zen_volt_raw_data', 'zen_volt_sensor_value', 'zen_volt_unit', 'zen_volt_last_value', 'zen_volt_send_update', 'zen_volt_num_1sec_intervals'], name, value)


                class ZenCurrSensorDefault(Entity):
                    """
                    
                    
                    .. attribute:: zen_curr_sensor_data
                    
                    	
                    	**type**\:  :py:class:`ZenCurrSensorData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Zen.ZenOper.ZenLocation.ZenCurrSensorDefault.ZenCurrSensorData>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.Zen.ZenOper.ZenLocation.ZenCurrSensorDefault, self).__init__()

                        self.yang_name = "zen_curr_sensor_default"
                        self.yang_parent_name = "zen_location"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("zen_curr_sensor_data", ("zen_curr_sensor_data", Controller.Zen.ZenOper.ZenLocation.ZenCurrSensorDefault.ZenCurrSensorData))])
                        self._leafs = OrderedDict()

                        self.zen_curr_sensor_data = Controller.Zen.ZenOper.ZenLocation.ZenCurrSensorDefault.ZenCurrSensorData()
                        self.zen_curr_sensor_data.parent = self
                        self._children_name_map["zen_curr_sensor_data"] = "zen_curr_sensor_data"
                        self._segment_path = lambda: "zen_curr_sensor_default"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.Zen.ZenOper.ZenLocation.ZenCurrSensorDefault, [], name, value)


                    class ZenCurrSensorData(Entity):
                        """
                        
                        
                        .. attribute:: zen_curr_sensor
                        
                        	
                        	**type**\: list of  		 :py:class:`ZenCurrSensor <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Zen.ZenOper.ZenLocation.ZenCurrSensorDefault.ZenCurrSensorData.ZenCurrSensor>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Zen.ZenOper.ZenLocation.ZenCurrSensorDefault.ZenCurrSensorData, self).__init__()

                            self.yang_name = "zen_curr_sensor_data"
                            self.yang_parent_name = "zen_curr_sensor_default"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("zen_curr_sensor", ("zen_curr_sensor", Controller.Zen.ZenOper.ZenLocation.ZenCurrSensorDefault.ZenCurrSensorData.ZenCurrSensor))])
                            self._leafs = OrderedDict()

                            self.zen_curr_sensor = YList(self)
                            self._segment_path = lambda: "zen_curr_sensor_data"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Zen.ZenOper.ZenLocation.ZenCurrSensorDefault.ZenCurrSensorData, [], name, value)


                        class ZenCurrSensor(Entity):
                            """
                            
                            
                            .. attribute:: zen_curr_sensor  (key)
                            
                            	
                            	**type**\: str
                            
                            	**pattern:** all\|[0\-8]
                            
                            .. attribute:: zen_curr_sensor_id
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: zen_curr_dev_addr
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: zen_curr_poll_intvl
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: zen_curr_delta
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: zen_curr_raw_data
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: zen_curr_sensor_value
                            
                            	
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: zen_curr_unit
                            
                            	
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: zen_curr_last_value
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: zen_curr_send_update
                            
                            	
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            .. attribute:: zen_curr_num_1sec_intervals
                            
                            	
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Zen.ZenOper.ZenLocation.ZenCurrSensorDefault.ZenCurrSensorData.ZenCurrSensor, self).__init__()

                                self.yang_name = "zen_curr_sensor"
                                self.yang_parent_name = "zen_curr_sensor_data"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['zen_curr_sensor']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('zen_curr_sensor', YLeaf(YType.str, 'zen_curr_sensor')),
                                    ('zen_curr_sensor_id', YLeaf(YType.str, 'zen_curr_sensor_id')),
                                    ('zen_curr_dev_addr', YLeaf(YType.uint32, 'zen_curr_dev_addr')),
                                    ('zen_curr_poll_intvl', YLeaf(YType.uint32, 'zen_curr_poll_intvl')),
                                    ('zen_curr_delta', YLeaf(YType.uint32, 'zen_curr_delta')),
                                    ('zen_curr_raw_data', YLeaf(YType.uint32, 'zen_curr_raw_data')),
                                    ('zen_curr_sensor_value', YLeaf(YType.int32, 'zen_curr_sensor_value')),
                                    ('zen_curr_unit', YLeaf(YType.int32, 'zen_curr_unit')),
                                    ('zen_curr_last_value', YLeaf(YType.uint32, 'zen_curr_last_value')),
                                    ('zen_curr_send_update', YLeaf(YType.boolean, 'zen_curr_send_update')),
                                    ('zen_curr_num_1sec_intervals', YLeaf(YType.int32, 'zen_curr_num_1sec_intervals')),
                                ])
                                self.zen_curr_sensor = None
                                self.zen_curr_sensor_id = None
                                self.zen_curr_dev_addr = None
                                self.zen_curr_poll_intvl = None
                                self.zen_curr_delta = None
                                self.zen_curr_raw_data = None
                                self.zen_curr_sensor_value = None
                                self.zen_curr_unit = None
                                self.zen_curr_last_value = None
                                self.zen_curr_send_update = None
                                self.zen_curr_num_1sec_intervals = None
                                self._segment_path = lambda: "zen_curr_sensor" + "[zen_curr_sensor='" + str(self.zen_curr_sensor) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Zen.ZenOper.ZenLocation.ZenCurrSensorDefault.ZenCurrSensorData.ZenCurrSensor, ['zen_curr_sensor', 'zen_curr_sensor_id', 'zen_curr_dev_addr', 'zen_curr_poll_intvl', 'zen_curr_delta', 'zen_curr_raw_data', 'zen_curr_sensor_value', 'zen_curr_unit', 'zen_curr_last_value', 'zen_curr_send_update', 'zen_curr_num_1sec_intervals'], name, value)


        class Trace(Entity):
            """
            show traceable processes
            
            .. attribute:: buffer  (key)
            
            	
            	**type**\: str
            
            .. attribute:: location
            
            	
            	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Zen.Trace.Location>`
            
            

            """

            _prefix = 'calvados_controllers'
            _revision = '2017-01-31'

            def __init__(self):
                super(Controller.Zen.Trace, self).__init__()

                self.yang_name = "trace"
                self.yang_parent_name = "zen"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['buffer']
                self._child_classes = OrderedDict([("location", ("location", Controller.Zen.Trace.Location))])
                self._leafs = OrderedDict([
                    ('buffer', YLeaf(YType.str, 'buffer')),
                ])
                self.buffer = None

                self.location = YList(self)
                self._segment_path = lambda: "trace" + "[buffer='" + str(self.buffer) + "']"
                self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/zen/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Controller.Zen.Trace, [u'buffer'], name, value)


            class Location(Entity):
                """
                
                
                .. attribute:: location_name  (key)
                
                	
                	**type**\: str
                
                .. attribute:: all_options
                
                	
                	**type**\: list of  		 :py:class:`AllOptions <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Zen.Trace.Location.AllOptions>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Controller.Zen.Trace.Location, self).__init__()

                    self.yang_name = "location"
                    self.yang_parent_name = "trace"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = ['location_name']
                    self._child_classes = OrderedDict([("all-options", ("all_options", Controller.Zen.Trace.Location.AllOptions))])
                    self._leafs = OrderedDict([
                        ('location_name', YLeaf(YType.str, 'location_name')),
                    ])
                    self.location_name = None

                    self.all_options = YList(self)
                    self._segment_path = lambda: "location" + "[location_name='" + str(self.location_name) + "']"

                def __setattr__(self, name, value):
                    self._perform_setattr(Controller.Zen.Trace.Location, [u'location_name'], name, value)


                class AllOptions(Entity):
                    """
                    
                    
                    .. attribute:: option  (key)
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: trace_blocks
                    
                    	
                    	**type**\: list of  		 :py:class:`TraceBlocks <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Zen.Trace.Location.AllOptions.TraceBlocks>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.Zen.Trace.Location.AllOptions, self).__init__()

                        self.yang_name = "all-options"
                        self.yang_parent_name = "location"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['option']
                        self._child_classes = OrderedDict([("trace-blocks", ("trace_blocks", Controller.Zen.Trace.Location.AllOptions.TraceBlocks))])
                        self._leafs = OrderedDict([
                            ('option', YLeaf(YType.str, 'option')),
                        ])
                        self.option = None

                        self.trace_blocks = YList(self)
                        self._segment_path = lambda: "all-options" + "[option='" + str(self.option) + "']"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.Zen.Trace.Location.AllOptions, [u'option'], name, value)


                    class TraceBlocks(Entity):
                        """
                        
                        
                        .. attribute:: data
                        
                        	Trace output block
                        	**type**\: str
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Zen.Trace.Location.AllOptions.TraceBlocks, self).__init__()

                            self.yang_name = "trace-blocks"
                            self.yang_parent_name = "all-options"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('data', YLeaf(YType.str, 'data')),
                            ])
                            self.data = None
                            self._segment_path = lambda: "trace-blocks"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Zen.Trace.Location.AllOptions.TraceBlocks, [u'data'], name, value)


    class CccDriver(Entity):
        """
        
        
        .. attribute:: trace
        
        	show traceable processes
        	**type**\: list of  		 :py:class:`Trace <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Trace>`
        
        .. attribute:: bootflash
        
        	
        	**type**\:  :py:class:`Bootflash <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Bootflash>`
        
        .. attribute:: inventory
        
        	
        	**type**\:  :py:class:`Inventory <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Inventory>`
        
        .. attribute:: power
        
        	
        	**type**\:  :py:class:`Power <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Power>`
        
        .. attribute:: reset_history
        
        	
        	**type**\:  :py:class:`ResetHistory <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.ResetHistory>`
        
        .. attribute:: register
        
        	
        	**type**\:  :py:class:`Register <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Register>`
        
        .. attribute:: ejector
        
        	
        	**type**\:  :py:class:`Ejector <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Ejector>`
        
        .. attribute:: i2c_dev
        
        	
        	**type**\:  :py:class:`I2cDev <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.I2cDev>`
        
        .. attribute:: ethernet
        
        	
        	**type**\:  :py:class:`Ethernet <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Ethernet>`
        
        .. attribute:: event_history
        
        	
        	**type**\:  :py:class:`EventHistory <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.EventHistory>`
        
        .. attribute:: oir_history
        
        	
        	**type**\:  :py:class:`OirHistory <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.OirHistory>`
        
        .. attribute:: notif_history
        
        	
        	**type**\:  :py:class:`NotifHistory <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.NotifHistory>`
        
        .. attribute:: slave
        
        	
        	**type**\:  :py:class:`Slave <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Slave>`
        
        .. attribute:: action
        
        	
        	**type**\:  :py:class:`Action <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Action>`
        
        

        """

        _prefix = 'calvados_controllers'
        _revision = '2017-01-31'

        def __init__(self):
            super(Controller.CccDriver, self).__init__()

            self.yang_name = "ccc_driver"
            self.yang_parent_name = "controller"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([("trace", ("trace", Controller.CccDriver.Trace)), ("bootflash", ("bootflash", Controller.CccDriver.Bootflash)), ("inventory", ("inventory", Controller.CccDriver.Inventory)), ("power", ("power", Controller.CccDriver.Power)), ("reset-history", ("reset_history", Controller.CccDriver.ResetHistory)), ("register", ("register", Controller.CccDriver.Register)), ("ejector", ("ejector", Controller.CccDriver.Ejector)), ("i2c-dev", ("i2c_dev", Controller.CccDriver.I2cDev)), ("ethernet", ("ethernet", Controller.CccDriver.Ethernet)), ("event-history", ("event_history", Controller.CccDriver.EventHistory)), ("oir-history", ("oir_history", Controller.CccDriver.OirHistory)), ("notif-history", ("notif_history", Controller.CccDriver.NotifHistory)), ("slave", ("slave", Controller.CccDriver.Slave)), ("action", ("action", Controller.CccDriver.Action))])
            self._leafs = OrderedDict()

            self.bootflash = Controller.CccDriver.Bootflash()
            self.bootflash.parent = self
            self._children_name_map["bootflash"] = "bootflash"

            self.inventory = Controller.CccDriver.Inventory()
            self.inventory.parent = self
            self._children_name_map["inventory"] = "inventory"

            self.power = Controller.CccDriver.Power()
            self.power.parent = self
            self._children_name_map["power"] = "power"

            self.reset_history = Controller.CccDriver.ResetHistory()
            self.reset_history.parent = self
            self._children_name_map["reset_history"] = "reset-history"

            self.register = Controller.CccDriver.Register()
            self.register.parent = self
            self._children_name_map["register"] = "register"

            self.ejector = Controller.CccDriver.Ejector()
            self.ejector.parent = self
            self._children_name_map["ejector"] = "ejector"

            self.i2c_dev = Controller.CccDriver.I2cDev()
            self.i2c_dev.parent = self
            self._children_name_map["i2c_dev"] = "i2c-dev"

            self.ethernet = Controller.CccDriver.Ethernet()
            self.ethernet.parent = self
            self._children_name_map["ethernet"] = "ethernet"

            self.event_history = Controller.CccDriver.EventHistory()
            self.event_history.parent = self
            self._children_name_map["event_history"] = "event-history"

            self.oir_history = Controller.CccDriver.OirHistory()
            self.oir_history.parent = self
            self._children_name_map["oir_history"] = "oir-history"

            self.notif_history = Controller.CccDriver.NotifHistory()
            self.notif_history.parent = self
            self._children_name_map["notif_history"] = "notif-history"

            self.slave = Controller.CccDriver.Slave()
            self.slave.parent = self
            self._children_name_map["slave"] = "slave"

            self.action = Controller.CccDriver.Action()
            self.action.parent = self
            self._children_name_map["action"] = "action"

            self.trace = YList(self)
            self._segment_path = lambda: "ccc_driver"
            self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Controller.CccDriver, [], name, value)


        class Trace(Entity):
            """
            show traceable processes
            
            .. attribute:: buffer  (key)
            
            	
            	**type**\: str
            
            .. attribute:: location
            
            	
            	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Trace.Location>`
            
            

            """

            _prefix = 'calvados_controllers'
            _revision = '2017-01-31'

            def __init__(self):
                super(Controller.CccDriver.Trace, self).__init__()

                self.yang_name = "trace"
                self.yang_parent_name = "ccc_driver"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['buffer']
                self._child_classes = OrderedDict([("location", ("location", Controller.CccDriver.Trace.Location))])
                self._leafs = OrderedDict([
                    ('buffer', YLeaf(YType.str, 'buffer')),
                ])
                self.buffer = None

                self.location = YList(self)
                self._segment_path = lambda: "trace" + "[buffer='" + str(self.buffer) + "']"
                self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/ccc_driver/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Controller.CccDriver.Trace, [u'buffer'], name, value)


            class Location(Entity):
                """
                
                
                .. attribute:: location_name  (key)
                
                	
                	**type**\: str
                
                .. attribute:: all_options
                
                	
                	**type**\: list of  		 :py:class:`AllOptions <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Trace.Location.AllOptions>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Controller.CccDriver.Trace.Location, self).__init__()

                    self.yang_name = "location"
                    self.yang_parent_name = "trace"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = ['location_name']
                    self._child_classes = OrderedDict([("all-options", ("all_options", Controller.CccDriver.Trace.Location.AllOptions))])
                    self._leafs = OrderedDict([
                        ('location_name', YLeaf(YType.str, 'location_name')),
                    ])
                    self.location_name = None

                    self.all_options = YList(self)
                    self._segment_path = lambda: "location" + "[location_name='" + str(self.location_name) + "']"

                def __setattr__(self, name, value):
                    self._perform_setattr(Controller.CccDriver.Trace.Location, [u'location_name'], name, value)


                class AllOptions(Entity):
                    """
                    
                    
                    .. attribute:: option  (key)
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: trace_blocks
                    
                    	
                    	**type**\: list of  		 :py:class:`TraceBlocks <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Trace.Location.AllOptions.TraceBlocks>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.CccDriver.Trace.Location.AllOptions, self).__init__()

                        self.yang_name = "all-options"
                        self.yang_parent_name = "location"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['option']
                        self._child_classes = OrderedDict([("trace-blocks", ("trace_blocks", Controller.CccDriver.Trace.Location.AllOptions.TraceBlocks))])
                        self._leafs = OrderedDict([
                            ('option', YLeaf(YType.str, 'option')),
                        ])
                        self.option = None

                        self.trace_blocks = YList(self)
                        self._segment_path = lambda: "all-options" + "[option='" + str(self.option) + "']"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.CccDriver.Trace.Location.AllOptions, [u'option'], name, value)


                    class TraceBlocks(Entity):
                        """
                        
                        
                        .. attribute:: data
                        
                        	Trace output block
                        	**type**\: str
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.CccDriver.Trace.Location.AllOptions.TraceBlocks, self).__init__()

                            self.yang_name = "trace-blocks"
                            self.yang_parent_name = "all-options"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('data', YLeaf(YType.str, 'data')),
                            ])
                            self.data = None
                            self._segment_path = lambda: "trace-blocks"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.CccDriver.Trace.Location.AllOptions.TraceBlocks, [u'data'], name, value)


        class Bootflash(Entity):
            """
            
            
            .. attribute:: info
            
            	
            	**type**\:  :py:class:`Info <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Bootflash.Info>`
            
            .. attribute:: status
            
            	
            	**type**\:  :py:class:`Status <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Bootflash.Status>`
            
            .. attribute:: cre_status
            
            	
            	**type**\:  :py:class:`CreStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Bootflash.CreStatus>`
            
            

            """

            _prefix = 'calvados_controllers'
            _revision = '2017-01-31'

            def __init__(self):
                super(Controller.CccDriver.Bootflash, self).__init__()

                self.yang_name = "bootflash"
                self.yang_parent_name = "ccc_driver"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("info", ("info", Controller.CccDriver.Bootflash.Info)), ("status", ("status", Controller.CccDriver.Bootflash.Status)), ("cre_status", ("cre_status", Controller.CccDriver.Bootflash.CreStatus))])
                self._leafs = OrderedDict()

                self.info = Controller.CccDriver.Bootflash.Info()
                self.info.parent = self
                self._children_name_map["info"] = "info"

                self.status = Controller.CccDriver.Bootflash.Status()
                self.status.parent = self
                self._children_name_map["status"] = "status"

                self.cre_status = Controller.CccDriver.Bootflash.CreStatus()
                self.cre_status.parent = self
                self._children_name_map["cre_status"] = "cre_status"
                self._segment_path = lambda: "bootflash"
                self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/ccc_driver/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Controller.CccDriver.Bootflash, [], name, value)


            class Info(Entity):
                """
                
                
                .. attribute:: location
                
                	
                	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Bootflash.Info.Location>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Controller.CccDriver.Bootflash.Info, self).__init__()

                    self.yang_name = "info"
                    self.yang_parent_name = "bootflash"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("location", ("location", Controller.CccDriver.Bootflash.Info.Location))])
                    self._leafs = OrderedDict()

                    self.location = YList(self)
                    self._segment_path = lambda: "info"
                    self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/ccc_driver/bootflash/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Controller.CccDriver.Bootflash.Info, [], name, value)


                class Location(Entity):
                    """
                    
                    
                    .. attribute:: location  (key)
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: bf_info
                    
                    	
                    	**type**\:  :py:class:`BfInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Bootflash.Info.Location.BfInfo>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.CccDriver.Bootflash.Info.Location, self).__init__()

                        self.yang_name = "location"
                        self.yang_parent_name = "info"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['location']
                        self._child_classes = OrderedDict([("bf_info", ("bf_info", Controller.CccDriver.Bootflash.Info.Location.BfInfo))])
                        self._leafs = OrderedDict([
                            ('location', YLeaf(YType.str, 'location')),
                        ])
                        self.location = None

                        self.bf_info = Controller.CccDriver.Bootflash.Info.Location.BfInfo()
                        self.bf_info.parent = self
                        self._children_name_map["bf_info"] = "bf_info"
                        self._segment_path = lambda: "location" + "[location='" + str(self.location) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/ccc_driver/bootflash/info/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.CccDriver.Bootflash.Info.Location, ['location'], name, value)


                    class BfInfo(Entity):
                        """
                        
                        
                        .. attribute:: bf_info_values
                        
                        	
                        	**type**\: list of str
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.CccDriver.Bootflash.Info.Location.BfInfo, self).__init__()

                            self.yang_name = "bf_info"
                            self.yang_parent_name = "location"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('bf_info_values', YLeafList(YType.str, 'bf_info_values')),
                            ])
                            self.bf_info_values = []
                            self._segment_path = lambda: "bf_info"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.CccDriver.Bootflash.Info.Location.BfInfo, ['bf_info_values'], name, value)


            class Status(Entity):
                """
                
                
                .. attribute:: location
                
                	
                	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Bootflash.Status.Location>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Controller.CccDriver.Bootflash.Status, self).__init__()

                    self.yang_name = "status"
                    self.yang_parent_name = "bootflash"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("location", ("location", Controller.CccDriver.Bootflash.Status.Location))])
                    self._leafs = OrderedDict()

                    self.location = YList(self)
                    self._segment_path = lambda: "status"
                    self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/ccc_driver/bootflash/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Controller.CccDriver.Bootflash.Status, [], name, value)


                class Location(Entity):
                    """
                    
                    
                    .. attribute:: location  (key)
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: bf_status
                    
                    	
                    	**type**\:  :py:class:`BfStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Bootflash.Status.Location.BfStatus>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.CccDriver.Bootflash.Status.Location, self).__init__()

                        self.yang_name = "location"
                        self.yang_parent_name = "status"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['location']
                        self._child_classes = OrderedDict([("bf_status", ("bf_status", Controller.CccDriver.Bootflash.Status.Location.BfStatus))])
                        self._leafs = OrderedDict([
                            ('location', YLeaf(YType.str, 'location')),
                        ])
                        self.location = None

                        self.bf_status = Controller.CccDriver.Bootflash.Status.Location.BfStatus()
                        self.bf_status.parent = self
                        self._children_name_map["bf_status"] = "bf_status"
                        self._segment_path = lambda: "location" + "[location='" + str(self.location) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/ccc_driver/bootflash/status/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.CccDriver.Bootflash.Status.Location, ['location'], name, value)


                    class BfStatus(Entity):
                        """
                        
                        
                        .. attribute:: bf_status_values
                        
                        	
                        	**type**\: list of str
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.CccDriver.Bootflash.Status.Location.BfStatus, self).__init__()

                            self.yang_name = "bf_status"
                            self.yang_parent_name = "location"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('bf_status_values', YLeafList(YType.str, 'bf_status_values')),
                            ])
                            self.bf_status_values = []
                            self._segment_path = lambda: "bf_status"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.CccDriver.Bootflash.Status.Location.BfStatus, ['bf_status_values'], name, value)


            class CreStatus(Entity):
                """
                
                
                .. attribute:: location
                
                	
                	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Bootflash.CreStatus.Location>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Controller.CccDriver.Bootflash.CreStatus, self).__init__()

                    self.yang_name = "cre_status"
                    self.yang_parent_name = "bootflash"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("location", ("location", Controller.CccDriver.Bootflash.CreStatus.Location))])
                    self._leafs = OrderedDict()

                    self.location = YList(self)
                    self._segment_path = lambda: "cre_status"
                    self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/ccc_driver/bootflash/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Controller.CccDriver.Bootflash.CreStatus, [], name, value)


                class Location(Entity):
                    """
                    
                    
                    .. attribute:: location  (key)
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: bf_status
                    
                    	
                    	**type**\:  :py:class:`BfStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Bootflash.CreStatus.Location.BfStatus>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.CccDriver.Bootflash.CreStatus.Location, self).__init__()

                        self.yang_name = "location"
                        self.yang_parent_name = "cre_status"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['location']
                        self._child_classes = OrderedDict([("bf_status", ("bf_status", Controller.CccDriver.Bootflash.CreStatus.Location.BfStatus))])
                        self._leafs = OrderedDict([
                            ('location', YLeaf(YType.str, 'location')),
                        ])
                        self.location = None

                        self.bf_status = Controller.CccDriver.Bootflash.CreStatus.Location.BfStatus()
                        self.bf_status.parent = self
                        self._children_name_map["bf_status"] = "bf_status"
                        self._segment_path = lambda: "location" + "[location='" + str(self.location) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/ccc_driver/bootflash/cre_status/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.CccDriver.Bootflash.CreStatus.Location, ['location'], name, value)


                    class BfStatus(Entity):
                        """
                        
                        
                        .. attribute:: bf_status_values
                        
                        	
                        	**type**\: list of str
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.CccDriver.Bootflash.CreStatus.Location.BfStatus, self).__init__()

                            self.yang_name = "bf_status"
                            self.yang_parent_name = "location"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('bf_status_values', YLeafList(YType.str, 'bf_status_values')),
                            ])
                            self.bf_status_values = []
                            self._segment_path = lambda: "bf_status"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.CccDriver.Bootflash.CreStatus.Location.BfStatus, ['bf_status_values'], name, value)


        class Inventory(Entity):
            """
            
            
            .. attribute:: summary
            
            	
            	**type**\:  :py:class:`Summary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Inventory.Summary>`
            
            .. attribute:: version
            
            	
            	**type**\:  :py:class:`Version <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Inventory.Version>`
            
            .. attribute:: status
            
            	
            	**type**\:  :py:class:`Status <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Inventory.Status>`
            
            .. attribute:: detail
            
            	
            	**type**\:  :py:class:`Detail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Inventory.Detail>`
            
            

            """

            _prefix = 'calvados_controllers'
            _revision = '2017-01-31'

            def __init__(self):
                super(Controller.CccDriver.Inventory, self).__init__()

                self.yang_name = "inventory"
                self.yang_parent_name = "ccc_driver"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("summary", ("summary", Controller.CccDriver.Inventory.Summary)), ("version", ("version", Controller.CccDriver.Inventory.Version)), ("status", ("status", Controller.CccDriver.Inventory.Status)), ("detail", ("detail", Controller.CccDriver.Inventory.Detail))])
                self._leafs = OrderedDict()

                self.summary = Controller.CccDriver.Inventory.Summary()
                self.summary.parent = self
                self._children_name_map["summary"] = "summary"

                self.version = Controller.CccDriver.Inventory.Version()
                self.version.parent = self
                self._children_name_map["version"] = "version"

                self.status = Controller.CccDriver.Inventory.Status()
                self.status.parent = self
                self._children_name_map["status"] = "status"

                self.detail = Controller.CccDriver.Inventory.Detail()
                self.detail.parent = self
                self._children_name_map["detail"] = "detail"
                self._segment_path = lambda: "inventory"
                self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/ccc_driver/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Controller.CccDriver.Inventory, [], name, value)


            class Summary(Entity):
                """
                
                
                .. attribute:: ccc_inv_summary
                
                	
                	**type**\: list of  		 :py:class:`CccInvSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Inventory.Summary.CccInvSummary>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Controller.CccDriver.Inventory.Summary, self).__init__()

                    self.yang_name = "summary"
                    self.yang_parent_name = "inventory"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("ccc_inv_summary", ("ccc_inv_summary", Controller.CccDriver.Inventory.Summary.CccInvSummary))])
                    self._leafs = OrderedDict()

                    self.ccc_inv_summary = YList(self)
                    self._segment_path = lambda: "summary"
                    self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/ccc_driver/inventory/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Controller.CccDriver.Inventory.Summary, [], name, value)


                class CccInvSummary(Entity):
                    """
                    
                    
                    .. attribute:: location  (key)
                    
                    	
                    	**type**\: str
                    
                    	**mandatory**\: True
                    
                    .. attribute:: ccc_inv_pid_string
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: ccc_inv_slot_number
                    
                    	
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: ccc_inv_serial_number
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: ccc_inv_hw_version
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: ccc_inv_card_state
                    
                    	
                    	**type**\: str
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.CccDriver.Inventory.Summary.CccInvSummary, self).__init__()

                        self.yang_name = "ccc_inv_summary"
                        self.yang_parent_name = "summary"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['location']
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('location', YLeaf(YType.str, 'location')),
                            ('ccc_inv_pid_string', YLeaf(YType.str, 'ccc_inv_PID_string')),
                            ('ccc_inv_slot_number', YLeaf(YType.uint32, 'ccc_inv_slot_number')),
                            ('ccc_inv_serial_number', YLeaf(YType.str, 'ccc_inv_serial_number')),
                            ('ccc_inv_hw_version', YLeaf(YType.str, 'ccc_inv_hw_version')),
                            ('ccc_inv_card_state', YLeaf(YType.str, 'ccc_inv_card_state')),
                        ])
                        self.location = None
                        self.ccc_inv_pid_string = None
                        self.ccc_inv_slot_number = None
                        self.ccc_inv_serial_number = None
                        self.ccc_inv_hw_version = None
                        self.ccc_inv_card_state = None
                        self._segment_path = lambda: "ccc_inv_summary" + "[location='" + str(self.location) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/ccc_driver/inventory/summary/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.CccDriver.Inventory.Summary.CccInvSummary, ['location', 'ccc_inv_pid_string', 'ccc_inv_slot_number', 'ccc_inv_serial_number', 'ccc_inv_hw_version', 'ccc_inv_card_state'], name, value)


            class Version(Entity):
                """
                
                
                .. attribute:: ccc_inv_version
                
                	
                	**type**\: list of  		 :py:class:`CccInvVersion <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Inventory.Version.CccInvVersion>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Controller.CccDriver.Inventory.Version, self).__init__()

                    self.yang_name = "version"
                    self.yang_parent_name = "inventory"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("ccc_inv_version", ("ccc_inv_version", Controller.CccDriver.Inventory.Version.CccInvVersion))])
                    self._leafs = OrderedDict()

                    self.ccc_inv_version = YList(self)
                    self._segment_path = lambda: "version"
                    self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/ccc_driver/inventory/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Controller.CccDriver.Inventory.Version, [], name, value)


                class CccInvVersion(Entity):
                    """
                    
                    
                    .. attribute:: location  (key)
                    
                    	
                    	**type**\: str
                    
                    	**mandatory**\: True
                    
                    .. attribute:: ccc_inv_pid_string
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: ccc_inv_ccc_version
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: ccc_inv_fpga_version
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: ccc_inv_pon_version
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: ccc_inv_switch_version
                    
                    	
                    	**type**\: str
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.CccDriver.Inventory.Version.CccInvVersion, self).__init__()

                        self.yang_name = "ccc_inv_version"
                        self.yang_parent_name = "version"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['location']
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('location', YLeaf(YType.str, 'location')),
                            ('ccc_inv_pid_string', YLeaf(YType.str, 'ccc_inv_PID_string')),
                            ('ccc_inv_ccc_version', YLeaf(YType.str, 'ccc_inv_ccc_version')),
                            ('ccc_inv_fpga_version', YLeaf(YType.str, 'ccc_inv_FPGA_version')),
                            ('ccc_inv_pon_version', YLeaf(YType.str, 'ccc_inv_pon_version')),
                            ('ccc_inv_switch_version', YLeaf(YType.str, 'ccc_inv_switch_version')),
                        ])
                        self.location = None
                        self.ccc_inv_pid_string = None
                        self.ccc_inv_ccc_version = None
                        self.ccc_inv_fpga_version = None
                        self.ccc_inv_pon_version = None
                        self.ccc_inv_switch_version = None
                        self._segment_path = lambda: "ccc_inv_version" + "[location='" + str(self.location) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/ccc_driver/inventory/version/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.CccDriver.Inventory.Version.CccInvVersion, ['location', 'ccc_inv_pid_string', 'ccc_inv_ccc_version', 'ccc_inv_fpga_version', 'ccc_inv_pon_version', 'ccc_inv_switch_version'], name, value)


            class Status(Entity):
                """
                
                
                .. attribute:: ccc_inv_status
                
                	
                	**type**\: list of  		 :py:class:`CccInvStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Inventory.Status.CccInvStatus>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Controller.CccDriver.Inventory.Status, self).__init__()

                    self.yang_name = "status"
                    self.yang_parent_name = "inventory"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("ccc_inv_status", ("ccc_inv_status", Controller.CccDriver.Inventory.Status.CccInvStatus))])
                    self._leafs = OrderedDict()

                    self.ccc_inv_status = YList(self)
                    self._segment_path = lambda: "status"
                    self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/ccc_driver/inventory/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Controller.CccDriver.Inventory.Status, [], name, value)


                class CccInvStatus(Entity):
                    """
                    
                    
                    .. attribute:: location  (key)
                    
                    	
                    	**type**\: str
                    
                    	**mandatory**\: True
                    
                    .. attribute:: ccc_inv_status_list
                    
                    	
                    	**type**\:  :py:class:`CccInvStatusList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Inventory.Status.CccInvStatus.CccInvStatusList>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.CccDriver.Inventory.Status.CccInvStatus, self).__init__()

                        self.yang_name = "ccc_inv_status"
                        self.yang_parent_name = "status"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['location']
                        self._child_classes = OrderedDict([("ccc_inv_status_list", ("ccc_inv_status_list", Controller.CccDriver.Inventory.Status.CccInvStatus.CccInvStatusList))])
                        self._leafs = OrderedDict([
                            ('location', YLeaf(YType.str, 'location')),
                        ])
                        self.location = None

                        self.ccc_inv_status_list = Controller.CccDriver.Inventory.Status.CccInvStatus.CccInvStatusList()
                        self.ccc_inv_status_list.parent = self
                        self._children_name_map["ccc_inv_status_list"] = "ccc_inv_status_list"
                        self._segment_path = lambda: "ccc_inv_status" + "[location='" + str(self.location) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/ccc_driver/inventory/status/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.CccDriver.Inventory.Status.CccInvStatus, ['location'], name, value)


                    class CccInvStatusList(Entity):
                        """
                        
                        
                        .. attribute:: ccc_inv_status_values
                        
                        	
                        	**type**\: list of str
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.CccDriver.Inventory.Status.CccInvStatus.CccInvStatusList, self).__init__()

                            self.yang_name = "ccc_inv_status_list"
                            self.yang_parent_name = "ccc_inv_status"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('ccc_inv_status_values', YLeafList(YType.str, 'ccc_inv_status_values')),
                            ])
                            self.ccc_inv_status_values = []
                            self._segment_path = lambda: "ccc_inv_status_list"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.CccDriver.Inventory.Status.CccInvStatus.CccInvStatusList, ['ccc_inv_status_values'], name, value)


            class Detail(Entity):
                """
                
                
                .. attribute:: ccc_inv_detail
                
                	
                	**type**\: list of  		 :py:class:`CccInvDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Inventory.Detail.CccInvDetail>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Controller.CccDriver.Inventory.Detail, self).__init__()

                    self.yang_name = "detail"
                    self.yang_parent_name = "inventory"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("ccc_inv_detail", ("ccc_inv_detail", Controller.CccDriver.Inventory.Detail.CccInvDetail))])
                    self._leafs = OrderedDict()

                    self.ccc_inv_detail = YList(self)
                    self._segment_path = lambda: "detail"
                    self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/ccc_driver/inventory/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Controller.CccDriver.Inventory.Detail, [], name, value)


                class CccInvDetail(Entity):
                    """
                    
                    
                    .. attribute:: location  (key)
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: ccc_inv_detail_list
                    
                    	
                    	**type**\:  :py:class:`CccInvDetailList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Inventory.Detail.CccInvDetail.CccInvDetailList>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.CccDriver.Inventory.Detail.CccInvDetail, self).__init__()

                        self.yang_name = "ccc_inv_detail"
                        self.yang_parent_name = "detail"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['location']
                        self._child_classes = OrderedDict([("ccc_inv_detail_list", ("ccc_inv_detail_list", Controller.CccDriver.Inventory.Detail.CccInvDetail.CccInvDetailList))])
                        self._leafs = OrderedDict([
                            ('location', YLeaf(YType.str, 'location')),
                        ])
                        self.location = None

                        self.ccc_inv_detail_list = Controller.CccDriver.Inventory.Detail.CccInvDetail.CccInvDetailList()
                        self.ccc_inv_detail_list.parent = self
                        self._children_name_map["ccc_inv_detail_list"] = "ccc_inv_detail_list"
                        self._segment_path = lambda: "ccc_inv_detail" + "[location='" + str(self.location) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/ccc_driver/inventory/detail/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.CccDriver.Inventory.Detail.CccInvDetail, ['location'], name, value)


                    class CccInvDetailList(Entity):
                        """
                        
                        
                        .. attribute:: ccc_inv_detail_values
                        
                        	
                        	**type**\: list of str
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.CccDriver.Inventory.Detail.CccInvDetail.CccInvDetailList, self).__init__()

                            self.yang_name = "ccc_inv_detail_list"
                            self.yang_parent_name = "ccc_inv_detail"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('ccc_inv_detail_values', YLeafList(YType.str, 'ccc_inv_detail_values')),
                            ])
                            self.ccc_inv_detail_values = []
                            self._segment_path = lambda: "ccc_inv_detail_list"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.CccDriver.Inventory.Detail.CccInvDetail.CccInvDetailList, ['ccc_inv_detail_values'], name, value)


        class Power(Entity):
            """
            
            
            .. attribute:: master_access
            
            	
            	**type**\:  :py:class:`MasterAccess <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Power.MasterAccess>`
            
            

            """

            _prefix = 'calvados_controllers'
            _revision = '2017-01-31'

            def __init__(self):
                super(Controller.CccDriver.Power, self).__init__()

                self.yang_name = "power"
                self.yang_parent_name = "ccc_driver"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("master-access", ("master_access", Controller.CccDriver.Power.MasterAccess))])
                self._leafs = OrderedDict()

                self.master_access = Controller.CccDriver.Power.MasterAccess()
                self.master_access.parent = self
                self._children_name_map["master_access"] = "master-access"
                self._segment_path = lambda: "power"
                self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/ccc_driver/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Controller.CccDriver.Power, [], name, value)


            class MasterAccess(Entity):
                """
                
                
                .. attribute:: summary
                
                	
                	**type**\:  :py:class:`Summary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Power.MasterAccess.Summary>`
                
                .. attribute:: detail
                
                	
                	**type**\:  :py:class:`Detail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Power.MasterAccess.Detail>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Controller.CccDriver.Power.MasterAccess, self).__init__()

                    self.yang_name = "master-access"
                    self.yang_parent_name = "power"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("summary", ("summary", Controller.CccDriver.Power.MasterAccess.Summary)), ("detail", ("detail", Controller.CccDriver.Power.MasterAccess.Detail))])
                    self._leafs = OrderedDict()

                    self.summary = Controller.CccDriver.Power.MasterAccess.Summary()
                    self.summary.parent = self
                    self._children_name_map["summary"] = "summary"

                    self.detail = Controller.CccDriver.Power.MasterAccess.Detail()
                    self.detail.parent = self
                    self._children_name_map["detail"] = "detail"
                    self._segment_path = lambda: "master-access"
                    self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/ccc_driver/power/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Controller.CccDriver.Power.MasterAccess, [], name, value)


                class Summary(Entity):
                    """
                    
                    
                    .. attribute:: power_summary
                    
                    	
                    	**type**\: list of  		 :py:class:`PowerSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Power.MasterAccess.Summary.PowerSummary>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.CccDriver.Power.MasterAccess.Summary, self).__init__()

                        self.yang_name = "summary"
                        self.yang_parent_name = "master-access"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("power_summary", ("power_summary", Controller.CccDriver.Power.MasterAccess.Summary.PowerSummary))])
                        self._leafs = OrderedDict()

                        self.power_summary = YList(self)
                        self._segment_path = lambda: "summary"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/ccc_driver/power/master-access/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.CccDriver.Power.MasterAccess.Summary, [], name, value)


                    class PowerSummary(Entity):
                        """
                        
                        
                        .. attribute:: ccc_power_location  (key)
                        
                        	
                        	**type**\: str
                        
                        	**mandatory**\: True
                        
                        .. attribute:: card_type
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: power_state
                        
                        	
                        	**type**\: str
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.CccDriver.Power.MasterAccess.Summary.PowerSummary, self).__init__()

                            self.yang_name = "power_summary"
                            self.yang_parent_name = "summary"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = ['ccc_power_location']
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('ccc_power_location', YLeaf(YType.str, 'ccc_power_location')),
                                ('card_type', YLeaf(YType.str, 'card_type')),
                                ('power_state', YLeaf(YType.str, 'power_state')),
                            ])
                            self.ccc_power_location = None
                            self.card_type = None
                            self.power_state = None
                            self._segment_path = lambda: "power_summary" + "[ccc_power_location='" + str(self.ccc_power_location) + "']"
                            self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/ccc_driver/power/master-access/summary/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.CccDriver.Power.MasterAccess.Summary.PowerSummary, ['ccc_power_location', 'card_type', 'power_state'], name, value)


                class Detail(Entity):
                    """
                    
                    
                    .. attribute:: location
                    
                    	
                    	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Power.MasterAccess.Detail.Location>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.CccDriver.Power.MasterAccess.Detail, self).__init__()

                        self.yang_name = "detail"
                        self.yang_parent_name = "master-access"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("location", ("location", Controller.CccDriver.Power.MasterAccess.Detail.Location))])
                        self._leafs = OrderedDict()

                        self.location = YList(self)
                        self._segment_path = lambda: "detail"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/ccc_driver/power/master-access/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.CccDriver.Power.MasterAccess.Detail, [], name, value)


                    class Location(Entity):
                        """
                        
                        
                        .. attribute:: location  (key)
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: power_details
                        
                        	
                        	**type**\:  :py:class:`PowerDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Power.MasterAccess.Detail.Location.PowerDetails>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.CccDriver.Power.MasterAccess.Detail.Location, self).__init__()

                            self.yang_name = "location"
                            self.yang_parent_name = "detail"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = ['location']
                            self._child_classes = OrderedDict([("power_details", ("power_details", Controller.CccDriver.Power.MasterAccess.Detail.Location.PowerDetails))])
                            self._leafs = OrderedDict([
                                ('location', YLeaf(YType.str, 'location')),
                            ])
                            self.location = None

                            self.power_details = Controller.CccDriver.Power.MasterAccess.Detail.Location.PowerDetails()
                            self.power_details.parent = self
                            self._children_name_map["power_details"] = "power_details"
                            self._segment_path = lambda: "location" + "[location='" + str(self.location) + "']"
                            self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/ccc_driver/power/master-access/detail/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.CccDriver.Power.MasterAccess.Detail.Location, ['location'], name, value)


                        class PowerDetails(Entity):
                            """
                            
                            
                            .. attribute:: power_details_values
                            
                            	
                            	**type**\: list of str
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.CccDriver.Power.MasterAccess.Detail.Location.PowerDetails, self).__init__()

                                self.yang_name = "power_details"
                                self.yang_parent_name = "location"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('power_details_values', YLeafList(YType.str, 'power_details_values')),
                                ])
                                self.power_details_values = []
                                self._segment_path = lambda: "power_details"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.CccDriver.Power.MasterAccess.Detail.Location.PowerDetails, ['power_details_values'], name, value)


        class ResetHistory(Entity):
            """
            
            
            .. attribute:: onchip
            
            	
            	**type**\:  :py:class:`Onchip <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.ResetHistory.Onchip>`
            
            .. attribute:: onboard
            
            	
            	**type**\:  :py:class:`Onboard <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.ResetHistory.Onboard>`
            
            

            """

            _prefix = 'calvados_controllers'
            _revision = '2017-01-31'

            def __init__(self):
                super(Controller.CccDriver.ResetHistory, self).__init__()

                self.yang_name = "reset-history"
                self.yang_parent_name = "ccc_driver"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("onchip", ("onchip", Controller.CccDriver.ResetHistory.Onchip)), ("onboard", ("onboard", Controller.CccDriver.ResetHistory.Onboard))])
                self._leafs = OrderedDict()

                self.onchip = Controller.CccDriver.ResetHistory.Onchip()
                self.onchip.parent = self
                self._children_name_map["onchip"] = "onchip"

                self.onboard = Controller.CccDriver.ResetHistory.Onboard()
                self.onboard.parent = self
                self._children_name_map["onboard"] = "onboard"
                self._segment_path = lambda: "reset-history"
                self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/ccc_driver/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Controller.CccDriver.ResetHistory, [], name, value)


            class Onchip(Entity):
                """
                
                
                .. attribute:: location
                
                	
                	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.ResetHistory.Onchip.Location>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Controller.CccDriver.ResetHistory.Onchip, self).__init__()

                    self.yang_name = "onchip"
                    self.yang_parent_name = "reset-history"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("location", ("location", Controller.CccDriver.ResetHistory.Onchip.Location))])
                    self._leafs = OrderedDict()

                    self.location = YList(self)
                    self._segment_path = lambda: "onchip"
                    self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/ccc_driver/reset-history/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Controller.CccDriver.ResetHistory.Onchip, [], name, value)


                class Location(Entity):
                    """
                    
                    
                    .. attribute:: loc  (key)
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: ccc_reset_timeofday
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: ccc_reset_uptime
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: ccc_hw_reset_count
                    
                    	
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: ccc_reset_entry
                    
                    	
                    	**type**\: list of  		 :py:class:`CccResetEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.ResetHistory.Onchip.Location.CccResetEntry>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.CccDriver.ResetHistory.Onchip.Location, self).__init__()

                        self.yang_name = "location"
                        self.yang_parent_name = "onchip"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['loc']
                        self._child_classes = OrderedDict([("ccc_reset_entry", ("ccc_reset_entry", Controller.CccDriver.ResetHistory.Onchip.Location.CccResetEntry))])
                        self._leafs = OrderedDict([
                            ('loc', YLeaf(YType.str, 'loc')),
                            ('ccc_reset_timeofday', YLeaf(YType.str, 'ccc_reset_timeofday')),
                            ('ccc_reset_uptime', YLeaf(YType.str, 'ccc_reset_uptime')),
                            ('ccc_hw_reset_count', YLeaf(YType.uint32, 'ccc_hw_reset_count')),
                        ])
                        self.loc = None
                        self.ccc_reset_timeofday = None
                        self.ccc_reset_uptime = None
                        self.ccc_hw_reset_count = None

                        self.ccc_reset_entry = YList(self)
                        self._segment_path = lambda: "location" + "[loc='" + str(self.loc) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/ccc_driver/reset-history/onchip/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.CccDriver.ResetHistory.Onchip.Location, ['loc', 'ccc_reset_timeofday', 'ccc_reset_uptime', 'ccc_hw_reset_count'], name, value)


                    class CccResetEntry(Entity):
                        """
                        
                        
                        .. attribute:: ccc_reset_entry  (key)
                        
                        	
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: ccc_reset_pos
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: ccc_reset_idx
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: ccc_reset_word0
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: ccc_reset_pidx
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: ccc_reset_sor
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: ccc_reset_sor_string
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: ccc_reset_cmd
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: ccc_reset_cmd_string
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: ccc_reset_hrm
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: ccc_reset_srm
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: ccc_reset_hr
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: ccc_reset_sr
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: ccc_reset_word1
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: ccc_reset_date
                        
                        	
                        	**type**\: str
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.CccDriver.ResetHistory.Onchip.Location.CccResetEntry, self).__init__()

                            self.yang_name = "ccc_reset_entry"
                            self.yang_parent_name = "location"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['ccc_reset_entry']
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('ccc_reset_entry', YLeaf(YType.int32, 'ccc_reset_entry')),
                                ('ccc_reset_pos', YLeaf(YType.uint32, 'ccc_reset_pos')),
                                ('ccc_reset_idx', YLeaf(YType.uint32, 'ccc_reset_idx')),
                                ('ccc_reset_word0', YLeaf(YType.uint32, 'ccc_reset_word0')),
                                ('ccc_reset_pidx', YLeaf(YType.uint32, 'ccc_reset_pidx')),
                                ('ccc_reset_sor', YLeaf(YType.uint32, 'ccc_reset_sor')),
                                ('ccc_reset_sor_string', YLeaf(YType.str, 'ccc_reset_sor_string')),
                                ('ccc_reset_cmd', YLeaf(YType.uint32, 'ccc_reset_cmd')),
                                ('ccc_reset_cmd_string', YLeaf(YType.str, 'ccc_reset_cmd_string')),
                                ('ccc_reset_hrm', YLeaf(YType.uint32, 'ccc_reset_hrm')),
                                ('ccc_reset_srm', YLeaf(YType.uint32, 'ccc_reset_srm')),
                                ('ccc_reset_hr', YLeaf(YType.uint32, 'ccc_reset_hr')),
                                ('ccc_reset_sr', YLeaf(YType.uint32, 'ccc_reset_sr')),
                                ('ccc_reset_word1', YLeaf(YType.uint32, 'ccc_reset_word1')),
                                ('ccc_reset_date', YLeaf(YType.str, 'ccc_reset_date')),
                            ])
                            self.ccc_reset_entry = None
                            self.ccc_reset_pos = None
                            self.ccc_reset_idx = None
                            self.ccc_reset_word0 = None
                            self.ccc_reset_pidx = None
                            self.ccc_reset_sor = None
                            self.ccc_reset_sor_string = None
                            self.ccc_reset_cmd = None
                            self.ccc_reset_cmd_string = None
                            self.ccc_reset_hrm = None
                            self.ccc_reset_srm = None
                            self.ccc_reset_hr = None
                            self.ccc_reset_sr = None
                            self.ccc_reset_word1 = None
                            self.ccc_reset_date = None
                            self._segment_path = lambda: "ccc_reset_entry" + "[ccc_reset_entry='" + str(self.ccc_reset_entry) + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.CccDriver.ResetHistory.Onchip.Location.CccResetEntry, ['ccc_reset_entry', 'ccc_reset_pos', 'ccc_reset_idx', 'ccc_reset_word0', 'ccc_reset_pidx', 'ccc_reset_sor', 'ccc_reset_sor_string', 'ccc_reset_cmd', 'ccc_reset_cmd_string', 'ccc_reset_hrm', 'ccc_reset_srm', 'ccc_reset_hr', 'ccc_reset_sr', 'ccc_reset_word1', 'ccc_reset_date'], name, value)


            class Onboard(Entity):
                """
                
                
                .. attribute:: location
                
                	
                	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.ResetHistory.Onboard.Location>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Controller.CccDriver.ResetHistory.Onboard, self).__init__()

                    self.yang_name = "onboard"
                    self.yang_parent_name = "reset-history"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("location", ("location", Controller.CccDriver.ResetHistory.Onboard.Location))])
                    self._leafs = OrderedDict()

                    self.location = YList(self)
                    self._segment_path = lambda: "onboard"
                    self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/ccc_driver/reset-history/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Controller.CccDriver.ResetHistory.Onboard, [], name, value)


                class Location(Entity):
                    """
                    
                    
                    .. attribute:: loc  (key)
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: ccc_reset_scratch_sig
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: ccc_reset_scratch_version
                    
                    	
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: ccc_reset_history_sig
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: ccc_reset_history_count
                    
                    	
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: ccc_reset_onboard_entry
                    
                    	
                    	**type**\: list of  		 :py:class:`CccResetOnboardEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.ResetHistory.Onboard.Location.CccResetOnboardEntry>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.CccDriver.ResetHistory.Onboard.Location, self).__init__()

                        self.yang_name = "location"
                        self.yang_parent_name = "onboard"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['loc']
                        self._child_classes = OrderedDict([("ccc_reset_onboard_entry", ("ccc_reset_onboard_entry", Controller.CccDriver.ResetHistory.Onboard.Location.CccResetOnboardEntry))])
                        self._leafs = OrderedDict([
                            ('loc', YLeaf(YType.str, 'loc')),
                            ('ccc_reset_scratch_sig', YLeaf(YType.str, 'ccc_reset_scratch_sig')),
                            ('ccc_reset_scratch_version', YLeaf(YType.uint32, 'ccc_reset_scratch_version')),
                            ('ccc_reset_history_sig', YLeaf(YType.str, 'ccc_reset_history_sig')),
                            ('ccc_reset_history_count', YLeaf(YType.uint32, 'ccc_reset_history_count')),
                        ])
                        self.loc = None
                        self.ccc_reset_scratch_sig = None
                        self.ccc_reset_scratch_version = None
                        self.ccc_reset_history_sig = None
                        self.ccc_reset_history_count = None

                        self.ccc_reset_onboard_entry = YList(self)
                        self._segment_path = lambda: "location" + "[loc='" + str(self.loc) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/ccc_driver/reset-history/onboard/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.CccDriver.ResetHistory.Onboard.Location, ['loc', 'ccc_reset_scratch_sig', 'ccc_reset_scratch_version', 'ccc_reset_history_sig', 'ccc_reset_history_count'], name, value)


                    class CccResetOnboardEntry(Entity):
                        """
                        
                        
                        .. attribute:: ccc_reset_onboard_entry  (key)
                        
                        	
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: ccc_reset_pos
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: ccc_reset_idx
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: ccc_reset_word0
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: ccc_reset_pidx
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: ccc_reset_sor
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: ccc_reset_sor_string
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: ccc_reset_cmd
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: ccc_reset_cmd_string
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: ccc_reset_hrm
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: ccc_reset_srm
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: ccc_reset_hr
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: ccc_reset_sr
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: ccc_reset_word1
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: ccc_reset_date
                        
                        	
                        	**type**\: str
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.CccDriver.ResetHistory.Onboard.Location.CccResetOnboardEntry, self).__init__()

                            self.yang_name = "ccc_reset_onboard_entry"
                            self.yang_parent_name = "location"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['ccc_reset_onboard_entry']
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('ccc_reset_onboard_entry', YLeaf(YType.int32, 'ccc_reset_onboard_entry')),
                                ('ccc_reset_pos', YLeaf(YType.uint32, 'ccc_reset_pos')),
                                ('ccc_reset_idx', YLeaf(YType.uint32, 'ccc_reset_idx')),
                                ('ccc_reset_word0', YLeaf(YType.uint32, 'ccc_reset_word0')),
                                ('ccc_reset_pidx', YLeaf(YType.uint32, 'ccc_reset_pidx')),
                                ('ccc_reset_sor', YLeaf(YType.uint32, 'ccc_reset_sor')),
                                ('ccc_reset_sor_string', YLeaf(YType.str, 'ccc_reset_sor_string')),
                                ('ccc_reset_cmd', YLeaf(YType.uint32, 'ccc_reset_cmd')),
                                ('ccc_reset_cmd_string', YLeaf(YType.str, 'ccc_reset_cmd_string')),
                                ('ccc_reset_hrm', YLeaf(YType.uint32, 'ccc_reset_hrm')),
                                ('ccc_reset_srm', YLeaf(YType.uint32, 'ccc_reset_srm')),
                                ('ccc_reset_hr', YLeaf(YType.uint32, 'ccc_reset_hr')),
                                ('ccc_reset_sr', YLeaf(YType.uint32, 'ccc_reset_sr')),
                                ('ccc_reset_word1', YLeaf(YType.uint32, 'ccc_reset_word1')),
                                ('ccc_reset_date', YLeaf(YType.str, 'ccc_reset_date')),
                            ])
                            self.ccc_reset_onboard_entry = None
                            self.ccc_reset_pos = None
                            self.ccc_reset_idx = None
                            self.ccc_reset_word0 = None
                            self.ccc_reset_pidx = None
                            self.ccc_reset_sor = None
                            self.ccc_reset_sor_string = None
                            self.ccc_reset_cmd = None
                            self.ccc_reset_cmd_string = None
                            self.ccc_reset_hrm = None
                            self.ccc_reset_srm = None
                            self.ccc_reset_hr = None
                            self.ccc_reset_sr = None
                            self.ccc_reset_word1 = None
                            self.ccc_reset_date = None
                            self._segment_path = lambda: "ccc_reset_onboard_entry" + "[ccc_reset_onboard_entry='" + str(self.ccc_reset_onboard_entry) + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.CccDriver.ResetHistory.Onboard.Location.CccResetOnboardEntry, ['ccc_reset_onboard_entry', 'ccc_reset_pos', 'ccc_reset_idx', 'ccc_reset_word0', 'ccc_reset_pidx', 'ccc_reset_sor', 'ccc_reset_sor_string', 'ccc_reset_cmd', 'ccc_reset_cmd_string', 'ccc_reset_hrm', 'ccc_reset_srm', 'ccc_reset_hr', 'ccc_reset_sr', 'ccc_reset_word1', 'ccc_reset_date'], name, value)


        class Register(Entity):
            """
            
            
            .. attribute:: register_location
            
            	
            	**type**\: list of  		 :py:class:`RegisterLocation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Register.RegisterLocation>`
            
            

            """

            _prefix = 'calvados_controllers'
            _revision = '2017-01-31'

            def __init__(self):
                super(Controller.CccDriver.Register, self).__init__()

                self.yang_name = "register"
                self.yang_parent_name = "ccc_driver"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("register_location", ("register_location", Controller.CccDriver.Register.RegisterLocation))])
                self._leafs = OrderedDict()

                self.register_location = YList(self)
                self._segment_path = lambda: "register"
                self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/ccc_driver/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Controller.CccDriver.Register, [], name, value)


            class RegisterLocation(Entity):
                """
                
                
                .. attribute:: register_location  (key)
                
                	
                	**type**\: str
                
                .. attribute:: ccc_block_number
                
                	
                	**type**\: list of  		 :py:class:`CccBlockNumber <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Register.RegisterLocation.CccBlockNumber>`
                
                .. attribute:: ccc_offset
                
                	
                	**type**\: list of  		 :py:class:`CccOffset <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Register.RegisterLocation.CccOffset>`
                
                .. attribute:: ccc_address
                
                	
                	**type**\: list of  		 :py:class:`CccAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Register.RegisterLocation.CccAddress>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Controller.CccDriver.Register.RegisterLocation, self).__init__()

                    self.yang_name = "register_location"
                    self.yang_parent_name = "register"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = ['register_location']
                    self._child_classes = OrderedDict([("ccc_block_number", ("ccc_block_number", Controller.CccDriver.Register.RegisterLocation.CccBlockNumber)), ("ccc_offset", ("ccc_offset", Controller.CccDriver.Register.RegisterLocation.CccOffset)), ("ccc_address", ("ccc_address", Controller.CccDriver.Register.RegisterLocation.CccAddress))])
                    self._leafs = OrderedDict([
                        ('register_location', YLeaf(YType.str, 'register_location')),
                    ])
                    self.register_location = None

                    self.ccc_block_number = YList(self)
                    self.ccc_offset = YList(self)
                    self.ccc_address = YList(self)
                    self._segment_path = lambda: "register_location" + "[register_location='" + str(self.register_location) + "']"
                    self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/ccc_driver/register/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Controller.CccDriver.Register.RegisterLocation, ['register_location'], name, value)


                class CccBlockNumber(Entity):
                    """
                    
                    
                    .. attribute:: ccc_block_num  (key)
                    
                    	
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: block_location
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: ccc_block_nm
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: ccc_register_number
                    
                    	
                    	**type**\: list of  		 :py:class:`CccRegisterNumber <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Register.RegisterLocation.CccBlockNumber.CccRegisterNumber>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.CccDriver.Register.RegisterLocation.CccBlockNumber, self).__init__()

                        self.yang_name = "ccc_block_number"
                        self.yang_parent_name = "register_location"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['ccc_block_num']
                        self._child_classes = OrderedDict([("ccc_register_number", ("ccc_register_number", Controller.CccDriver.Register.RegisterLocation.CccBlockNumber.CccRegisterNumber))])
                        self._leafs = OrderedDict([
                            ('ccc_block_num', YLeaf(YType.uint32, 'ccc_block_num')),
                            ('block_location', YLeaf(YType.str, 'block_location')),
                            ('ccc_block_nm', YLeaf(YType.str, 'ccc_block_nm')),
                        ])
                        self.ccc_block_num = None
                        self.block_location = None
                        self.ccc_block_nm = None

                        self.ccc_register_number = YList(self)
                        self._segment_path = lambda: "ccc_block_number" + "[ccc_block_num='" + str(self.ccc_block_num) + "']"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.CccDriver.Register.RegisterLocation.CccBlockNumber, ['ccc_block_num', 'block_location', 'ccc_block_nm'], name, value)


                    class CccRegisterNumber(Entity):
                        """
                        
                        
                        .. attribute:: index  (key)
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: ccc_register_name
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: ccc_data
                        
                        	
                        	**type**\: list of  		 :py:class:`CccData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Register.RegisterLocation.CccBlockNumber.CccRegisterNumber.CccData>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.CccDriver.Register.RegisterLocation.CccBlockNumber.CccRegisterNumber, self).__init__()

                            self.yang_name = "ccc_register_number"
                            self.yang_parent_name = "ccc_block_number"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['index']
                            self._child_classes = OrderedDict([("ccc_data", ("ccc_data", Controller.CccDriver.Register.RegisterLocation.CccBlockNumber.CccRegisterNumber.CccData))])
                            self._leafs = OrderedDict([
                                ('index', YLeaf(YType.uint32, 'index')),
                                ('ccc_register_name', YLeaf(YType.str, 'ccc_register_name')),
                            ])
                            self.index = None
                            self.ccc_register_name = None

                            self.ccc_data = YList(self)
                            self._segment_path = lambda: "ccc_register_number" + "[index='" + str(self.index) + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.CccDriver.Register.RegisterLocation.CccBlockNumber.CccRegisterNumber, ['index', 'ccc_register_name'], name, value)


                        class CccData(Entity):
                            """
                            
                            
                            .. attribute:: name
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: offset
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: value
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.CccDriver.Register.RegisterLocation.CccBlockNumber.CccRegisterNumber.CccData, self).__init__()

                                self.yang_name = "ccc_data"
                                self.yang_parent_name = "ccc_register_number"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('name', YLeaf(YType.str, 'name')),
                                    ('offset', YLeaf(YType.uint32, 'offset')),
                                    ('value', YLeaf(YType.uint32, 'value')),
                                ])
                                self.name = None
                                self.offset = None
                                self.value = None
                                self._segment_path = lambda: "ccc_data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.CccDriver.Register.RegisterLocation.CccBlockNumber.CccRegisterNumber.CccData, ['name', 'offset', 'value'], name, value)


                class CccOffset(Entity):
                    """
                    
                    
                    .. attribute:: hex_offset  (key)
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: ccc_reg_offset_data
                    
                    	
                    	**type**\: list of  		 :py:class:`CccRegOffsetData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Register.RegisterLocation.CccOffset.CccRegOffsetData>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.CccDriver.Register.RegisterLocation.CccOffset, self).__init__()

                        self.yang_name = "ccc_offset"
                        self.yang_parent_name = "register_location"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['hex_offset']
                        self._child_classes = OrderedDict([("ccc_reg_offset_data", ("ccc_reg_offset_data", Controller.CccDriver.Register.RegisterLocation.CccOffset.CccRegOffsetData))])
                        self._leafs = OrderedDict([
                            ('hex_offset', YLeaf(YType.str, 'hex_offset')),
                        ])
                        self.hex_offset = None

                        self.ccc_reg_offset_data = YList(self)
                        self._segment_path = lambda: "ccc_offset" + "[hex_offset='" + str(self.hex_offset) + "']"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.CccDriver.Register.RegisterLocation.CccOffset, ['hex_offset'], name, value)


                    class CccRegOffsetData(Entity):
                        """
                        
                        
                        .. attribute:: ccc_reg_off_addr
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: reg_off_value
                        
                        	
                        	**type**\: str
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.CccDriver.Register.RegisterLocation.CccOffset.CccRegOffsetData, self).__init__()

                            self.yang_name = "ccc_reg_offset_data"
                            self.yang_parent_name = "ccc_offset"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('ccc_reg_off_addr', YLeaf(YType.uint32, 'ccc_reg_off_addr')),
                                ('reg_off_value', YLeaf(YType.str, 'reg_off_value')),
                            ])
                            self.ccc_reg_off_addr = None
                            self.reg_off_value = None
                            self._segment_path = lambda: "ccc_reg_offset_data"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.CccDriver.Register.RegisterLocation.CccOffset.CccRegOffsetData, ['ccc_reg_off_addr', 'reg_off_value'], name, value)


                class CccAddress(Entity):
                    """
                    
                    
                    .. attribute:: start_hex_addr  (key)
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: end_hex_addr  (key)
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: ccc_reg_range_addr_list
                    
                    	
                    	**type**\: list of  		 :py:class:`CccRegRangeAddrList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Register.RegisterLocation.CccAddress.CccRegRangeAddrList>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.CccDriver.Register.RegisterLocation.CccAddress, self).__init__()

                        self.yang_name = "ccc_address"
                        self.yang_parent_name = "register_location"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['start_hex_addr','end_hex_addr']
                        self._child_classes = OrderedDict([("ccc_reg_range_addr_list", ("ccc_reg_range_addr_list", Controller.CccDriver.Register.RegisterLocation.CccAddress.CccRegRangeAddrList))])
                        self._leafs = OrderedDict([
                            ('start_hex_addr', YLeaf(YType.str, 'start_hex_addr')),
                            ('end_hex_addr', YLeaf(YType.str, 'end_hex_addr')),
                        ])
                        self.start_hex_addr = None
                        self.end_hex_addr = None

                        self.ccc_reg_range_addr_list = YList(self)
                        self._segment_path = lambda: "ccc_address" + "[start_hex_addr='" + str(self.start_hex_addr) + "']" + "[end_hex_addr='" + str(self.end_hex_addr) + "']"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.CccDriver.Register.RegisterLocation.CccAddress, ['start_hex_addr', 'end_hex_addr'], name, value)


                    class CccRegRangeAddrList(Entity):
                        """
                        
                        
                        .. attribute:: ccc_reg_range_addr  (key)
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: ccc_reg_data
                        
                        	
                        	**type**\: list of  		 :py:class:`CccRegData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Register.RegisterLocation.CccAddress.CccRegRangeAddrList.CccRegData>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.CccDriver.Register.RegisterLocation.CccAddress.CccRegRangeAddrList, self).__init__()

                            self.yang_name = "ccc_reg_range_addr_list"
                            self.yang_parent_name = "ccc_address"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['ccc_reg_range_addr']
                            self._child_classes = OrderedDict([("ccc_reg_data", ("ccc_reg_data", Controller.CccDriver.Register.RegisterLocation.CccAddress.CccRegRangeAddrList.CccRegData))])
                            self._leafs = OrderedDict([
                                ('ccc_reg_range_addr', YLeaf(YType.uint32, 'ccc_reg_range_addr')),
                            ])
                            self.ccc_reg_range_addr = None

                            self.ccc_reg_data = YList(self)
                            self._segment_path = lambda: "ccc_reg_range_addr_list" + "[ccc_reg_range_addr='" + str(self.ccc_reg_range_addr) + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.CccDriver.Register.RegisterLocation.CccAddress.CccRegRangeAddrList, ['ccc_reg_range_addr'], name, value)


                        class CccRegData(Entity):
                            """
                            
                            
                            .. attribute:: ccc_reg_addr
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: reg_value
                            
                            	
                            	**type**\: str
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.CccDriver.Register.RegisterLocation.CccAddress.CccRegRangeAddrList.CccRegData, self).__init__()

                                self.yang_name = "ccc_reg_data"
                                self.yang_parent_name = "ccc_reg_range_addr_list"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('ccc_reg_addr', YLeaf(YType.uint32, 'ccc_reg_addr')),
                                    ('reg_value', YLeaf(YType.str, 'reg_value')),
                                ])
                                self.ccc_reg_addr = None
                                self.reg_value = None
                                self._segment_path = lambda: "ccc_reg_data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.CccDriver.Register.RegisterLocation.CccAddress.CccRegRangeAddrList.CccRegData, ['ccc_reg_addr', 'reg_value'], name, value)


        class Ejector(Entity):
            """
            
            
            .. attribute:: status
            
            	
            	**type**\:  :py:class:`Status <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Ejector.Status>`
            
            

            """

            _prefix = 'calvados_controllers'
            _revision = '2017-01-31'

            def __init__(self):
                super(Controller.CccDriver.Ejector, self).__init__()

                self.yang_name = "ejector"
                self.yang_parent_name = "ccc_driver"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("status", ("status", Controller.CccDriver.Ejector.Status))])
                self._leafs = OrderedDict()

                self.status = Controller.CccDriver.Ejector.Status()
                self.status.parent = self
                self._children_name_map["status"] = "status"
                self._segment_path = lambda: "ejector"
                self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/ccc_driver/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Controller.CccDriver.Ejector, [], name, value)


            class Status(Entity):
                """
                
                
                .. attribute:: ccc_ejector_status
                
                	
                	**type**\: list of  		 :py:class:`CccEjectorStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Ejector.Status.CccEjectorStatus>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Controller.CccDriver.Ejector.Status, self).__init__()

                    self.yang_name = "status"
                    self.yang_parent_name = "ejector"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("ccc_ejector_status", ("ccc_ejector_status", Controller.CccDriver.Ejector.Status.CccEjectorStatus))])
                    self._leafs = OrderedDict()

                    self.ccc_ejector_status = YList(self)
                    self._segment_path = lambda: "status"
                    self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/ccc_driver/ejector/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Controller.CccDriver.Ejector.Status, [], name, value)


                class CccEjectorStatus(Entity):
                    """
                    
                    
                    .. attribute:: location  (key)
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: ccc_is_fc_card_type
                    
                    	
                    	**type**\: bool
                    
                    	**default value**\: false
                    
                    .. attribute:: ccc_is_lc_card_type
                    
                    	
                    	**type**\: bool
                    
                    	**default value**\: false
                    
                    .. attribute:: ccc_is_rp_sc_card_type
                    
                    	
                    	**type**\: bool
                    
                    	**default value**\: false
                    
                    .. attribute:: ccc_ejc_card_type
                    
                    	
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: ccc_ejc_platform
                    
                    	
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: ccc_ejc_board_type
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: ccc_ejc_card_slot
                    
                    	
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: ccc_ejc_card_version
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: ccc_ejc_board_version
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: ccc_ejc_hw_version
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: ccc_ejc_core_version
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: ccc_ejc_pon_version
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: ccc_ejc_rp_supported
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: ccc_ejc_enable
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: ccc_ejc_status
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: ccc_ejc_rp_pex_csr
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: ccc_ejc_gp_live
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: ccc_ejc_gp_status
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: ccc_ejc_fc_pex_csr
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: ccc_ejc_fc_ejector_support
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: ccc_ejc_lc_pex_csr
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: ccc_ejc_lc_ejector_support
                    
                    	
                    	**type**\: str
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.CccDriver.Ejector.Status.CccEjectorStatus, self).__init__()

                        self.yang_name = "ccc_ejector_status"
                        self.yang_parent_name = "status"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['location']
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('location', YLeaf(YType.str, 'location')),
                            ('ccc_is_fc_card_type', YLeaf(YType.boolean, 'ccc_is_fc_card_type')),
                            ('ccc_is_lc_card_type', YLeaf(YType.boolean, 'ccc_is_lc_card_type')),
                            ('ccc_is_rp_sc_card_type', YLeaf(YType.boolean, 'ccc_is_rp_sc_card_type')),
                            ('ccc_ejc_card_type', YLeaf(YType.uint32, 'ccc_ejc_card_type')),
                            ('ccc_ejc_platform', YLeaf(YType.uint32, 'ccc_ejc_platform')),
                            ('ccc_ejc_board_type', YLeaf(YType.str, 'ccc_ejc_board_type')),
                            ('ccc_ejc_card_slot', YLeaf(YType.uint32, 'ccc_ejc_card_slot')),
                            ('ccc_ejc_card_version', YLeaf(YType.str, 'ccc_ejc_card_version')),
                            ('ccc_ejc_board_version', YLeaf(YType.str, 'ccc_ejc_board_version')),
                            ('ccc_ejc_hw_version', YLeaf(YType.str, 'ccc_ejc_hw_version')),
                            ('ccc_ejc_core_version', YLeaf(YType.str, 'ccc_ejc_core_version')),
                            ('ccc_ejc_pon_version', YLeaf(YType.str, 'ccc_ejc_pon_version')),
                            ('ccc_ejc_rp_supported', YLeaf(YType.str, 'ccc_ejc_rp_supported')),
                            ('ccc_ejc_enable', YLeaf(YType.str, 'ccc_ejc_enable')),
                            ('ccc_ejc_status', YLeaf(YType.str, 'ccc_ejc_status')),
                            ('ccc_ejc_rp_pex_csr', YLeaf(YType.str, 'ccc_ejc_rp_pex_csr')),
                            ('ccc_ejc_gp_live', YLeaf(YType.str, 'ccc_ejc_gp_live')),
                            ('ccc_ejc_gp_status', YLeaf(YType.str, 'ccc_ejc_gp_status')),
                            ('ccc_ejc_fc_pex_csr', YLeaf(YType.str, 'ccc_ejc_fc_pex_csr')),
                            ('ccc_ejc_fc_ejector_support', YLeaf(YType.str, 'ccc_ejc_fc_ejector_support')),
                            ('ccc_ejc_lc_pex_csr', YLeaf(YType.str, 'ccc_ejc_lc_pex_csr')),
                            ('ccc_ejc_lc_ejector_support', YLeaf(YType.str, 'ccc_ejc_lc_ejector_support')),
                        ])
                        self.location = None
                        self.ccc_is_fc_card_type = None
                        self.ccc_is_lc_card_type = None
                        self.ccc_is_rp_sc_card_type = None
                        self.ccc_ejc_card_type = None
                        self.ccc_ejc_platform = None
                        self.ccc_ejc_board_type = None
                        self.ccc_ejc_card_slot = None
                        self.ccc_ejc_card_version = None
                        self.ccc_ejc_board_version = None
                        self.ccc_ejc_hw_version = None
                        self.ccc_ejc_core_version = None
                        self.ccc_ejc_pon_version = None
                        self.ccc_ejc_rp_supported = None
                        self.ccc_ejc_enable = None
                        self.ccc_ejc_status = None
                        self.ccc_ejc_rp_pex_csr = None
                        self.ccc_ejc_gp_live = None
                        self.ccc_ejc_gp_status = None
                        self.ccc_ejc_fc_pex_csr = None
                        self.ccc_ejc_fc_ejector_support = None
                        self.ccc_ejc_lc_pex_csr = None
                        self.ccc_ejc_lc_ejector_support = None
                        self._segment_path = lambda: "ccc_ejector_status" + "[location='" + str(self.location) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/ccc_driver/ejector/status/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.CccDriver.Ejector.Status.CccEjectorStatus, ['location', 'ccc_is_fc_card_type', 'ccc_is_lc_card_type', 'ccc_is_rp_sc_card_type', 'ccc_ejc_card_type', 'ccc_ejc_platform', 'ccc_ejc_board_type', 'ccc_ejc_card_slot', 'ccc_ejc_card_version', 'ccc_ejc_board_version', 'ccc_ejc_hw_version', 'ccc_ejc_core_version', 'ccc_ejc_pon_version', 'ccc_ejc_rp_supported', 'ccc_ejc_enable', 'ccc_ejc_status', 'ccc_ejc_rp_pex_csr', 'ccc_ejc_gp_live', 'ccc_ejc_gp_status', 'ccc_ejc_fc_pex_csr', 'ccc_ejc_fc_ejector_support', 'ccc_ejc_lc_pex_csr', 'ccc_ejc_lc_ejector_support'], name, value)


        class I2cDev(Entity):
            """
            
            
            .. attribute:: cpu_complex
            
            	
            	**type**\:  :py:class:`CpuComplex <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.I2cDev.CpuComplex>`
            
            .. attribute:: ioexpander
            
            	
            	**type**\:  :py:class:`Ioexpander <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.I2cDev.Ioexpander>`
            
            

            """

            _prefix = 'calvados_controllers'
            _revision = '2017-01-31'

            def __init__(self):
                super(Controller.CccDriver.I2cDev, self).__init__()

                self.yang_name = "i2c-dev"
                self.yang_parent_name = "ccc_driver"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("cpu-complex", ("cpu_complex", Controller.CccDriver.I2cDev.CpuComplex)), ("ioexpander", ("ioexpander", Controller.CccDriver.I2cDev.Ioexpander))])
                self._leafs = OrderedDict()

                self.cpu_complex = Controller.CccDriver.I2cDev.CpuComplex()
                self.cpu_complex.parent = self
                self._children_name_map["cpu_complex"] = "cpu-complex"

                self.ioexpander = Controller.CccDriver.I2cDev.Ioexpander()
                self.ioexpander.parent = self
                self._children_name_map["ioexpander"] = "ioexpander"
                self._segment_path = lambda: "i2c-dev"
                self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/ccc_driver/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Controller.CccDriver.I2cDev, [], name, value)


            class CpuComplex(Entity):
                """
                
                
                .. attribute:: location
                
                	
                	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.I2cDev.CpuComplex.Location>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Controller.CccDriver.I2cDev.CpuComplex, self).__init__()

                    self.yang_name = "cpu-complex"
                    self.yang_parent_name = "i2c-dev"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("location", ("location", Controller.CccDriver.I2cDev.CpuComplex.Location))])
                    self._leafs = OrderedDict()

                    self.location = YList(self)
                    self._segment_path = lambda: "cpu-complex"
                    self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/ccc_driver/i2c-dev/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Controller.CccDriver.I2cDev.CpuComplex, [], name, value)


                class Location(Entity):
                    """
                    
                    
                    .. attribute:: location  (key)
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: cpu_complex_detail
                    
                    	
                    	**type**\:  :py:class:`CpuComplexDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.I2cDev.CpuComplex.Location.CpuComplexDetail>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.CccDriver.I2cDev.CpuComplex.Location, self).__init__()

                        self.yang_name = "location"
                        self.yang_parent_name = "cpu-complex"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['location']
                        self._child_classes = OrderedDict([("cpu_complex_detail", ("cpu_complex_detail", Controller.CccDriver.I2cDev.CpuComplex.Location.CpuComplexDetail))])
                        self._leafs = OrderedDict([
                            ('location', YLeaf(YType.str, 'location')),
                        ])
                        self.location = None

                        self.cpu_complex_detail = Controller.CccDriver.I2cDev.CpuComplex.Location.CpuComplexDetail()
                        self.cpu_complex_detail.parent = self
                        self._children_name_map["cpu_complex_detail"] = "cpu_complex_detail"
                        self._segment_path = lambda: "location" + "[location='" + str(self.location) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/ccc_driver/i2c-dev/cpu-complex/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.CccDriver.I2cDev.CpuComplex.Location, ['location'], name, value)


                    class CpuComplexDetail(Entity):
                        """
                        
                        
                        .. attribute:: cpu_complex_values
                        
                        	
                        	**type**\: list of str
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.CccDriver.I2cDev.CpuComplex.Location.CpuComplexDetail, self).__init__()

                            self.yang_name = "cpu_complex_detail"
                            self.yang_parent_name = "location"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('cpu_complex_values', YLeafList(YType.str, 'cpu_complex_values')),
                            ])
                            self.cpu_complex_values = []
                            self._segment_path = lambda: "cpu_complex_detail"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.CccDriver.I2cDev.CpuComplex.Location.CpuComplexDetail, ['cpu_complex_values'], name, value)


            class Ioexpander(Entity):
                """
                
                
                .. attribute:: location
                
                	
                	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.I2cDev.Ioexpander.Location>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Controller.CccDriver.I2cDev.Ioexpander, self).__init__()

                    self.yang_name = "ioexpander"
                    self.yang_parent_name = "i2c-dev"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("location", ("location", Controller.CccDriver.I2cDev.Ioexpander.Location))])
                    self._leafs = OrderedDict()

                    self.location = YList(self)
                    self._segment_path = lambda: "ioexpander"
                    self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/ccc_driver/i2c-dev/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Controller.CccDriver.I2cDev.Ioexpander, [], name, value)


                class Location(Entity):
                    """
                    
                    
                    .. attribute:: location  (key)
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: io_exp_val
                    
                    	
                    	**type**\:  :py:class:`IoExpVal <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.I2cDev.Ioexpander.Location.IoExpVal>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.CccDriver.I2cDev.Ioexpander.Location, self).__init__()

                        self.yang_name = "location"
                        self.yang_parent_name = "ioexpander"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['location']
                        self._child_classes = OrderedDict([("io_exp_val", ("io_exp_val", Controller.CccDriver.I2cDev.Ioexpander.Location.IoExpVal))])
                        self._leafs = OrderedDict([
                            ('location', YLeaf(YType.str, 'location')),
                        ])
                        self.location = None

                        self.io_exp_val = Controller.CccDriver.I2cDev.Ioexpander.Location.IoExpVal()
                        self.io_exp_val.parent = self
                        self._children_name_map["io_exp_val"] = "io_exp_val"
                        self._segment_path = lambda: "location" + "[location='" + str(self.location) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/ccc_driver/i2c-dev/ioexpander/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.CccDriver.I2cDev.Ioexpander.Location, ['location'], name, value)


                    class IoExpVal(Entity):
                        """
                        
                        
                        .. attribute:: io_exp_details
                        
                        	
                        	**type**\: list of str
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.CccDriver.I2cDev.Ioexpander.Location.IoExpVal, self).__init__()

                            self.yang_name = "io_exp_val"
                            self.yang_parent_name = "location"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('io_exp_details', YLeafList(YType.str, 'io_exp_details')),
                            ])
                            self.io_exp_details = []
                            self._segment_path = lambda: "io_exp_val"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.CccDriver.I2cDev.Ioexpander.Location.IoExpVal, ['io_exp_details'], name, value)


        class Ethernet(Entity):
            """
            
            
            .. attribute:: ethernet_status
            
            	
            	**type**\:  :py:class:`EthernetStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Ethernet.EthernetStatus>`
            
            .. attribute:: ethernet_counters
            
            	
            	**type**\:  :py:class:`EthernetCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Ethernet.EthernetCounters>`
            
            

            """

            _prefix = 'calvados_controllers'
            _revision = '2017-01-31'

            def __init__(self):
                super(Controller.CccDriver.Ethernet, self).__init__()

                self.yang_name = "ethernet"
                self.yang_parent_name = "ccc_driver"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("ethernet_status", ("ethernet_status", Controller.CccDriver.Ethernet.EthernetStatus)), ("ethernet_counters", ("ethernet_counters", Controller.CccDriver.Ethernet.EthernetCounters))])
                self._leafs = OrderedDict()

                self.ethernet_status = Controller.CccDriver.Ethernet.EthernetStatus()
                self.ethernet_status.parent = self
                self._children_name_map["ethernet_status"] = "ethernet_status"

                self.ethernet_counters = Controller.CccDriver.Ethernet.EthernetCounters()
                self.ethernet_counters.parent = self
                self._children_name_map["ethernet_counters"] = "ethernet_counters"
                self._segment_path = lambda: "ethernet"
                self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/ccc_driver/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Controller.CccDriver.Ethernet, [], name, value)


            class EthernetStatus(Entity):
                """
                
                
                .. attribute:: location
                
                	
                	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Ethernet.EthernetStatus.Location>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Controller.CccDriver.Ethernet.EthernetStatus, self).__init__()

                    self.yang_name = "ethernet_status"
                    self.yang_parent_name = "ethernet"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("location", ("location", Controller.CccDriver.Ethernet.EthernetStatus.Location))])
                    self._leafs = OrderedDict()

                    self.location = YList(self)
                    self._segment_path = lambda: "ethernet_status"
                    self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/ccc_driver/ethernet/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Controller.CccDriver.Ethernet.EthernetStatus, [], name, value)


                class Location(Entity):
                    """
                    
                    
                    .. attribute:: location  (key)
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: ethernet_status
                    
                    	
                    	**type**\:  :py:class:`EthernetStatus_ <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Ethernet.EthernetStatus.Location.EthernetStatus_>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.CccDriver.Ethernet.EthernetStatus.Location, self).__init__()

                        self.yang_name = "location"
                        self.yang_parent_name = "ethernet_status"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['location']
                        self._child_classes = OrderedDict([("ethernet_status", ("ethernet_status", Controller.CccDriver.Ethernet.EthernetStatus.Location.EthernetStatus_))])
                        self._leafs = OrderedDict([
                            ('location', YLeaf(YType.str, 'location')),
                        ])
                        self.location = None

                        self.ethernet_status = Controller.CccDriver.Ethernet.EthernetStatus.Location.EthernetStatus_()
                        self.ethernet_status.parent = self
                        self._children_name_map["ethernet_status"] = "ethernet_status"
                        self._segment_path = lambda: "location" + "[location='" + str(self.location) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/ccc_driver/ethernet/ethernet_status/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.CccDriver.Ethernet.EthernetStatus.Location, ['location'], name, value)


                    class EthernetStatus_(Entity):
                        """
                        
                        
                        .. attribute:: ethernet_status_values
                        
                        	
                        	**type**\: list of str
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.CccDriver.Ethernet.EthernetStatus.Location.EthernetStatus_, self).__init__()

                            self.yang_name = "ethernet_status"
                            self.yang_parent_name = "location"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('ethernet_status_values', YLeafList(YType.str, 'ethernet_status_values')),
                            ])
                            self.ethernet_status_values = []
                            self._segment_path = lambda: "ethernet_status"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.CccDriver.Ethernet.EthernetStatus.Location.EthernetStatus_, ['ethernet_status_values'], name, value)


            class EthernetCounters(Entity):
                """
                
                
                .. attribute:: location
                
                	
                	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Ethernet.EthernetCounters.Location>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Controller.CccDriver.Ethernet.EthernetCounters, self).__init__()

                    self.yang_name = "ethernet_counters"
                    self.yang_parent_name = "ethernet"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("location", ("location", Controller.CccDriver.Ethernet.EthernetCounters.Location))])
                    self._leafs = OrderedDict()

                    self.location = YList(self)
                    self._segment_path = lambda: "ethernet_counters"
                    self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/ccc_driver/ethernet/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Controller.CccDriver.Ethernet.EthernetCounters, [], name, value)


                class Location(Entity):
                    """
                    
                    
                    .. attribute:: location  (key)
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: ethernet_counters
                    
                    	
                    	**type**\:  :py:class:`EthernetCounters_ <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Ethernet.EthernetCounters.Location.EthernetCounters_>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.CccDriver.Ethernet.EthernetCounters.Location, self).__init__()

                        self.yang_name = "location"
                        self.yang_parent_name = "ethernet_counters"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['location']
                        self._child_classes = OrderedDict([("ethernet_counters", ("ethernet_counters", Controller.CccDriver.Ethernet.EthernetCounters.Location.EthernetCounters_))])
                        self._leafs = OrderedDict([
                            ('location', YLeaf(YType.str, 'location')),
                        ])
                        self.location = None

                        self.ethernet_counters = Controller.CccDriver.Ethernet.EthernetCounters.Location.EthernetCounters_()
                        self.ethernet_counters.parent = self
                        self._children_name_map["ethernet_counters"] = "ethernet_counters"
                        self._segment_path = lambda: "location" + "[location='" + str(self.location) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/ccc_driver/ethernet/ethernet_counters/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.CccDriver.Ethernet.EthernetCounters.Location, ['location'], name, value)


                    class EthernetCounters_(Entity):
                        """
                        
                        
                        .. attribute:: ethernet_counter_values
                        
                        	
                        	**type**\: list of str
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.CccDriver.Ethernet.EthernetCounters.Location.EthernetCounters_, self).__init__()

                            self.yang_name = "ethernet_counters"
                            self.yang_parent_name = "location"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('ethernet_counter_values', YLeafList(YType.str, 'ethernet_counter_values')),
                            ])
                            self.ethernet_counter_values = []
                            self._segment_path = lambda: "ethernet_counters"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.CccDriver.Ethernet.EthernetCounters.Location.EthernetCounters_, ['ethernet_counter_values'], name, value)


        class EventHistory(Entity):
            """
            
            
            .. attribute:: brief
            
            	
            	**type**\:  :py:class:`Brief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.EventHistory.Brief>`
            
            .. attribute:: detail
            
            	
            	**type**\:  :py:class:`Detail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.EventHistory.Detail>`
            
            

            """

            _prefix = 'calvados_controllers'
            _revision = '2017-01-31'

            def __init__(self):
                super(Controller.CccDriver.EventHistory, self).__init__()

                self.yang_name = "event-history"
                self.yang_parent_name = "ccc_driver"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("brief", ("brief", Controller.CccDriver.EventHistory.Brief)), ("detail", ("detail", Controller.CccDriver.EventHistory.Detail))])
                self._leafs = OrderedDict()

                self.brief = Controller.CccDriver.EventHistory.Brief()
                self.brief.parent = self
                self._children_name_map["brief"] = "brief"

                self.detail = Controller.CccDriver.EventHistory.Detail()
                self.detail.parent = self
                self._children_name_map["detail"] = "detail"
                self._segment_path = lambda: "event-history"
                self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/ccc_driver/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Controller.CccDriver.EventHistory, [], name, value)


            class Brief(Entity):
                """
                
                
                .. attribute:: location
                
                	
                	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.EventHistory.Brief.Location>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Controller.CccDriver.EventHistory.Brief, self).__init__()

                    self.yang_name = "brief"
                    self.yang_parent_name = "event-history"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("location", ("location", Controller.CccDriver.EventHistory.Brief.Location))])
                    self._leafs = OrderedDict()

                    self.location = YList(self)
                    self._segment_path = lambda: "brief"
                    self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/ccc_driver/event-history/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Controller.CccDriver.EventHistory.Brief, [], name, value)


                class Location(Entity):
                    """
                    
                    
                    .. attribute:: location  (key)
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: card_event_hist_brief
                    
                    	
                    	**type**\:  :py:class:`CardEventHistBrief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.EventHistory.Brief.Location.CardEventHistBrief>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.CccDriver.EventHistory.Brief.Location, self).__init__()

                        self.yang_name = "location"
                        self.yang_parent_name = "brief"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['location']
                        self._child_classes = OrderedDict([("card_event_hist_brief", ("card_event_hist_brief", Controller.CccDriver.EventHistory.Brief.Location.CardEventHistBrief))])
                        self._leafs = OrderedDict([
                            ('location', YLeaf(YType.str, 'location')),
                        ])
                        self.location = None

                        self.card_event_hist_brief = Controller.CccDriver.EventHistory.Brief.Location.CardEventHistBrief()
                        self.card_event_hist_brief.parent = self
                        self._children_name_map["card_event_hist_brief"] = "card_event_hist_brief"
                        self._segment_path = lambda: "location" + "[location='" + str(self.location) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/ccc_driver/event-history/brief/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.CccDriver.EventHistory.Brief.Location, ['location'], name, value)


                    class CardEventHistBrief(Entity):
                        """
                        
                        
                        .. attribute:: card_event_hist_brief_values
                        
                        	
                        	**type**\: list of str
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.CccDriver.EventHistory.Brief.Location.CardEventHistBrief, self).__init__()

                            self.yang_name = "card_event_hist_brief"
                            self.yang_parent_name = "location"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('card_event_hist_brief_values', YLeafList(YType.str, 'card_event_hist_brief_values')),
                            ])
                            self.card_event_hist_brief_values = []
                            self._segment_path = lambda: "card_event_hist_brief"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.CccDriver.EventHistory.Brief.Location.CardEventHistBrief, ['card_event_hist_brief_values'], name, value)


            class Detail(Entity):
                """
                
                
                .. attribute:: location
                
                	
                	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.EventHistory.Detail.Location>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Controller.CccDriver.EventHistory.Detail, self).__init__()

                    self.yang_name = "detail"
                    self.yang_parent_name = "event-history"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("location", ("location", Controller.CccDriver.EventHistory.Detail.Location))])
                    self._leafs = OrderedDict()

                    self.location = YList(self)
                    self._segment_path = lambda: "detail"
                    self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/ccc_driver/event-history/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Controller.CccDriver.EventHistory.Detail, [], name, value)


                class Location(Entity):
                    """
                    
                    
                    .. attribute:: location  (key)
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: card_event_hist_detail
                    
                    	
                    	**type**\:  :py:class:`CardEventHistDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.EventHistory.Detail.Location.CardEventHistDetail>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.CccDriver.EventHistory.Detail.Location, self).__init__()

                        self.yang_name = "location"
                        self.yang_parent_name = "detail"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['location']
                        self._child_classes = OrderedDict([("card_event_hist_detail", ("card_event_hist_detail", Controller.CccDriver.EventHistory.Detail.Location.CardEventHistDetail))])
                        self._leafs = OrderedDict([
                            ('location', YLeaf(YType.str, 'location')),
                        ])
                        self.location = None

                        self.card_event_hist_detail = Controller.CccDriver.EventHistory.Detail.Location.CardEventHistDetail()
                        self.card_event_hist_detail.parent = self
                        self._children_name_map["card_event_hist_detail"] = "card_event_hist_detail"
                        self._segment_path = lambda: "location" + "[location='" + str(self.location) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/ccc_driver/event-history/detail/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.CccDriver.EventHistory.Detail.Location, ['location'], name, value)


                    class CardEventHistDetail(Entity):
                        """
                        
                        
                        .. attribute:: card_event_hist_detail_values
                        
                        	
                        	**type**\: list of str
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.CccDriver.EventHistory.Detail.Location.CardEventHistDetail, self).__init__()

                            self.yang_name = "card_event_hist_detail"
                            self.yang_parent_name = "location"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('card_event_hist_detail_values', YLeafList(YType.str, 'card_event_hist_detail_values')),
                            ])
                            self.card_event_hist_detail_values = []
                            self._segment_path = lambda: "card_event_hist_detail"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.CccDriver.EventHistory.Detail.Location.CardEventHistDetail, ['card_event_hist_detail_values'], name, value)


        class OirHistory(Entity):
            """
            
            
            .. attribute:: rack
            
            	
            	**type**\: list of  		 :py:class:`Rack <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.OirHistory.Rack>`
            
            

            """

            _prefix = 'calvados_controllers'
            _revision = '2017-01-31'

            def __init__(self):
                super(Controller.CccDriver.OirHistory, self).__init__()

                self.yang_name = "oir-history"
                self.yang_parent_name = "ccc_driver"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("rack", ("rack", Controller.CccDriver.OirHistory.Rack))])
                self._leafs = OrderedDict()

                self.rack = YList(self)
                self._segment_path = lambda: "oir-history"
                self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/ccc_driver/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Controller.CccDriver.OirHistory, [], name, value)


            class Rack(Entity):
                """
                
                
                .. attribute:: rack  (key)
                
                	
                	**type**\: str
                
                .. attribute:: card_oir_hist
                
                	
                	**type**\:  :py:class:`CardOirHist <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.OirHistory.Rack.CardOirHist>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Controller.CccDriver.OirHistory.Rack, self).__init__()

                    self.yang_name = "rack"
                    self.yang_parent_name = "oir-history"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = ['rack']
                    self._child_classes = OrderedDict([("card_oir_hist", ("card_oir_hist", Controller.CccDriver.OirHistory.Rack.CardOirHist))])
                    self._leafs = OrderedDict([
                        ('rack', YLeaf(YType.str, 'rack')),
                    ])
                    self.rack = None

                    self.card_oir_hist = Controller.CccDriver.OirHistory.Rack.CardOirHist()
                    self.card_oir_hist.parent = self
                    self._children_name_map["card_oir_hist"] = "card_oir_hist"
                    self._segment_path = lambda: "rack" + "[rack='" + str(self.rack) + "']"
                    self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/ccc_driver/oir-history/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Controller.CccDriver.OirHistory.Rack, ['rack'], name, value)


                class CardOirHist(Entity):
                    """
                    
                    
                    .. attribute:: card_oir_events
                    
                    	
                    	**type**\: list of str
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.CccDriver.OirHistory.Rack.CardOirHist, self).__init__()

                        self.yang_name = "card_oir_hist"
                        self.yang_parent_name = "rack"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('card_oir_events', YLeafList(YType.str, 'card_oir_events')),
                        ])
                        self.card_oir_events = []
                        self._segment_path = lambda: "card_oir_hist"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.CccDriver.OirHistory.Rack.CardOirHist, ['card_oir_events'], name, value)


        class NotifHistory(Entity):
            """
            
            
            .. attribute:: brief
            
            	
            	**type**\:  :py:class:`Brief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.NotifHistory.Brief>`
            
            .. attribute:: detail
            
            	
            	**type**\:  :py:class:`Detail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.NotifHistory.Detail>`
            
            

            """

            _prefix = 'calvados_controllers'
            _revision = '2017-01-31'

            def __init__(self):
                super(Controller.CccDriver.NotifHistory, self).__init__()

                self.yang_name = "notif-history"
                self.yang_parent_name = "ccc_driver"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("brief", ("brief", Controller.CccDriver.NotifHistory.Brief)), ("detail", ("detail", Controller.CccDriver.NotifHistory.Detail))])
                self._leafs = OrderedDict()

                self.brief = Controller.CccDriver.NotifHistory.Brief()
                self.brief.parent = self
                self._children_name_map["brief"] = "brief"

                self.detail = Controller.CccDriver.NotifHistory.Detail()
                self.detail.parent = self
                self._children_name_map["detail"] = "detail"
                self._segment_path = lambda: "notif-history"
                self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/ccc_driver/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Controller.CccDriver.NotifHistory, [], name, value)


            class Brief(Entity):
                """
                
                
                .. attribute:: location
                
                	
                	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.NotifHistory.Brief.Location>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Controller.CccDriver.NotifHistory.Brief, self).__init__()

                    self.yang_name = "brief"
                    self.yang_parent_name = "notif-history"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("location", ("location", Controller.CccDriver.NotifHistory.Brief.Location))])
                    self._leafs = OrderedDict()

                    self.location = YList(self)
                    self._segment_path = lambda: "brief"
                    self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/ccc_driver/notif-history/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Controller.CccDriver.NotifHistory.Brief, [], name, value)


                class Location(Entity):
                    """
                    
                    
                    .. attribute:: location  (key)
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: card_notif_hist_brief
                    
                    	
                    	**type**\:  :py:class:`CardNotifHistBrief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.NotifHistory.Brief.Location.CardNotifHistBrief>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.CccDriver.NotifHistory.Brief.Location, self).__init__()

                        self.yang_name = "location"
                        self.yang_parent_name = "brief"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['location']
                        self._child_classes = OrderedDict([("card_notif_hist_brief", ("card_notif_hist_brief", Controller.CccDriver.NotifHistory.Brief.Location.CardNotifHistBrief))])
                        self._leafs = OrderedDict([
                            ('location', YLeaf(YType.str, 'location')),
                        ])
                        self.location = None

                        self.card_notif_hist_brief = Controller.CccDriver.NotifHistory.Brief.Location.CardNotifHistBrief()
                        self.card_notif_hist_brief.parent = self
                        self._children_name_map["card_notif_hist_brief"] = "card_notif_hist_brief"
                        self._segment_path = lambda: "location" + "[location='" + str(self.location) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/ccc_driver/notif-history/brief/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.CccDriver.NotifHistory.Brief.Location, ['location'], name, value)


                    class CardNotifHistBrief(Entity):
                        """
                        
                        
                        .. attribute:: card_notif_hist_brief_values
                        
                        	
                        	**type**\: list of str
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.CccDriver.NotifHistory.Brief.Location.CardNotifHistBrief, self).__init__()

                            self.yang_name = "card_notif_hist_brief"
                            self.yang_parent_name = "location"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('card_notif_hist_brief_values', YLeafList(YType.str, 'card_notif_hist_brief_values')),
                            ])
                            self.card_notif_hist_brief_values = []
                            self._segment_path = lambda: "card_notif_hist_brief"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.CccDriver.NotifHistory.Brief.Location.CardNotifHistBrief, ['card_notif_hist_brief_values'], name, value)


            class Detail(Entity):
                """
                
                
                .. attribute:: location
                
                	
                	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.NotifHistory.Detail.Location>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Controller.CccDriver.NotifHistory.Detail, self).__init__()

                    self.yang_name = "detail"
                    self.yang_parent_name = "notif-history"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("location", ("location", Controller.CccDriver.NotifHistory.Detail.Location))])
                    self._leafs = OrderedDict()

                    self.location = YList(self)
                    self._segment_path = lambda: "detail"
                    self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/ccc_driver/notif-history/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Controller.CccDriver.NotifHistory.Detail, [], name, value)


                class Location(Entity):
                    """
                    
                    
                    .. attribute:: location  (key)
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: card_notif_hist_detail
                    
                    	
                    	**type**\:  :py:class:`CardNotifHistDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.NotifHistory.Detail.Location.CardNotifHistDetail>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.CccDriver.NotifHistory.Detail.Location, self).__init__()

                        self.yang_name = "location"
                        self.yang_parent_name = "detail"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['location']
                        self._child_classes = OrderedDict([("card_notif_hist_detail", ("card_notif_hist_detail", Controller.CccDriver.NotifHistory.Detail.Location.CardNotifHistDetail))])
                        self._leafs = OrderedDict([
                            ('location', YLeaf(YType.str, 'location')),
                        ])
                        self.location = None

                        self.card_notif_hist_detail = Controller.CccDriver.NotifHistory.Detail.Location.CardNotifHistDetail()
                        self.card_notif_hist_detail.parent = self
                        self._children_name_map["card_notif_hist_detail"] = "card_notif_hist_detail"
                        self._segment_path = lambda: "location" + "[location='" + str(self.location) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/ccc_driver/notif-history/detail/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.CccDriver.NotifHistory.Detail.Location, ['location'], name, value)


                    class CardNotifHistDetail(Entity):
                        """
                        
                        
                        .. attribute:: card_notif_hist_detail_values
                        
                        	
                        	**type**\: list of str
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.CccDriver.NotifHistory.Detail.Location.CardNotifHistDetail, self).__init__()

                            self.yang_name = "card_notif_hist_detail"
                            self.yang_parent_name = "location"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('card_notif_hist_detail_values', YLeafList(YType.str, 'card_notif_hist_detail_values')),
                            ])
                            self.card_notif_hist_detail_values = []
                            self._segment_path = lambda: "card_notif_hist_detail"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.CccDriver.NotifHistory.Detail.Location.CardNotifHistDetail, ['card_notif_hist_detail_values'], name, value)


        class Slave(Entity):
            """
            
            
            .. attribute:: event_history
            
            	
            	**type**\:  :py:class:`EventHistory <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Slave.EventHistory>`
            
            .. attribute:: notif_history
            
            	
            	**type**\:  :py:class:`NotifHistory <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Slave.NotifHistory>`
            
            .. attribute:: oir_history
            
            	
            	**type**\:  :py:class:`OirHistory <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Slave.OirHistory>`
            
            

            """

            _prefix = 'calvados_controllers'
            _revision = '2017-01-31'

            def __init__(self):
                super(Controller.CccDriver.Slave, self).__init__()

                self.yang_name = "slave"
                self.yang_parent_name = "ccc_driver"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("event-history", ("event_history", Controller.CccDriver.Slave.EventHistory)), ("notif-history", ("notif_history", Controller.CccDriver.Slave.NotifHistory)), ("oir-history", ("oir_history", Controller.CccDriver.Slave.OirHistory))])
                self._leafs = OrderedDict()

                self.event_history = Controller.CccDriver.Slave.EventHistory()
                self.event_history.parent = self
                self._children_name_map["event_history"] = "event-history"

                self.notif_history = Controller.CccDriver.Slave.NotifHistory()
                self.notif_history.parent = self
                self._children_name_map["notif_history"] = "notif-history"

                self.oir_history = Controller.CccDriver.Slave.OirHistory()
                self.oir_history.parent = self
                self._children_name_map["oir_history"] = "oir-history"
                self._segment_path = lambda: "slave"
                self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/ccc_driver/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Controller.CccDriver.Slave, [], name, value)


            class EventHistory(Entity):
                """
                
                
                .. attribute:: brief
                
                	
                	**type**\:  :py:class:`Brief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Slave.EventHistory.Brief>`
                
                .. attribute:: detail
                
                	
                	**type**\:  :py:class:`Detail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Slave.EventHistory.Detail>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Controller.CccDriver.Slave.EventHistory, self).__init__()

                    self.yang_name = "event-history"
                    self.yang_parent_name = "slave"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("brief", ("brief", Controller.CccDriver.Slave.EventHistory.Brief)), ("detail", ("detail", Controller.CccDriver.Slave.EventHistory.Detail))])
                    self._leafs = OrderedDict()

                    self.brief = Controller.CccDriver.Slave.EventHistory.Brief()
                    self.brief.parent = self
                    self._children_name_map["brief"] = "brief"

                    self.detail = Controller.CccDriver.Slave.EventHistory.Detail()
                    self.detail.parent = self
                    self._children_name_map["detail"] = "detail"
                    self._segment_path = lambda: "event-history"
                    self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/ccc_driver/slave/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Controller.CccDriver.Slave.EventHistory, [], name, value)


                class Brief(Entity):
                    """
                    
                    
                    .. attribute:: location
                    
                    	
                    	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Slave.EventHistory.Brief.Location>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.CccDriver.Slave.EventHistory.Brief, self).__init__()

                        self.yang_name = "brief"
                        self.yang_parent_name = "event-history"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("location", ("location", Controller.CccDriver.Slave.EventHistory.Brief.Location))])
                        self._leafs = OrderedDict()

                        self.location = YList(self)
                        self._segment_path = lambda: "brief"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/ccc_driver/slave/event-history/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.CccDriver.Slave.EventHistory.Brief, [], name, value)


                    class Location(Entity):
                        """
                        
                        
                        .. attribute:: location  (key)
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: card_event_hist_brief
                        
                        	
                        	**type**\:  :py:class:`CardEventHistBrief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Slave.EventHistory.Brief.Location.CardEventHistBrief>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.CccDriver.Slave.EventHistory.Brief.Location, self).__init__()

                            self.yang_name = "location"
                            self.yang_parent_name = "brief"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = ['location']
                            self._child_classes = OrderedDict([("card_event_hist_brief", ("card_event_hist_brief", Controller.CccDriver.Slave.EventHistory.Brief.Location.CardEventHistBrief))])
                            self._leafs = OrderedDict([
                                ('location', YLeaf(YType.str, 'location')),
                            ])
                            self.location = None

                            self.card_event_hist_brief = Controller.CccDriver.Slave.EventHistory.Brief.Location.CardEventHistBrief()
                            self.card_event_hist_brief.parent = self
                            self._children_name_map["card_event_hist_brief"] = "card_event_hist_brief"
                            self._segment_path = lambda: "location" + "[location='" + str(self.location) + "']"
                            self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/ccc_driver/slave/event-history/brief/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.CccDriver.Slave.EventHistory.Brief.Location, ['location'], name, value)


                        class CardEventHistBrief(Entity):
                            """
                            
                            
                            .. attribute:: card_event_hist_brief_values
                            
                            	
                            	**type**\: list of str
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.CccDriver.Slave.EventHistory.Brief.Location.CardEventHistBrief, self).__init__()

                                self.yang_name = "card_event_hist_brief"
                                self.yang_parent_name = "location"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('card_event_hist_brief_values', YLeafList(YType.str, 'card_event_hist_brief_values')),
                                ])
                                self.card_event_hist_brief_values = []
                                self._segment_path = lambda: "card_event_hist_brief"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.CccDriver.Slave.EventHistory.Brief.Location.CardEventHistBrief, ['card_event_hist_brief_values'], name, value)


                class Detail(Entity):
                    """
                    
                    
                    .. attribute:: location
                    
                    	
                    	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Slave.EventHistory.Detail.Location>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.CccDriver.Slave.EventHistory.Detail, self).__init__()

                        self.yang_name = "detail"
                        self.yang_parent_name = "event-history"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("location", ("location", Controller.CccDriver.Slave.EventHistory.Detail.Location))])
                        self._leafs = OrderedDict()

                        self.location = YList(self)
                        self._segment_path = lambda: "detail"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/ccc_driver/slave/event-history/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.CccDriver.Slave.EventHistory.Detail, [], name, value)


                    class Location(Entity):
                        """
                        
                        
                        .. attribute:: location  (key)
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: card_event_hist_detail
                        
                        	
                        	**type**\:  :py:class:`CardEventHistDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Slave.EventHistory.Detail.Location.CardEventHistDetail>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.CccDriver.Slave.EventHistory.Detail.Location, self).__init__()

                            self.yang_name = "location"
                            self.yang_parent_name = "detail"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = ['location']
                            self._child_classes = OrderedDict([("card_event_hist_detail", ("card_event_hist_detail", Controller.CccDriver.Slave.EventHistory.Detail.Location.CardEventHistDetail))])
                            self._leafs = OrderedDict([
                                ('location', YLeaf(YType.str, 'location')),
                            ])
                            self.location = None

                            self.card_event_hist_detail = Controller.CccDriver.Slave.EventHistory.Detail.Location.CardEventHistDetail()
                            self.card_event_hist_detail.parent = self
                            self._children_name_map["card_event_hist_detail"] = "card_event_hist_detail"
                            self._segment_path = lambda: "location" + "[location='" + str(self.location) + "']"
                            self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/ccc_driver/slave/event-history/detail/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.CccDriver.Slave.EventHistory.Detail.Location, ['location'], name, value)


                        class CardEventHistDetail(Entity):
                            """
                            
                            
                            .. attribute:: card_event_hist_detail_values
                            
                            	
                            	**type**\: list of str
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.CccDriver.Slave.EventHistory.Detail.Location.CardEventHistDetail, self).__init__()

                                self.yang_name = "card_event_hist_detail"
                                self.yang_parent_name = "location"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('card_event_hist_detail_values', YLeafList(YType.str, 'card_event_hist_detail_values')),
                                ])
                                self.card_event_hist_detail_values = []
                                self._segment_path = lambda: "card_event_hist_detail"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.CccDriver.Slave.EventHistory.Detail.Location.CardEventHistDetail, ['card_event_hist_detail_values'], name, value)


            class NotifHistory(Entity):
                """
                
                
                .. attribute:: brief
                
                	
                	**type**\:  :py:class:`Brief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Slave.NotifHistory.Brief>`
                
                .. attribute:: detail
                
                	
                	**type**\:  :py:class:`Detail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Slave.NotifHistory.Detail>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Controller.CccDriver.Slave.NotifHistory, self).__init__()

                    self.yang_name = "notif-history"
                    self.yang_parent_name = "slave"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("brief", ("brief", Controller.CccDriver.Slave.NotifHistory.Brief)), ("detail", ("detail", Controller.CccDriver.Slave.NotifHistory.Detail))])
                    self._leafs = OrderedDict()

                    self.brief = Controller.CccDriver.Slave.NotifHistory.Brief()
                    self.brief.parent = self
                    self._children_name_map["brief"] = "brief"

                    self.detail = Controller.CccDriver.Slave.NotifHistory.Detail()
                    self.detail.parent = self
                    self._children_name_map["detail"] = "detail"
                    self._segment_path = lambda: "notif-history"
                    self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/ccc_driver/slave/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Controller.CccDriver.Slave.NotifHistory, [], name, value)


                class Brief(Entity):
                    """
                    
                    
                    .. attribute:: location
                    
                    	
                    	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Slave.NotifHistory.Brief.Location>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.CccDriver.Slave.NotifHistory.Brief, self).__init__()

                        self.yang_name = "brief"
                        self.yang_parent_name = "notif-history"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("location", ("location", Controller.CccDriver.Slave.NotifHistory.Brief.Location))])
                        self._leafs = OrderedDict()

                        self.location = YList(self)
                        self._segment_path = lambda: "brief"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/ccc_driver/slave/notif-history/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.CccDriver.Slave.NotifHistory.Brief, [], name, value)


                    class Location(Entity):
                        """
                        
                        
                        .. attribute:: location  (key)
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: card_notif_hist_brief
                        
                        	
                        	**type**\:  :py:class:`CardNotifHistBrief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Slave.NotifHistory.Brief.Location.CardNotifHistBrief>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.CccDriver.Slave.NotifHistory.Brief.Location, self).__init__()

                            self.yang_name = "location"
                            self.yang_parent_name = "brief"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = ['location']
                            self._child_classes = OrderedDict([("card_notif_hist_brief", ("card_notif_hist_brief", Controller.CccDriver.Slave.NotifHistory.Brief.Location.CardNotifHistBrief))])
                            self._leafs = OrderedDict([
                                ('location', YLeaf(YType.str, 'location')),
                            ])
                            self.location = None

                            self.card_notif_hist_brief = Controller.CccDriver.Slave.NotifHistory.Brief.Location.CardNotifHistBrief()
                            self.card_notif_hist_brief.parent = self
                            self._children_name_map["card_notif_hist_brief"] = "card_notif_hist_brief"
                            self._segment_path = lambda: "location" + "[location='" + str(self.location) + "']"
                            self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/ccc_driver/slave/notif-history/brief/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.CccDriver.Slave.NotifHistory.Brief.Location, ['location'], name, value)


                        class CardNotifHistBrief(Entity):
                            """
                            
                            
                            .. attribute:: card_notif_hist_brief_values
                            
                            	
                            	**type**\: list of str
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.CccDriver.Slave.NotifHistory.Brief.Location.CardNotifHistBrief, self).__init__()

                                self.yang_name = "card_notif_hist_brief"
                                self.yang_parent_name = "location"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('card_notif_hist_brief_values', YLeafList(YType.str, 'card_notif_hist_brief_values')),
                                ])
                                self.card_notif_hist_brief_values = []
                                self._segment_path = lambda: "card_notif_hist_brief"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.CccDriver.Slave.NotifHistory.Brief.Location.CardNotifHistBrief, ['card_notif_hist_brief_values'], name, value)


                class Detail(Entity):
                    """
                    
                    
                    .. attribute:: location
                    
                    	
                    	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Slave.NotifHistory.Detail.Location>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.CccDriver.Slave.NotifHistory.Detail, self).__init__()

                        self.yang_name = "detail"
                        self.yang_parent_name = "notif-history"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("location", ("location", Controller.CccDriver.Slave.NotifHistory.Detail.Location))])
                        self._leafs = OrderedDict()

                        self.location = YList(self)
                        self._segment_path = lambda: "detail"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/ccc_driver/slave/notif-history/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.CccDriver.Slave.NotifHistory.Detail, [], name, value)


                    class Location(Entity):
                        """
                        
                        
                        .. attribute:: location  (key)
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: card_notif_hist_detail
                        
                        	
                        	**type**\:  :py:class:`CardNotifHistDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Slave.NotifHistory.Detail.Location.CardNotifHistDetail>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.CccDriver.Slave.NotifHistory.Detail.Location, self).__init__()

                            self.yang_name = "location"
                            self.yang_parent_name = "detail"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = ['location']
                            self._child_classes = OrderedDict([("card_notif_hist_detail", ("card_notif_hist_detail", Controller.CccDriver.Slave.NotifHistory.Detail.Location.CardNotifHistDetail))])
                            self._leafs = OrderedDict([
                                ('location', YLeaf(YType.str, 'location')),
                            ])
                            self.location = None

                            self.card_notif_hist_detail = Controller.CccDriver.Slave.NotifHistory.Detail.Location.CardNotifHistDetail()
                            self.card_notif_hist_detail.parent = self
                            self._children_name_map["card_notif_hist_detail"] = "card_notif_hist_detail"
                            self._segment_path = lambda: "location" + "[location='" + str(self.location) + "']"
                            self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/ccc_driver/slave/notif-history/detail/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.CccDriver.Slave.NotifHistory.Detail.Location, ['location'], name, value)


                        class CardNotifHistDetail(Entity):
                            """
                            
                            
                            .. attribute:: card_notif_hist_detail_values
                            
                            	
                            	**type**\: list of str
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.CccDriver.Slave.NotifHistory.Detail.Location.CardNotifHistDetail, self).__init__()

                                self.yang_name = "card_notif_hist_detail"
                                self.yang_parent_name = "location"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('card_notif_hist_detail_values', YLeafList(YType.str, 'card_notif_hist_detail_values')),
                                ])
                                self.card_notif_hist_detail_values = []
                                self._segment_path = lambda: "card_notif_hist_detail"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.CccDriver.Slave.NotifHistory.Detail.Location.CardNotifHistDetail, ['card_notif_hist_detail_values'], name, value)


            class OirHistory(Entity):
                """
                
                
                .. attribute:: rack
                
                	
                	**type**\: list of  		 :py:class:`Rack <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Slave.OirHistory.Rack>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Controller.CccDriver.Slave.OirHistory, self).__init__()

                    self.yang_name = "oir-history"
                    self.yang_parent_name = "slave"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("rack", ("rack", Controller.CccDriver.Slave.OirHistory.Rack))])
                    self._leafs = OrderedDict()

                    self.rack = YList(self)
                    self._segment_path = lambda: "oir-history"
                    self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/ccc_driver/slave/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Controller.CccDriver.Slave.OirHistory, [], name, value)


                class Rack(Entity):
                    """
                    
                    
                    .. attribute:: rack  (key)
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: card_oir_hist
                    
                    	
                    	**type**\:  :py:class:`CardOirHist <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Slave.OirHistory.Rack.CardOirHist>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.CccDriver.Slave.OirHistory.Rack, self).__init__()

                        self.yang_name = "rack"
                        self.yang_parent_name = "oir-history"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['rack']
                        self._child_classes = OrderedDict([("card_oir_hist", ("card_oir_hist", Controller.CccDriver.Slave.OirHistory.Rack.CardOirHist))])
                        self._leafs = OrderedDict([
                            ('rack', YLeaf(YType.str, 'rack')),
                        ])
                        self.rack = None

                        self.card_oir_hist = Controller.CccDriver.Slave.OirHistory.Rack.CardOirHist()
                        self.card_oir_hist.parent = self
                        self._children_name_map["card_oir_hist"] = "card_oir_hist"
                        self._segment_path = lambda: "rack" + "[rack='" + str(self.rack) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/ccc_driver/slave/oir-history/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.CccDriver.Slave.OirHistory.Rack, ['rack'], name, value)


                    class CardOirHist(Entity):
                        """
                        
                        
                        .. attribute:: card_oir_events
                        
                        	
                        	**type**\: list of str
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.CccDriver.Slave.OirHistory.Rack.CardOirHist, self).__init__()

                            self.yang_name = "card_oir_hist"
                            self.yang_parent_name = "rack"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('card_oir_events', YLeafList(YType.str, 'card_oir_events')),
                            ])
                            self.card_oir_events = []
                            self._segment_path = lambda: "card_oir_hist"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.CccDriver.Slave.OirHistory.Rack.CardOirHist, ['card_oir_events'], name, value)


        class Action(Entity):
            """
            
            
            .. attribute:: register
            
            	
            	**type**\:  :py:class:`Register <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Action.Register>`
            
            

            """

            _prefix = 'calvados_controllers'
            _revision = '2017-01-31'

            def __init__(self):
                super(Controller.CccDriver.Action, self).__init__()

                self.yang_name = "action"
                self.yang_parent_name = "ccc_driver"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("register", ("register", Controller.CccDriver.Action.Register))])
                self._leafs = OrderedDict()

                self.register = Controller.CccDriver.Action.Register()
                self.register.parent = self
                self._children_name_map["register"] = "register"
                self._segment_path = lambda: "action"
                self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/ccc_driver/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Controller.CccDriver.Action, [], name, value)


            class Register(Entity):
                """
                
                
                .. attribute:: location
                
                	
                	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.CccDriver.Action.Register.Location>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Controller.CccDriver.Action.Register, self).__init__()

                    self.yang_name = "register"
                    self.yang_parent_name = "action"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("location", ("location", Controller.CccDriver.Action.Register.Location))])
                    self._leafs = OrderedDict()

                    self.location = YList(self)
                    self._segment_path = lambda: "register"
                    self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/ccc_driver/action/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Controller.CccDriver.Action.Register, [], name, value)


                class Location(Entity):
                    """
                    
                    
                    .. attribute:: location  (key)
                    
                    	
                    	**type**\: str
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.CccDriver.Action.Register.Location, self).__init__()

                        self.yang_name = "location"
                        self.yang_parent_name = "register"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['location']
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('location', YLeaf(YType.str, 'location')),
                        ])
                        self.location = None
                        self._segment_path = lambda: "location" + "[location='" + str(self.location) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/ccc_driver/action/register/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.CccDriver.Action.Register.Location, ['location'], name, value)


    class Switch(Entity):
        """
        
        
        .. attribute:: oper
        
        	Control Ethernet switch operational data
        	**type**\:  :py:class:`Oper <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper>`
        
        

        """

        _prefix = 'calvados_controllers'
        _revision = '2017-01-31'

        def __init__(self):
            super(Controller.Switch, self).__init__()

            self.yang_name = "switch"
            self.yang_parent_name = "controller"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([("oper", ("oper", Controller.Switch.Oper))])
            self._leafs = OrderedDict()

            self.oper = Controller.Switch.Oper()
            self.oper.parent = self
            self._children_name_map["oper"] = "oper"
            self._segment_path = lambda: "switch"
            self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Controller.Switch, [], name, value)


        class Oper(Entity):
            """
            Control Ethernet switch operational data.
            
            .. attribute:: reachable
            
            	
            	**type**\:  :py:class:`Reachable <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Reachable>`
            
            .. attribute:: summary
            
            	
            	**type**\:  :py:class:`Summary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Summary>`
            
            .. attribute:: statistics
            
            	
            	**type**\:  :py:class:`Statistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Statistics>`
            
            .. attribute:: serdes
            
            	
            	**type**\:  :py:class:`Serdes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Serdes>`
            
            .. attribute:: mac
            
            	
            	**type**\:  :py:class:`Mac <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Mac>`
            
            .. attribute:: bridge
            
            	
            	**type**\:  :py:class:`Bridge <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Bridge>`
            
            .. attribute:: fdb
            
            	
            	**type**\:  :py:class:`Fdb <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Fdb>`
            
            .. attribute:: vlan
            
            	
            	**type**\:  :py:class:`Vlan <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Vlan>`
            
            .. attribute:: sdr
            
            	
            	**type**\:  :py:class:`Sdr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sdr>`
            
            .. attribute:: sfp
            
            	
            	**type**\:  :py:class:`Sfp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sfp>`
            
            .. attribute:: mlap
            
            	MLAP switch data
            	**type**\:  :py:class:`Mlap <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Mlap>`
            
            .. attribute:: switch_debug_cont
            
            	
            	**type**\:  :py:class:`SwitchDebugCont <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.SwitchDebugCont>`
            
            .. attribute:: esd
            
            	
            	**type**\:  :py:class:`Esd <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Esd>`
            
            .. attribute:: mgmt_agent
            
            	
            	**type**\:  :py:class:`MgmtAgent <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.MgmtAgent>`
            
            .. attribute:: port_state
            
            	
            	**type**\:  :py:class:`PortState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.PortState>`
            
            .. attribute:: trunk
            
            	
            	**type**\:  :py:class:`Trunk <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Trunk>`
            
            

            """

            _prefix = 'calvados_controllers'
            _revision = '2017-01-31'

            def __init__(self):
                super(Controller.Switch.Oper, self).__init__()

                self.yang_name = "oper"
                self.yang_parent_name = "switch"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("reachable", ("reachable", Controller.Switch.Oper.Reachable)), ("summary", ("summary", Controller.Switch.Oper.Summary)), ("statistics", ("statistics", Controller.Switch.Oper.Statistics)), ("serdes", ("serdes", Controller.Switch.Oper.Serdes)), ("mac", ("mac", Controller.Switch.Oper.Mac)), ("bridge", ("bridge", Controller.Switch.Oper.Bridge)), ("fdb", ("fdb", Controller.Switch.Oper.Fdb)), ("vlan", ("vlan", Controller.Switch.Oper.Vlan)), ("sdr", ("sdr", Controller.Switch.Oper.Sdr)), ("sfp", ("sfp", Controller.Switch.Oper.Sfp)), ("mlap", ("mlap", Controller.Switch.Oper.Mlap)), ("switch-debug-cont", ("switch_debug_cont", Controller.Switch.Oper.SwitchDebugCont)), ("esd", ("esd", Controller.Switch.Oper.Esd)), ("mgmt-agent", ("mgmt_agent", Controller.Switch.Oper.MgmtAgent)), ("port-state", ("port_state", Controller.Switch.Oper.PortState)), ("trunk", ("trunk", Controller.Switch.Oper.Trunk))])
                self._leafs = OrderedDict()

                self.reachable = Controller.Switch.Oper.Reachable()
                self.reachable.parent = self
                self._children_name_map["reachable"] = "reachable"

                self.summary = Controller.Switch.Oper.Summary()
                self.summary.parent = self
                self._children_name_map["summary"] = "summary"

                self.statistics = Controller.Switch.Oper.Statistics()
                self.statistics.parent = self
                self._children_name_map["statistics"] = "statistics"

                self.serdes = Controller.Switch.Oper.Serdes()
                self.serdes.parent = self
                self._children_name_map["serdes"] = "serdes"

                self.mac = Controller.Switch.Oper.Mac()
                self.mac.parent = self
                self._children_name_map["mac"] = "mac"

                self.bridge = Controller.Switch.Oper.Bridge()
                self.bridge.parent = self
                self._children_name_map["bridge"] = "bridge"

                self.fdb = Controller.Switch.Oper.Fdb()
                self.fdb.parent = self
                self._children_name_map["fdb"] = "fdb"

                self.vlan = Controller.Switch.Oper.Vlan()
                self.vlan.parent = self
                self._children_name_map["vlan"] = "vlan"

                self.sdr = Controller.Switch.Oper.Sdr()
                self.sdr.parent = self
                self._children_name_map["sdr"] = "sdr"

                self.sfp = Controller.Switch.Oper.Sfp()
                self.sfp.parent = self
                self._children_name_map["sfp"] = "sfp"

                self.mlap = Controller.Switch.Oper.Mlap()
                self.mlap.parent = self
                self._children_name_map["mlap"] = "mlap"

                self.switch_debug_cont = Controller.Switch.Oper.SwitchDebugCont()
                self.switch_debug_cont.parent = self
                self._children_name_map["switch_debug_cont"] = "switch-debug-cont"

                self.esd = Controller.Switch.Oper.Esd()
                self.esd.parent = self
                self._children_name_map["esd"] = "esd"

                self.mgmt_agent = Controller.Switch.Oper.MgmtAgent()
                self.mgmt_agent.parent = self
                self._children_name_map["mgmt_agent"] = "mgmt-agent"

                self.port_state = Controller.Switch.Oper.PortState()
                self.port_state.parent = self
                self._children_name_map["port_state"] = "port-state"

                self.trunk = Controller.Switch.Oper.Trunk()
                self.trunk.parent = self
                self._children_name_map["trunk"] = "trunk"
                self._segment_path = lambda: "oper"
                self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Controller.Switch.Oper, [], name, value)


            class Reachable(Entity):
                """
                
                
                .. attribute:: location
                
                	
                	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Reachable.Location>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Controller.Switch.Oper.Reachable, self).__init__()

                    self.yang_name = "reachable"
                    self.yang_parent_name = "oper"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("location", ("location", Controller.Switch.Oper.Reachable.Location))])
                    self._leafs = OrderedDict()

                    self.location = YList(self)
                    self._segment_path = lambda: "reachable"
                    self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Controller.Switch.Oper.Reachable, [], name, value)


                class Location(Entity):
                    """
                    
                    
                    .. attribute:: rack  (key)
                    
                    	
                    	**type**\:  :py:class:`EsdmaRackNumEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaRackNumEnum>`
                    
                    .. attribute:: card  (key)
                    
                    	
                    	**type**\:  :py:class:`EsdmaCpu <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaCpu>`
                    
                    .. attribute:: switch_id  (key)
                    
                    	
                    	**type**\:  :py:class:`EsdmaSwitchTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaSwitchTypeEnum>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.Switch.Oper.Reachable.Location, self).__init__()

                        self.yang_name = "location"
                        self.yang_parent_name = "reachable"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['rack','card','switch_id']
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('rack', YLeaf(YType.enumeration, 'rack')),
                            ('card', YLeaf(YType.enumeration, 'card')),
                            ('switch_id', YLeaf(YType.enumeration, 'switch-id')),
                        ])
                        self.rack = None
                        self.card = None
                        self.switch_id = None
                        self._segment_path = lambda: "location" + "[rack='" + str(self.rack) + "']" + "[card='" + str(self.card) + "']" + "[switch-id='" + str(self.switch_id) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/reachable/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.Switch.Oper.Reachable.Location, [u'rack', u'card', u'switch_id'], name, value)


            class Summary(Entity):
                """
                
                
                .. attribute:: location
                
                	
                	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Summary.Location>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Controller.Switch.Oper.Summary, self).__init__()

                    self.yang_name = "summary"
                    self.yang_parent_name = "oper"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("location", ("location", Controller.Switch.Oper.Summary.Location))])
                    self._leafs = OrderedDict()

                    self.location = YList(self)
                    self._segment_path = lambda: "summary"
                    self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Controller.Switch.Oper.Summary, [], name, value)


                class Location(Entity):
                    """
                    
                    
                    .. attribute:: rack  (key)
                    
                    	
                    	**type**\:  :py:class:`EsdmaRackNumEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaRackNumEnum>`
                    
                    .. attribute:: card  (key)
                    
                    	Card that owns a switch of interest
                    	**type**\:  :py:class:`EsdmaCpu <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaCpu>`
                    
                    .. attribute:: switch_id  (key)
                    
                    	Switch type
                    	**type**\:  :py:class:`EsdmaSwitchTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaSwitchTypeEnum>`
                    
                    .. attribute:: serial_num
                    
                    	Rack serial number
                    	**type**\: str
                    
                    .. attribute:: port_iter
                    
                    	
                    	**type**\: list of  		 :py:class:`PortIter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Summary.Location.PortIter>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.Switch.Oper.Summary.Location, self).__init__()

                        self.yang_name = "location"
                        self.yang_parent_name = "summary"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['rack','card','switch_id']
                        self._child_classes = OrderedDict([("port-iter", ("port_iter", Controller.Switch.Oper.Summary.Location.PortIter))])
                        self._leafs = OrderedDict([
                            ('rack', YLeaf(YType.enumeration, 'rack')),
                            ('card', YLeaf(YType.enumeration, 'card')),
                            ('switch_id', YLeaf(YType.enumeration, 'switch-id')),
                            ('serial_num', YLeaf(YType.str, 'serial-num')),
                        ])
                        self.rack = None
                        self.card = None
                        self.switch_id = None
                        self.serial_num = None

                        self.port_iter = YList(self)
                        self._segment_path = lambda: "location" + "[rack='" + str(self.rack) + "']" + "[card='" + str(self.card) + "']" + "[switch-id='" + str(self.switch_id) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/summary/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.Switch.Oper.Summary.Location, [u'rack', u'card', u'switch_id', u'serial_num'], name, value)


                    class PortIter(Entity):
                        """
                        
                        
                        .. attribute:: port  (key)
                        
                        	Switch port
                        	**type**\: int
                        
                        	**range:** 0..127
                        
                        .. attribute:: phys_state
                        
                        	Physical port state
                        	**type**\:  :py:class:`EsdmaSwitchPortState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaSwitchPortState>`
                        
                        .. attribute:: admin_state
                        
                        	Administrative port state
                        	**type**\:  :py:class:`EsdmaSwitchPortState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaSwitchPortState>`
                        
                        .. attribute:: port_speed
                        
                        	Indicates the port speed in bits per second
                        	**type**\: str
                        
                        .. attribute:: protocol_state
                        
                        	Protocol invoked port state
                        	**type**\:  :py:class:`MlapStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.MlapStateEnum>`
                        
                        .. attribute:: forwarding
                        
                        	Indicates whether this port is allowed to forward traffic
                        	**type**\:  :py:class:`SwitchForwardingState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.SwitchForwardingState>`
                        
                        .. attribute:: connects_to
                        
                        	Indicates what this port connects to
                        	**type**\: str
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Switch.Oper.Summary.Location.PortIter, self).__init__()

                            self.yang_name = "port-iter"
                            self.yang_parent_name = "location"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['port']
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('port', YLeaf(YType.int32, 'port')),
                                ('phys_state', YLeaf(YType.enumeration, 'phys-state')),
                                ('admin_state', YLeaf(YType.enumeration, 'admin-state')),
                                ('port_speed', YLeaf(YType.str, 'port-speed')),
                                ('protocol_state', YLeaf(YType.enumeration, 'protocol-state')),
                                ('forwarding', YLeaf(YType.enumeration, 'forwarding')),
                                ('connects_to', YLeaf(YType.str, 'connects-to')),
                            ])
                            self.port = None
                            self.phys_state = None
                            self.admin_state = None
                            self.port_speed = None
                            self.protocol_state = None
                            self.forwarding = None
                            self.connects_to = None
                            self._segment_path = lambda: "port-iter" + "[port='" + str(self.port) + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Switch.Oper.Summary.Location.PortIter, [u'port', u'phys_state', u'admin_state', u'port_speed', u'protocol_state', u'forwarding', u'connects_to'], name, value)


            class Statistics(Entity):
                """
                
                
                .. attribute:: summary_statistics
                
                	
                	**type**\:  :py:class:`SummaryStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Statistics.SummaryStatistics>`
                
                .. attribute:: detail
                
                	
                	**type**\:  :py:class:`Detail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Statistics.Detail>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Controller.Switch.Oper.Statistics, self).__init__()

                    self.yang_name = "statistics"
                    self.yang_parent_name = "oper"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("summary-statistics", ("summary_statistics", Controller.Switch.Oper.Statistics.SummaryStatistics)), ("detail", ("detail", Controller.Switch.Oper.Statistics.Detail))])
                    self._leafs = OrderedDict()

                    self.summary_statistics = Controller.Switch.Oper.Statistics.SummaryStatistics()
                    self.summary_statistics.parent = self
                    self._children_name_map["summary_statistics"] = "summary-statistics"

                    self.detail = Controller.Switch.Oper.Statistics.Detail()
                    self.detail.parent = self
                    self._children_name_map["detail"] = "detail"
                    self._segment_path = lambda: "statistics"
                    self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Controller.Switch.Oper.Statistics, [], name, value)


                class SummaryStatistics(Entity):
                    """
                    
                    
                    .. attribute:: location
                    
                    	
                    	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Statistics.SummaryStatistics.Location>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.Switch.Oper.Statistics.SummaryStatistics, self).__init__()

                        self.yang_name = "summary-statistics"
                        self.yang_parent_name = "statistics"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("location", ("location", Controller.Switch.Oper.Statistics.SummaryStatistics.Location))])
                        self._leafs = OrderedDict()

                        self.location = YList(self)
                        self._segment_path = lambda: "summary-statistics"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/statistics/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.Switch.Oper.Statistics.SummaryStatistics, [], name, value)


                    class Location(Entity):
                        """
                        
                        
                        .. attribute:: rack  (key)
                        
                        	
                        	**type**\:  :py:class:`EsdmaRackNumEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaRackNumEnum>`
                        
                        .. attribute:: card  (key)
                        
                        	Card that owns a switch of interest
                        	**type**\:  :py:class:`EsdmaCpu <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaCpu>`
                        
                        .. attribute:: switch_id  (key)
                        
                        	Switch type
                        	**type**\:  :py:class:`EsdmaSwitchTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaSwitchTypeEnum>`
                        
                        .. attribute:: serial_num
                        
                        	Rack serial number
                        	**type**\: str
                        
                        .. attribute:: port_iter
                        
                        	
                        	**type**\: list of  		 :py:class:`PortIter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Statistics.SummaryStatistics.Location.PortIter>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Switch.Oper.Statistics.SummaryStatistics.Location, self).__init__()

                            self.yang_name = "location"
                            self.yang_parent_name = "summary-statistics"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = ['rack','card','switch_id']
                            self._child_classes = OrderedDict([("port-iter", ("port_iter", Controller.Switch.Oper.Statistics.SummaryStatistics.Location.PortIter))])
                            self._leafs = OrderedDict([
                                ('rack', YLeaf(YType.enumeration, 'rack')),
                                ('card', YLeaf(YType.enumeration, 'card')),
                                ('switch_id', YLeaf(YType.enumeration, 'switch-id')),
                                ('serial_num', YLeaf(YType.str, 'serial-num')),
                            ])
                            self.rack = None
                            self.card = None
                            self.switch_id = None
                            self.serial_num = None

                            self.port_iter = YList(self)
                            self._segment_path = lambda: "location" + "[rack='" + str(self.rack) + "']" + "[card='" + str(self.card) + "']" + "[switch-id='" + str(self.switch_id) + "']"
                            self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/statistics/summary-statistics/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Switch.Oper.Statistics.SummaryStatistics.Location, ['rack', 'card', 'switch_id', 'serial_num'], name, value)


                        class PortIter(Entity):
                            """
                            
                            
                            .. attribute:: port  (key)
                            
                            	Switch port
                            	**type**\: int
                            
                            	**range:** 0..127
                            
                            .. attribute:: phys_state
                            
                            	Physical port state
                            	**type**\:  :py:class:`EsdmaSwitchPortState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaSwitchPortState>`
                            
                            .. attribute:: state_changes
                            
                            	Physical port state changes
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: sw_sum_tx_packets
                            
                            	Packets transmitted on this switch port
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: sw_sum_rx_packets
                            
                            	Indicates the port speed in bits per second
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: sw_sum_tx_drops_errors
                            
                            	Indicates the number of transmitted packets that had an error or were dropped by the policer
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: sw_sum_rx_drops_errors
                            
                            	Indicates the number of received packets that had an error or were dropped by the policer
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: connects_to
                            
                            	Indicates what this port connects to
                            	**type**\: str
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Switch.Oper.Statistics.SummaryStatistics.Location.PortIter, self).__init__()

                                self.yang_name = "port-iter"
                                self.yang_parent_name = "location"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['port']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('port', YLeaf(YType.int32, 'port')),
                                    ('phys_state', YLeaf(YType.enumeration, 'phys-state')),
                                    ('state_changes', YLeaf(YType.uint32, 'state-changes')),
                                    ('sw_sum_tx_packets', YLeaf(YType.uint64, 'sw-sum-tx-packets')),
                                    ('sw_sum_rx_packets', YLeaf(YType.uint64, 'sw-sum-rx-packets')),
                                    ('sw_sum_tx_drops_errors', YLeaf(YType.uint64, 'sw-sum-tx-drops-errors')),
                                    ('sw_sum_rx_drops_errors', YLeaf(YType.uint64, 'sw-sum-rx-drops-errors')),
                                    ('connects_to', YLeaf(YType.str, 'connects-to')),
                                ])
                                self.port = None
                                self.phys_state = None
                                self.state_changes = None
                                self.sw_sum_tx_packets = None
                                self.sw_sum_rx_packets = None
                                self.sw_sum_tx_drops_errors = None
                                self.sw_sum_rx_drops_errors = None
                                self.connects_to = None
                                self._segment_path = lambda: "port-iter" + "[port='" + str(self.port) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Switch.Oper.Statistics.SummaryStatistics.Location.PortIter, ['port', 'phys_state', 'state_changes', 'sw_sum_tx_packets', 'sw_sum_rx_packets', 'sw_sum_tx_drops_errors', 'sw_sum_rx_drops_errors', 'connects_to'], name, value)


                class Detail(Entity):
                    """
                    
                    
                    .. attribute:: location
                    
                    	
                    	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Statistics.Detail.Location>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.Switch.Oper.Statistics.Detail, self).__init__()

                        self.yang_name = "detail"
                        self.yang_parent_name = "statistics"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("location", ("location", Controller.Switch.Oper.Statistics.Detail.Location))])
                        self._leafs = OrderedDict()

                        self.location = YList(self)
                        self._segment_path = lambda: "detail"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/statistics/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.Switch.Oper.Statistics.Detail, [], name, value)


                    class Location(Entity):
                        """
                        
                        
                        .. attribute:: rack  (key)
                        
                        	
                        	**type**\:  :py:class:`EsdmaRackNumEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaRackNumEnum>`
                        
                        .. attribute:: card  (key)
                        
                        	Card that owns a switch of interest
                        	**type**\:  :py:class:`EsdmaCpu <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaCpu>`
                        
                        .. attribute:: switch_id  (key)
                        
                        	Switch type
                        	**type**\:  :py:class:`EsdmaSwitchTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaSwitchTypeEnum>`
                        
                        .. attribute:: port_iter
                        
                        	
                        	**type**\: list of  		 :py:class:`PortIter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Statistics.Detail.Location.PortIter>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Switch.Oper.Statistics.Detail.Location, self).__init__()

                            self.yang_name = "location"
                            self.yang_parent_name = "detail"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = ['rack','card','switch_id']
                            self._child_classes = OrderedDict([("port-iter", ("port_iter", Controller.Switch.Oper.Statistics.Detail.Location.PortIter))])
                            self._leafs = OrderedDict([
                                ('rack', YLeaf(YType.enumeration, 'rack')),
                                ('card', YLeaf(YType.enumeration, 'card')),
                                ('switch_id', YLeaf(YType.enumeration, 'switch-id')),
                            ])
                            self.rack = None
                            self.card = None
                            self.switch_id = None

                            self.port_iter = YList(self)
                            self._segment_path = lambda: "location" + "[rack='" + str(self.rack) + "']" + "[card='" + str(self.card) + "']" + "[switch-id='" + str(self.switch_id) + "']"
                            self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/statistics/detail/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Switch.Oper.Statistics.Detail.Location, ['rack', 'card', 'switch_id'], name, value)


                        class PortIter(Entity):
                            """
                            
                            
                            .. attribute:: port  (key)
                            
                            	Switch port
                            	**type**\: int
                            
                            	**range:** 0..127
                            
                            .. attribute:: phys_state
                            
                            	Physical port state
                            	**type**\:  :py:class:`EsdmaSwitchPortState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaSwitchPortState>`
                            
                            .. attribute:: port_speed
                            
                            	Indicates the port speed in bits per second
                            	**type**\: str
                            
                            .. attribute:: connects_to
                            
                            	Indicates what this port connects to
                            	**type**\: str
                            
                            .. attribute:: counters
                            
                            	
                            	**type**\:  :py:class:`Counters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Statistics.Detail.Location.PortIter.Counters>`
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Switch.Oper.Statistics.Detail.Location.PortIter, self).__init__()

                                self.yang_name = "port-iter"
                                self.yang_parent_name = "location"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['port']
                                self._child_classes = OrderedDict([("counters", ("counters", Controller.Switch.Oper.Statistics.Detail.Location.PortIter.Counters))])
                                self._leafs = OrderedDict([
                                    ('port', YLeaf(YType.int32, 'port')),
                                    ('phys_state', YLeaf(YType.enumeration, 'phys-state')),
                                    ('port_speed', YLeaf(YType.str, 'port-speed')),
                                    ('connects_to', YLeaf(YType.str, 'connects-to')),
                                ])
                                self.port = None
                                self.phys_state = None
                                self.port_speed = None
                                self.connects_to = None

                                self.counters = Controller.Switch.Oper.Statistics.Detail.Location.PortIter.Counters()
                                self.counters.parent = self
                                self._children_name_map["counters"] = "counters"
                                self._segment_path = lambda: "port-iter" + "[port='" + str(self.port) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Switch.Oper.Statistics.Detail.Location.PortIter, ['port', 'phys_state', 'port_speed', 'connects_to'], name, value)


                            class Counters(Entity):
                                """
                                
                                
                                .. attribute:: sw_det_rx_ucast_packets
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: sw_det_rx_mcast_packets
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: sw_det_rx_bcast_packets
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: sw_det_rx_flow_control
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: sw_det_rx_good_octets
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: sw_det_rx_bad_octets
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: sw_det_rx_fifo_overrun
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: sw_det_rx_undersize
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: sw_det_rx_fragments
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: sw_det_rx_oversize
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: sw_det_rx_jabber
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: sw_det_rx_errors
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: sw_det_rx_bad_crc
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: sw_det_rx_collisions
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: sw_det_rx_policing_drops
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: sw_det_tx_ucast_packets
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: sw_det_tx_mcast_packets
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: sw_det_tx_bcast_packets
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: sw_det_tx_flow_control
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: sw_det_tx_good_octets
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: sw_det_tx_deferred
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: sw_det_tx_fifo_unrun
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: sw_det_tx_mult_collision
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: sw_det_tx_excess_collision
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: sw_det_tx_late_collisions
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: sw_det_tx_policing_drops
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: sw_det_txq_drops
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: sw_det_rxtx_packets_64
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: sw_det_rxtx_packets_65_127
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: sw_det_rxtx_packets_128_255
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: sw_det_rxtx_packets_256_511
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: sw_det_rxtx_packets_512_1023
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: sw_det_rxtx_packets_1024_max
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.Switch.Oper.Statistics.Detail.Location.PortIter.Counters, self).__init__()

                                    self.yang_name = "counters"
                                    self.yang_parent_name = "port-iter"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('sw_det_rx_ucast_packets', YLeaf(YType.uint64, 'sw-det-rx-ucast-packets')),
                                        ('sw_det_rx_mcast_packets', YLeaf(YType.uint64, 'sw-det-rx-mcast-packets')),
                                        ('sw_det_rx_bcast_packets', YLeaf(YType.uint64, 'sw-det-rx-bcast-packets')),
                                        ('sw_det_rx_flow_control', YLeaf(YType.uint64, 'sw-det-rx-flow-control')),
                                        ('sw_det_rx_good_octets', YLeaf(YType.uint64, 'sw-det-rx-good-octets')),
                                        ('sw_det_rx_bad_octets', YLeaf(YType.uint64, 'sw-det-rx-bad-octets')),
                                        ('sw_det_rx_fifo_overrun', YLeaf(YType.uint64, 'sw-det-rx-fifo-overrun')),
                                        ('sw_det_rx_undersize', YLeaf(YType.uint64, 'sw-det-rx-undersize')),
                                        ('sw_det_rx_fragments', YLeaf(YType.uint64, 'sw-det-rx-fragments')),
                                        ('sw_det_rx_oversize', YLeaf(YType.uint64, 'sw-det-rx-oversize')),
                                        ('sw_det_rx_jabber', YLeaf(YType.uint64, 'sw-det-rx-jabber')),
                                        ('sw_det_rx_errors', YLeaf(YType.uint64, 'sw-det-rx-errors')),
                                        ('sw_det_rx_bad_crc', YLeaf(YType.uint64, 'sw-det-rx-bad-crc')),
                                        ('sw_det_rx_collisions', YLeaf(YType.uint64, 'sw-det-rx-collisions')),
                                        ('sw_det_rx_policing_drops', YLeaf(YType.uint64, 'sw-det-rx-policing-drops')),
                                        ('sw_det_tx_ucast_packets', YLeaf(YType.uint64, 'sw-det-tx-ucast-packets')),
                                        ('sw_det_tx_mcast_packets', YLeaf(YType.uint64, 'sw-det-tx-mcast-packets')),
                                        ('sw_det_tx_bcast_packets', YLeaf(YType.uint64, 'sw-det-tx-bcast-packets')),
                                        ('sw_det_tx_flow_control', YLeaf(YType.uint64, 'sw-det-tx-flow-control')),
                                        ('sw_det_tx_good_octets', YLeaf(YType.uint64, 'sw-det-tx-good-octets')),
                                        ('sw_det_tx_deferred', YLeaf(YType.uint64, 'sw-det-tx-deferred')),
                                        ('sw_det_tx_fifo_unrun', YLeaf(YType.uint64, 'sw-det-tx-fifo-unrun')),
                                        ('sw_det_tx_mult_collision', YLeaf(YType.uint64, 'sw-det-tx-mult-collision')),
                                        ('sw_det_tx_excess_collision', YLeaf(YType.uint64, 'sw-det-tx-excess-collision')),
                                        ('sw_det_tx_late_collisions', YLeaf(YType.uint64, 'sw-det-tx-late-collisions')),
                                        ('sw_det_tx_policing_drops', YLeaf(YType.uint64, 'sw-det-tx-policing-drops')),
                                        ('sw_det_txq_drops', YLeaf(YType.uint64, 'sw-det-txq-drops')),
                                        ('sw_det_rxtx_packets_64', YLeaf(YType.uint64, 'sw-det-rxtx-packets-64')),
                                        ('sw_det_rxtx_packets_65_127', YLeaf(YType.uint64, 'sw-det-rxtx-packets-65-127')),
                                        ('sw_det_rxtx_packets_128_255', YLeaf(YType.uint64, 'sw-det-rxtx-packets-128-255')),
                                        ('sw_det_rxtx_packets_256_511', YLeaf(YType.uint64, 'sw-det-rxtx-packets-256-511')),
                                        ('sw_det_rxtx_packets_512_1023', YLeaf(YType.uint64, 'sw-det-rxtx-packets-512-1023')),
                                        ('sw_det_rxtx_packets_1024_max', YLeaf(YType.uint64, 'sw-det-rxtx-packets-1024-max')),
                                    ])
                                    self.sw_det_rx_ucast_packets = None
                                    self.sw_det_rx_mcast_packets = None
                                    self.sw_det_rx_bcast_packets = None
                                    self.sw_det_rx_flow_control = None
                                    self.sw_det_rx_good_octets = None
                                    self.sw_det_rx_bad_octets = None
                                    self.sw_det_rx_fifo_overrun = None
                                    self.sw_det_rx_undersize = None
                                    self.sw_det_rx_fragments = None
                                    self.sw_det_rx_oversize = None
                                    self.sw_det_rx_jabber = None
                                    self.sw_det_rx_errors = None
                                    self.sw_det_rx_bad_crc = None
                                    self.sw_det_rx_collisions = None
                                    self.sw_det_rx_policing_drops = None
                                    self.sw_det_tx_ucast_packets = None
                                    self.sw_det_tx_mcast_packets = None
                                    self.sw_det_tx_bcast_packets = None
                                    self.sw_det_tx_flow_control = None
                                    self.sw_det_tx_good_octets = None
                                    self.sw_det_tx_deferred = None
                                    self.sw_det_tx_fifo_unrun = None
                                    self.sw_det_tx_mult_collision = None
                                    self.sw_det_tx_excess_collision = None
                                    self.sw_det_tx_late_collisions = None
                                    self.sw_det_tx_policing_drops = None
                                    self.sw_det_txq_drops = None
                                    self.sw_det_rxtx_packets_64 = None
                                    self.sw_det_rxtx_packets_65_127 = None
                                    self.sw_det_rxtx_packets_128_255 = None
                                    self.sw_det_rxtx_packets_256_511 = None
                                    self.sw_det_rxtx_packets_512_1023 = None
                                    self.sw_det_rxtx_packets_1024_max = None
                                    self._segment_path = lambda: "counters"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.Switch.Oper.Statistics.Detail.Location.PortIter.Counters, ['sw_det_rx_ucast_packets', 'sw_det_rx_mcast_packets', 'sw_det_rx_bcast_packets', 'sw_det_rx_flow_control', 'sw_det_rx_good_octets', 'sw_det_rx_bad_octets', 'sw_det_rx_fifo_overrun', 'sw_det_rx_undersize', 'sw_det_rx_fragments', 'sw_det_rx_oversize', 'sw_det_rx_jabber', 'sw_det_rx_errors', 'sw_det_rx_bad_crc', 'sw_det_rx_collisions', 'sw_det_rx_policing_drops', 'sw_det_tx_ucast_packets', 'sw_det_tx_mcast_packets', 'sw_det_tx_bcast_packets', 'sw_det_tx_flow_control', 'sw_det_tx_good_octets', 'sw_det_tx_deferred', 'sw_det_tx_fifo_unrun', 'sw_det_tx_mult_collision', 'sw_det_tx_excess_collision', 'sw_det_tx_late_collisions', 'sw_det_tx_policing_drops', 'sw_det_txq_drops', 'sw_det_rxtx_packets_64', 'sw_det_rxtx_packets_65_127', 'sw_det_rxtx_packets_128_255', 'sw_det_rxtx_packets_256_511', 'sw_det_rxtx_packets_512_1023', 'sw_det_rxtx_packets_1024_max'], name, value)


            class Serdes(Entity):
                """
                
                
                .. attribute:: serdes_statistics
                
                	
                	**type**\:  :py:class:`SerdesStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Serdes.SerdesStatistics>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Controller.Switch.Oper.Serdes, self).__init__()

                    self.yang_name = "serdes"
                    self.yang_parent_name = "oper"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("serdes-statistics", ("serdes_statistics", Controller.Switch.Oper.Serdes.SerdesStatistics))])
                    self._leafs = OrderedDict()

                    self.serdes_statistics = Controller.Switch.Oper.Serdes.SerdesStatistics()
                    self.serdes_statistics.parent = self
                    self._children_name_map["serdes_statistics"] = "serdes-statistics"
                    self._segment_path = lambda: "serdes"
                    self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Controller.Switch.Oper.Serdes, [], name, value)


                class SerdesStatistics(Entity):
                    """
                    
                    
                    .. attribute:: location
                    
                    	
                    	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Serdes.SerdesStatistics.Location>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.Switch.Oper.Serdes.SerdesStatistics, self).__init__()

                        self.yang_name = "serdes-statistics"
                        self.yang_parent_name = "serdes"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("location", ("location", Controller.Switch.Oper.Serdes.SerdesStatistics.Location))])
                        self._leafs = OrderedDict()

                        self.location = YList(self)
                        self._segment_path = lambda: "serdes-statistics"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/serdes/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.Switch.Oper.Serdes.SerdesStatistics, [], name, value)


                    class Location(Entity):
                        """
                        
                        
                        .. attribute:: rack  (key)
                        
                        	
                        	**type**\:  :py:class:`EsdmaRackNumEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaRackNumEnum>`
                        
                        .. attribute:: card  (key)
                        
                        	Card to list the switch Serdes information for
                        	**type**\:  :py:class:`EsdmaCpu <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaCpu>`
                        
                        .. attribute:: switch_id  (key)
                        
                        	Switch type
                        	**type**\:  :py:class:`EsdmaSwitchTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaSwitchTypeEnum>`
                        
                        .. attribute:: port_iter
                        
                        	
                        	**type**\: list of  		 :py:class:`PortIter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Serdes.SerdesStatistics.Location.PortIter>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Switch.Oper.Serdes.SerdesStatistics.Location, self).__init__()

                            self.yang_name = "location"
                            self.yang_parent_name = "serdes-statistics"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = ['rack','card','switch_id']
                            self._child_classes = OrderedDict([("port-iter", ("port_iter", Controller.Switch.Oper.Serdes.SerdesStatistics.Location.PortIter))])
                            self._leafs = OrderedDict([
                                ('rack', YLeaf(YType.enumeration, 'rack')),
                                ('card', YLeaf(YType.enumeration, 'card')),
                                ('switch_id', YLeaf(YType.enumeration, 'switch-id')),
                            ])
                            self.rack = None
                            self.card = None
                            self.switch_id = None

                            self.port_iter = YList(self)
                            self._segment_path = lambda: "location" + "[rack='" + str(self.rack) + "']" + "[card='" + str(self.card) + "']" + "[switch-id='" + str(self.switch_id) + "']"
                            self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/serdes/serdes-statistics/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Switch.Oper.Serdes.SerdesStatistics.Location, ['rack', 'card', 'switch_id'], name, value)


                        class PortIter(Entity):
                            """
                            
                            
                            .. attribute:: port  (key)
                            
                            	Switch port
                            	**type**\: int
                            
                            	**range:** 0..127
                            
                            .. attribute:: serdes_entry
                            
                            	
                            	**type**\: list of  		 :py:class:`SerdesEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Serdes.SerdesStatistics.Location.PortIter.SerdesEntry>`
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Switch.Oper.Serdes.SerdesStatistics.Location.PortIter, self).__init__()

                                self.yang_name = "port-iter"
                                self.yang_parent_name = "location"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['port']
                                self._child_classes = OrderedDict([("serdes-entry", ("serdes_entry", Controller.Switch.Oper.Serdes.SerdesStatistics.Location.PortIter.SerdesEntry))])
                                self._leafs = OrderedDict([
                                    ('port', YLeaf(YType.int32, 'port')),
                                ])
                                self.port = None

                                self.serdes_entry = YList(self)
                                self._segment_path = lambda: "port-iter" + "[port='" + str(self.port) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Switch.Oper.Serdes.SerdesStatistics.Location.PortIter, ['port'], name, value)


                            class SerdesEntry(Entity):
                                """
                                
                                
                                .. attribute:: id  (key)
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: base_reg
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: desc
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: lane_0
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: lane_1
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: lane_2
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: lane_3
                                
                                	
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.Switch.Oper.Serdes.SerdesStatistics.Location.PortIter.SerdesEntry, self).__init__()

                                    self.yang_name = "serdes-entry"
                                    self.yang_parent_name = "port-iter"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['id']
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('id', YLeaf(YType.uint32, 'id')),
                                        ('base_reg', YLeaf(YType.str, 'base-reg')),
                                        ('desc', YLeaf(YType.str, 'desc')),
                                        ('lane_0', YLeaf(YType.str, 'lane-0')),
                                        ('lane_1', YLeaf(YType.str, 'lane-1')),
                                        ('lane_2', YLeaf(YType.str, 'lane-2')),
                                        ('lane_3', YLeaf(YType.str, 'lane-3')),
                                    ])
                                    self.id = None
                                    self.base_reg = None
                                    self.desc = None
                                    self.lane_0 = None
                                    self.lane_1 = None
                                    self.lane_2 = None
                                    self.lane_3 = None
                                    self._segment_path = lambda: "serdes-entry" + "[id='" + str(self.id) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.Switch.Oper.Serdes.SerdesStatistics.Location.PortIter.SerdesEntry, ['id', 'base_reg', 'desc', 'lane_0', 'lane_1', 'lane_2', 'lane_3'], name, value)


            class Mac(Entity):
                """
                
                
                .. attribute:: mac_statistics
                
                	
                	**type**\:  :py:class:`MacStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Mac.MacStatistics>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Controller.Switch.Oper.Mac, self).__init__()

                    self.yang_name = "mac"
                    self.yang_parent_name = "oper"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("mac-statistics", ("mac_statistics", Controller.Switch.Oper.Mac.MacStatistics))])
                    self._leafs = OrderedDict()

                    self.mac_statistics = Controller.Switch.Oper.Mac.MacStatistics()
                    self.mac_statistics.parent = self
                    self._children_name_map["mac_statistics"] = "mac-statistics"
                    self._segment_path = lambda: "mac"
                    self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Controller.Switch.Oper.Mac, [], name, value)


                class MacStatistics(Entity):
                    """
                    
                    
                    .. attribute:: location
                    
                    	
                    	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Mac.MacStatistics.Location>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.Switch.Oper.Mac.MacStatistics, self).__init__()

                        self.yang_name = "mac-statistics"
                        self.yang_parent_name = "mac"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("location", ("location", Controller.Switch.Oper.Mac.MacStatistics.Location))])
                        self._leafs = OrderedDict()

                        self.location = YList(self)
                        self._segment_path = lambda: "mac-statistics"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/mac/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.Switch.Oper.Mac.MacStatistics, [], name, value)


                    class Location(Entity):
                        """
                        
                        
                        .. attribute:: rack  (key)
                        
                        	
                        	**type**\:  :py:class:`EsdmaRackNumEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaRackNumEnum>`
                        
                        .. attribute:: card  (key)
                        
                        	Card to list the switch MAC information for
                        	**type**\:  :py:class:`EsdmaCpu <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaCpu>`
                        
                        .. attribute:: switch_id  (key)
                        
                        	Switch type
                        	**type**\:  :py:class:`EsdmaSwitchTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaSwitchTypeEnum>`
                        
                        .. attribute:: port_iter
                        
                        	
                        	**type**\: list of  		 :py:class:`PortIter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Mac.MacStatistics.Location.PortIter>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Switch.Oper.Mac.MacStatistics.Location, self).__init__()

                            self.yang_name = "location"
                            self.yang_parent_name = "mac-statistics"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = ['rack','card','switch_id']
                            self._child_classes = OrderedDict([("port-iter", ("port_iter", Controller.Switch.Oper.Mac.MacStatistics.Location.PortIter))])
                            self._leafs = OrderedDict([
                                ('rack', YLeaf(YType.enumeration, 'rack')),
                                ('card', YLeaf(YType.enumeration, 'card')),
                                ('switch_id', YLeaf(YType.enumeration, 'switch-id')),
                            ])
                            self.rack = None
                            self.card = None
                            self.switch_id = None

                            self.port_iter = YList(self)
                            self._segment_path = lambda: "location" + "[rack='" + str(self.rack) + "']" + "[card='" + str(self.card) + "']" + "[switch-id='" + str(self.switch_id) + "']"
                            self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/mac/mac-statistics/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Switch.Oper.Mac.MacStatistics.Location, ['rack', 'card', 'switch_id'], name, value)


                        class PortIter(Entity):
                            """
                            
                            
                            .. attribute:: port  (key)
                            
                            	Switch port
                            	**type**\: int
                            
                            	**range:** 0..127
                            
                            .. attribute:: mac_entry
                            
                            	
                            	**type**\: list of  		 :py:class:`MacEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Mac.MacStatistics.Location.PortIter.MacEntry>`
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Switch.Oper.Mac.MacStatistics.Location.PortIter, self).__init__()

                                self.yang_name = "port-iter"
                                self.yang_parent_name = "location"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['port']
                                self._child_classes = OrderedDict([("mac-entry", ("mac_entry", Controller.Switch.Oper.Mac.MacStatistics.Location.PortIter.MacEntry))])
                                self._leafs = OrderedDict([
                                    ('port', YLeaf(YType.int32, 'port')),
                                ])
                                self.port = None

                                self.mac_entry = YList(self)
                                self._segment_path = lambda: "port-iter" + "[port='" + str(self.port) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Switch.Oper.Mac.MacStatistics.Location.PortIter, ['port'], name, value)


                            class MacEntry(Entity):
                                """
                                
                                
                                .. attribute:: id  (key)
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: base_reg
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: desc
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: value
                                
                                	
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.Switch.Oper.Mac.MacStatistics.Location.PortIter.MacEntry, self).__init__()

                                    self.yang_name = "mac-entry"
                                    self.yang_parent_name = "port-iter"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['id']
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('id', YLeaf(YType.uint32, 'id')),
                                        ('base_reg', YLeaf(YType.str, 'base-reg')),
                                        ('desc', YLeaf(YType.str, 'desc')),
                                        ('value', YLeaf(YType.str, 'value')),
                                    ])
                                    self.id = None
                                    self.base_reg = None
                                    self.desc = None
                                    self.value = None
                                    self._segment_path = lambda: "mac-entry" + "[id='" + str(self.id) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.Switch.Oper.Mac.MacStatistics.Location.PortIter.MacEntry, ['id', 'base_reg', 'desc', 'value'], name, value)


            class Bridge(Entity):
                """
                
                
                .. attribute:: statistics
                
                	
                	**type**\:  :py:class:`Statistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Bridge.Statistics>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Controller.Switch.Oper.Bridge, self).__init__()

                    self.yang_name = "bridge"
                    self.yang_parent_name = "oper"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("statistics", ("statistics", Controller.Switch.Oper.Bridge.Statistics))])
                    self._leafs = OrderedDict()

                    self.statistics = Controller.Switch.Oper.Bridge.Statistics()
                    self.statistics.parent = self
                    self._children_name_map["statistics"] = "statistics"
                    self._segment_path = lambda: "bridge"
                    self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Controller.Switch.Oper.Bridge, [], name, value)


                class Statistics(Entity):
                    """
                    
                    
                    .. attribute:: location
                    
                    	
                    	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Bridge.Statistics.Location>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.Switch.Oper.Bridge.Statistics, self).__init__()

                        self.yang_name = "statistics"
                        self.yang_parent_name = "bridge"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("location", ("location", Controller.Switch.Oper.Bridge.Statistics.Location))])
                        self._leafs = OrderedDict()

                        self.location = YList(self)
                        self._segment_path = lambda: "statistics"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/bridge/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.Switch.Oper.Bridge.Statistics, [], name, value)


                    class Location(Entity):
                        """
                        
                        
                        .. attribute:: rack  (key)
                        
                        	
                        	**type**\:  :py:class:`EsdmaRackNumEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaRackNumEnum>`
                        
                        .. attribute:: card  (key)
                        
                        	Card
                        	**type**\:  :py:class:`EsdmaCpu <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaCpu>`
                        
                        .. attribute:: switch_id  (key)
                        
                        	Switch type
                        	**type**\:  :py:class:`EsdmaSwitchTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaSwitchTypeEnum>`
                        
                        .. attribute:: ingress_set_id
                        
                        	
                        	**type**\: list of  		 :py:class:`IngressSetId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Bridge.Statistics.Location.IngressSetId>`
                        
                        .. attribute:: egress_set_id
                        
                        	
                        	**type**\: list of  		 :py:class:`EgressSetId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Bridge.Statistics.Location.EgressSetId>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Switch.Oper.Bridge.Statistics.Location, self).__init__()

                            self.yang_name = "location"
                            self.yang_parent_name = "statistics"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = ['rack','card','switch_id']
                            self._child_classes = OrderedDict([("ingress-set-id", ("ingress_set_id", Controller.Switch.Oper.Bridge.Statistics.Location.IngressSetId)), ("egress-set-id", ("egress_set_id", Controller.Switch.Oper.Bridge.Statistics.Location.EgressSetId))])
                            self._leafs = OrderedDict([
                                ('rack', YLeaf(YType.enumeration, 'rack')),
                                ('card', YLeaf(YType.enumeration, 'card')),
                                ('switch_id', YLeaf(YType.enumeration, 'switch-id')),
                            ])
                            self.rack = None
                            self.card = None
                            self.switch_id = None

                            self.ingress_set_id = YList(self)
                            self.egress_set_id = YList(self)
                            self._segment_path = lambda: "location" + "[rack='" + str(self.rack) + "']" + "[card='" + str(self.card) + "']" + "[switch-id='" + str(self.switch_id) + "']"
                            self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/bridge/statistics/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Switch.Oper.Bridge.Statistics.Location, [u'rack', u'card', u'switch_id'], name, value)


                        class IngressSetId(Entity):
                            """
                            
                            
                            .. attribute:: ingress_set  (key)
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: ingress_set_name
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: ingress_frames
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: ingress_vlan_discards
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: ingress_security_discards
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: ingress_other_discards
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Switch.Oper.Bridge.Statistics.Location.IngressSetId, self).__init__()

                                self.yang_name = "ingress-set-id"
                                self.yang_parent_name = "location"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['ingress_set']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('ingress_set', YLeaf(YType.uint32, 'ingress-set')),
                                    ('ingress_set_name', YLeaf(YType.str, 'ingress-set-name')),
                                    ('ingress_frames', YLeaf(YType.uint64, 'ingress-frames')),
                                    ('ingress_vlan_discards', YLeaf(YType.uint64, 'ingress-vlan-discards')),
                                    ('ingress_security_discards', YLeaf(YType.uint64, 'ingress-security-discards')),
                                    ('ingress_other_discards', YLeaf(YType.uint64, 'ingress-other-discards')),
                                ])
                                self.ingress_set = None
                                self.ingress_set_name = None
                                self.ingress_frames = None
                                self.ingress_vlan_discards = None
                                self.ingress_security_discards = None
                                self.ingress_other_discards = None
                                self._segment_path = lambda: "ingress-set-id" + "[ingress-set='" + str(self.ingress_set) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Switch.Oper.Bridge.Statistics.Location.IngressSetId, [u'ingress_set', u'ingress_set_name', u'ingress_frames', u'ingress_vlan_discards', u'ingress_security_discards', u'ingress_other_discards'], name, value)


                        class EgressSetId(Entity):
                            """
                            
                            
                            .. attribute:: egress_set  (key)
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: egress_set_name
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: egress_ucast_frames
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: egress_mcast_frames
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: egress_bcast_frames
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: egress_discarded_frames
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: egress_txq_congestion
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: egress_ctrl_packets
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: egress_other_drops
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Switch.Oper.Bridge.Statistics.Location.EgressSetId, self).__init__()

                                self.yang_name = "egress-set-id"
                                self.yang_parent_name = "location"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['egress_set']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('egress_set', YLeaf(YType.uint32, 'egress-set')),
                                    ('egress_set_name', YLeaf(YType.str, 'egress-set-name')),
                                    ('egress_ucast_frames', YLeaf(YType.uint64, 'egress-ucast-frames')),
                                    ('egress_mcast_frames', YLeaf(YType.uint64, 'egress-mcast-frames')),
                                    ('egress_bcast_frames', YLeaf(YType.uint64, 'egress-bcast-frames')),
                                    ('egress_discarded_frames', YLeaf(YType.uint64, 'egress-discarded-frames')),
                                    ('egress_txq_congestion', YLeaf(YType.uint64, 'egress-txq-congestion')),
                                    ('egress_ctrl_packets', YLeaf(YType.uint64, 'egress-ctrl-packets')),
                                    ('egress_other_drops', YLeaf(YType.uint64, 'egress-other-drops')),
                                ])
                                self.egress_set = None
                                self.egress_set_name = None
                                self.egress_ucast_frames = None
                                self.egress_mcast_frames = None
                                self.egress_bcast_frames = None
                                self.egress_discarded_frames = None
                                self.egress_txq_congestion = None
                                self.egress_ctrl_packets = None
                                self.egress_other_drops = None
                                self._segment_path = lambda: "egress-set-id" + "[egress-set='" + str(self.egress_set) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Switch.Oper.Bridge.Statistics.Location.EgressSetId, [u'egress_set', u'egress_set_name', u'egress_ucast_frames', u'egress_mcast_frames', u'egress_bcast_frames', u'egress_discarded_frames', u'egress_txq_congestion', u'egress_ctrl_packets', u'egress_other_drops'], name, value)


            class Fdb(Entity):
                """
                
                
                .. attribute:: vlan
                
                	
                	**type**\:  :py:class:`Vlan <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Fdb.Vlan>`
                
                .. attribute:: mac
                
                	
                	**type**\:  :py:class:`Mac <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Fdb.Mac>`
                
                .. attribute:: port
                
                	
                	**type**\:  :py:class:`Port <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Fdb.Port>`
                
                .. attribute:: statistics
                
                	
                	**type**\:  :py:class:`Statistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Fdb.Statistics>`
                
                .. attribute:: switch_fdb_common
                
                	
                	**type**\:  :py:class:`SwitchFdbCommon <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Fdb.SwitchFdbCommon>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Controller.Switch.Oper.Fdb, self).__init__()

                    self.yang_name = "fdb"
                    self.yang_parent_name = "oper"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("vlan", ("vlan", Controller.Switch.Oper.Fdb.Vlan)), ("mac", ("mac", Controller.Switch.Oper.Fdb.Mac)), ("port", ("port", Controller.Switch.Oper.Fdb.Port)), ("statistics", ("statistics", Controller.Switch.Oper.Fdb.Statistics)), ("switch-fdb-common", ("switch_fdb_common", Controller.Switch.Oper.Fdb.SwitchFdbCommon))])
                    self._leafs = OrderedDict()

                    self.vlan = Controller.Switch.Oper.Fdb.Vlan()
                    self.vlan.parent = self
                    self._children_name_map["vlan"] = "vlan"

                    self.mac = Controller.Switch.Oper.Fdb.Mac()
                    self.mac.parent = self
                    self._children_name_map["mac"] = "mac"

                    self.port = Controller.Switch.Oper.Fdb.Port()
                    self.port.parent = self
                    self._children_name_map["port"] = "port"

                    self.statistics = Controller.Switch.Oper.Fdb.Statistics()
                    self.statistics.parent = self
                    self._children_name_map["statistics"] = "statistics"

                    self.switch_fdb_common = Controller.Switch.Oper.Fdb.SwitchFdbCommon()
                    self.switch_fdb_common.parent = self
                    self._children_name_map["switch_fdb_common"] = "switch-fdb-common"
                    self._segment_path = lambda: "fdb"
                    self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Controller.Switch.Oper.Fdb, [], name, value)


                class Vlan(Entity):
                    """
                    
                    
                    .. attribute:: vlan_iter
                    
                    	
                    	**type**\: list of  		 :py:class:`VlanIter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Fdb.Vlan.VlanIter>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.Switch.Oper.Fdb.Vlan, self).__init__()

                        self.yang_name = "vlan"
                        self.yang_parent_name = "fdb"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("vlan-iter", ("vlan_iter", Controller.Switch.Oper.Fdb.Vlan.VlanIter))])
                        self._leafs = OrderedDict()

                        self.vlan_iter = YList(self)
                        self._segment_path = lambda: "vlan"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/fdb/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.Switch.Oper.Fdb.Vlan, [], name, value)


                    class VlanIter(Entity):
                        """
                        
                        
                        .. attribute:: vlan  (key)
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..4095
                        
                        .. attribute:: switch_fdb_common
                        
                        	
                        	**type**\:  :py:class:`SwitchFdbCommon <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Fdb.Vlan.VlanIter.SwitchFdbCommon>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Switch.Oper.Fdb.Vlan.VlanIter, self).__init__()

                            self.yang_name = "vlan-iter"
                            self.yang_parent_name = "vlan"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = ['vlan']
                            self._child_classes = OrderedDict([("switch-fdb-common", ("switch_fdb_common", Controller.Switch.Oper.Fdb.Vlan.VlanIter.SwitchFdbCommon))])
                            self._leafs = OrderedDict([
                                ('vlan', YLeaf(YType.uint16, 'vlan')),
                            ])
                            self.vlan = None

                            self.switch_fdb_common = Controller.Switch.Oper.Fdb.Vlan.VlanIter.SwitchFdbCommon()
                            self.switch_fdb_common.parent = self
                            self._children_name_map["switch_fdb_common"] = "switch-fdb-common"
                            self._segment_path = lambda: "vlan-iter" + "[vlan='" + str(self.vlan) + "']"
                            self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/fdb/vlan/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Switch.Oper.Fdb.Vlan.VlanIter, [u'vlan'], name, value)


                        class SwitchFdbCommon(Entity):
                            """
                            
                            
                            .. attribute:: location
                            
                            	
                            	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Fdb.Vlan.VlanIter.SwitchFdbCommon.Location>`
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Switch.Oper.Fdb.Vlan.VlanIter.SwitchFdbCommon, self).__init__()

                                self.yang_name = "switch-fdb-common"
                                self.yang_parent_name = "vlan-iter"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("location", ("location", Controller.Switch.Oper.Fdb.Vlan.VlanIter.SwitchFdbCommon.Location))])
                                self._leafs = OrderedDict()

                                self.location = YList(self)
                                self._segment_path = lambda: "switch-fdb-common"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Switch.Oper.Fdb.Vlan.VlanIter.SwitchFdbCommon, [], name, value)


                            class Location(Entity):
                                """
                                
                                
                                .. attribute:: rack  (key)
                                
                                	
                                	**type**\:  :py:class:`EsdmaRackNumEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaRackNumEnum>`
                                
                                .. attribute:: card  (key)
                                
                                	Card to list the switch FDB information for
                                	**type**\:  :py:class:`EsdmaCpu <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaCpu>`
                                
                                .. attribute:: switch_id  (key)
                                
                                	Switch type
                                	**type**\:  :py:class:`EsdmaSwitchTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaSwitchTypeEnum>`
                                
                                .. attribute:: num_entries
                                
                                	Number of FDB entries in the table
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: has_trunk_entry
                                
                                	FDB entries contain an entry from the trunk
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: trunk_entry_message
                                
                                	Message displayed when an FDB entry contains an entry for a trunk member port
                                	**type**\: str
                                
                                .. attribute:: fdb_block
                                
                                	
                                	**type**\:  :py:class:`FdbBlock <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Fdb.Vlan.VlanIter.SwitchFdbCommon.Location.FdbBlock>`
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.Switch.Oper.Fdb.Vlan.VlanIter.SwitchFdbCommon.Location, self).__init__()

                                    self.yang_name = "location"
                                    self.yang_parent_name = "switch-fdb-common"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['rack','card','switch_id']
                                    self._child_classes = OrderedDict([("fdb-block", ("fdb_block", Controller.Switch.Oper.Fdb.Vlan.VlanIter.SwitchFdbCommon.Location.FdbBlock))])
                                    self._leafs = OrderedDict([
                                        ('rack', YLeaf(YType.enumeration, 'rack')),
                                        ('card', YLeaf(YType.enumeration, 'card')),
                                        ('switch_id', YLeaf(YType.enumeration, 'switch-id')),
                                        ('num_entries', YLeaf(YType.uint32, 'num-entries')),
                                        ('has_trunk_entry', YLeaf(YType.uint8, 'has-trunk-entry')),
                                        ('trunk_entry_message', YLeaf(YType.str, 'trunk-entry-message')),
                                    ])
                                    self.rack = None
                                    self.card = None
                                    self.switch_id = None
                                    self.num_entries = None
                                    self.has_trunk_entry = None
                                    self.trunk_entry_message = None

                                    self.fdb_block = Controller.Switch.Oper.Fdb.Vlan.VlanIter.SwitchFdbCommon.Location.FdbBlock()
                                    self.fdb_block.parent = self
                                    self._children_name_map["fdb_block"] = "fdb-block"
                                    self._segment_path = lambda: "location" + "[rack='" + str(self.rack) + "']" + "[card='" + str(self.card) + "']" + "[switch-id='" + str(self.switch_id) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.Switch.Oper.Fdb.Vlan.VlanIter.SwitchFdbCommon.Location, [u'rack', u'card', u'switch_id', u'num_entries', u'has_trunk_entry', u'trunk_entry_message'], name, value)


                                class FdbBlock(Entity):
                                    """
                                    
                                    
                                    .. attribute:: fdb_entry
                                    
                                    	
                                    	**type**\: list of  		 :py:class:`FdbEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Fdb.Vlan.VlanIter.SwitchFdbCommon.Location.FdbBlock.FdbEntry>`
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.Switch.Oper.Fdb.Vlan.VlanIter.SwitchFdbCommon.Location.FdbBlock, self).__init__()

                                        self.yang_name = "fdb-block"
                                        self.yang_parent_name = "location"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("fdb-entry", ("fdb_entry", Controller.Switch.Oper.Fdb.Vlan.VlanIter.SwitchFdbCommon.Location.FdbBlock.FdbEntry))])
                                        self._leafs = OrderedDict()

                                        self.fdb_entry = YList(self)
                                        self._segment_path = lambda: "fdb-block"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.Switch.Oper.Fdb.Vlan.VlanIter.SwitchFdbCommon.Location.FdbBlock, [], name, value)


                                    class FdbEntry(Entity):
                                        """
                                        
                                        
                                        .. attribute:: fdb_index  (key)
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: fdb_mac_addr
                                        
                                        	
                                        	**type**\: str
                                        
                                        	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                                        
                                        .. attribute:: fdb_vlan
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4095
                                        
                                        .. attribute:: fdb_vlan_hex
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4095
                                        
                                        	**refers to**\:  :py:class:`fdb_vlan <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Fdb.Vlan.VlanIter.SwitchFdbCommon.Location.FdbBlock.FdbEntry>`
                                        
                                        .. attribute:: fdb_port
                                        
                                        	Switch port MAC address learned on
                                        	**type**\: int
                                        
                                        	**range:** 0..127
                                        
                                        .. attribute:: fdb_trap_entry
                                        
                                        	
                                        	**type**\:  :py:class:`EsdmaSwitchYesNoEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaSwitchYesNoEnum>`
                                        
                                        .. attribute:: fdb_static_entry
                                        
                                        	
                                        	**type**\:  :py:class:`EsdmaSwitchYesNoEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaSwitchYesNoEnum>`
                                        
                                        .. attribute:: fdb_synced_cores
                                        
                                        	
                                        	**type**\: list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Switch.Oper.Fdb.Vlan.VlanIter.SwitchFdbCommon.Location.FdbBlock.FdbEntry, self).__init__()

                                            self.yang_name = "fdb-entry"
                                            self.yang_parent_name = "fdb-block"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['fdb_index']
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('fdb_index', YLeaf(YType.uint32, 'fdb-index')),
                                                ('fdb_mac_addr', YLeaf(YType.str, 'fdb-mac-addr')),
                                                ('fdb_vlan', YLeaf(YType.uint16, 'fdb-vlan')),
                                                ('fdb_vlan_hex', YLeaf(YType.str, 'fdb-vlan-hex')),
                                                ('fdb_port', YLeaf(YType.int32, 'fdb-port')),
                                                ('fdb_trap_entry', YLeaf(YType.enumeration, 'fdb-trap-entry')),
                                                ('fdb_static_entry', YLeaf(YType.enumeration, 'fdb-static-entry')),
                                                ('fdb_synced_cores', YLeafList(YType.uint8, 'fdb-synced-cores')),
                                            ])
                                            self.fdb_index = None
                                            self.fdb_mac_addr = None
                                            self.fdb_vlan = None
                                            self.fdb_vlan_hex = None
                                            self.fdb_port = None
                                            self.fdb_trap_entry = None
                                            self.fdb_static_entry = None
                                            self.fdb_synced_cores = []
                                            self._segment_path = lambda: "fdb-entry" + "[fdb-index='" + str(self.fdb_index) + "']"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Switch.Oper.Fdb.Vlan.VlanIter.SwitchFdbCommon.Location.FdbBlock.FdbEntry, [u'fdb_index', u'fdb_mac_addr', u'fdb_vlan', u'fdb_vlan_hex', u'fdb_port', u'fdb_trap_entry', u'fdb_static_entry', u'fdb_synced_cores'], name, value)


                class Mac(Entity):
                    """
                    
                    
                    .. attribute:: mac_iter
                    
                    	
                    	**type**\: list of  		 :py:class:`MacIter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Fdb.Mac.MacIter>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.Switch.Oper.Fdb.Mac, self).__init__()

                        self.yang_name = "mac"
                        self.yang_parent_name = "fdb"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("mac-iter", ("mac_iter", Controller.Switch.Oper.Fdb.Mac.MacIter))])
                        self._leafs = OrderedDict()

                        self.mac_iter = YList(self)
                        self._segment_path = lambda: "mac"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/fdb/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.Switch.Oper.Fdb.Mac, [], name, value)


                    class MacIter(Entity):
                        """
                        
                        
                        .. attribute:: mac  (key)
                        
                        	
                        	**type**\: str
                        
                        	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                        
                        .. attribute:: switch_fdb_common
                        
                        	
                        	**type**\:  :py:class:`SwitchFdbCommon <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Fdb.Mac.MacIter.SwitchFdbCommon>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Switch.Oper.Fdb.Mac.MacIter, self).__init__()

                            self.yang_name = "mac-iter"
                            self.yang_parent_name = "mac"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = ['mac']
                            self._child_classes = OrderedDict([("switch-fdb-common", ("switch_fdb_common", Controller.Switch.Oper.Fdb.Mac.MacIter.SwitchFdbCommon))])
                            self._leafs = OrderedDict([
                                ('mac', YLeaf(YType.str, 'mac')),
                            ])
                            self.mac = None

                            self.switch_fdb_common = Controller.Switch.Oper.Fdb.Mac.MacIter.SwitchFdbCommon()
                            self.switch_fdb_common.parent = self
                            self._children_name_map["switch_fdb_common"] = "switch-fdb-common"
                            self._segment_path = lambda: "mac-iter" + "[mac='" + str(self.mac) + "']"
                            self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/fdb/mac/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Switch.Oper.Fdb.Mac.MacIter, [u'mac'], name, value)


                        class SwitchFdbCommon(Entity):
                            """
                            
                            
                            .. attribute:: location
                            
                            	
                            	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Fdb.Mac.MacIter.SwitchFdbCommon.Location>`
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Switch.Oper.Fdb.Mac.MacIter.SwitchFdbCommon, self).__init__()

                                self.yang_name = "switch-fdb-common"
                                self.yang_parent_name = "mac-iter"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("location", ("location", Controller.Switch.Oper.Fdb.Mac.MacIter.SwitchFdbCommon.Location))])
                                self._leafs = OrderedDict()

                                self.location = YList(self)
                                self._segment_path = lambda: "switch-fdb-common"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Switch.Oper.Fdb.Mac.MacIter.SwitchFdbCommon, [], name, value)


                            class Location(Entity):
                                """
                                
                                
                                .. attribute:: rack  (key)
                                
                                	
                                	**type**\:  :py:class:`EsdmaRackNumEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaRackNumEnum>`
                                
                                .. attribute:: card  (key)
                                
                                	Card to list the switch FDB information for
                                	**type**\:  :py:class:`EsdmaCpu <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaCpu>`
                                
                                .. attribute:: switch_id  (key)
                                
                                	Switch type
                                	**type**\:  :py:class:`EsdmaSwitchTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaSwitchTypeEnum>`
                                
                                .. attribute:: num_entries
                                
                                	Number of FDB entries in the table
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: has_trunk_entry
                                
                                	FDB entries contain an entry from the trunk
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: trunk_entry_message
                                
                                	Message displayed when an FDB entry contains an entry for a trunk member port
                                	**type**\: str
                                
                                .. attribute:: fdb_block
                                
                                	
                                	**type**\:  :py:class:`FdbBlock <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Fdb.Mac.MacIter.SwitchFdbCommon.Location.FdbBlock>`
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.Switch.Oper.Fdb.Mac.MacIter.SwitchFdbCommon.Location, self).__init__()

                                    self.yang_name = "location"
                                    self.yang_parent_name = "switch-fdb-common"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['rack','card','switch_id']
                                    self._child_classes = OrderedDict([("fdb-block", ("fdb_block", Controller.Switch.Oper.Fdb.Mac.MacIter.SwitchFdbCommon.Location.FdbBlock))])
                                    self._leafs = OrderedDict([
                                        ('rack', YLeaf(YType.enumeration, 'rack')),
                                        ('card', YLeaf(YType.enumeration, 'card')),
                                        ('switch_id', YLeaf(YType.enumeration, 'switch-id')),
                                        ('num_entries', YLeaf(YType.uint32, 'num-entries')),
                                        ('has_trunk_entry', YLeaf(YType.uint8, 'has-trunk-entry')),
                                        ('trunk_entry_message', YLeaf(YType.str, 'trunk-entry-message')),
                                    ])
                                    self.rack = None
                                    self.card = None
                                    self.switch_id = None
                                    self.num_entries = None
                                    self.has_trunk_entry = None
                                    self.trunk_entry_message = None

                                    self.fdb_block = Controller.Switch.Oper.Fdb.Mac.MacIter.SwitchFdbCommon.Location.FdbBlock()
                                    self.fdb_block.parent = self
                                    self._children_name_map["fdb_block"] = "fdb-block"
                                    self._segment_path = lambda: "location" + "[rack='" + str(self.rack) + "']" + "[card='" + str(self.card) + "']" + "[switch-id='" + str(self.switch_id) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.Switch.Oper.Fdb.Mac.MacIter.SwitchFdbCommon.Location, [u'rack', u'card', u'switch_id', u'num_entries', u'has_trunk_entry', u'trunk_entry_message'], name, value)


                                class FdbBlock(Entity):
                                    """
                                    
                                    
                                    .. attribute:: fdb_entry
                                    
                                    	
                                    	**type**\: list of  		 :py:class:`FdbEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Fdb.Mac.MacIter.SwitchFdbCommon.Location.FdbBlock.FdbEntry>`
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.Switch.Oper.Fdb.Mac.MacIter.SwitchFdbCommon.Location.FdbBlock, self).__init__()

                                        self.yang_name = "fdb-block"
                                        self.yang_parent_name = "location"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("fdb-entry", ("fdb_entry", Controller.Switch.Oper.Fdb.Mac.MacIter.SwitchFdbCommon.Location.FdbBlock.FdbEntry))])
                                        self._leafs = OrderedDict()

                                        self.fdb_entry = YList(self)
                                        self._segment_path = lambda: "fdb-block"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.Switch.Oper.Fdb.Mac.MacIter.SwitchFdbCommon.Location.FdbBlock, [], name, value)


                                    class FdbEntry(Entity):
                                        """
                                        
                                        
                                        .. attribute:: fdb_index  (key)
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: fdb_mac_addr
                                        
                                        	
                                        	**type**\: str
                                        
                                        	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                                        
                                        .. attribute:: fdb_vlan
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4095
                                        
                                        .. attribute:: fdb_vlan_hex
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4095
                                        
                                        	**refers to**\:  :py:class:`fdb_vlan <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Fdb.Mac.MacIter.SwitchFdbCommon.Location.FdbBlock.FdbEntry>`
                                        
                                        .. attribute:: fdb_port
                                        
                                        	Switch port MAC address learned on
                                        	**type**\: int
                                        
                                        	**range:** 0..127
                                        
                                        .. attribute:: fdb_trap_entry
                                        
                                        	
                                        	**type**\:  :py:class:`EsdmaSwitchYesNoEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaSwitchYesNoEnum>`
                                        
                                        .. attribute:: fdb_static_entry
                                        
                                        	
                                        	**type**\:  :py:class:`EsdmaSwitchYesNoEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaSwitchYesNoEnum>`
                                        
                                        .. attribute:: fdb_synced_cores
                                        
                                        	
                                        	**type**\: list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Switch.Oper.Fdb.Mac.MacIter.SwitchFdbCommon.Location.FdbBlock.FdbEntry, self).__init__()

                                            self.yang_name = "fdb-entry"
                                            self.yang_parent_name = "fdb-block"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['fdb_index']
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('fdb_index', YLeaf(YType.uint32, 'fdb-index')),
                                                ('fdb_mac_addr', YLeaf(YType.str, 'fdb-mac-addr')),
                                                ('fdb_vlan', YLeaf(YType.uint16, 'fdb-vlan')),
                                                ('fdb_vlan_hex', YLeaf(YType.str, 'fdb-vlan-hex')),
                                                ('fdb_port', YLeaf(YType.int32, 'fdb-port')),
                                                ('fdb_trap_entry', YLeaf(YType.enumeration, 'fdb-trap-entry')),
                                                ('fdb_static_entry', YLeaf(YType.enumeration, 'fdb-static-entry')),
                                                ('fdb_synced_cores', YLeafList(YType.uint8, 'fdb-synced-cores')),
                                            ])
                                            self.fdb_index = None
                                            self.fdb_mac_addr = None
                                            self.fdb_vlan = None
                                            self.fdb_vlan_hex = None
                                            self.fdb_port = None
                                            self.fdb_trap_entry = None
                                            self.fdb_static_entry = None
                                            self.fdb_synced_cores = []
                                            self._segment_path = lambda: "fdb-entry" + "[fdb-index='" + str(self.fdb_index) + "']"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Switch.Oper.Fdb.Mac.MacIter.SwitchFdbCommon.Location.FdbBlock.FdbEntry, [u'fdb_index', u'fdb_mac_addr', u'fdb_vlan', u'fdb_vlan_hex', u'fdb_port', u'fdb_trap_entry', u'fdb_static_entry', u'fdb_synced_cores'], name, value)


                class Port(Entity):
                    """
                    
                    
                    .. attribute:: port_iter
                    
                    	
                    	**type**\: list of  		 :py:class:`PortIter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Fdb.Port.PortIter>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.Switch.Oper.Fdb.Port, self).__init__()

                        self.yang_name = "port"
                        self.yang_parent_name = "fdb"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("port-iter", ("port_iter", Controller.Switch.Oper.Fdb.Port.PortIter))])
                        self._leafs = OrderedDict()

                        self.port_iter = YList(self)
                        self._segment_path = lambda: "port"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/fdb/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.Switch.Oper.Fdb.Port, [], name, value)


                    class PortIter(Entity):
                        """
                        
                        
                        .. attribute:: port  (key)
                        
                        	Switch port used for filtering
                        	**type**\: int
                        
                        	**range:** 0..127
                        
                        .. attribute:: switch_fdb_common
                        
                        	
                        	**type**\:  :py:class:`SwitchFdbCommon <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Fdb.Port.PortIter.SwitchFdbCommon>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Switch.Oper.Fdb.Port.PortIter, self).__init__()

                            self.yang_name = "port-iter"
                            self.yang_parent_name = "port"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = ['port']
                            self._child_classes = OrderedDict([("switch-fdb-common", ("switch_fdb_common", Controller.Switch.Oper.Fdb.Port.PortIter.SwitchFdbCommon))])
                            self._leafs = OrderedDict([
                                ('port', YLeaf(YType.int32, 'port')),
                            ])
                            self.port = None

                            self.switch_fdb_common = Controller.Switch.Oper.Fdb.Port.PortIter.SwitchFdbCommon()
                            self.switch_fdb_common.parent = self
                            self._children_name_map["switch_fdb_common"] = "switch-fdb-common"
                            self._segment_path = lambda: "port-iter" + "[port='" + str(self.port) + "']"
                            self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/fdb/port/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Switch.Oper.Fdb.Port.PortIter, [u'port'], name, value)


                        class SwitchFdbCommon(Entity):
                            """
                            
                            
                            .. attribute:: location
                            
                            	
                            	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Fdb.Port.PortIter.SwitchFdbCommon.Location>`
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Switch.Oper.Fdb.Port.PortIter.SwitchFdbCommon, self).__init__()

                                self.yang_name = "switch-fdb-common"
                                self.yang_parent_name = "port-iter"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("location", ("location", Controller.Switch.Oper.Fdb.Port.PortIter.SwitchFdbCommon.Location))])
                                self._leafs = OrderedDict()

                                self.location = YList(self)
                                self._segment_path = lambda: "switch-fdb-common"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Switch.Oper.Fdb.Port.PortIter.SwitchFdbCommon, [], name, value)


                            class Location(Entity):
                                """
                                
                                
                                .. attribute:: rack  (key)
                                
                                	
                                	**type**\:  :py:class:`EsdmaRackNumEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaRackNumEnum>`
                                
                                .. attribute:: card  (key)
                                
                                	Card to list the switch FDB information for
                                	**type**\:  :py:class:`EsdmaCpu <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaCpu>`
                                
                                .. attribute:: switch_id  (key)
                                
                                	Switch type
                                	**type**\:  :py:class:`EsdmaSwitchTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaSwitchTypeEnum>`
                                
                                .. attribute:: num_entries
                                
                                	Number of FDB entries in the table
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: has_trunk_entry
                                
                                	FDB entries contain an entry from the trunk
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: trunk_entry_message
                                
                                	Message displayed when an FDB entry contains an entry for a trunk member port
                                	**type**\: str
                                
                                .. attribute:: fdb_block
                                
                                	
                                	**type**\:  :py:class:`FdbBlock <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Fdb.Port.PortIter.SwitchFdbCommon.Location.FdbBlock>`
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.Switch.Oper.Fdb.Port.PortIter.SwitchFdbCommon.Location, self).__init__()

                                    self.yang_name = "location"
                                    self.yang_parent_name = "switch-fdb-common"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['rack','card','switch_id']
                                    self._child_classes = OrderedDict([("fdb-block", ("fdb_block", Controller.Switch.Oper.Fdb.Port.PortIter.SwitchFdbCommon.Location.FdbBlock))])
                                    self._leafs = OrderedDict([
                                        ('rack', YLeaf(YType.enumeration, 'rack')),
                                        ('card', YLeaf(YType.enumeration, 'card')),
                                        ('switch_id', YLeaf(YType.enumeration, 'switch-id')),
                                        ('num_entries', YLeaf(YType.uint32, 'num-entries')),
                                        ('has_trunk_entry', YLeaf(YType.uint8, 'has-trunk-entry')),
                                        ('trunk_entry_message', YLeaf(YType.str, 'trunk-entry-message')),
                                    ])
                                    self.rack = None
                                    self.card = None
                                    self.switch_id = None
                                    self.num_entries = None
                                    self.has_trunk_entry = None
                                    self.trunk_entry_message = None

                                    self.fdb_block = Controller.Switch.Oper.Fdb.Port.PortIter.SwitchFdbCommon.Location.FdbBlock()
                                    self.fdb_block.parent = self
                                    self._children_name_map["fdb_block"] = "fdb-block"
                                    self._segment_path = lambda: "location" + "[rack='" + str(self.rack) + "']" + "[card='" + str(self.card) + "']" + "[switch-id='" + str(self.switch_id) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.Switch.Oper.Fdb.Port.PortIter.SwitchFdbCommon.Location, [u'rack', u'card', u'switch_id', u'num_entries', u'has_trunk_entry', u'trunk_entry_message'], name, value)


                                class FdbBlock(Entity):
                                    """
                                    
                                    
                                    .. attribute:: fdb_entry
                                    
                                    	
                                    	**type**\: list of  		 :py:class:`FdbEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Fdb.Port.PortIter.SwitchFdbCommon.Location.FdbBlock.FdbEntry>`
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.Switch.Oper.Fdb.Port.PortIter.SwitchFdbCommon.Location.FdbBlock, self).__init__()

                                        self.yang_name = "fdb-block"
                                        self.yang_parent_name = "location"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("fdb-entry", ("fdb_entry", Controller.Switch.Oper.Fdb.Port.PortIter.SwitchFdbCommon.Location.FdbBlock.FdbEntry))])
                                        self._leafs = OrderedDict()

                                        self.fdb_entry = YList(self)
                                        self._segment_path = lambda: "fdb-block"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.Switch.Oper.Fdb.Port.PortIter.SwitchFdbCommon.Location.FdbBlock, [], name, value)


                                    class FdbEntry(Entity):
                                        """
                                        
                                        
                                        .. attribute:: fdb_index  (key)
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: fdb_mac_addr
                                        
                                        	
                                        	**type**\: str
                                        
                                        	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                                        
                                        .. attribute:: fdb_vlan
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4095
                                        
                                        .. attribute:: fdb_vlan_hex
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4095
                                        
                                        	**refers to**\:  :py:class:`fdb_vlan <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Fdb.Port.PortIter.SwitchFdbCommon.Location.FdbBlock.FdbEntry>`
                                        
                                        .. attribute:: fdb_port
                                        
                                        	Switch port MAC address learned on
                                        	**type**\: int
                                        
                                        	**range:** 0..127
                                        
                                        .. attribute:: fdb_trap_entry
                                        
                                        	
                                        	**type**\:  :py:class:`EsdmaSwitchYesNoEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaSwitchYesNoEnum>`
                                        
                                        .. attribute:: fdb_static_entry
                                        
                                        	
                                        	**type**\:  :py:class:`EsdmaSwitchYesNoEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaSwitchYesNoEnum>`
                                        
                                        .. attribute:: fdb_synced_cores
                                        
                                        	
                                        	**type**\: list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Switch.Oper.Fdb.Port.PortIter.SwitchFdbCommon.Location.FdbBlock.FdbEntry, self).__init__()

                                            self.yang_name = "fdb-entry"
                                            self.yang_parent_name = "fdb-block"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['fdb_index']
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('fdb_index', YLeaf(YType.uint32, 'fdb-index')),
                                                ('fdb_mac_addr', YLeaf(YType.str, 'fdb-mac-addr')),
                                                ('fdb_vlan', YLeaf(YType.uint16, 'fdb-vlan')),
                                                ('fdb_vlan_hex', YLeaf(YType.str, 'fdb-vlan-hex')),
                                                ('fdb_port', YLeaf(YType.int32, 'fdb-port')),
                                                ('fdb_trap_entry', YLeaf(YType.enumeration, 'fdb-trap-entry')),
                                                ('fdb_static_entry', YLeaf(YType.enumeration, 'fdb-static-entry')),
                                                ('fdb_synced_cores', YLeafList(YType.uint8, 'fdb-synced-cores')),
                                            ])
                                            self.fdb_index = None
                                            self.fdb_mac_addr = None
                                            self.fdb_vlan = None
                                            self.fdb_vlan_hex = None
                                            self.fdb_port = None
                                            self.fdb_trap_entry = None
                                            self.fdb_static_entry = None
                                            self.fdb_synced_cores = []
                                            self._segment_path = lambda: "fdb-entry" + "[fdb-index='" + str(self.fdb_index) + "']"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Switch.Oper.Fdb.Port.PortIter.SwitchFdbCommon.Location.FdbBlock.FdbEntry, [u'fdb_index', u'fdb_mac_addr', u'fdb_vlan', u'fdb_vlan_hex', u'fdb_port', u'fdb_trap_entry', u'fdb_static_entry', u'fdb_synced_cores'], name, value)


                class Statistics(Entity):
                    """
                    
                    
                    .. attribute:: location
                    
                    	
                    	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Fdb.Statistics.Location>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.Switch.Oper.Fdb.Statistics, self).__init__()

                        self.yang_name = "statistics"
                        self.yang_parent_name = "fdb"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("location", ("location", Controller.Switch.Oper.Fdb.Statistics.Location))])
                        self._leafs = OrderedDict()

                        self.location = YList(self)
                        self._segment_path = lambda: "statistics"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/fdb/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.Switch.Oper.Fdb.Statistics, [], name, value)


                    class Location(Entity):
                        """
                        
                        
                        .. attribute:: rack  (key)
                        
                        	
                        	**type**\:  :py:class:`EsdmaRackNumEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaRackNumEnum>`
                        
                        .. attribute:: card  (key)
                        
                        	Card
                        	**type**\:  :py:class:`EsdmaCpu <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaCpu>`
                        
                        .. attribute:: switch_id  (key)
                        
                        	Switch type
                        	**type**\:  :py:class:`EsdmaSwitchTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaSwitchTypeEnum>`
                        
                        .. attribute:: counter_info
                        
                        	
                        	**type**\:  :py:class:`CounterInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Fdb.Statistics.Location.CounterInfo>`
                        
                        .. attribute:: core_id
                        
                        	
                        	**type**\: list of  		 :py:class:`CoreId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Fdb.Statistics.Location.CoreId>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Switch.Oper.Fdb.Statistics.Location, self).__init__()

                            self.yang_name = "location"
                            self.yang_parent_name = "statistics"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = ['rack','card','switch_id']
                            self._child_classes = OrderedDict([("counter-info", ("counter_info", Controller.Switch.Oper.Fdb.Statistics.Location.CounterInfo)), ("core-id", ("core_id", Controller.Switch.Oper.Fdb.Statistics.Location.CoreId))])
                            self._leafs = OrderedDict([
                                ('rack', YLeaf(YType.enumeration, 'rack')),
                                ('card', YLeaf(YType.enumeration, 'card')),
                                ('switch_id', YLeaf(YType.enumeration, 'switch-id')),
                            ])
                            self.rack = None
                            self.card = None
                            self.switch_id = None

                            self.counter_info = Controller.Switch.Oper.Fdb.Statistics.Location.CounterInfo()
                            self.counter_info.parent = self
                            self._children_name_map["counter_info"] = "counter-info"

                            self.core_id = YList(self)
                            self._segment_path = lambda: "location" + "[rack='" + str(self.rack) + "']" + "[card='" + str(self.card) + "']" + "[switch-id='" + str(self.switch_id) + "']"
                            self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/fdb/statistics/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Switch.Oper.Fdb.Statistics.Location, [u'rack', u'card', u'switch_id'], name, value)


                        class CounterInfo(Entity):
                            """
                            
                            
                            .. attribute:: fdb_shadow_entries
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: fdb_max_shadow_entries
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: fdb_max_hash_chain
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: fdb_entries_added
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: fdb_entries_deleted
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: fdb_entries_updated
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: fdb_flushes
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: fdb_address_updates
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: fdb_new_addresses
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: fdb_aged_updates
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: fdb_transplant_updates
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: fdb_forwarding_updates
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: fdb_address_insert_errors
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: fdb_address_update_errors
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: fdb_memory_errors
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: fdb_allocation_errors
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: fdb_address_updates_queued
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: fdb_address_queue_full
                            
                            	
                            	**type**\:  :py:class:`EsdmaSwitchYesNoEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaSwitchYesNoEnum>`
                            
                            .. attribute:: fdb_forwarding_updates_queued
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: fdb_forwarding_queue_full
                            
                            	
                            	**type**\:  :py:class:`EsdmaSwitchYesNoEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaSwitchYesNoEnum>`
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Switch.Oper.Fdb.Statistics.Location.CounterInfo, self).__init__()

                                self.yang_name = "counter-info"
                                self.yang_parent_name = "location"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('fdb_shadow_entries', YLeaf(YType.uint32, 'fdb-shadow-entries')),
                                    ('fdb_max_shadow_entries', YLeaf(YType.uint32, 'fdb-max-shadow-entries')),
                                    ('fdb_max_hash_chain', YLeaf(YType.uint32, 'fdb-max-hash-chain')),
                                    ('fdb_entries_added', YLeaf(YType.uint32, 'fdb-entries-added')),
                                    ('fdb_entries_deleted', YLeaf(YType.uint32, 'fdb-entries-deleted')),
                                    ('fdb_entries_updated', YLeaf(YType.uint32, 'fdb-entries-updated')),
                                    ('fdb_flushes', YLeaf(YType.uint32, 'fdb-flushes')),
                                    ('fdb_address_updates', YLeaf(YType.uint32, 'fdb-address-updates')),
                                    ('fdb_new_addresses', YLeaf(YType.uint32, 'fdb-new-addresses')),
                                    ('fdb_aged_updates', YLeaf(YType.uint32, 'fdb-aged-updates')),
                                    ('fdb_transplant_updates', YLeaf(YType.uint32, 'fdb-transplant-updates')),
                                    ('fdb_forwarding_updates', YLeaf(YType.uint32, 'fdb-forwarding-updates')),
                                    ('fdb_address_insert_errors', YLeaf(YType.uint32, 'fdb-address-insert-errors')),
                                    ('fdb_address_update_errors', YLeaf(YType.uint32, 'fdb-address-update-errors')),
                                    ('fdb_memory_errors', YLeaf(YType.uint32, 'fdb-memory-errors')),
                                    ('fdb_allocation_errors', YLeaf(YType.uint32, 'fdb-allocation-errors')),
                                    ('fdb_address_updates_queued', YLeaf(YType.uint32, 'fdb-address-updates-queued')),
                                    ('fdb_address_queue_full', YLeaf(YType.enumeration, 'fdb-address-queue-full')),
                                    ('fdb_forwarding_updates_queued', YLeaf(YType.uint32, 'fdb-forwarding-updates-queued')),
                                    ('fdb_forwarding_queue_full', YLeaf(YType.enumeration, 'fdb-forwarding-queue-full')),
                                ])
                                self.fdb_shadow_entries = None
                                self.fdb_max_shadow_entries = None
                                self.fdb_max_hash_chain = None
                                self.fdb_entries_added = None
                                self.fdb_entries_deleted = None
                                self.fdb_entries_updated = None
                                self.fdb_flushes = None
                                self.fdb_address_updates = None
                                self.fdb_new_addresses = None
                                self.fdb_aged_updates = None
                                self.fdb_transplant_updates = None
                                self.fdb_forwarding_updates = None
                                self.fdb_address_insert_errors = None
                                self.fdb_address_update_errors = None
                                self.fdb_memory_errors = None
                                self.fdb_allocation_errors = None
                                self.fdb_address_updates_queued = None
                                self.fdb_address_queue_full = None
                                self.fdb_forwarding_updates_queued = None
                                self.fdb_forwarding_queue_full = None
                                self._segment_path = lambda: "counter-info"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Switch.Oper.Fdb.Statistics.Location.CounterInfo, [u'fdb_shadow_entries', u'fdb_max_shadow_entries', u'fdb_max_hash_chain', u'fdb_entries_added', u'fdb_entries_deleted', u'fdb_entries_updated', u'fdb_flushes', u'fdb_address_updates', u'fdb_new_addresses', u'fdb_aged_updates', u'fdb_transplant_updates', u'fdb_forwarding_updates', u'fdb_address_insert_errors', u'fdb_address_update_errors', u'fdb_memory_errors', u'fdb_allocation_errors', u'fdb_address_updates_queued', u'fdb_address_queue_full', u'fdb_forwarding_updates_queued', u'fdb_forwarding_queue_full'], name, value)


                        class CoreId(Entity):
                            """
                            
                            
                            .. attribute:: core  (key)
                            
                            	
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: core_entries
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: core_static_entries
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Switch.Oper.Fdb.Statistics.Location.CoreId, self).__init__()

                                self.yang_name = "core-id"
                                self.yang_parent_name = "location"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['core']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('core', YLeaf(YType.int32, 'core')),
                                    ('core_entries', YLeaf(YType.uint32, 'core-entries')),
                                    ('core_static_entries', YLeaf(YType.uint32, 'core-static-entries')),
                                ])
                                self.core = None
                                self.core_entries = None
                                self.core_static_entries = None
                                self._segment_path = lambda: "core-id" + "[core='" + str(self.core) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Switch.Oper.Fdb.Statistics.Location.CoreId, [u'core', u'core_entries', u'core_static_entries'], name, value)


                class SwitchFdbCommon(Entity):
                    """
                    
                    
                    .. attribute:: location
                    
                    	
                    	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Fdb.SwitchFdbCommon.Location>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.Switch.Oper.Fdb.SwitchFdbCommon, self).__init__()

                        self.yang_name = "switch-fdb-common"
                        self.yang_parent_name = "fdb"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("location", ("location", Controller.Switch.Oper.Fdb.SwitchFdbCommon.Location))])
                        self._leafs = OrderedDict()

                        self.location = YList(self)
                        self._segment_path = lambda: "switch-fdb-common"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/fdb/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.Switch.Oper.Fdb.SwitchFdbCommon, [], name, value)


                    class Location(Entity):
                        """
                        
                        
                        .. attribute:: rack  (key)
                        
                        	
                        	**type**\:  :py:class:`EsdmaRackNumEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaRackNumEnum>`
                        
                        .. attribute:: card  (key)
                        
                        	Card to list the switch FDB information for
                        	**type**\:  :py:class:`EsdmaCpu <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaCpu>`
                        
                        .. attribute:: switch_id  (key)
                        
                        	Switch type
                        	**type**\:  :py:class:`EsdmaSwitchTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaSwitchTypeEnum>`
                        
                        .. attribute:: num_entries
                        
                        	Number of FDB entries in the table
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: has_trunk_entry
                        
                        	FDB entries contain an entry from the trunk
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: trunk_entry_message
                        
                        	Message displayed when an FDB entry contains an entry for a trunk member port
                        	**type**\: str
                        
                        .. attribute:: fdb_block
                        
                        	
                        	**type**\:  :py:class:`FdbBlock <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Fdb.SwitchFdbCommon.Location.FdbBlock>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Switch.Oper.Fdb.SwitchFdbCommon.Location, self).__init__()

                            self.yang_name = "location"
                            self.yang_parent_name = "switch-fdb-common"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = ['rack','card','switch_id']
                            self._child_classes = OrderedDict([("fdb-block", ("fdb_block", Controller.Switch.Oper.Fdb.SwitchFdbCommon.Location.FdbBlock))])
                            self._leafs = OrderedDict([
                                ('rack', YLeaf(YType.enumeration, 'rack')),
                                ('card', YLeaf(YType.enumeration, 'card')),
                                ('switch_id', YLeaf(YType.enumeration, 'switch-id')),
                                ('num_entries', YLeaf(YType.uint32, 'num-entries')),
                                ('has_trunk_entry', YLeaf(YType.uint8, 'has-trunk-entry')),
                                ('trunk_entry_message', YLeaf(YType.str, 'trunk-entry-message')),
                            ])
                            self.rack = None
                            self.card = None
                            self.switch_id = None
                            self.num_entries = None
                            self.has_trunk_entry = None
                            self.trunk_entry_message = None

                            self.fdb_block = Controller.Switch.Oper.Fdb.SwitchFdbCommon.Location.FdbBlock()
                            self.fdb_block.parent = self
                            self._children_name_map["fdb_block"] = "fdb-block"
                            self._segment_path = lambda: "location" + "[rack='" + str(self.rack) + "']" + "[card='" + str(self.card) + "']" + "[switch-id='" + str(self.switch_id) + "']"
                            self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/fdb/switch-fdb-common/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Switch.Oper.Fdb.SwitchFdbCommon.Location, [u'rack', u'card', u'switch_id', u'num_entries', u'has_trunk_entry', u'trunk_entry_message'], name, value)


                        class FdbBlock(Entity):
                            """
                            
                            
                            .. attribute:: fdb_entry
                            
                            	
                            	**type**\: list of  		 :py:class:`FdbEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Fdb.SwitchFdbCommon.Location.FdbBlock.FdbEntry>`
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Switch.Oper.Fdb.SwitchFdbCommon.Location.FdbBlock, self).__init__()

                                self.yang_name = "fdb-block"
                                self.yang_parent_name = "location"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("fdb-entry", ("fdb_entry", Controller.Switch.Oper.Fdb.SwitchFdbCommon.Location.FdbBlock.FdbEntry))])
                                self._leafs = OrderedDict()

                                self.fdb_entry = YList(self)
                                self._segment_path = lambda: "fdb-block"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Switch.Oper.Fdb.SwitchFdbCommon.Location.FdbBlock, [], name, value)


                            class FdbEntry(Entity):
                                """
                                
                                
                                .. attribute:: fdb_index  (key)
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: fdb_mac_addr
                                
                                	
                                	**type**\: str
                                
                                	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                                
                                .. attribute:: fdb_vlan
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..4095
                                
                                .. attribute:: fdb_vlan_hex
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..4095
                                
                                	**refers to**\:  :py:class:`fdb_vlan <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Fdb.SwitchFdbCommon.Location.FdbBlock.FdbEntry>`
                                
                                .. attribute:: fdb_port
                                
                                	Switch port MAC address learned on
                                	**type**\: int
                                
                                	**range:** 0..127
                                
                                .. attribute:: fdb_trap_entry
                                
                                	
                                	**type**\:  :py:class:`EsdmaSwitchYesNoEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaSwitchYesNoEnum>`
                                
                                .. attribute:: fdb_static_entry
                                
                                	
                                	**type**\:  :py:class:`EsdmaSwitchYesNoEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaSwitchYesNoEnum>`
                                
                                .. attribute:: fdb_synced_cores
                                
                                	
                                	**type**\: list of int
                                
                                	**range:** 0..255
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.Switch.Oper.Fdb.SwitchFdbCommon.Location.FdbBlock.FdbEntry, self).__init__()

                                    self.yang_name = "fdb-entry"
                                    self.yang_parent_name = "fdb-block"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['fdb_index']
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('fdb_index', YLeaf(YType.uint32, 'fdb-index')),
                                        ('fdb_mac_addr', YLeaf(YType.str, 'fdb-mac-addr')),
                                        ('fdb_vlan', YLeaf(YType.uint16, 'fdb-vlan')),
                                        ('fdb_vlan_hex', YLeaf(YType.str, 'fdb-vlan-hex')),
                                        ('fdb_port', YLeaf(YType.int32, 'fdb-port')),
                                        ('fdb_trap_entry', YLeaf(YType.enumeration, 'fdb-trap-entry')),
                                        ('fdb_static_entry', YLeaf(YType.enumeration, 'fdb-static-entry')),
                                        ('fdb_synced_cores', YLeafList(YType.uint8, 'fdb-synced-cores')),
                                    ])
                                    self.fdb_index = None
                                    self.fdb_mac_addr = None
                                    self.fdb_vlan = None
                                    self.fdb_vlan_hex = None
                                    self.fdb_port = None
                                    self.fdb_trap_entry = None
                                    self.fdb_static_entry = None
                                    self.fdb_synced_cores = []
                                    self._segment_path = lambda: "fdb-entry" + "[fdb-index='" + str(self.fdb_index) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.Switch.Oper.Fdb.SwitchFdbCommon.Location.FdbBlock.FdbEntry, [u'fdb_index', u'fdb_mac_addr', u'fdb_vlan', u'fdb_vlan_hex', u'fdb_port', u'fdb_trap_entry', u'fdb_static_entry', u'fdb_synced_cores'], name, value)


            class Vlan(Entity):
                """
                
                
                .. attribute:: rules
                
                	
                	**type**\:  :py:class:`Rules <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Vlan.Rules>`
                
                .. attribute:: information
                
                	
                	**type**\:  :py:class:`Information <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Vlan.Information>`
                
                .. attribute:: vlan_detail
                
                	
                	**type**\:  :py:class:`VlanDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Vlan.VlanDetail>`
                
                .. attribute:: membership
                
                	
                	**type**\:  :py:class:`Membership <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Vlan.Membership>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Controller.Switch.Oper.Vlan, self).__init__()

                    self.yang_name = "vlan"
                    self.yang_parent_name = "oper"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("rules", ("rules", Controller.Switch.Oper.Vlan.Rules)), ("information", ("information", Controller.Switch.Oper.Vlan.Information)), ("vlan-detail", ("vlan_detail", Controller.Switch.Oper.Vlan.VlanDetail)), ("membership", ("membership", Controller.Switch.Oper.Vlan.Membership))])
                    self._leafs = OrderedDict()

                    self.rules = Controller.Switch.Oper.Vlan.Rules()
                    self.rules.parent = self
                    self._children_name_map["rules"] = "rules"

                    self.information = Controller.Switch.Oper.Vlan.Information()
                    self.information.parent = self
                    self._children_name_map["information"] = "information"

                    self.vlan_detail = Controller.Switch.Oper.Vlan.VlanDetail()
                    self.vlan_detail.parent = self
                    self._children_name_map["vlan_detail"] = "vlan-detail"

                    self.membership = Controller.Switch.Oper.Vlan.Membership()
                    self.membership.parent = self
                    self._children_name_map["membership"] = "membership"
                    self._segment_path = lambda: "vlan"
                    self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Controller.Switch.Oper.Vlan, [], name, value)


                class Rules(Entity):
                    """
                    
                    
                    .. attribute:: location
                    
                    	
                    	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Vlan.Rules.Location>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.Switch.Oper.Vlan.Rules, self).__init__()

                        self.yang_name = "rules"
                        self.yang_parent_name = "vlan"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("location", ("location", Controller.Switch.Oper.Vlan.Rules.Location))])
                        self._leafs = OrderedDict()

                        self.location = YList(self)
                        self._segment_path = lambda: "rules"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/vlan/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.Switch.Oper.Vlan.Rules, [], name, value)


                    class Location(Entity):
                        """
                        
                        
                        .. attribute:: rack  (key)
                        
                        	
                        	**type**\:  :py:class:`EsdmaRackNumEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaRackNumEnum>`
                        
                        .. attribute:: card  (key)
                        
                        	Card that owns a switch of interest to display the VLAN configuration for
                        	**type**\:  :py:class:`EsdmaCpu <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaCpu>`
                        
                        .. attribute:: switch_id  (key)
                        
                        	Switch type
                        	**type**\:  :py:class:`EsdmaSwitchTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaSwitchTypeEnum>`
                        
                        .. attribute:: port_iter
                        
                        	
                        	**type**\: list of  		 :py:class:`PortIter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Vlan.Rules.Location.PortIter>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Switch.Oper.Vlan.Rules.Location, self).__init__()

                            self.yang_name = "location"
                            self.yang_parent_name = "rules"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = ['rack','card','switch_id']
                            self._child_classes = OrderedDict([("port-iter", ("port_iter", Controller.Switch.Oper.Vlan.Rules.Location.PortIter))])
                            self._leafs = OrderedDict([
                                ('rack', YLeaf(YType.enumeration, 'rack')),
                                ('card', YLeaf(YType.enumeration, 'card')),
                                ('switch_id', YLeaf(YType.enumeration, 'switch-id')),
                            ])
                            self.rack = None
                            self.card = None
                            self.switch_id = None

                            self.port_iter = YList(self)
                            self._segment_path = lambda: "location" + "[rack='" + str(self.rack) + "']" + "[card='" + str(self.card) + "']" + "[switch-id='" + str(self.switch_id) + "']"
                            self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/vlan/rules/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Switch.Oper.Vlan.Rules.Location, [u'rack', u'card', u'switch_id'], name, value)


                        class PortIter(Entity):
                            """
                            
                            
                            .. attribute:: port  (key)
                            
                            	Switch port
                            	**type**\: int
                            
                            	**range:** 0..127
                            
                            .. attribute:: vlan_id
                            
                            	
                            	**type**\: list of  		 :py:class:`VlanId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Vlan.Rules.Location.PortIter.VlanId>`
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Switch.Oper.Vlan.Rules.Location.PortIter, self).__init__()

                                self.yang_name = "port-iter"
                                self.yang_parent_name = "location"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['port']
                                self._child_classes = OrderedDict([("vlan-id", ("vlan_id", Controller.Switch.Oper.Vlan.Rules.Location.PortIter.VlanId))])
                                self._leafs = OrderedDict([
                                    ('port', YLeaf(YType.int32, 'port')),
                                ])
                                self.port = None

                                self.vlan_id = YList(self)
                                self._segment_path = lambda: "port-iter" + "[port='" + str(self.port) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Switch.Oper.Vlan.Rules.Location.PortIter, [u'port'], name, value)


                            class VlanId(Entity):
                                """
                                
                                
                                .. attribute:: vlan  (key)
                                
                                	This VLAN represents a VLAN membership for this switch port. Multiple rules may exist to support this VLAN
                                	**type**\: int
                                
                                	**range:** 0..4095
                                
                                .. attribute:: rule_id
                                
                                	
                                	**type**\: list of  		 :py:class:`RuleId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Vlan.Rules.Location.PortIter.VlanId.RuleId>`
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.Switch.Oper.Vlan.Rules.Location.PortIter.VlanId, self).__init__()

                                    self.yang_name = "vlan-id"
                                    self.yang_parent_name = "port-iter"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['vlan']
                                    self._child_classes = OrderedDict([("rule-id", ("rule_id", Controller.Switch.Oper.Vlan.Rules.Location.PortIter.VlanId.RuleId))])
                                    self._leafs = OrderedDict([
                                        ('vlan', YLeaf(YType.uint16, 'vlan')),
                                    ])
                                    self.vlan = None

                                    self.rule_id = YList(self)
                                    self._segment_path = lambda: "vlan-id" + "[vlan='" + str(self.vlan) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.Switch.Oper.Vlan.Rules.Location.PortIter.VlanId, [u'vlan'], name, value)


                                class RuleId(Entity):
                                    """
                                    
                                    
                                    .. attribute:: direction
                                    
                                    	Packet direction this rule applies to
                                    	**type**\:  :py:class:`SwitchDataDirectionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.SwitchDataDirectionEnum>`
                                    
                                    .. attribute:: match_table
                                    
                                    	
                                    	**type**\:  :py:class:`SwitchTableTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.SwitchTableTypeEnum>`
                                    
                                    .. attribute:: match_type
                                    
                                    	
                                    	**type**\:  :py:class:`SwitchMatchTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.SwitchMatchTypeEnum>`
                                    
                                    .. attribute:: match_vlan_id
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..4095
                                    
                                    .. attribute:: action
                                    
                                    	
                                    	**type**\:  :py:class:`SwitchActionTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.SwitchActionTypeEnum>`
                                    
                                    .. attribute:: action_vlan_id
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..4095
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.Switch.Oper.Vlan.Rules.Location.PortIter.VlanId.RuleId, self).__init__()

                                        self.yang_name = "rule-id"
                                        self.yang_parent_name = "vlan-id"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('direction', YLeaf(YType.enumeration, 'direction')),
                                            ('match_table', YLeaf(YType.enumeration, 'match-table')),
                                            ('match_type', YLeaf(YType.enumeration, 'match-type')),
                                            ('match_vlan_id', YLeaf(YType.uint16, 'match-vlan-id')),
                                            ('action', YLeaf(YType.enumeration, 'action')),
                                            ('action_vlan_id', YLeaf(YType.uint16, 'action-vlan-id')),
                                        ])
                                        self.direction = None
                                        self.match_table = None
                                        self.match_type = None
                                        self.match_vlan_id = None
                                        self.action = None
                                        self.action_vlan_id = None
                                        self._segment_path = lambda: "rule-id"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.Switch.Oper.Vlan.Rules.Location.PortIter.VlanId.RuleId, [u'direction', u'match_table', u'match_type', u'match_vlan_id', u'action', u'action_vlan_id'], name, value)


                class Information(Entity):
                    """
                    
                    
                    .. attribute:: location
                    
                    	
                    	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Vlan.Information.Location>`
                    
                    .. attribute:: summary
                    
                    	
                    	**type**\:  :py:class:`Summary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Vlan.Information.Summary>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.Switch.Oper.Vlan.Information, self).__init__()

                        self.yang_name = "information"
                        self.yang_parent_name = "vlan"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("location", ("location", Controller.Switch.Oper.Vlan.Information.Location)), ("summary", ("summary", Controller.Switch.Oper.Vlan.Information.Summary))])
                        self._leafs = OrderedDict()

                        self.summary = Controller.Switch.Oper.Vlan.Information.Summary()
                        self.summary.parent = self
                        self._children_name_map["summary"] = "summary"

                        self.location = YList(self)
                        self._segment_path = lambda: "information"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/vlan/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.Switch.Oper.Vlan.Information, [], name, value)


                    class Location(Entity):
                        """
                        
                        
                        .. attribute:: rack  (key)
                        
                        	
                        	**type**\:  :py:class:`EsdmaRackNumEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaRackNumEnum>`
                        
                        .. attribute:: card  (key)
                        
                        	Card to list the switch VLAN information for
                        	**type**\:  :py:class:`EsdmaCpu <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaCpu>`
                        
                        .. attribute:: switch_id  (key)
                        
                        	Switch type
                        	**type**\:  :py:class:`EsdmaSwitchTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaSwitchTypeEnum>`
                        
                        .. attribute:: serial_num
                        
                        	Rack serial number
                        	**type**\: str
                        
                        .. attribute:: sdr_id
                        
                        	
                        	**type**\: list of  		 :py:class:`SdrId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Vlan.Information.Location.SdrId>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Switch.Oper.Vlan.Information.Location, self).__init__()

                            self.yang_name = "location"
                            self.yang_parent_name = "information"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = ['rack','card','switch_id']
                            self._child_classes = OrderedDict([("sdr-id", ("sdr_id", Controller.Switch.Oper.Vlan.Information.Location.SdrId))])
                            self._leafs = OrderedDict([
                                ('rack', YLeaf(YType.enumeration, 'rack')),
                                ('card', YLeaf(YType.enumeration, 'card')),
                                ('switch_id', YLeaf(YType.enumeration, 'switch-id')),
                                ('serial_num', YLeaf(YType.str, 'serial-num')),
                            ])
                            self.rack = None
                            self.card = None
                            self.switch_id = None
                            self.serial_num = None

                            self.sdr_id = YList(self)
                            self._segment_path = lambda: "location" + "[rack='" + str(self.rack) + "']" + "[card='" + str(self.card) + "']" + "[switch-id='" + str(self.switch_id) + "']"
                            self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/vlan/information/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Switch.Oper.Vlan.Information.Location, [u'rack', u'card', u'switch_id', u'serial_num'], name, value)


                        class SdrId(Entity):
                            """
                            
                            
                            .. attribute:: sdr  (key)
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            .. attribute:: esd_sdr_name
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: vlan_id
                            
                            	
                            	**type**\: list of  		 :py:class:`VlanId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Vlan.Information.Location.SdrId.VlanId>`
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Switch.Oper.Vlan.Information.Location.SdrId, self).__init__()

                                self.yang_name = "sdr-id"
                                self.yang_parent_name = "location"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['sdr']
                                self._child_classes = OrderedDict([("vlan-id", ("vlan_id", Controller.Switch.Oper.Vlan.Information.Location.SdrId.VlanId))])
                                self._leafs = OrderedDict([
                                    ('sdr', YLeaf(YType.uint8, 'sdr')),
                                    ('esd_sdr_name', YLeaf(YType.str, 'esd-sdr-name')),
                                ])
                                self.sdr = None
                                self.esd_sdr_name = None

                                self.vlan_id = YList(self)
                                self._segment_path = lambda: "sdr-id" + "[sdr='" + str(self.sdr) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Switch.Oper.Vlan.Information.Location.SdrId, [u'sdr', u'esd_sdr_name'], name, value)


                            class VlanId(Entity):
                                """
                                
                                
                                .. attribute:: vlan  (key)
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..4095
                                
                                .. attribute:: vlan_hex
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..4095
                                
                                	**refers to**\:  :py:class:`vlan <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Vlan.Information.Location.SdrId.VlanId>`
                                
                                .. attribute:: vlan_use
                                
                                	
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.Switch.Oper.Vlan.Information.Location.SdrId.VlanId, self).__init__()

                                    self.yang_name = "vlan-id"
                                    self.yang_parent_name = "sdr-id"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['vlan']
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('vlan', YLeaf(YType.uint16, 'vlan')),
                                        ('vlan_hex', YLeaf(YType.str, 'vlan-hex')),
                                        ('vlan_use', YLeaf(YType.str, 'vlan-use')),
                                    ])
                                    self.vlan = None
                                    self.vlan_hex = None
                                    self.vlan_use = None
                                    self._segment_path = lambda: "vlan-id" + "[vlan='" + str(self.vlan) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.Switch.Oper.Vlan.Information.Location.SdrId.VlanId, [u'vlan', u'vlan_hex', u'vlan_use'], name, value)


                    class Summary(Entity):
                        """
                        
                        
                        .. attribute:: sdr_id
                        
                        	
                        	**type**\: list of  		 :py:class:`SdrId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Vlan.Information.Summary.SdrId>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Switch.Oper.Vlan.Information.Summary, self).__init__()

                            self.yang_name = "summary"
                            self.yang_parent_name = "information"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("sdr-id", ("sdr_id", Controller.Switch.Oper.Vlan.Information.Summary.SdrId))])
                            self._leafs = OrderedDict()

                            self.sdr_id = YList(self)
                            self._segment_path = lambda: "summary"
                            self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/vlan/information/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Switch.Oper.Vlan.Information.Summary, [], name, value)


                        class SdrId(Entity):
                            """
                            
                            
                            .. attribute:: sdr  (key)
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            .. attribute:: esd_sdr_name
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: vlan_id
                            
                            	
                            	**type**\: list of  		 :py:class:`VlanId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Vlan.Information.Summary.SdrId.VlanId>`
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Switch.Oper.Vlan.Information.Summary.SdrId, self).__init__()

                                self.yang_name = "sdr-id"
                                self.yang_parent_name = "summary"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = ['sdr']
                                self._child_classes = OrderedDict([("vlan-id", ("vlan_id", Controller.Switch.Oper.Vlan.Information.Summary.SdrId.VlanId))])
                                self._leafs = OrderedDict([
                                    ('sdr', YLeaf(YType.uint8, 'sdr')),
                                    ('esd_sdr_name', YLeaf(YType.str, 'esd-sdr-name')),
                                ])
                                self.sdr = None
                                self.esd_sdr_name = None

                                self.vlan_id = YList(self)
                                self._segment_path = lambda: "sdr-id" + "[sdr='" + str(self.sdr) + "']"
                                self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/vlan/information/summary/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Switch.Oper.Vlan.Information.Summary.SdrId, [u'sdr', u'esd_sdr_name'], name, value)


                            class VlanId(Entity):
                                """
                                
                                
                                .. attribute:: vlan  (key)
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..4095
                                
                                .. attribute:: vlan_hex
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..4095
                                
                                	**refers to**\:  :py:class:`vlan <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Vlan.Information.Summary.SdrId.VlanId>`
                                
                                .. attribute:: vlan_use
                                
                                	
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.Switch.Oper.Vlan.Information.Summary.SdrId.VlanId, self).__init__()

                                    self.yang_name = "vlan-id"
                                    self.yang_parent_name = "sdr-id"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['vlan']
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('vlan', YLeaf(YType.uint16, 'vlan')),
                                        ('vlan_hex', YLeaf(YType.str, 'vlan-hex')),
                                        ('vlan_use', YLeaf(YType.str, 'vlan-use')),
                                    ])
                                    self.vlan = None
                                    self.vlan_hex = None
                                    self.vlan_use = None
                                    self._segment_path = lambda: "vlan-id" + "[vlan='" + str(self.vlan) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.Switch.Oper.Vlan.Information.Summary.SdrId.VlanId, [u'vlan', u'vlan_hex', u'vlan_use'], name, value)


                class VlanDetail(Entity):
                    """
                    
                    
                    .. attribute:: vlan_id
                    
                    	
                    	**type**\: list of  		 :py:class:`VlanId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Vlan.VlanDetail.VlanId>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.Switch.Oper.Vlan.VlanDetail, self).__init__()

                        self.yang_name = "vlan-detail"
                        self.yang_parent_name = "vlan"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("vlan-id", ("vlan_id", Controller.Switch.Oper.Vlan.VlanDetail.VlanId))])
                        self._leafs = OrderedDict()

                        self.vlan_id = YList(self)
                        self._segment_path = lambda: "vlan-detail"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/vlan/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.Switch.Oper.Vlan.VlanDetail, [], name, value)


                    class VlanId(Entity):
                        """
                        
                        
                        .. attribute:: vlan  (key)
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..4095
                        
                        .. attribute:: rules
                        
                        	
                        	**type**\:  :py:class:`Rules <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Vlan.VlanDetail.VlanId.Rules>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Switch.Oper.Vlan.VlanDetail.VlanId, self).__init__()

                            self.yang_name = "vlan-id"
                            self.yang_parent_name = "vlan-detail"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = ['vlan']
                            self._child_classes = OrderedDict([("rules", ("rules", Controller.Switch.Oper.Vlan.VlanDetail.VlanId.Rules))])
                            self._leafs = OrderedDict([
                                ('vlan', YLeaf(YType.uint16, 'vlan')),
                            ])
                            self.vlan = None

                            self.rules = Controller.Switch.Oper.Vlan.VlanDetail.VlanId.Rules()
                            self.rules.parent = self
                            self._children_name_map["rules"] = "rules"
                            self._segment_path = lambda: "vlan-id" + "[vlan='" + str(self.vlan) + "']"
                            self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/vlan/vlan-detail/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Switch.Oper.Vlan.VlanDetail.VlanId, [u'vlan'], name, value)


                        class Rules(Entity):
                            """
                            
                            
                            .. attribute:: location
                            
                            	
                            	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Vlan.VlanDetail.VlanId.Rules.Location>`
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Switch.Oper.Vlan.VlanDetail.VlanId.Rules, self).__init__()

                                self.yang_name = "rules"
                                self.yang_parent_name = "vlan-id"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("location", ("location", Controller.Switch.Oper.Vlan.VlanDetail.VlanId.Rules.Location))])
                                self._leafs = OrderedDict()

                                self.location = YList(self)
                                self._segment_path = lambda: "rules"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Switch.Oper.Vlan.VlanDetail.VlanId.Rules, [], name, value)


                            class Location(Entity):
                                """
                                
                                
                                .. attribute:: rack  (key)
                                
                                	
                                	**type**\:  :py:class:`EsdmaRackNumEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaRackNumEnum>`
                                
                                .. attribute:: card  (key)
                                
                                	Card that owns a switch of interest
                                	**type**\:  :py:class:`EsdmaCpu <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaCpu>`
                                
                                .. attribute:: switch_id  (key)
                                
                                	Switch type
                                	**type**\:  :py:class:`EsdmaSwitchTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaSwitchTypeEnum>`
                                
                                .. attribute:: port_iter
                                
                                	
                                	**type**\: list of  		 :py:class:`PortIter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Vlan.VlanDetail.VlanId.Rules.Location.PortIter>`
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.Switch.Oper.Vlan.VlanDetail.VlanId.Rules.Location, self).__init__()

                                    self.yang_name = "location"
                                    self.yang_parent_name = "rules"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['rack','card','switch_id']
                                    self._child_classes = OrderedDict([("port-iter", ("port_iter", Controller.Switch.Oper.Vlan.VlanDetail.VlanId.Rules.Location.PortIter))])
                                    self._leafs = OrderedDict([
                                        ('rack', YLeaf(YType.enumeration, 'rack')),
                                        ('card', YLeaf(YType.enumeration, 'card')),
                                        ('switch_id', YLeaf(YType.enumeration, 'switch-id')),
                                    ])
                                    self.rack = None
                                    self.card = None
                                    self.switch_id = None

                                    self.port_iter = YList(self)
                                    self._segment_path = lambda: "location" + "[rack='" + str(self.rack) + "']" + "[card='" + str(self.card) + "']" + "[switch-id='" + str(self.switch_id) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.Switch.Oper.Vlan.VlanDetail.VlanId.Rules.Location, [u'rack', u'card', u'switch_id'], name, value)


                                class PortIter(Entity):
                                    """
                                    
                                    
                                    .. attribute:: port  (key)
                                    
                                    	Switch port
                                    	**type**\: int
                                    
                                    	**range:** 0..127
                                    
                                    .. attribute:: rule_id
                                    
                                    	
                                    	**type**\: list of  		 :py:class:`RuleId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Vlan.VlanDetail.VlanId.Rules.Location.PortIter.RuleId>`
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.Switch.Oper.Vlan.VlanDetail.VlanId.Rules.Location.PortIter, self).__init__()

                                        self.yang_name = "port-iter"
                                        self.yang_parent_name = "location"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['port']
                                        self._child_classes = OrderedDict([("rule-id", ("rule_id", Controller.Switch.Oper.Vlan.VlanDetail.VlanId.Rules.Location.PortIter.RuleId))])
                                        self._leafs = OrderedDict([
                                            ('port', YLeaf(YType.int32, 'port')),
                                        ])
                                        self.port = None

                                        self.rule_id = YList(self)
                                        self._segment_path = lambda: "port-iter" + "[port='" + str(self.port) + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.Switch.Oper.Vlan.VlanDetail.VlanId.Rules.Location.PortIter, [u'port'], name, value)


                                    class RuleId(Entity):
                                        """
                                        
                                        
                                        .. attribute:: direction
                                        
                                        	Packet direction this rule applies to
                                        	**type**\:  :py:class:`SwitchDataDirectionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.SwitchDataDirectionEnum>`
                                        
                                        .. attribute:: match_table
                                        
                                        	
                                        	**type**\:  :py:class:`SwitchTableTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.SwitchTableTypeEnum>`
                                        
                                        .. attribute:: match_type
                                        
                                        	
                                        	**type**\:  :py:class:`SwitchMatchTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.SwitchMatchTypeEnum>`
                                        
                                        .. attribute:: match_vlan_id
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4095
                                        
                                        .. attribute:: action
                                        
                                        	
                                        	**type**\:  :py:class:`SwitchActionTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.SwitchActionTypeEnum>`
                                        
                                        .. attribute:: action_vlan_id
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4095
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Switch.Oper.Vlan.VlanDetail.VlanId.Rules.Location.PortIter.RuleId, self).__init__()

                                            self.yang_name = "rule-id"
                                            self.yang_parent_name = "port-iter"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('direction', YLeaf(YType.enumeration, 'direction')),
                                                ('match_table', YLeaf(YType.enumeration, 'match-table')),
                                                ('match_type', YLeaf(YType.enumeration, 'match-type')),
                                                ('match_vlan_id', YLeaf(YType.uint16, 'match-vlan-id')),
                                                ('action', YLeaf(YType.enumeration, 'action')),
                                                ('action_vlan_id', YLeaf(YType.uint16, 'action-vlan-id')),
                                            ])
                                            self.direction = None
                                            self.match_table = None
                                            self.match_type = None
                                            self.match_vlan_id = None
                                            self.action = None
                                            self.action_vlan_id = None
                                            self._segment_path = lambda: "rule-id"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Switch.Oper.Vlan.VlanDetail.VlanId.Rules.Location.PortIter.RuleId, [u'direction', u'match_table', u'match_type', u'match_vlan_id', u'action', u'action_vlan_id'], name, value)


                class Membership(Entity):
                    """
                    
                    
                    .. attribute:: location
                    
                    	
                    	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Vlan.Membership.Location>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.Switch.Oper.Vlan.Membership, self).__init__()

                        self.yang_name = "membership"
                        self.yang_parent_name = "vlan"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("location", ("location", Controller.Switch.Oper.Vlan.Membership.Location))])
                        self._leafs = OrderedDict()

                        self.location = YList(self)
                        self._segment_path = lambda: "membership"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/vlan/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.Switch.Oper.Vlan.Membership, [], name, value)


                    class Location(Entity):
                        """
                        
                        
                        .. attribute:: rack  (key)
                        
                        	
                        	**type**\:  :py:class:`EsdmaRackNumEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaRackNumEnum>`
                        
                        .. attribute:: card  (key)
                        
                        	Card that owns a switch of interest to display the VLAN configuration for
                        	**type**\:  :py:class:`EsdmaCpu <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaCpu>`
                        
                        .. attribute:: switch_id  (key)
                        
                        	Switch type
                        	**type**\:  :py:class:`EsdmaSwitchTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaSwitchTypeEnum>`
                        
                        .. attribute:: vlan_id
                        
                        	
                        	**type**\: list of  		 :py:class:`VlanId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Vlan.Membership.Location.VlanId>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Switch.Oper.Vlan.Membership.Location, self).__init__()

                            self.yang_name = "location"
                            self.yang_parent_name = "membership"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = ['rack','card','switch_id']
                            self._child_classes = OrderedDict([("vlan-id", ("vlan_id", Controller.Switch.Oper.Vlan.Membership.Location.VlanId))])
                            self._leafs = OrderedDict([
                                ('rack', YLeaf(YType.enumeration, 'rack')),
                                ('card', YLeaf(YType.enumeration, 'card')),
                                ('switch_id', YLeaf(YType.enumeration, 'switch-id')),
                            ])
                            self.rack = None
                            self.card = None
                            self.switch_id = None

                            self.vlan_id = YList(self)
                            self._segment_path = lambda: "location" + "[rack='" + str(self.rack) + "']" + "[card='" + str(self.card) + "']" + "[switch-id='" + str(self.switch_id) + "']"
                            self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/vlan/membership/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Switch.Oper.Vlan.Membership.Location, [u'rack', u'card', u'switch_id'], name, value)


                        class VlanId(Entity):
                            """
                            
                            
                            .. attribute:: vlan  (key)
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4095
                            
                            .. attribute:: vlan_hex
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..4095
                            
                            	**refers to**\:  :py:class:`vlan <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Vlan.Membership.Location.VlanId>`
                            
                            .. attribute:: port
                            
                            	
                            	**type**\: list of int
                            
                            	**range:** 0..255
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Switch.Oper.Vlan.Membership.Location.VlanId, self).__init__()

                                self.yang_name = "vlan-id"
                                self.yang_parent_name = "location"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['vlan']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('vlan', YLeaf(YType.uint16, 'vlan')),
                                    ('vlan_hex', YLeaf(YType.str, 'vlan-hex')),
                                    ('port', YLeafList(YType.uint8, 'port')),
                                ])
                                self.vlan = None
                                self.vlan_hex = None
                                self.port = []
                                self._segment_path = lambda: "vlan-id" + "[vlan='" + str(self.vlan) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Switch.Oper.Vlan.Membership.Location.VlanId, [u'vlan', u'vlan_hex', u'port'], name, value)


            class Sdr(Entity):
                """
                
                
                .. attribute:: port_statistics
                
                	
                	**type**\:  :py:class:`PortStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sdr.PortStatistics>`
                
                .. attribute:: global_statistics
                
                	
                	**type**\:  :py:class:`GlobalStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sdr.GlobalStatistics>`
                
                .. attribute:: policers
                
                	
                	**type**\:  :py:class:`Policers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sdr.Policers>`
                
                .. attribute:: sdr_detail
                
                	
                	**type**\:  :py:class:`SdrDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sdr.SdrDetail>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Controller.Switch.Oper.Sdr, self).__init__()

                    self.yang_name = "sdr"
                    self.yang_parent_name = "oper"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("port-statistics", ("port_statistics", Controller.Switch.Oper.Sdr.PortStatistics)), ("global-statistics", ("global_statistics", Controller.Switch.Oper.Sdr.GlobalStatistics)), ("policers", ("policers", Controller.Switch.Oper.Sdr.Policers)), ("sdr-detail", ("sdr_detail", Controller.Switch.Oper.Sdr.SdrDetail))])
                    self._leafs = OrderedDict()

                    self.port_statistics = Controller.Switch.Oper.Sdr.PortStatistics()
                    self.port_statistics.parent = self
                    self._children_name_map["port_statistics"] = "port-statistics"

                    self.global_statistics = Controller.Switch.Oper.Sdr.GlobalStatistics()
                    self.global_statistics.parent = self
                    self._children_name_map["global_statistics"] = "global-statistics"

                    self.policers = Controller.Switch.Oper.Sdr.Policers()
                    self.policers.parent = self
                    self._children_name_map["policers"] = "policers"

                    self.sdr_detail = Controller.Switch.Oper.Sdr.SdrDetail()
                    self.sdr_detail.parent = self
                    self._children_name_map["sdr_detail"] = "sdr-detail"
                    self._segment_path = lambda: "sdr"
                    self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Controller.Switch.Oper.Sdr, [], name, value)


                class PortStatistics(Entity):
                    """
                    
                    
                    .. attribute:: location
                    
                    	
                    	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sdr.PortStatistics.Location>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.Switch.Oper.Sdr.PortStatistics, self).__init__()

                        self.yang_name = "port-statistics"
                        self.yang_parent_name = "sdr"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("location", ("location", Controller.Switch.Oper.Sdr.PortStatistics.Location))])
                        self._leafs = OrderedDict()

                        self.location = YList(self)
                        self._segment_path = lambda: "port-statistics"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/sdr/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.Switch.Oper.Sdr.PortStatistics, [], name, value)


                    class Location(Entity):
                        """
                        
                        
                        .. attribute:: rack  (key)
                        
                        	
                        	**type**\:  :py:class:`EsdmaRackNumEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaRackNumEnum>`
                        
                        .. attribute:: card  (key)
                        
                        	Card that owns a switch of interest to display the SDR configuration for
                        	**type**\:  :py:class:`EsdmaCpu <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaCpu>`
                        
                        .. attribute:: switch_id  (key)
                        
                        	Switch type
                        	**type**\:  :py:class:`EsdmaSwitchTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaSwitchTypeEnum>`
                        
                        .. attribute:: port_iter
                        
                        	
                        	**type**\: list of  		 :py:class:`PortIter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sdr.PortStatistics.Location.PortIter>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Switch.Oper.Sdr.PortStatistics.Location, self).__init__()

                            self.yang_name = "location"
                            self.yang_parent_name = "port-statistics"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = ['rack','card','switch_id']
                            self._child_classes = OrderedDict([("port-iter", ("port_iter", Controller.Switch.Oper.Sdr.PortStatistics.Location.PortIter))])
                            self._leafs = OrderedDict([
                                ('rack', YLeaf(YType.enumeration, 'rack')),
                                ('card', YLeaf(YType.enumeration, 'card')),
                                ('switch_id', YLeaf(YType.enumeration, 'switch-id')),
                            ])
                            self.rack = None
                            self.card = None
                            self.switch_id = None

                            self.port_iter = YList(self)
                            self._segment_path = lambda: "location" + "[rack='" + str(self.rack) + "']" + "[card='" + str(self.card) + "']" + "[switch-id='" + str(self.switch_id) + "']"
                            self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/sdr/port-statistics/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Switch.Oper.Sdr.PortStatistics.Location, ['rack', 'card', 'switch_id'], name, value)


                        class PortIter(Entity):
                            """
                            
                            
                            .. attribute:: port  (key)
                            
                            	Switch port
                            	**type**\: int
                            
                            	**range:** 0..127
                            
                            .. attribute:: sdr_id
                            
                            	
                            	**type**\: list of  		 :py:class:`SdrId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sdr.PortStatistics.Location.PortIter.SdrId>`
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Switch.Oper.Sdr.PortStatistics.Location.PortIter, self).__init__()

                                self.yang_name = "port-iter"
                                self.yang_parent_name = "location"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['port']
                                self._child_classes = OrderedDict([("sdr-id", ("sdr_id", Controller.Switch.Oper.Sdr.PortStatistics.Location.PortIter.SdrId))])
                                self._leafs = OrderedDict([
                                    ('port', YLeaf(YType.int32, 'port')),
                                ])
                                self.port = None

                                self.sdr_id = YList(self)
                                self._segment_path = lambda: "port-iter" + "[port='" + str(self.port) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Switch.Oper.Sdr.PortStatistics.Location.PortIter, ['port'], name, value)


                            class SdrId(Entity):
                                """
                                
                                
                                .. attribute:: sdr  (key)
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: esd_sdr_name
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: traffic_type_id
                                
                                	
                                	**type**\: list of  		 :py:class:`TrafficTypeId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sdr.PortStatistics.Location.PortIter.SdrId.TrafficTypeId>`
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.Switch.Oper.Sdr.PortStatistics.Location.PortIter.SdrId, self).__init__()

                                    self.yang_name = "sdr-id"
                                    self.yang_parent_name = "port-iter"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['sdr']
                                    self._child_classes = OrderedDict([("traffic-type-id", ("traffic_type_id", Controller.Switch.Oper.Sdr.PortStatistics.Location.PortIter.SdrId.TrafficTypeId))])
                                    self._leafs = OrderedDict([
                                        ('sdr', YLeaf(YType.uint8, 'sdr')),
                                        ('esd_sdr_name', YLeaf(YType.str, 'esd-sdr-name')),
                                    ])
                                    self.sdr = None
                                    self.esd_sdr_name = None

                                    self.traffic_type_id = YList(self)
                                    self._segment_path = lambda: "sdr-id" + "[sdr='" + str(self.sdr) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.Switch.Oper.Sdr.PortStatistics.Location.PortIter.SdrId, ['sdr', 'esd_sdr_name'], name, value)


                                class TrafficTypeId(Entity):
                                    """
                                    
                                    
                                    .. attribute:: traffic_type  (key)
                                    
                                    	
                                    	**type**\:  :py:class:`EsdmaSdrTrafficType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaSdrTrafficType>`
                                    
                                    .. attribute:: direction_id
                                    
                                    	
                                    	**type**\: list of  		 :py:class:`DirectionId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sdr.PortStatistics.Location.PortIter.SdrId.TrafficTypeId.DirectionId>`
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.Switch.Oper.Sdr.PortStatistics.Location.PortIter.SdrId.TrafficTypeId, self).__init__()

                                        self.yang_name = "traffic-type-id"
                                        self.yang_parent_name = "sdr-id"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['traffic_type']
                                        self._child_classes = OrderedDict([("direction-id", ("direction_id", Controller.Switch.Oper.Sdr.PortStatistics.Location.PortIter.SdrId.TrafficTypeId.DirectionId))])
                                        self._leafs = OrderedDict([
                                            ('traffic_type', YLeaf(YType.enumeration, 'traffic-type')),
                                        ])
                                        self.traffic_type = None

                                        self.direction_id = YList(self)
                                        self._segment_path = lambda: "traffic-type-id" + "[traffic-type='" + str(self.traffic_type) + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.Switch.Oper.Sdr.PortStatistics.Location.PortIter.SdrId.TrafficTypeId, ['traffic_type'], name, value)


                                    class DirectionId(Entity):
                                        """
                                        
                                        
                                        .. attribute:: direction  (key)
                                        
                                        	Packet direction this rule applies to
                                        	**type**\:  :py:class:`SwitchDataDirectionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.SwitchDataDirectionEnum>`
                                        
                                        .. attribute:: green_packets
                                        
                                        	Counts packets within the committed information rate for all traffic classes on this SDR
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: yellow_packets
                                        
                                        	Counts packets above the committed information rate, but within the excess information rate for all traffic classes on this SDR
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: red_packets
                                        
                                        	Counts packets above the excess information rate for all traffic classes on this SDR. Generally, these packets are dropped
                                        	**type**\: int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Switch.Oper.Sdr.PortStatistics.Location.PortIter.SdrId.TrafficTypeId.DirectionId, self).__init__()

                                            self.yang_name = "direction-id"
                                            self.yang_parent_name = "traffic-type-id"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['direction']
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('direction', YLeaf(YType.enumeration, 'direction')),
                                                ('green_packets', YLeaf(YType.uint64, 'green-packets')),
                                                ('yellow_packets', YLeaf(YType.uint64, 'yellow-packets')),
                                                ('red_packets', YLeaf(YType.uint64, 'red-packets')),
                                            ])
                                            self.direction = None
                                            self.green_packets = None
                                            self.yellow_packets = None
                                            self.red_packets = None
                                            self._segment_path = lambda: "direction-id" + "[direction='" + str(self.direction) + "']"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Switch.Oper.Sdr.PortStatistics.Location.PortIter.SdrId.TrafficTypeId.DirectionId, ['direction', 'green_packets', 'yellow_packets', 'red_packets'], name, value)


                class GlobalStatistics(Entity):
                    """
                    
                    
                    .. attribute:: location
                    
                    	
                    	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sdr.GlobalStatistics.Location>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.Switch.Oper.Sdr.GlobalStatistics, self).__init__()

                        self.yang_name = "global-statistics"
                        self.yang_parent_name = "sdr"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("location", ("location", Controller.Switch.Oper.Sdr.GlobalStatistics.Location))])
                        self._leafs = OrderedDict()

                        self.location = YList(self)
                        self._segment_path = lambda: "global-statistics"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/sdr/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.Switch.Oper.Sdr.GlobalStatistics, [], name, value)


                    class Location(Entity):
                        """
                        
                        
                        .. attribute:: rack  (key)
                        
                        	
                        	**type**\:  :py:class:`EsdmaRackNumEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaRackNumEnum>`
                        
                        .. attribute:: card  (key)
                        
                        	Card that owns a switch of interest to display the SDR configuration for
                        	**type**\:  :py:class:`EsdmaCpu <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaCpu>`
                        
                        .. attribute:: switch_id  (key)
                        
                        	Switch type
                        	**type**\:  :py:class:`EsdmaSwitchTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaSwitchTypeEnum>`
                        
                        .. attribute:: sdr_id
                        
                        	
                        	**type**\: list of  		 :py:class:`SdrId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sdr.GlobalStatistics.Location.SdrId>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Switch.Oper.Sdr.GlobalStatistics.Location, self).__init__()

                            self.yang_name = "location"
                            self.yang_parent_name = "global-statistics"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = ['rack','card','switch_id']
                            self._child_classes = OrderedDict([("sdr-id", ("sdr_id", Controller.Switch.Oper.Sdr.GlobalStatistics.Location.SdrId))])
                            self._leafs = OrderedDict([
                                ('rack', YLeaf(YType.enumeration, 'rack')),
                                ('card', YLeaf(YType.enumeration, 'card')),
                                ('switch_id', YLeaf(YType.enumeration, 'switch-id')),
                            ])
                            self.rack = None
                            self.card = None
                            self.switch_id = None

                            self.sdr_id = YList(self)
                            self._segment_path = lambda: "location" + "[rack='" + str(self.rack) + "']" + "[card='" + str(self.card) + "']" + "[switch-id='" + str(self.switch_id) + "']"
                            self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/sdr/global-statistics/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Switch.Oper.Sdr.GlobalStatistics.Location, ['rack', 'card', 'switch_id'], name, value)


                        class SdrId(Entity):
                            """
                            
                            
                            .. attribute:: sdr  (key)
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            .. attribute:: esd_sdr_name
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: traffic_type_id
                            
                            	
                            	**type**\: list of  		 :py:class:`TrafficTypeId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sdr.GlobalStatistics.Location.SdrId.TrafficTypeId>`
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Switch.Oper.Sdr.GlobalStatistics.Location.SdrId, self).__init__()

                                self.yang_name = "sdr-id"
                                self.yang_parent_name = "location"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['sdr']
                                self._child_classes = OrderedDict([("traffic-type-id", ("traffic_type_id", Controller.Switch.Oper.Sdr.GlobalStatistics.Location.SdrId.TrafficTypeId))])
                                self._leafs = OrderedDict([
                                    ('sdr', YLeaf(YType.uint8, 'sdr')),
                                    ('esd_sdr_name', YLeaf(YType.str, 'esd-sdr-name')),
                                ])
                                self.sdr = None
                                self.esd_sdr_name = None

                                self.traffic_type_id = YList(self)
                                self._segment_path = lambda: "sdr-id" + "[sdr='" + str(self.sdr) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Switch.Oper.Sdr.GlobalStatistics.Location.SdrId, ['sdr', 'esd_sdr_name'], name, value)


                            class TrafficTypeId(Entity):
                                """
                                
                                
                                .. attribute:: traffic_type  (key)
                                
                                	
                                	**type**\:  :py:class:`EsdmaSdrTrafficType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaSdrTrafficType>`
                                
                                .. attribute:: traffic_class_id
                                
                                	
                                	**type**\: list of  		 :py:class:`TrafficClassId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sdr.GlobalStatistics.Location.SdrId.TrafficTypeId.TrafficClassId>`
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.Switch.Oper.Sdr.GlobalStatistics.Location.SdrId.TrafficTypeId, self).__init__()

                                    self.yang_name = "traffic-type-id"
                                    self.yang_parent_name = "sdr-id"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['traffic_type']
                                    self._child_classes = OrderedDict([("traffic-class-id", ("traffic_class_id", Controller.Switch.Oper.Sdr.GlobalStatistics.Location.SdrId.TrafficTypeId.TrafficClassId))])
                                    self._leafs = OrderedDict([
                                        ('traffic_type', YLeaf(YType.enumeration, 'traffic-type')),
                                    ])
                                    self.traffic_type = None

                                    self.traffic_class_id = YList(self)
                                    self._segment_path = lambda: "traffic-type-id" + "[traffic-type='" + str(self.traffic_type) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.Switch.Oper.Sdr.GlobalStatistics.Location.SdrId.TrafficTypeId, ['traffic_type'], name, value)


                                class TrafficClassId(Entity):
                                    """
                                    
                                    
                                    .. attribute:: tc  (key)
                                    
                                    	Traffic class (0\->7) for these statistics
                                    	**type**\: int
                                    
                                    	**range:** \-1..7
                                    
                                    .. attribute:: green_packets
                                    
                                    	Counts packets within the committed information rate for a traffic class on this VLAN
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: yellow_packets
                                    
                                    	Counts packets above the committed information rate, but within the excess information rate for a traffic class on this VLAN
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: red_packets
                                    
                                    	Counts packets above the excess information rate for a traffic class on this VLAN. Generally, these packets are dropped
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.Switch.Oper.Sdr.GlobalStatistics.Location.SdrId.TrafficTypeId.TrafficClassId, self).__init__()

                                        self.yang_name = "traffic-class-id"
                                        self.yang_parent_name = "traffic-type-id"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['tc']
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('tc', YLeaf(YType.int8, 'tc')),
                                            ('green_packets', YLeaf(YType.uint64, 'green-packets')),
                                            ('yellow_packets', YLeaf(YType.uint64, 'yellow-packets')),
                                            ('red_packets', YLeaf(YType.uint64, 'red-packets')),
                                        ])
                                        self.tc = None
                                        self.green_packets = None
                                        self.yellow_packets = None
                                        self.red_packets = None
                                        self._segment_path = lambda: "traffic-class-id" + "[tc='" + str(self.tc) + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.Switch.Oper.Sdr.GlobalStatistics.Location.SdrId.TrafficTypeId.TrafficClassId, ['tc', 'green_packets', 'yellow_packets', 'red_packets'], name, value)


                class Policers(Entity):
                    """
                    
                    
                    .. attribute:: location
                    
                    	
                    	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sdr.Policers.Location>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.Switch.Oper.Sdr.Policers, self).__init__()

                        self.yang_name = "policers"
                        self.yang_parent_name = "sdr"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("location", ("location", Controller.Switch.Oper.Sdr.Policers.Location))])
                        self._leafs = OrderedDict()

                        self.location = YList(self)
                        self._segment_path = lambda: "policers"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/sdr/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.Switch.Oper.Sdr.Policers, [], name, value)


                    class Location(Entity):
                        """
                        
                        
                        .. attribute:: rack  (key)
                        
                        	
                        	**type**\:  :py:class:`EsdmaRackNumEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaRackNumEnum>`
                        
                        .. attribute:: card  (key)
                        
                        	
                        	**type**\:  :py:class:`EsdmaCpu <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaCpu>`
                        
                        .. attribute:: switch_id  (key)
                        
                        	
                        	**type**\:  :py:class:`EsdmaSwitchTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaSwitchTypeEnum>`
                        
                        .. attribute:: esd_policer_status
                        
                        	
                        	**type**\:  :py:class:`EsdPolicerStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sdr.Policers.Location.EsdPolicerStatus>`
                        
                        .. attribute:: sdr_id
                        
                        	
                        	**type**\: list of  		 :py:class:`SdrId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sdr.Policers.Location.SdrId>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Switch.Oper.Sdr.Policers.Location, self).__init__()

                            self.yang_name = "location"
                            self.yang_parent_name = "policers"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = ['rack','card','switch_id']
                            self._child_classes = OrderedDict([("esd-policer-status", ("esd_policer_status", Controller.Switch.Oper.Sdr.Policers.Location.EsdPolicerStatus)), ("sdr-id", ("sdr_id", Controller.Switch.Oper.Sdr.Policers.Location.SdrId))])
                            self._leafs = OrderedDict([
                                ('rack', YLeaf(YType.enumeration, 'rack')),
                                ('card', YLeaf(YType.enumeration, 'card')),
                                ('switch_id', YLeaf(YType.enumeration, 'switch-id')),
                            ])
                            self.rack = None
                            self.card = None
                            self.switch_id = None

                            self.esd_policer_status = Controller.Switch.Oper.Sdr.Policers.Location.EsdPolicerStatus()
                            self.esd_policer_status.parent = self
                            self._children_name_map["esd_policer_status"] = "esd-policer-status"

                            self.sdr_id = YList(self)
                            self._segment_path = lambda: "location" + "[rack='" + str(self.rack) + "']" + "[card='" + str(self.card) + "']" + "[switch-id='" + str(self.switch_id) + "']"
                            self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/sdr/policers/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Switch.Oper.Sdr.Policers.Location, ['rack', 'card', 'switch_id'], name, value)


                        class EsdPolicerStatus(Entity):
                            """
                            
                            
                            .. attribute:: indent_group
                            
                            	
                            	**type**\:  :py:class:`IndentGroup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sdr.Policers.Location.EsdPolicerStatus.IndentGroup>`
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Switch.Oper.Sdr.Policers.Location.EsdPolicerStatus, self).__init__()

                                self.yang_name = "esd-policer-status"
                                self.yang_parent_name = "location"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("indent-group", ("indent_group", Controller.Switch.Oper.Sdr.Policers.Location.EsdPolicerStatus.IndentGroup))])
                                self._leafs = OrderedDict()

                                self.indent_group = Controller.Switch.Oper.Sdr.Policers.Location.EsdPolicerStatus.IndentGroup()
                                self.indent_group.parent = self
                                self._children_name_map["indent_group"] = "indent-group"
                                self._segment_path = lambda: "esd-policer-status"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Switch.Oper.Sdr.Policers.Location.EsdPolicerStatus, [], name, value)


                            class IndentGroup(Entity):
                                """
                                
                                
                                .. attribute:: esd_port_policing_enabled
                                
                                	
                                	**type**\:  :py:class:`EsdmaSwitchYesNoEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaSwitchYesNoEnum>`
                                
                                .. attribute:: esd_port_committed_burst_size
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: esd_port_peak_burst_size
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: esd_port_policer_mru
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: esd_global_policing_enabled
                                
                                	
                                	**type**\:  :py:class:`EsdmaSwitchYesNoEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaSwitchYesNoEnum>`
                                
                                .. attribute:: esd_global_committed_burst_size
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: esd_global_peak_burst_size
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: esd_global_policer_mru
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.Switch.Oper.Sdr.Policers.Location.EsdPolicerStatus.IndentGroup, self).__init__()

                                    self.yang_name = "indent-group"
                                    self.yang_parent_name = "esd-policer-status"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('esd_port_policing_enabled', YLeaf(YType.enumeration, 'esd-port-policing-enabled')),
                                        ('esd_port_committed_burst_size', YLeaf(YType.uint32, 'esd-port-committed-burst-size')),
                                        ('esd_port_peak_burst_size', YLeaf(YType.uint32, 'esd-port-peak-burst-size')),
                                        ('esd_port_policer_mru', YLeaf(YType.uint32, 'esd-port-policer-mru')),
                                        ('esd_global_policing_enabled', YLeaf(YType.enumeration, 'esd-global-policing-enabled')),
                                        ('esd_global_committed_burst_size', YLeaf(YType.uint32, 'esd-global-committed-burst-size')),
                                        ('esd_global_peak_burst_size', YLeaf(YType.uint32, 'esd-global-peak-burst-size')),
                                        ('esd_global_policer_mru', YLeaf(YType.uint32, 'esd-global-policer-mru')),
                                    ])
                                    self.esd_port_policing_enabled = None
                                    self.esd_port_committed_burst_size = None
                                    self.esd_port_peak_burst_size = None
                                    self.esd_port_policer_mru = None
                                    self.esd_global_policing_enabled = None
                                    self.esd_global_committed_burst_size = None
                                    self.esd_global_peak_burst_size = None
                                    self.esd_global_policer_mru = None
                                    self._segment_path = lambda: "indent-group"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.Switch.Oper.Sdr.Policers.Location.EsdPolicerStatus.IndentGroup, ['esd_port_policing_enabled', 'esd_port_committed_burst_size', 'esd_port_peak_burst_size', 'esd_port_policer_mru', 'esd_global_policing_enabled', 'esd_global_committed_burst_size', 'esd_global_peak_burst_size', 'esd_global_policer_mru'], name, value)


                        class SdrId(Entity):
                            """
                            
                            
                            .. attribute:: sdr  (key)
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            .. attribute:: esd_sdr_name
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: esd_sdr_cir
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..100
                            
                            .. attribute:: esd_sdr_pir
                            
                            	
                            	**type**\: int
                            
                            	**range:** 0..100
                            
                            .. attribute:: esd_sdr_cos_type_iter
                            
                            	
                            	**type**\: list of  		 :py:class:`EsdSdrCosTypeIter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sdr.Policers.Location.SdrId.EsdSdrCosTypeIter>`
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Switch.Oper.Sdr.Policers.Location.SdrId, self).__init__()

                                self.yang_name = "sdr-id"
                                self.yang_parent_name = "location"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['sdr']
                                self._child_classes = OrderedDict([("esd-sdr-cos-type-iter", ("esd_sdr_cos_type_iter", Controller.Switch.Oper.Sdr.Policers.Location.SdrId.EsdSdrCosTypeIter))])
                                self._leafs = OrderedDict([
                                    ('sdr', YLeaf(YType.uint8, 'sdr')),
                                    ('esd_sdr_name', YLeaf(YType.str, 'esd-sdr-name')),
                                    ('esd_sdr_cir', YLeaf(YType.uint8, 'esd-sdr-cir')),
                                    ('esd_sdr_pir', YLeaf(YType.uint8, 'esd-sdr-pir')),
                                ])
                                self.sdr = None
                                self.esd_sdr_name = None
                                self.esd_sdr_cir = None
                                self.esd_sdr_pir = None

                                self.esd_sdr_cos_type_iter = YList(self)
                                self._segment_path = lambda: "sdr-id" + "[sdr='" + str(self.sdr) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Switch.Oper.Sdr.Policers.Location.SdrId, ['sdr', 'esd_sdr_name', 'esd_sdr_cir', 'esd_sdr_pir'], name, value)


                            class EsdSdrCosTypeIter(Entity):
                                """
                                
                                
                                .. attribute:: esd_sdr_cos_type  (key)
                                
                                	
                                	**type**\:  :py:class:`EsdCirEirType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdCirEirType>`
                                
                                .. attribute:: esd_sdr_cos_0
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..100
                                
                                .. attribute:: esd_sdr_cos_1
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..100
                                
                                .. attribute:: esd_sdr_cos_2
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..100
                                
                                .. attribute:: esd_sdr_cos_3
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..100
                                
                                .. attribute:: esd_sdr_cos_4
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..100
                                
                                .. attribute:: esd_sdr_cos_5
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..100
                                
                                .. attribute:: esd_sdr_cos_6
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..100
                                
                                .. attribute:: esd_sdr_cos_7
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..100
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.Switch.Oper.Sdr.Policers.Location.SdrId.EsdSdrCosTypeIter, self).__init__()

                                    self.yang_name = "esd-sdr-cos-type-iter"
                                    self.yang_parent_name = "sdr-id"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['esd_sdr_cos_type']
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('esd_sdr_cos_type', YLeaf(YType.enumeration, 'esd-sdr-cos-type')),
                                        ('esd_sdr_cos_0', YLeaf(YType.uint8, 'esd-sdr-cos-0')),
                                        ('esd_sdr_cos_1', YLeaf(YType.uint8, 'esd-sdr-cos-1')),
                                        ('esd_sdr_cos_2', YLeaf(YType.uint8, 'esd-sdr-cos-2')),
                                        ('esd_sdr_cos_3', YLeaf(YType.uint8, 'esd-sdr-cos-3')),
                                        ('esd_sdr_cos_4', YLeaf(YType.uint8, 'esd-sdr-cos-4')),
                                        ('esd_sdr_cos_5', YLeaf(YType.uint8, 'esd-sdr-cos-5')),
                                        ('esd_sdr_cos_6', YLeaf(YType.uint8, 'esd-sdr-cos-6')),
                                        ('esd_sdr_cos_7', YLeaf(YType.uint8, 'esd-sdr-cos-7')),
                                    ])
                                    self.esd_sdr_cos_type = None
                                    self.esd_sdr_cos_0 = None
                                    self.esd_sdr_cos_1 = None
                                    self.esd_sdr_cos_2 = None
                                    self.esd_sdr_cos_3 = None
                                    self.esd_sdr_cos_4 = None
                                    self.esd_sdr_cos_5 = None
                                    self.esd_sdr_cos_6 = None
                                    self.esd_sdr_cos_7 = None
                                    self._segment_path = lambda: "esd-sdr-cos-type-iter" + "[esd-sdr-cos-type='" + str(self.esd_sdr_cos_type) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.Switch.Oper.Sdr.Policers.Location.SdrId.EsdSdrCosTypeIter, ['esd_sdr_cos_type', 'esd_sdr_cos_0', 'esd_sdr_cos_1', 'esd_sdr_cos_2', 'esd_sdr_cos_3', 'esd_sdr_cos_4', 'esd_sdr_cos_5', 'esd_sdr_cos_6', 'esd_sdr_cos_7'], name, value)


                class SdrDetail(Entity):
                    """
                    
                    
                    .. attribute:: sdr_id
                    
                    	
                    	**type**\: list of  		 :py:class:`SdrId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sdr.SdrDetail.SdrId>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.Switch.Oper.Sdr.SdrDetail, self).__init__()

                        self.yang_name = "sdr-detail"
                        self.yang_parent_name = "sdr"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("sdr-id", ("sdr_id", Controller.Switch.Oper.Sdr.SdrDetail.SdrId))])
                        self._leafs = OrderedDict()

                        self.sdr_id = YList(self)
                        self._segment_path = lambda: "sdr-detail"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/sdr/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.Switch.Oper.Sdr.SdrDetail, [], name, value)


                    class SdrId(Entity):
                        """
                        
                        
                        .. attribute:: sdr  (key)
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: port_statistics
                        
                        	
                        	**type**\:  :py:class:`PortStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sdr.SdrDetail.SdrId.PortStatistics>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Switch.Oper.Sdr.SdrDetail.SdrId, self).__init__()

                            self.yang_name = "sdr-id"
                            self.yang_parent_name = "sdr-detail"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = ['sdr']
                            self._child_classes = OrderedDict([("port-statistics", ("port_statistics", Controller.Switch.Oper.Sdr.SdrDetail.SdrId.PortStatistics))])
                            self._leafs = OrderedDict([
                                ('sdr', YLeaf(YType.uint8, 'sdr')),
                            ])
                            self.sdr = None

                            self.port_statistics = Controller.Switch.Oper.Sdr.SdrDetail.SdrId.PortStatistics()
                            self.port_statistics.parent = self
                            self._children_name_map["port_statistics"] = "port-statistics"
                            self._segment_path = lambda: "sdr-id" + "[sdr='" + str(self.sdr) + "']"
                            self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/sdr/sdr-detail/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Switch.Oper.Sdr.SdrDetail.SdrId, ['sdr'], name, value)


                        class PortStatistics(Entity):
                            """
                            
                            
                            .. attribute:: location
                            
                            	
                            	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sdr.SdrDetail.SdrId.PortStatistics.Location>`
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Switch.Oper.Sdr.SdrDetail.SdrId.PortStatistics, self).__init__()

                                self.yang_name = "port-statistics"
                                self.yang_parent_name = "sdr-id"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("location", ("location", Controller.Switch.Oper.Sdr.SdrDetail.SdrId.PortStatistics.Location))])
                                self._leafs = OrderedDict()

                                self.location = YList(self)
                                self._segment_path = lambda: "port-statistics"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Switch.Oper.Sdr.SdrDetail.SdrId.PortStatistics, [], name, value)


                            class Location(Entity):
                                """
                                
                                
                                .. attribute:: rack  (key)
                                
                                	
                                	**type**\:  :py:class:`EsdmaRackNumEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaRackNumEnum>`
                                
                                .. attribute:: card  (key)
                                
                                	Card that owns a switch of interest
                                	**type**\:  :py:class:`EsdmaCpu <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaCpu>`
                                
                                .. attribute:: switch_id  (key)
                                
                                	Switch type
                                	**type**\:  :py:class:`EsdmaSwitchTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaSwitchTypeEnum>`
                                
                                .. attribute:: port_iter
                                
                                	
                                	**type**\: list of  		 :py:class:`PortIter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sdr.SdrDetail.SdrId.PortStatistics.Location.PortIter>`
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.Switch.Oper.Sdr.SdrDetail.SdrId.PortStatistics.Location, self).__init__()

                                    self.yang_name = "location"
                                    self.yang_parent_name = "port-statistics"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['rack','card','switch_id']
                                    self._child_classes = OrderedDict([("port-iter", ("port_iter", Controller.Switch.Oper.Sdr.SdrDetail.SdrId.PortStatistics.Location.PortIter))])
                                    self._leafs = OrderedDict([
                                        ('rack', YLeaf(YType.enumeration, 'rack')),
                                        ('card', YLeaf(YType.enumeration, 'card')),
                                        ('switch_id', YLeaf(YType.enumeration, 'switch-id')),
                                    ])
                                    self.rack = None
                                    self.card = None
                                    self.switch_id = None

                                    self.port_iter = YList(self)
                                    self._segment_path = lambda: "location" + "[rack='" + str(self.rack) + "']" + "[card='" + str(self.card) + "']" + "[switch-id='" + str(self.switch_id) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.Switch.Oper.Sdr.SdrDetail.SdrId.PortStatistics.Location, ['rack', 'card', 'switch_id'], name, value)


                                class PortIter(Entity):
                                    """
                                    
                                    
                                    .. attribute:: port  (key)
                                    
                                    	Switch port
                                    	**type**\: int
                                    
                                    	**range:** 0..127
                                    
                                    .. attribute:: traffic_type_id
                                    
                                    	
                                    	**type**\: list of  		 :py:class:`TrafficTypeId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sdr.SdrDetail.SdrId.PortStatistics.Location.PortIter.TrafficTypeId>`
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.Switch.Oper.Sdr.SdrDetail.SdrId.PortStatistics.Location.PortIter, self).__init__()

                                        self.yang_name = "port-iter"
                                        self.yang_parent_name = "location"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['port']
                                        self._child_classes = OrderedDict([("traffic-type-id", ("traffic_type_id", Controller.Switch.Oper.Sdr.SdrDetail.SdrId.PortStatistics.Location.PortIter.TrafficTypeId))])
                                        self._leafs = OrderedDict([
                                            ('port', YLeaf(YType.int32, 'port')),
                                        ])
                                        self.port = None

                                        self.traffic_type_id = YList(self)
                                        self._segment_path = lambda: "port-iter" + "[port='" + str(self.port) + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.Switch.Oper.Sdr.SdrDetail.SdrId.PortStatistics.Location.PortIter, ['port'], name, value)


                                    class TrafficTypeId(Entity):
                                        """
                                        
                                        
                                        .. attribute:: traffic_type  (key)
                                        
                                        	
                                        	**type**\:  :py:class:`EsdmaSdrTrafficType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaSdrTrafficType>`
                                        
                                        .. attribute:: direction_id
                                        
                                        	
                                        	**type**\: list of  		 :py:class:`DirectionId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sdr.SdrDetail.SdrId.PortStatistics.Location.PortIter.TrafficTypeId.DirectionId>`
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Switch.Oper.Sdr.SdrDetail.SdrId.PortStatistics.Location.PortIter.TrafficTypeId, self).__init__()

                                            self.yang_name = "traffic-type-id"
                                            self.yang_parent_name = "port-iter"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['traffic_type']
                                            self._child_classes = OrderedDict([("direction-id", ("direction_id", Controller.Switch.Oper.Sdr.SdrDetail.SdrId.PortStatistics.Location.PortIter.TrafficTypeId.DirectionId))])
                                            self._leafs = OrderedDict([
                                                ('traffic_type', YLeaf(YType.enumeration, 'traffic-type')),
                                            ])
                                            self.traffic_type = None

                                            self.direction_id = YList(self)
                                            self._segment_path = lambda: "traffic-type-id" + "[traffic-type='" + str(self.traffic_type) + "']"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Switch.Oper.Sdr.SdrDetail.SdrId.PortStatistics.Location.PortIter.TrafficTypeId, ['traffic_type'], name, value)


                                        class DirectionId(Entity):
                                            """
                                            
                                            
                                            .. attribute:: direction  (key)
                                            
                                            	Packet direction this rule applies to
                                            	**type**\:  :py:class:`SwitchDataDirectionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.SwitchDataDirectionEnum>`
                                            
                                            .. attribute:: traffic_class_id
                                            
                                            	
                                            	**type**\: list of  		 :py:class:`TrafficClassId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sdr.SdrDetail.SdrId.PortStatistics.Location.PortIter.TrafficTypeId.DirectionId.TrafficClassId>`
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.Switch.Oper.Sdr.SdrDetail.SdrId.PortStatistics.Location.PortIter.TrafficTypeId.DirectionId, self).__init__()

                                                self.yang_name = "direction-id"
                                                self.yang_parent_name = "traffic-type-id"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['direction']
                                                self._child_classes = OrderedDict([("traffic-class-id", ("traffic_class_id", Controller.Switch.Oper.Sdr.SdrDetail.SdrId.PortStatistics.Location.PortIter.TrafficTypeId.DirectionId.TrafficClassId))])
                                                self._leafs = OrderedDict([
                                                    ('direction', YLeaf(YType.enumeration, 'direction')),
                                                ])
                                                self.direction = None

                                                self.traffic_class_id = YList(self)
                                                self._segment_path = lambda: "direction-id" + "[direction='" + str(self.direction) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.Switch.Oper.Sdr.SdrDetail.SdrId.PortStatistics.Location.PortIter.TrafficTypeId.DirectionId, ['direction'], name, value)


                                            class TrafficClassId(Entity):
                                                """
                                                
                                                
                                                .. attribute:: tc  (key)
                                                
                                                	Traffic class (0\->7) for these statistics
                                                	**type**\: int
                                                
                                                	**range:** \-1..7
                                                
                                                .. attribute:: green_packets
                                                
                                                	Counts packets within the committed information rate for a traffic class on this VLAN
                                                	**type**\: int
                                                
                                                	**range:** 0..18446744073709551615
                                                
                                                .. attribute:: yellow_packets
                                                
                                                	Counts packets above the committed information rate, but within the excess information rate for a traffic class on this VLAN
                                                	**type**\: int
                                                
                                                	**range:** 0..18446744073709551615
                                                
                                                .. attribute:: red_packets
                                                
                                                	Counts packets above the excess information rate for a traffic class on this VLAN. Generally, these packets are dropped
                                                	**type**\: int
                                                
                                                	**range:** 0..18446744073709551615
                                                
                                                

                                                """

                                                _prefix = 'calvados_controllers'
                                                _revision = '2017-01-31'

                                                def __init__(self):
                                                    super(Controller.Switch.Oper.Sdr.SdrDetail.SdrId.PortStatistics.Location.PortIter.TrafficTypeId.DirectionId.TrafficClassId, self).__init__()

                                                    self.yang_name = "traffic-class-id"
                                                    self.yang_parent_name = "direction-id"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['tc']
                                                    self._child_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('tc', YLeaf(YType.int8, 'tc')),
                                                        ('green_packets', YLeaf(YType.uint64, 'green-packets')),
                                                        ('yellow_packets', YLeaf(YType.uint64, 'yellow-packets')),
                                                        ('red_packets', YLeaf(YType.uint64, 'red-packets')),
                                                    ])
                                                    self.tc = None
                                                    self.green_packets = None
                                                    self.yellow_packets = None
                                                    self.red_packets = None
                                                    self._segment_path = lambda: "traffic-class-id" + "[tc='" + str(self.tc) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Controller.Switch.Oper.Sdr.SdrDetail.SdrId.PortStatistics.Location.PortIter.TrafficTypeId.DirectionId.TrafficClassId, ['tc', 'green_packets', 'yellow_packets', 'red_packets'], name, value)


            class Sfp(Entity):
                """
                
                
                .. attribute:: summary
                
                	
                	**type**\:  :py:class:`Summary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sfp.Summary>`
                
                .. attribute:: detail
                
                	
                	**type**\:  :py:class:`Detail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sfp.Detail>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Controller.Switch.Oper.Sfp, self).__init__()

                    self.yang_name = "sfp"
                    self.yang_parent_name = "oper"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("summary", ("summary", Controller.Switch.Oper.Sfp.Summary)), ("detail", ("detail", Controller.Switch.Oper.Sfp.Detail))])
                    self._leafs = OrderedDict()

                    self.summary = Controller.Switch.Oper.Sfp.Summary()
                    self.summary.parent = self
                    self._children_name_map["summary"] = "summary"

                    self.detail = Controller.Switch.Oper.Sfp.Detail()
                    self.detail.parent = self
                    self._children_name_map["detail"] = "detail"
                    self._segment_path = lambda: "sfp"
                    self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Controller.Switch.Oper.Sfp, [], name, value)


                class Summary(Entity):
                    """
                    
                    
                    .. attribute:: location
                    
                    	
                    	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sfp.Summary.Location>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.Switch.Oper.Sfp.Summary, self).__init__()

                        self.yang_name = "summary"
                        self.yang_parent_name = "sfp"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("location", ("location", Controller.Switch.Oper.Sfp.Summary.Location))])
                        self._leafs = OrderedDict()

                        self.location = YList(self)
                        self._segment_path = lambda: "summary"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/sfp/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.Switch.Oper.Sfp.Summary, [], name, value)


                    class Location(Entity):
                        """
                        
                        
                        .. attribute:: rack  (key)
                        
                        	
                        	**type**\:  :py:class:`EsdmaRackNumEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaRackNumEnum>`
                        
                        .. attribute:: card  (key)
                        
                        	Card that owns a switch of interest
                        	**type**\:  :py:class:`EsdmaCpu <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaCpu>`
                        
                        .. attribute:: switch_id  (key)
                        
                        	Switch type
                        	**type**\:  :py:class:`EsdmaSwitchTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaSwitchTypeEnum>`
                        
                        .. attribute:: sfp_port_iter
                        
                        	
                        	**type**\: list of  		 :py:class:`SfpPortIter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sfp.Summary.Location.SfpPortIter>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Switch.Oper.Sfp.Summary.Location, self).__init__()

                            self.yang_name = "location"
                            self.yang_parent_name = "summary"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = ['rack','card','switch_id']
                            self._child_classes = OrderedDict([("sfp-port-iter", ("sfp_port_iter", Controller.Switch.Oper.Sfp.Summary.Location.SfpPortIter))])
                            self._leafs = OrderedDict([
                                ('rack', YLeaf(YType.enumeration, 'rack')),
                                ('card', YLeaf(YType.enumeration, 'card')),
                                ('switch_id', YLeaf(YType.enumeration, 'switch-id')),
                            ])
                            self.rack = None
                            self.card = None
                            self.switch_id = None

                            self.sfp_port_iter = YList(self)
                            self._segment_path = lambda: "location" + "[rack='" + str(self.rack) + "']" + "[card='" + str(self.card) + "']" + "[switch-id='" + str(self.switch_id) + "']"
                            self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/sfp/summary/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Switch.Oper.Sfp.Summary.Location, [u'rack', u'card', u'switch_id'], name, value)


                        class SfpPortIter(Entity):
                            """
                            
                            
                            .. attribute:: sfp_port  (key)
                            
                            	Switch port
                            	**type**\: int
                            
                            	**range:** 0..127
                            
                            .. attribute:: sfp_inserted
                            
                            	
                            	**type**\:  :py:class:`EsdmaSwitchSfpInsertedEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaSwitchSfpInsertedEnum>`
                            
                            .. attribute:: sfp_controller
                            
                            	
                            	**type**\:  :py:class:`EsdmaSwitchSfpControllerEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaSwitchSfpControllerEnum>`
                            
                            .. attribute:: sfp_type
                            
                            	
                            	**type**\:  :py:class:`EsdmaSwitchSfpTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaSwitchSfpTypeEnum>`
                            
                            .. attribute:: connects_to
                            
                            	Indicates what this port connects to
                            	**type**\: str
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Switch.Oper.Sfp.Summary.Location.SfpPortIter, self).__init__()

                                self.yang_name = "sfp-port-iter"
                                self.yang_parent_name = "location"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['sfp_port']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('sfp_port', YLeaf(YType.int32, 'sfp-port')),
                                    ('sfp_inserted', YLeaf(YType.enumeration, 'sfp-inserted')),
                                    ('sfp_controller', YLeaf(YType.enumeration, 'sfp-controller')),
                                    ('sfp_type', YLeaf(YType.enumeration, 'sfp-type')),
                                    ('connects_to', YLeaf(YType.str, 'connects-to')),
                                ])
                                self.sfp_port = None
                                self.sfp_inserted = None
                                self.sfp_controller = None
                                self.sfp_type = None
                                self.connects_to = None
                                self._segment_path = lambda: "sfp-port-iter" + "[sfp-port='" + str(self.sfp_port) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Switch.Oper.Sfp.Summary.Location.SfpPortIter, [u'sfp_port', u'sfp_inserted', u'sfp_controller', u'sfp_type', u'connects_to'], name, value)


                class Detail(Entity):
                    """
                    
                    
                    .. attribute:: location
                    
                    	
                    	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sfp.Detail.Location>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.Switch.Oper.Sfp.Detail, self).__init__()

                        self.yang_name = "detail"
                        self.yang_parent_name = "sfp"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("location", ("location", Controller.Switch.Oper.Sfp.Detail.Location))])
                        self._leafs = OrderedDict()

                        self.location = YList(self)
                        self._segment_path = lambda: "detail"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/sfp/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.Switch.Oper.Sfp.Detail, [], name, value)


                    class Location(Entity):
                        """
                        
                        
                        .. attribute:: rack  (key)
                        
                        	
                        	**type**\:  :py:class:`EsdmaRackNumEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaRackNumEnum>`
                        
                        .. attribute:: card  (key)
                        
                        	
                        	**type**\:  :py:class:`EsdmaCpu <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaCpu>`
                        
                        .. attribute:: switch_id  (key)
                        
                        	
                        	**type**\:  :py:class:`EsdmaSwitchTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaSwitchTypeEnum>`
                        
                        .. attribute:: sfp_port_iter
                        
                        	
                        	**type**\: list of  		 :py:class:`SfpPortIter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Switch.Oper.Sfp.Detail.Location, self).__init__()

                            self.yang_name = "location"
                            self.yang_parent_name = "detail"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = ['rack','card','switch_id']
                            self._child_classes = OrderedDict([("sfp-port-iter", ("sfp_port_iter", Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter))])
                            self._leafs = OrderedDict([
                                ('rack', YLeaf(YType.enumeration, 'rack')),
                                ('card', YLeaf(YType.enumeration, 'card')),
                                ('switch_id', YLeaf(YType.enumeration, 'switch-id')),
                            ])
                            self.rack = None
                            self.card = None
                            self.switch_id = None

                            self.sfp_port_iter = YList(self)
                            self._segment_path = lambda: "location" + "[rack='" + str(self.rack) + "']" + "[card='" + str(self.card) + "']" + "[switch-id='" + str(self.switch_id) + "']"
                            self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/sfp/detail/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Switch.Oper.Sfp.Detail.Location, [u'rack', u'card', u'switch_id'], name, value)


                        class SfpPortIter(Entity):
                            """
                            
                            
                            .. attribute:: sfp_port  (key)
                            
                            	Switch port
                            	**type**\: int
                            
                            	**range:** 0..127
                            
                            .. attribute:: sfp_inserted
                            
                            	
                            	**type**\:  :py:class:`EsdmaSwitchSfpInsertedEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaSwitchSfpInsertedEnum>`
                            
                            .. attribute:: sfp_type
                            
                            	
                            	**type**\:  :py:class:`EsdmaSwitchSfpTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaSwitchSfpTypeEnum>`
                            
                            .. attribute:: sfp_details
                            
                            	
                            	**type**\:  :py:class:`SfpDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails>`
                            
                            .. attribute:: qsfp_details
                            
                            	
                            	**type**\:  :py:class:`QsfpDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails>`
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter, self).__init__()

                                self.yang_name = "sfp-port-iter"
                                self.yang_parent_name = "location"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['sfp_port']
                                self._child_classes = OrderedDict([("sfp-details", ("sfp_details", Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails)), ("qsfp-details", ("qsfp_details", Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails))])
                                self._leafs = OrderedDict([
                                    ('sfp_port', YLeaf(YType.int32, 'sfp-port')),
                                    ('sfp_inserted', YLeaf(YType.enumeration, 'sfp-inserted')),
                                    ('sfp_type', YLeaf(YType.enumeration, 'sfp-type')),
                                ])
                                self.sfp_port = None
                                self.sfp_inserted = None
                                self.sfp_type = None

                                self.sfp_details = Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails()
                                self.sfp_details.parent = self
                                self._children_name_map["sfp_details"] = "sfp-details"

                                self.qsfp_details = Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails()
                                self.qsfp_details.parent = self
                                self._children_name_map["qsfp_details"] = "qsfp-details"
                                self._segment_path = lambda: "sfp-port-iter" + "[sfp-port='" + str(self.sfp_port) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter, [u'sfp_port', u'sfp_inserted', u'sfp_type'], name, value)


                            class SfpDetails(Entity):
                                """
                                
                                
                                .. attribute:: sfp_port_detail
                                
                                	
                                	**type**\:  :py:class:`SfpPortDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpPortDetail>`
                                
                                .. attribute:: sfp_msa_data
                                
                                	
                                	**type**\:  :py:class:`SfpMsaData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpMsaData>`
                                
                                .. attribute:: sfp_diag_analog_info
                                
                                	
                                	**type**\:  :py:class:`SfpDiagAnalogInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagAnalogInfo>`
                                
                                .. attribute:: sfp_diag_data1
                                
                                	
                                	**type**\:  :py:class:`SfpDiagData1 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagData1>`
                                
                                .. attribute:: sfp_diag_user_info
                                
                                	
                                	**type**\:  :py:class:`SfpDiagUserInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagUserInfo>`
                                
                                .. attribute:: sfp_diag_data2
                                
                                	
                                	**type**\:  :py:class:`SfpDiagData2 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagData2>`
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails, self).__init__()

                                    self.yang_name = "sfp-details"
                                    self.yang_parent_name = "sfp-port-iter"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([("sfp-port-detail", ("sfp_port_detail", Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpPortDetail)), ("sfp-msa-data", ("sfp_msa_data", Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpMsaData)), ("sfp-diag-analog-info", ("sfp_diag_analog_info", Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagAnalogInfo)), ("sfp-diag-data1", ("sfp_diag_data1", Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagData1)), ("sfp-diag-user-info", ("sfp_diag_user_info", Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagUserInfo)), ("sfp-diag-data2", ("sfp_diag_data2", Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagData2))])
                                    self._leafs = OrderedDict()

                                    self.sfp_port_detail = Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpPortDetail()
                                    self.sfp_port_detail.parent = self
                                    self._children_name_map["sfp_port_detail"] = "sfp-port-detail"

                                    self.sfp_msa_data = Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpMsaData()
                                    self.sfp_msa_data.parent = self
                                    self._children_name_map["sfp_msa_data"] = "sfp-msa-data"

                                    self.sfp_diag_analog_info = Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagAnalogInfo()
                                    self.sfp_diag_analog_info.parent = self
                                    self._children_name_map["sfp_diag_analog_info"] = "sfp-diag-analog-info"

                                    self.sfp_diag_data1 = Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagData1()
                                    self.sfp_diag_data1.parent = self
                                    self._children_name_map["sfp_diag_data1"] = "sfp-diag-data1"

                                    self.sfp_diag_user_info = Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagUserInfo()
                                    self.sfp_diag_user_info.parent = self
                                    self._children_name_map["sfp_diag_user_info"] = "sfp-diag-user-info"

                                    self.sfp_diag_data2 = Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagData2()
                                    self.sfp_diag_data2.parent = self
                                    self._children_name_map["sfp_diag_data2"] = "sfp-diag-data2"
                                    self._segment_path = lambda: "sfp-details"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails, [], name, value)


                                class SfpPortDetail(Entity):
                                    """
                                    
                                    
                                    .. attribute:: sfp_tranceiver_type
                                    
                                    	
                                    	**type**\:  :py:class:`EsdmaSwitchSfpTranceiverTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaSwitchSfpTranceiverTypeEnum>`
                                    
                                    .. attribute:: sfp_tranceiver_code
                                    
                                    	
                                    	**type**\:  :py:class:`EsdmaSwitchSfpTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaSwitchSfpTypeEnum>`
                                    
                                    .. attribute:: sfp_encoding
                                    
                                    	
                                    	**type**\:  :py:class:`EsdmaSfpEncodingEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaSfpEncodingEnum>`
                                    
                                    .. attribute:: sfp_bit_rate
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: sfp_link_reach_9u_fiber_km
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: sfp_link_reach_9u_fiber_m
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: sfp_link_reach_50u_fiber_m
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: sfp_link_reach_62_5u_fiber_m
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: sfp_link_reach_copper_m
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: sfp_vendor_name
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: sfp_vendor_oui
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: sfp_vendor_part_num
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: sfp_laser_wavelength
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: sfp_options
                                    
                                    	
                                    	**type**\:  :py:class:`SfpOptions <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpPortDetail.SfpOptions>`
                                    
                                    .. attribute:: sfp_vendor_serial_num
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: sfp_data_code
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: sfp_diag_monitoring
                                    
                                    	
                                    	**type**\:  :py:class:`SfpDiagMonitoring <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpPortDetail.SfpDiagMonitoring>`
                                    
                                    .. attribute:: sfp_enhanced_options
                                    
                                    	
                                    	**type**\:  :py:class:`SfpEnhancedOptions <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpPortDetail.SfpEnhancedOptions>`
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpPortDetail, self).__init__()

                                        self.yang_name = "sfp-port-detail"
                                        self.yang_parent_name = "sfp-details"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('sfp_tranceiver_type', YLeaf(YType.enumeration, 'sfp-tranceiver-type')),
                                            ('sfp_tranceiver_code', YLeaf(YType.enumeration, 'sfp-tranceiver-code')),
                                            ('sfp_encoding', YLeaf(YType.enumeration, 'sfp-encoding')),
                                            ('sfp_bit_rate', YLeaf(YType.uint32, 'sfp-bit-rate')),
                                            ('sfp_link_reach_9u_fiber_km', YLeaf(YType.uint32, 'sfp-link-reach-9u-fiber_KM')),
                                            ('sfp_link_reach_9u_fiber_m', YLeaf(YType.uint32, 'sfp-link-reach-9u-fiber_M')),
                                            ('sfp_link_reach_50u_fiber_m', YLeaf(YType.uint32, 'sfp-link-reach-50u-fiber_M')),
                                            ('sfp_link_reach_62_5u_fiber_m', YLeaf(YType.uint32, 'sfp-link-reach-62_5u-fiber_M')),
                                            ('sfp_link_reach_copper_m', YLeaf(YType.uint32, 'sfp-link-reach-copper_M')),
                                            ('sfp_vendor_name', YLeaf(YType.str, 'sfp-vendor-name')),
                                            ('sfp_vendor_oui', YLeaf(YType.str, 'sfp-vendor-oui')),
                                            ('sfp_vendor_part_num', YLeaf(YType.str, 'sfp-vendor-part-num')),
                                            ('sfp_laser_wavelength', YLeaf(YType.uint32, 'sfp-laser-wavelength')),
                                            ('sfp_options', YLeaf(YType.bits, 'sfp-options')),
                                            ('sfp_vendor_serial_num', YLeaf(YType.str, 'sfp-vendor-serial-num')),
                                            ('sfp_data_code', YLeaf(YType.str, 'sfp-data-code')),
                                            ('sfp_diag_monitoring', YLeaf(YType.bits, 'sfp-diag-monitoring')),
                                            ('sfp_enhanced_options', YLeaf(YType.bits, 'sfp-enhanced-options')),
                                        ])
                                        self.sfp_tranceiver_type = None
                                        self.sfp_tranceiver_code = None
                                        self.sfp_encoding = None
                                        self.sfp_bit_rate = None
                                        self.sfp_link_reach_9u_fiber_km = None
                                        self.sfp_link_reach_9u_fiber_m = None
                                        self.sfp_link_reach_50u_fiber_m = None
                                        self.sfp_link_reach_62_5u_fiber_m = None
                                        self.sfp_link_reach_copper_m = None
                                        self.sfp_vendor_name = None
                                        self.sfp_vendor_oui = None
                                        self.sfp_vendor_part_num = None
                                        self.sfp_laser_wavelength = None
                                        self.sfp_options = Bits()
                                        self.sfp_vendor_serial_num = None
                                        self.sfp_data_code = None
                                        self.sfp_diag_monitoring = Bits()
                                        self.sfp_enhanced_options = Bits()
                                        self._segment_path = lambda: "sfp-port-detail"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpPortDetail, [u'sfp_tranceiver_type', u'sfp_tranceiver_code', u'sfp_encoding', u'sfp_bit_rate', u'sfp_link_reach_9u_fiber_km', u'sfp_link_reach_9u_fiber_m', u'sfp_link_reach_50u_fiber_m', u'sfp_link_reach_62_5u_fiber_m', u'sfp_link_reach_copper_m', u'sfp_vendor_name', u'sfp_vendor_oui', u'sfp_vendor_part_num', u'sfp_laser_wavelength', u'sfp_options', u'sfp_vendor_serial_num', u'sfp_data_code', u'sfp_diag_monitoring', u'sfp_enhanced_options'], name, value)


                                class SfpMsaData(Entity):
                                    """
                                    
                                    
                                    .. attribute:: sfp_msa_0x00
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: sfp_msa_0x10
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: sfp_msa_0x20
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: sfp_msa_0x30
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: sfp_msa_0x40
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: sfp_msa_0x50
                                    
                                    	
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpMsaData, self).__init__()

                                        self.yang_name = "sfp-msa-data"
                                        self.yang_parent_name = "sfp-details"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('sfp_msa_0x00', YLeaf(YType.str, 'sfp-msa-0x00')),
                                            ('sfp_msa_0x10', YLeaf(YType.str, 'sfp-msa-0x10')),
                                            ('sfp_msa_0x20', YLeaf(YType.str, 'sfp-msa-0x20')),
                                            ('sfp_msa_0x30', YLeaf(YType.str, 'sfp-msa-0x30')),
                                            ('sfp_msa_0x40', YLeaf(YType.str, 'sfp-msa-0x40')),
                                            ('sfp_msa_0x50', YLeaf(YType.str, 'sfp-msa-0x50')),
                                        ])
                                        self.sfp_msa_0x00 = None
                                        self.sfp_msa_0x10 = None
                                        self.sfp_msa_0x20 = None
                                        self.sfp_msa_0x30 = None
                                        self.sfp_msa_0x40 = None
                                        self.sfp_msa_0x50 = None
                                        self._segment_path = lambda: "sfp-msa-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpMsaData, [u'sfp_msa_0x00', u'sfp_msa_0x10', u'sfp_msa_0x20', u'sfp_msa_0x30', u'sfp_msa_0x40', u'sfp_msa_0x50'], name, value)


                                class SfpDiagAnalogInfo(Entity):
                                    """
                                    
                                    
                                    .. attribute:: thresholds
                                    
                                    	
                                    	**type**\:  :py:class:`Thresholds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagAnalogInfo.Thresholds>`
                                    
                                    .. attribute:: real_time_data
                                    
                                    	
                                    	**type**\:  :py:class:`RealTimeData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagAnalogInfo.RealTimeData>`
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagAnalogInfo, self).__init__()

                                        self.yang_name = "sfp-diag-analog-info"
                                        self.yang_parent_name = "sfp-details"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("Thresholds", ("thresholds", Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagAnalogInfo.Thresholds)), ("Real-Time-Data", ("real_time_data", Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagAnalogInfo.RealTimeData))])
                                        self._leafs = OrderedDict()

                                        self.thresholds = Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagAnalogInfo.Thresholds()
                                        self.thresholds.parent = self
                                        self._children_name_map["thresholds"] = "Thresholds"

                                        self.real_time_data = Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagAnalogInfo.RealTimeData()
                                        self.real_time_data.parent = self
                                        self._children_name_map["real_time_data"] = "Real-Time-Data"
                                        self._segment_path = lambda: "sfp-diag-analog-info"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagAnalogInfo, [], name, value)


                                    class Thresholds(Entity):
                                        """
                                        
                                        
                                        .. attribute:: temperature
                                        
                                        	
                                        	**type**\:  :py:class:`Temperature <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagAnalogInfo.Thresholds.Temperature>`
                                        
                                        .. attribute:: voltage
                                        
                                        	
                                        	**type**\:  :py:class:`Voltage <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagAnalogInfo.Thresholds.Voltage>`
                                        
                                        .. attribute:: bias
                                        
                                        	
                                        	**type**\:  :py:class:`Bias <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagAnalogInfo.Thresholds.Bias>`
                                        
                                        .. attribute:: tx_power
                                        
                                        	
                                        	**type**\:  :py:class:`TxPower <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagAnalogInfo.Thresholds.TxPower>`
                                        
                                        .. attribute:: rx_power
                                        
                                        	
                                        	**type**\:  :py:class:`RxPower <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagAnalogInfo.Thresholds.RxPower>`
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagAnalogInfo.Thresholds, self).__init__()

                                            self.yang_name = "Thresholds"
                                            self.yang_parent_name = "sfp-diag-analog-info"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("Temperature", ("temperature", Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagAnalogInfo.Thresholds.Temperature)), ("Voltage", ("voltage", Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagAnalogInfo.Thresholds.Voltage)), ("Bias", ("bias", Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagAnalogInfo.Thresholds.Bias)), ("Tx-Power", ("tx_power", Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagAnalogInfo.Thresholds.TxPower)), ("Rx-Power", ("rx_power", Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagAnalogInfo.Thresholds.RxPower))])
                                            self._leafs = OrderedDict()

                                            self.temperature = Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagAnalogInfo.Thresholds.Temperature()
                                            self.temperature.parent = self
                                            self._children_name_map["temperature"] = "Temperature"

                                            self.voltage = Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagAnalogInfo.Thresholds.Voltage()
                                            self.voltage.parent = self
                                            self._children_name_map["voltage"] = "Voltage"

                                            self.bias = Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagAnalogInfo.Thresholds.Bias()
                                            self.bias.parent = self
                                            self._children_name_map["bias"] = "Bias"

                                            self.tx_power = Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagAnalogInfo.Thresholds.TxPower()
                                            self.tx_power.parent = self
                                            self._children_name_map["tx_power"] = "Tx-Power"

                                            self.rx_power = Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagAnalogInfo.Thresholds.RxPower()
                                            self.rx_power.parent = self
                                            self._children_name_map["rx_power"] = "Rx-Power"
                                            self._segment_path = lambda: "Thresholds"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagAnalogInfo.Thresholds, [], name, value)


                                        class Temperature(Entity):
                                            """
                                            
                                            
                                            .. attribute:: temp_alarm_high
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: temp_warning_high
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: temp_warning_low
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: temp_alarm_low
                                            
                                            	
                                            	**type**\: str
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagAnalogInfo.Thresholds.Temperature, self).__init__()

                                                self.yang_name = "Temperature"
                                                self.yang_parent_name = "Thresholds"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('temp_alarm_high', YLeaf(YType.str, 'temp-alarm-high')),
                                                    ('temp_warning_high', YLeaf(YType.str, 'temp-warning-high')),
                                                    ('temp_warning_low', YLeaf(YType.str, 'temp-warning-low')),
                                                    ('temp_alarm_low', YLeaf(YType.str, 'temp-alarm-low')),
                                                ])
                                                self.temp_alarm_high = None
                                                self.temp_warning_high = None
                                                self.temp_warning_low = None
                                                self.temp_alarm_low = None
                                                self._segment_path = lambda: "Temperature"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagAnalogInfo.Thresholds.Temperature, [u'temp_alarm_high', u'temp_warning_high', u'temp_warning_low', u'temp_alarm_low'], name, value)


                                        class Voltage(Entity):
                                            """
                                            
                                            
                                            .. attribute:: volt_alarm_high
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: volt_warning_high
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: volt_warning_low
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: volt_alarm_low
                                            
                                            	
                                            	**type**\: str
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagAnalogInfo.Thresholds.Voltage, self).__init__()

                                                self.yang_name = "Voltage"
                                                self.yang_parent_name = "Thresholds"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('volt_alarm_high', YLeaf(YType.str, 'volt-alarm-high')),
                                                    ('volt_warning_high', YLeaf(YType.str, 'volt-warning-high')),
                                                    ('volt_warning_low', YLeaf(YType.str, 'volt-warning-low')),
                                                    ('volt_alarm_low', YLeaf(YType.str, 'volt-alarm-low')),
                                                ])
                                                self.volt_alarm_high = None
                                                self.volt_warning_high = None
                                                self.volt_warning_low = None
                                                self.volt_alarm_low = None
                                                self._segment_path = lambda: "Voltage"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagAnalogInfo.Thresholds.Voltage, [u'volt_alarm_high', u'volt_warning_high', u'volt_warning_low', u'volt_alarm_low'], name, value)


                                        class Bias(Entity):
                                            """
                                            
                                            
                                            .. attribute:: bias_alarm_high
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: bias_warning_high
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: bias_warning_low
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: bias_alarm_low
                                            
                                            	
                                            	**type**\: str
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagAnalogInfo.Thresholds.Bias, self).__init__()

                                                self.yang_name = "Bias"
                                                self.yang_parent_name = "Thresholds"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('bias_alarm_high', YLeaf(YType.str, 'bias-alarm-high')),
                                                    ('bias_warning_high', YLeaf(YType.str, 'bias-warning-high')),
                                                    ('bias_warning_low', YLeaf(YType.str, 'bias-warning-low')),
                                                    ('bias_alarm_low', YLeaf(YType.str, 'bias-alarm-low')),
                                                ])
                                                self.bias_alarm_high = None
                                                self.bias_warning_high = None
                                                self.bias_warning_low = None
                                                self.bias_alarm_low = None
                                                self._segment_path = lambda: "Bias"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagAnalogInfo.Thresholds.Bias, [u'bias_alarm_high', u'bias_warning_high', u'bias_warning_low', u'bias_alarm_low'], name, value)


                                        class TxPower(Entity):
                                            """
                                            
                                            
                                            .. attribute:: tx_power_alarm_high
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: tx_power_warning_high
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: tx_power_warning_low
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: tx_power_alarm_low
                                            
                                            	
                                            	**type**\: str
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagAnalogInfo.Thresholds.TxPower, self).__init__()

                                                self.yang_name = "Tx-Power"
                                                self.yang_parent_name = "Thresholds"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('tx_power_alarm_high', YLeaf(YType.str, 'tx-power-alarm-high')),
                                                    ('tx_power_warning_high', YLeaf(YType.str, 'tx-power-warning-high')),
                                                    ('tx_power_warning_low', YLeaf(YType.str, 'tx-power-warning-low')),
                                                    ('tx_power_alarm_low', YLeaf(YType.str, 'tx-power-alarm-low')),
                                                ])
                                                self.tx_power_alarm_high = None
                                                self.tx_power_warning_high = None
                                                self.tx_power_warning_low = None
                                                self.tx_power_alarm_low = None
                                                self._segment_path = lambda: "Tx-Power"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagAnalogInfo.Thresholds.TxPower, [u'tx_power_alarm_high', u'tx_power_warning_high', u'tx_power_warning_low', u'tx_power_alarm_low'], name, value)


                                        class RxPower(Entity):
                                            """
                                            
                                            
                                            .. attribute:: rx_power_alarm_high
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: rx_power_warning_high
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: rx_power_warning_low
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: rx_power_alarm_low
                                            
                                            	
                                            	**type**\: str
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagAnalogInfo.Thresholds.RxPower, self).__init__()

                                                self.yang_name = "Rx-Power"
                                                self.yang_parent_name = "Thresholds"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('rx_power_alarm_high', YLeaf(YType.str, 'rx-power-alarm-high')),
                                                    ('rx_power_warning_high', YLeaf(YType.str, 'rx-power-warning-high')),
                                                    ('rx_power_warning_low', YLeaf(YType.str, 'rx-power-warning-low')),
                                                    ('rx_power_alarm_low', YLeaf(YType.str, 'rx-power-alarm-low')),
                                                ])
                                                self.rx_power_alarm_high = None
                                                self.rx_power_warning_high = None
                                                self.rx_power_warning_low = None
                                                self.rx_power_alarm_low = None
                                                self._segment_path = lambda: "Rx-Power"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagAnalogInfo.Thresholds.RxPower, [u'rx_power_alarm_high', u'rx_power_warning_high', u'rx_power_warning_low', u'rx_power_alarm_low'], name, value)


                                    class RealTimeData(Entity):
                                        """
                                        
                                        
                                        .. attribute:: current
                                        
                                        	
                                        	**type**\:  :py:class:`Current <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagAnalogInfo.RealTimeData.Current>`
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagAnalogInfo.RealTimeData, self).__init__()

                                            self.yang_name = "Real-Time-Data"
                                            self.yang_parent_name = "sfp-diag-analog-info"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("Current", ("current", Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagAnalogInfo.RealTimeData.Current))])
                                            self._leafs = OrderedDict()

                                            self.current = Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagAnalogInfo.RealTimeData.Current()
                                            self.current.parent = self
                                            self._children_name_map["current"] = "Current"
                                            self._segment_path = lambda: "Real-Time-Data"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagAnalogInfo.RealTimeData, [], name, value)


                                        class Current(Entity):
                                            """
                                            
                                            
                                            .. attribute:: cur_temperature
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: cur_voltage
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: cur_bias
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: cur_tx_power
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: cur_rx_power
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: optional_status_control
                                            
                                            	
                                            	**type**\:  :py:class:`OptionalStatusControl <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagAnalogInfo.RealTimeData.Current.OptionalStatusControl>`
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagAnalogInfo.RealTimeData.Current, self).__init__()

                                                self.yang_name = "Current"
                                                self.yang_parent_name = "Real-Time-Data"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('cur_temperature', YLeaf(YType.str, 'cur-temperature')),
                                                    ('cur_voltage', YLeaf(YType.str, 'cur-voltage')),
                                                    ('cur_bias', YLeaf(YType.str, 'cur-bias')),
                                                    ('cur_tx_power', YLeaf(YType.str, 'cur-tx-power')),
                                                    ('cur_rx_power', YLeaf(YType.str, 'cur-rx-power')),
                                                    ('optional_status_control', YLeaf(YType.bits, 'optional-status-control')),
                                                ])
                                                self.cur_temperature = None
                                                self.cur_voltage = None
                                                self.cur_bias = None
                                                self.cur_tx_power = None
                                                self.cur_rx_power = None
                                                self.optional_status_control = Bits()
                                                self._segment_path = lambda: "Current"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagAnalogInfo.RealTimeData.Current, [u'cur_temperature', u'cur_voltage', u'cur_bias', u'cur_tx_power', u'cur_rx_power', u'optional_status_control'], name, value)


                                class SfpDiagData1(Entity):
                                    """
                                    
                                    
                                    .. attribute:: optical_sfp_diag
                                    
                                    	
                                    	**type**\:  :py:class:`OpticalSfpDiag <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagData1.OpticalSfpDiag>`
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagData1, self).__init__()

                                        self.yang_name = "sfp-diag-data1"
                                        self.yang_parent_name = "sfp-details"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("optical-sfp-diag", ("optical_sfp_diag", Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagData1.OpticalSfpDiag))])
                                        self._leafs = OrderedDict()

                                        self.optical_sfp_diag = Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagData1.OpticalSfpDiag()
                                        self.optical_sfp_diag.parent = self
                                        self._children_name_map["optical_sfp_diag"] = "optical-sfp-diag"
                                        self._segment_path = lambda: "sfp-diag-data1"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagData1, [], name, value)


                                    class OpticalSfpDiag(Entity):
                                        """
                                        
                                        
                                        .. attribute:: sfp_diag_0x00
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: sfp_diag_0x10
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: sfp_diag_0x20
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: sfp_diag_0x30
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: sfp_diag_0x40
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: sfp_diag_0x50
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: sfp_diag_0x60
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: sfp_diag_0x70
                                        
                                        	
                                        	**type**\: str
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagData1.OpticalSfpDiag, self).__init__()

                                            self.yang_name = "optical-sfp-diag"
                                            self.yang_parent_name = "sfp-diag-data1"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('sfp_diag_0x00', YLeaf(YType.str, 'sfp-diag-0x00')),
                                                ('sfp_diag_0x10', YLeaf(YType.str, 'sfp-diag-0x10')),
                                                ('sfp_diag_0x20', YLeaf(YType.str, 'sfp-diag-0x20')),
                                                ('sfp_diag_0x30', YLeaf(YType.str, 'sfp-diag-0x30')),
                                                ('sfp_diag_0x40', YLeaf(YType.str, 'sfp-diag-0x40')),
                                                ('sfp_diag_0x50', YLeaf(YType.str, 'sfp-diag-0x50')),
                                                ('sfp_diag_0x60', YLeaf(YType.str, 'sfp-diag-0x60')),
                                                ('sfp_diag_0x70', YLeaf(YType.str, 'sfp-diag-0x70')),
                                            ])
                                            self.sfp_diag_0x00 = None
                                            self.sfp_diag_0x10 = None
                                            self.sfp_diag_0x20 = None
                                            self.sfp_diag_0x30 = None
                                            self.sfp_diag_0x40 = None
                                            self.sfp_diag_0x50 = None
                                            self.sfp_diag_0x60 = None
                                            self.sfp_diag_0x70 = None
                                            self._segment_path = lambda: "optical-sfp-diag"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagData1.OpticalSfpDiag, [u'sfp_diag_0x00', u'sfp_diag_0x10', u'sfp_diag_0x20', u'sfp_diag_0x30', u'sfp_diag_0x40', u'sfp_diag_0x50', u'sfp_diag_0x60', u'sfp_diag_0x70'], name, value)


                                class SfpDiagUserInfo(Entity):
                                    """
                                    
                                    
                                    .. attribute:: cisco_data
                                    
                                    	
                                    	**type**\:  :py:class:`CiscoData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagUserInfo.CiscoData>`
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagUserInfo, self).__init__()

                                        self.yang_name = "sfp-diag-user-info"
                                        self.yang_parent_name = "sfp-details"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("cisco-data", ("cisco_data", Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagUserInfo.CiscoData))])
                                        self._leafs = OrderedDict()

                                        self.cisco_data = Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagUserInfo.CiscoData()
                                        self.cisco_data.parent = self
                                        self._children_name_map["cisco_data"] = "cisco-data"
                                        self._segment_path = lambda: "sfp-diag-user-info"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagUserInfo, [], name, value)


                                    class CiscoData(Entity):
                                        """
                                        
                                        
                                        .. attribute:: cisco_clei_code
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: cisco_part_number
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: cisco_min_temperature
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** \-128..127
                                        
                                        .. attribute:: cisco_max_temperature
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** \-128..127
                                        
                                        .. attribute:: cisco_product_id
                                        
                                        	
                                        	**type**\: str
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagUserInfo.CiscoData, self).__init__()

                                            self.yang_name = "cisco-data"
                                            self.yang_parent_name = "sfp-diag-user-info"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('cisco_clei_code', YLeaf(YType.str, 'cisco-clei-code')),
                                                ('cisco_part_number', YLeaf(YType.str, 'cisco-part-number')),
                                                ('cisco_min_temperature', YLeaf(YType.int8, 'cisco-min-temperature')),
                                                ('cisco_max_temperature', YLeaf(YType.int8, 'cisco-max-temperature')),
                                                ('cisco_product_id', YLeaf(YType.str, 'cisco-product-id')),
                                            ])
                                            self.cisco_clei_code = None
                                            self.cisco_part_number = None
                                            self.cisco_min_temperature = None
                                            self.cisco_max_temperature = None
                                            self.cisco_product_id = None
                                            self._segment_path = lambda: "cisco-data"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagUserInfo.CiscoData, [u'cisco_clei_code', u'cisco_part_number', u'cisco_min_temperature', u'cisco_max_temperature', u'cisco_product_id'], name, value)


                                class SfpDiagData2(Entity):
                                    """
                                    
                                    
                                    .. attribute:: optical_sfp_diag
                                    
                                    	
                                    	**type**\:  :py:class:`OpticalSfpDiag <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagData2.OpticalSfpDiag>`
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagData2, self).__init__()

                                        self.yang_name = "sfp-diag-data2"
                                        self.yang_parent_name = "sfp-details"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("optical-sfp-diag", ("optical_sfp_diag", Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagData2.OpticalSfpDiag))])
                                        self._leafs = OrderedDict()

                                        self.optical_sfp_diag = Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagData2.OpticalSfpDiag()
                                        self.optical_sfp_diag.parent = self
                                        self._children_name_map["optical_sfp_diag"] = "optical-sfp-diag"
                                        self._segment_path = lambda: "sfp-diag-data2"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagData2, [], name, value)


                                    class OpticalSfpDiag(Entity):
                                        """
                                        
                                        
                                        .. attribute:: sfp_diag_0x80
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: sfp_diag_0x90
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: sfp_diag_0xa0
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: sfp_diag_0xb0
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: sfp_diag_0xc0
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: sfp_diag_0xd0
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: sfp_diag_0xe0
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: sfp_diag_0xf0
                                        
                                        	
                                        	**type**\: str
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagData2.OpticalSfpDiag, self).__init__()

                                            self.yang_name = "optical-sfp-diag"
                                            self.yang_parent_name = "sfp-diag-data2"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('sfp_diag_0x80', YLeaf(YType.str, 'sfp-diag-0x80')),
                                                ('sfp_diag_0x90', YLeaf(YType.str, 'sfp-diag-0x90')),
                                                ('sfp_diag_0xa0', YLeaf(YType.str, 'sfp-diag-0xA0')),
                                                ('sfp_diag_0xb0', YLeaf(YType.str, 'sfp-diag-0xB0')),
                                                ('sfp_diag_0xc0', YLeaf(YType.str, 'sfp-diag-0xC0')),
                                                ('sfp_diag_0xd0', YLeaf(YType.str, 'sfp-diag-0xD0')),
                                                ('sfp_diag_0xe0', YLeaf(YType.str, 'sfp-diag-0xE0')),
                                                ('sfp_diag_0xf0', YLeaf(YType.str, 'sfp-diag-0xF0')),
                                            ])
                                            self.sfp_diag_0x80 = None
                                            self.sfp_diag_0x90 = None
                                            self.sfp_diag_0xa0 = None
                                            self.sfp_diag_0xb0 = None
                                            self.sfp_diag_0xc0 = None
                                            self.sfp_diag_0xd0 = None
                                            self.sfp_diag_0xe0 = None
                                            self.sfp_diag_0xf0 = None
                                            self._segment_path = lambda: "optical-sfp-diag"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.SfpDetails.SfpDiagData2.OpticalSfpDiag, [u'sfp_diag_0x80', u'sfp_diag_0x90', u'sfp_diag_0xa0', u'sfp_diag_0xb0', u'sfp_diag_0xc0', u'sfp_diag_0xd0', u'sfp_diag_0xe0', u'sfp_diag_0xf0'], name, value)


                            class QsfpDetails(Entity):
                                """
                                
                                
                                .. attribute:: qsfp_page_a0_data
                                
                                	
                                	**type**\:  :py:class:`QsfpPageA0Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA0Data>`
                                
                                .. attribute:: qsfp_page_a0_0_data
                                
                                	
                                	**type**\:  :py:class:`QsfpPageA00Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA00Data>`
                                
                                .. attribute:: qsfp_page_a0_3_data
                                
                                	
                                	**type**\:  :py:class:`QsfpPageA03Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA03Data>`
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails, self).__init__()

                                    self.yang_name = "qsfp-details"
                                    self.yang_parent_name = "sfp-port-iter"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([("qsfp_page_A0_data", ("qsfp_page_a0_data", Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA0Data)), ("qsfp_page_A0_0_data", ("qsfp_page_a0_0_data", Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA00Data)), ("qsfp_page_A0_3_data", ("qsfp_page_a0_3_data", Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA03Data))])
                                    self._leafs = OrderedDict()

                                    self.qsfp_page_a0_data = Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA0Data()
                                    self.qsfp_page_a0_data.parent = self
                                    self._children_name_map["qsfp_page_a0_data"] = "qsfp_page_A0_data"

                                    self.qsfp_page_a0_0_data = Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA00Data()
                                    self.qsfp_page_a0_0_data.parent = self
                                    self._children_name_map["qsfp_page_a0_0_data"] = "qsfp_page_A0_0_data"

                                    self.qsfp_page_a0_3_data = Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA03Data()
                                    self.qsfp_page_a0_3_data.parent = self
                                    self._children_name_map["qsfp_page_a0_3_data"] = "qsfp_page_A0_3_data"
                                    self._segment_path = lambda: "qsfp-details"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails, [], name, value)


                                class QsfpPageA0Data(Entity):
                                    """
                                    
                                    
                                    .. attribute:: qsfp_real_time_data
                                    
                                    	
                                    	**type**\:  :py:class:`QsfpRealTimeData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA0Data.QsfpRealTimeData>`
                                    
                                    .. attribute:: qsfp_real_time_status_flags
                                    
                                    	
                                    	**type**\:  :py:class:`QsfpRealTimeStatusFlags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA0Data.QsfpRealTimeStatusFlags>`
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA0Data, self).__init__()

                                        self.yang_name = "qsfp_page_A0_data"
                                        self.yang_parent_name = "qsfp-details"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("qsfp-real-time-data", ("qsfp_real_time_data", Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA0Data.QsfpRealTimeData)), ("qsfp-real-time-status-flags", ("qsfp_real_time_status_flags", Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA0Data.QsfpRealTimeStatusFlags))])
                                        self._leafs = OrderedDict()

                                        self.qsfp_real_time_data = Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA0Data.QsfpRealTimeData()
                                        self.qsfp_real_time_data.parent = self
                                        self._children_name_map["qsfp_real_time_data"] = "qsfp-real-time-data"

                                        self.qsfp_real_time_status_flags = Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA0Data.QsfpRealTimeStatusFlags()
                                        self.qsfp_real_time_status_flags.parent = self
                                        self._children_name_map["qsfp_real_time_status_flags"] = "qsfp-real-time-status-flags"
                                        self._segment_path = lambda: "qsfp_page_A0_data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA0Data, [], name, value)


                                    class QsfpRealTimeData(Entity):
                                        """
                                        
                                        
                                        .. attribute:: qsfp_temp_volt
                                        
                                        	
                                        	**type**\:  :py:class:`QsfpTempVolt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA0Data.QsfpRealTimeData.QsfpTempVolt>`
                                        
                                        .. attribute:: qsfp_tx_channel_bias
                                        
                                        	
                                        	**type**\:  :py:class:`QsfpTxChannelBias <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA0Data.QsfpRealTimeData.QsfpTxChannelBias>`
                                        
                                        .. attribute:: qsfp_tx_output_power
                                        
                                        	
                                        	**type**\:  :py:class:`QsfpTxOutputPower <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA0Data.QsfpRealTimeData.QsfpTxOutputPower>`
                                        
                                        .. attribute:: qsfp_rx_input_power
                                        
                                        	
                                        	**type**\:  :py:class:`QsfpRxInputPower <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA0Data.QsfpRealTimeData.QsfpRxInputPower>`
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA0Data.QsfpRealTimeData, self).__init__()

                                            self.yang_name = "qsfp-real-time-data"
                                            self.yang_parent_name = "qsfp_page_A0_data"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("qsfp-temp-volt", ("qsfp_temp_volt", Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA0Data.QsfpRealTimeData.QsfpTempVolt)), ("qsfp-tx-channel-bias", ("qsfp_tx_channel_bias", Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA0Data.QsfpRealTimeData.QsfpTxChannelBias)), ("qsfp-tx-output-power", ("qsfp_tx_output_power", Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA0Data.QsfpRealTimeData.QsfpTxOutputPower)), ("qsfp-rx-input-power", ("qsfp_rx_input_power", Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA0Data.QsfpRealTimeData.QsfpRxInputPower))])
                                            self._leafs = OrderedDict()

                                            self.qsfp_temp_volt = Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA0Data.QsfpRealTimeData.QsfpTempVolt()
                                            self.qsfp_temp_volt.parent = self
                                            self._children_name_map["qsfp_temp_volt"] = "qsfp-temp-volt"

                                            self.qsfp_tx_channel_bias = Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA0Data.QsfpRealTimeData.QsfpTxChannelBias()
                                            self.qsfp_tx_channel_bias.parent = self
                                            self._children_name_map["qsfp_tx_channel_bias"] = "qsfp-tx-channel-bias"

                                            self.qsfp_tx_output_power = Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA0Data.QsfpRealTimeData.QsfpTxOutputPower()
                                            self.qsfp_tx_output_power.parent = self
                                            self._children_name_map["qsfp_tx_output_power"] = "qsfp-tx-output-power"

                                            self.qsfp_rx_input_power = Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA0Data.QsfpRealTimeData.QsfpRxInputPower()
                                            self.qsfp_rx_input_power.parent = self
                                            self._children_name_map["qsfp_rx_input_power"] = "qsfp-rx-input-power"
                                            self._segment_path = lambda: "qsfp-real-time-data"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA0Data.QsfpRealTimeData, [], name, value)


                                        class QsfpTempVolt(Entity):
                                            """
                                            
                                            
                                            .. attribute:: module_monitor_temperature
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: module_monitor_voltage
                                            
                                            	
                                            	**type**\: str
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA0Data.QsfpRealTimeData.QsfpTempVolt, self).__init__()

                                                self.yang_name = "qsfp-temp-volt"
                                                self.yang_parent_name = "qsfp-real-time-data"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('module_monitor_temperature', YLeaf(YType.str, 'module-monitor-temperature')),
                                                    ('module_monitor_voltage', YLeaf(YType.str, 'module-monitor-voltage')),
                                                ])
                                                self.module_monitor_temperature = None
                                                self.module_monitor_voltage = None
                                                self._segment_path = lambda: "qsfp-temp-volt"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA0Data.QsfpRealTimeData.QsfpTempVolt, [u'module_monitor_temperature', u'module_monitor_voltage'], name, value)


                                        class QsfpTxChannelBias(Entity):
                                            """
                                            
                                            
                                            .. attribute:: channel_monitor_tx1_bias
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: channel_monitor_tx2_bias
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: channel_monitor_tx3_bias
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: channel_monitor_tx4_bias
                                            
                                            	
                                            	**type**\: str
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA0Data.QsfpRealTimeData.QsfpTxChannelBias, self).__init__()

                                                self.yang_name = "qsfp-tx-channel-bias"
                                                self.yang_parent_name = "qsfp-real-time-data"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('channel_monitor_tx1_bias', YLeaf(YType.str, 'channel-monitor-Tx1-Bias')),
                                                    ('channel_monitor_tx2_bias', YLeaf(YType.str, 'channel-monitor-Tx2-Bias')),
                                                    ('channel_monitor_tx3_bias', YLeaf(YType.str, 'channel-monitor-Tx3-Bias')),
                                                    ('channel_monitor_tx4_bias', YLeaf(YType.str, 'channel-monitor-Tx4-Bias')),
                                                ])
                                                self.channel_monitor_tx1_bias = None
                                                self.channel_monitor_tx2_bias = None
                                                self.channel_monitor_tx3_bias = None
                                                self.channel_monitor_tx4_bias = None
                                                self._segment_path = lambda: "qsfp-tx-channel-bias"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA0Data.QsfpRealTimeData.QsfpTxChannelBias, [u'channel_monitor_tx1_bias', u'channel_monitor_tx2_bias', u'channel_monitor_tx3_bias', u'channel_monitor_tx4_bias'], name, value)


                                        class QsfpTxOutputPower(Entity):
                                            """
                                            
                                            
                                            .. attribute:: channel_monitor_tx1_power
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: channel_monitor_tx2_power
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: channel_monitor_tx3_power
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: channel_monitor_tx4_power
                                            
                                            	
                                            	**type**\: str
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA0Data.QsfpRealTimeData.QsfpTxOutputPower, self).__init__()

                                                self.yang_name = "qsfp-tx-output-power"
                                                self.yang_parent_name = "qsfp-real-time-data"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('channel_monitor_tx1_power', YLeaf(YType.str, 'channel-monitor-Tx1-Power')),
                                                    ('channel_monitor_tx2_power', YLeaf(YType.str, 'channel-monitor-Tx2-Power')),
                                                    ('channel_monitor_tx3_power', YLeaf(YType.str, 'channel-monitor-Tx3-Power')),
                                                    ('channel_monitor_tx4_power', YLeaf(YType.str, 'channel-monitor-Tx4-Power')),
                                                ])
                                                self.channel_monitor_tx1_power = None
                                                self.channel_monitor_tx2_power = None
                                                self.channel_monitor_tx3_power = None
                                                self.channel_monitor_tx4_power = None
                                                self._segment_path = lambda: "qsfp-tx-output-power"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA0Data.QsfpRealTimeData.QsfpTxOutputPower, [u'channel_monitor_tx1_power', u'channel_monitor_tx2_power', u'channel_monitor_tx3_power', u'channel_monitor_tx4_power'], name, value)


                                        class QsfpRxInputPower(Entity):
                                            """
                                            
                                            
                                            .. attribute:: channel_monitor_rx1_power
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: channel_monitor_rx2_power
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: channel_monitor_rx3_power
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: channel_monitor_rx4_power
                                            
                                            	
                                            	**type**\: str
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA0Data.QsfpRealTimeData.QsfpRxInputPower, self).__init__()

                                                self.yang_name = "qsfp-rx-input-power"
                                                self.yang_parent_name = "qsfp-real-time-data"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('channel_monitor_rx1_power', YLeaf(YType.str, 'channel-monitor-Rx1-Power')),
                                                    ('channel_monitor_rx2_power', YLeaf(YType.str, 'channel-monitor-Rx2-Power')),
                                                    ('channel_monitor_rx3_power', YLeaf(YType.str, 'channel-monitor-Rx3-Power')),
                                                    ('channel_monitor_rx4_power', YLeaf(YType.str, 'channel-monitor-Rx4-Power')),
                                                ])
                                                self.channel_monitor_rx1_power = None
                                                self.channel_monitor_rx2_power = None
                                                self.channel_monitor_rx3_power = None
                                                self.channel_monitor_rx4_power = None
                                                self._segment_path = lambda: "qsfp-rx-input-power"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA0Data.QsfpRealTimeData.QsfpRxInputPower, [u'channel_monitor_rx1_power', u'channel_monitor_rx2_power', u'channel_monitor_rx3_power', u'channel_monitor_rx4_power'], name, value)


                                    class QsfpRealTimeStatusFlags(Entity):
                                        """
                                        
                                        
                                        .. attribute:: qsfp_real_time_status
                                        
                                        	
                                        	**type**\:  :py:class:`QsfpRealTimeStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA0Data.QsfpRealTimeStatusFlags.QsfpRealTimeStatus>`
                                        
                                        .. attribute:: qsfp_real_time_interrupt_flags
                                        
                                        	
                                        	**type**\:  :py:class:`QsfpRealTimeInterruptFlags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA0Data.QsfpRealTimeStatusFlags.QsfpRealTimeInterruptFlags>`
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA0Data.QsfpRealTimeStatusFlags, self).__init__()

                                            self.yang_name = "qsfp-real-time-status-flags"
                                            self.yang_parent_name = "qsfp_page_A0_data"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("qsfp-real-time-status", ("qsfp_real_time_status", Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA0Data.QsfpRealTimeStatusFlags.QsfpRealTimeStatus)), ("qsfp-real-time-interrupt-flags", ("qsfp_real_time_interrupt_flags", Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA0Data.QsfpRealTimeStatusFlags.QsfpRealTimeInterruptFlags))])
                                            self._leafs = OrderedDict()

                                            self.qsfp_real_time_status = Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA0Data.QsfpRealTimeStatusFlags.QsfpRealTimeStatus()
                                            self.qsfp_real_time_status.parent = self
                                            self._children_name_map["qsfp_real_time_status"] = "qsfp-real-time-status"

                                            self.qsfp_real_time_interrupt_flags = Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA0Data.QsfpRealTimeStatusFlags.QsfpRealTimeInterruptFlags()
                                            self.qsfp_real_time_interrupt_flags.parent = self
                                            self._children_name_map["qsfp_real_time_interrupt_flags"] = "qsfp-real-time-interrupt-flags"
                                            self._segment_path = lambda: "qsfp-real-time-status-flags"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA0Data.QsfpRealTimeStatusFlags, [], name, value)


                                        class QsfpRealTimeStatus(Entity):
                                            """
                                            
                                            
                                            .. attribute:: qsfp_page_select
                                            
                                            	
                                            	**type**\: str
                                            
                                            .. attribute:: qsfp_status
                                            
                                            	Status Indicator
                                            	**type**\:  :py:class:`QsfpStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA0Data.QsfpRealTimeStatusFlags.QsfpRealTimeStatus.QsfpStatus>`
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA0Data.QsfpRealTimeStatusFlags.QsfpRealTimeStatus, self).__init__()

                                                self.yang_name = "qsfp-real-time-status"
                                                self.yang_parent_name = "qsfp-real-time-status-flags"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('qsfp_page_select', YLeaf(YType.str, 'qsfp-page-select')),
                                                    ('qsfp_status', YLeaf(YType.bits, 'qsfp-status')),
                                                ])
                                                self.qsfp_page_select = None
                                                self.qsfp_status = Bits()
                                                self._segment_path = lambda: "qsfp-real-time-status"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA0Data.QsfpRealTimeStatusFlags.QsfpRealTimeStatus, [u'qsfp_page_select', u'qsfp_status'], name, value)


                                        class QsfpRealTimeInterruptFlags(Entity):
                                            """
                                            
                                            
                                            .. attribute:: qsfp_int_flags_los_indicator
                                            
                                            	Interrupt Flag for TX/RX LOS Indicator
                                            	**type**\:  :py:class:`QsfpIntFlagsLOSIndicator <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA0Data.QsfpRealTimeStatusFlags.QsfpRealTimeInterruptFlags.QsfpIntFlagsLOSIndicator>`
                                            
                                            .. attribute:: qsfp_int_flags_fault_indicator
                                            
                                            	Interrupt Flag for TX Fault Indicator
                                            	**type**\:  :py:class:`QsfpIntFlagsFaultIndicator <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA0Data.QsfpRealTimeStatusFlags.QsfpRealTimeInterruptFlags.QsfpIntFlagsFaultIndicator>`
                                            
                                            .. attribute:: qsfp_int_flags_temperature_indicator
                                            
                                            	Interrupt Flag for high/low alarm/warning temperature Indicator
                                            	**type**\:  :py:class:`QsfpIntFlagsTemperatureIndicator <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA0Data.QsfpRealTimeStatusFlags.QsfpRealTimeInterruptFlags.QsfpIntFlagsTemperatureIndicator>`
                                            
                                            .. attribute:: qsfp_int_flags_supply_voltage_indicator
                                            
                                            	Interrupt Flag for high/low alarm/warning Voltage Indicator
                                            	**type**\:  :py:class:`QsfpIntFlagsSupplyVoltageIndicator <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA0Data.QsfpRealTimeStatusFlags.QsfpRealTimeInterruptFlags.QsfpIntFlagsSupplyVoltageIndicator>`
                                            
                                            .. attribute:: qsfp_int_flags_rx_power_indicator
                                            
                                            	Interrupt Flag for high/low alarm/warning Rx Power in Channel 1/2/3/4 Indicator
                                            	**type**\:  :py:class:`QsfpIntFlagsRxPowerIndicator <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA0Data.QsfpRealTimeStatusFlags.QsfpRealTimeInterruptFlags.QsfpIntFlagsRxPowerIndicator>`
                                            
                                            .. attribute:: qsfp_int_flags_tx_bias_indicator
                                            
                                            	Interrupt Flag for high/low alarm/warning Tx Bias in Channel 1/2/3/4 Indicator
                                            	**type**\:  :py:class:`QsfpIntFlagsTxBiasIndicator <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA0Data.QsfpRealTimeStatusFlags.QsfpRealTimeInterruptFlags.QsfpIntFlagsTxBiasIndicator>`
                                            
                                            

                                            """

                                            _prefix = 'calvados_controllers'
                                            _revision = '2017-01-31'

                                            def __init__(self):
                                                super(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA0Data.QsfpRealTimeStatusFlags.QsfpRealTimeInterruptFlags, self).__init__()

                                                self.yang_name = "qsfp-real-time-interrupt-flags"
                                                self.yang_parent_name = "qsfp-real-time-status-flags"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('qsfp_int_flags_los_indicator', YLeaf(YType.bits, 'qsfp-int-flags-LOS-Indicator')),
                                                    ('qsfp_int_flags_fault_indicator', YLeaf(YType.bits, 'qsfp-int-flags-Fault-Indicator')),
                                                    ('qsfp_int_flags_temperature_indicator', YLeaf(YType.bits, 'qsfp-int-flags-Temperature-Indicator')),
                                                    ('qsfp_int_flags_supply_voltage_indicator', YLeaf(YType.bits, 'qsfp-int-flags-Supply-Voltage-Indicator')),
                                                    ('qsfp_int_flags_rx_power_indicator', YLeaf(YType.bits, 'qsfp-int-flags-Rx-Power-Indicator')),
                                                    ('qsfp_int_flags_tx_bias_indicator', YLeaf(YType.bits, 'qsfp-int-flags-Tx-Bias-Indicator')),
                                                ])
                                                self.qsfp_int_flags_los_indicator = Bits()
                                                self.qsfp_int_flags_fault_indicator = Bits()
                                                self.qsfp_int_flags_temperature_indicator = Bits()
                                                self.qsfp_int_flags_supply_voltage_indicator = Bits()
                                                self.qsfp_int_flags_rx_power_indicator = Bits()
                                                self.qsfp_int_flags_tx_bias_indicator = Bits()
                                                self._segment_path = lambda: "qsfp-real-time-interrupt-flags"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA0Data.QsfpRealTimeStatusFlags.QsfpRealTimeInterruptFlags, [u'qsfp_int_flags_los_indicator', u'qsfp_int_flags_fault_indicator', u'qsfp_int_flags_temperature_indicator', u'qsfp_int_flags_supply_voltage_indicator', u'qsfp_int_flags_rx_power_indicator', u'qsfp_int_flags_tx_bias_indicator'], name, value)


                                class QsfpPageA00Data(Entity):
                                    """
                                    
                                    
                                    .. attribute:: qsfp_identifier
                                    
                                    	
                                    	**type**\:  :py:class:`EsdmaSwitchSfpTranceiverTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaSwitchSfpTranceiverTypeEnum>`
                                    
                                    .. attribute:: qsfp_transceiver
                                    
                                    	
                                    	**type**\:  :py:class:`EsdmaQsfpTransceiverEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaQsfpTransceiverEnum>`
                                    
                                    .. attribute:: qsfp_extended_transceiver
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: qsfp_encoding
                                    
                                    	
                                    	**type**\:  :py:class:`EsdmaSfpEncodingEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaSfpEncodingEnum>`
                                    
                                    .. attribute:: qsfp_bit_rate
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: qsfp_link_length_standard_sm_fiber_km
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: qsfp_link_length_om3_50u_fiber_m
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: qsfp_link_length_om2_50u_fiber_m
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: qsfp_link_length_om1_62_5u_fiber_m
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: qsfp_link_length_copper_cable_assembly_fiber_m
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: qsfp_device_tech
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: qsfp_vendor_name
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: qsfp_vendor_oui
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: qsfp_vendor_part_num
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: qsfp_laser_wavelength
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: qsfp_wavelength_tolerance
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: qsfp_max_case_temperature
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: qsfp_option_value_rx_amplitude
                                    
                                    	Option value for Rx amplitude 
                                    	**type**\:  :py:class:`QsfpOptionValueRxAmplitude <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA00Data.QsfpOptionValueRxAmplitude>`
                                    
                                    .. attribute:: qsfp_option_values_indicator
                                    
                                    	Options Implemented in the QSFP Module
                                    	**type**\:  :py:class:`QsfpOptionValuesIndicator <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA00Data.QsfpOptionValuesIndicator>`
                                    
                                    .. attribute:: qsfp_vendor_serial_num
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: qsfp_date_code
                                    
                                    	
                                    	**type**\: str
                                    
                                    .. attribute:: qsfp_diag_monitoring_type
                                    
                                    	
                                    	**type**\:  :py:class:`QsfpDiagMonitoringType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA00Data.QsfpDiagMonitoringType>`
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA00Data, self).__init__()

                                        self.yang_name = "qsfp_page_A0_0_data"
                                        self.yang_parent_name = "qsfp-details"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('qsfp_identifier', YLeaf(YType.enumeration, 'qsfp-identifier')),
                                            ('qsfp_transceiver', YLeaf(YType.enumeration, 'qsfp-transceiver')),
                                            ('qsfp_extended_transceiver', YLeaf(YType.str, 'qsfp-extended-transceiver')),
                                            ('qsfp_encoding', YLeaf(YType.enumeration, 'qsfp-encoding')),
                                            ('qsfp_bit_rate', YLeaf(YType.uint32, 'qsfp-bit-rate')),
                                            ('qsfp_link_length_standard_sm_fiber_km', YLeaf(YType.uint32, 'qsfp-link-length-standard-SM-fiber_KM')),
                                            ('qsfp_link_length_om3_50u_fiber_m', YLeaf(YType.uint32, 'qsfp-link-length-OM3-50u-fiber_M')),
                                            ('qsfp_link_length_om2_50u_fiber_m', YLeaf(YType.uint32, 'qsfp-link-length-OM2-50u-fiber_M')),
                                            ('qsfp_link_length_om1_62_5u_fiber_m', YLeaf(YType.uint32, 'qsfp-link-length-OM1-62_5u-fiber_M')),
                                            ('qsfp_link_length_copper_cable_assembly_fiber_m', YLeaf(YType.uint32, 'qsfp-link-length-Copper-Cable-Assembly-fiber_M')),
                                            ('qsfp_device_tech', YLeaf(YType.str, 'qsfp-device-tech')),
                                            ('qsfp_vendor_name', YLeaf(YType.str, 'qsfp-vendor-name')),
                                            ('qsfp_vendor_oui', YLeaf(YType.str, 'qsfp-vendor-oui')),
                                            ('qsfp_vendor_part_num', YLeaf(YType.str, 'qsfp-vendor-part-num')),
                                            ('qsfp_laser_wavelength', YLeaf(YType.uint32, 'qsfp-laser-wavelength')),
                                            ('qsfp_wavelength_tolerance', YLeaf(YType.uint32, 'qsfp-wavelength_tolerance')),
                                            ('qsfp_max_case_temperature', YLeaf(YType.str, 'qsfp-max-case-temperature')),
                                            ('qsfp_option_value_rx_amplitude', YLeaf(YType.bits, 'qsfp-option-value-Rx-amplitude')),
                                            ('qsfp_option_values_indicator', YLeaf(YType.bits, 'qsfp-option-values-Indicator')),
                                            ('qsfp_vendor_serial_num', YLeaf(YType.str, 'qsfp-vendor-serial-num')),
                                            ('qsfp_date_code', YLeaf(YType.str, 'qsfp-date-code')),
                                            ('qsfp_diag_monitoring_type', YLeaf(YType.bits, 'qsfp-diag-monitoring-type')),
                                        ])
                                        self.qsfp_identifier = None
                                        self.qsfp_transceiver = None
                                        self.qsfp_extended_transceiver = None
                                        self.qsfp_encoding = None
                                        self.qsfp_bit_rate = None
                                        self.qsfp_link_length_standard_sm_fiber_km = None
                                        self.qsfp_link_length_om3_50u_fiber_m = None
                                        self.qsfp_link_length_om2_50u_fiber_m = None
                                        self.qsfp_link_length_om1_62_5u_fiber_m = None
                                        self.qsfp_link_length_copper_cable_assembly_fiber_m = None
                                        self.qsfp_device_tech = None
                                        self.qsfp_vendor_name = None
                                        self.qsfp_vendor_oui = None
                                        self.qsfp_vendor_part_num = None
                                        self.qsfp_laser_wavelength = None
                                        self.qsfp_wavelength_tolerance = None
                                        self.qsfp_max_case_temperature = None
                                        self.qsfp_option_value_rx_amplitude = Bits()
                                        self.qsfp_option_values_indicator = Bits()
                                        self.qsfp_vendor_serial_num = None
                                        self.qsfp_date_code = None
                                        self.qsfp_diag_monitoring_type = Bits()
                                        self._segment_path = lambda: "qsfp_page_A0_0_data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA00Data, [u'qsfp_identifier', u'qsfp_transceiver', u'qsfp_extended_transceiver', u'qsfp_encoding', u'qsfp_bit_rate', u'qsfp_link_length_standard_sm_fiber_km', u'qsfp_link_length_om3_50u_fiber_m', u'qsfp_link_length_om2_50u_fiber_m', u'qsfp_link_length_om1_62_5u_fiber_m', u'qsfp_link_length_copper_cable_assembly_fiber_m', u'qsfp_device_tech', u'qsfp_vendor_name', u'qsfp_vendor_oui', u'qsfp_vendor_part_num', u'qsfp_laser_wavelength', u'qsfp_wavelength_tolerance', u'qsfp_max_case_temperature', u'qsfp_option_value_rx_amplitude', u'qsfp_option_values_indicator', u'qsfp_vendor_serial_num', u'qsfp_date_code', u'qsfp_diag_monitoring_type'], name, value)


                                class QsfpPageA03Data(Entity):
                                    """
                                    
                                    
                                    .. attribute:: qsfp_temperature
                                    
                                    	
                                    	**type**\:  :py:class:`QsfpTemperature <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA03Data.QsfpTemperature>`
                                    
                                    .. attribute:: qsfp_voltage
                                    
                                    	
                                    	**type**\:  :py:class:`QsfpVoltage <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA03Data.QsfpVoltage>`
                                    
                                    .. attribute:: qsfp_tx_bias
                                    
                                    	
                                    	**type**\:  :py:class:`QsfpTxBias <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA03Data.QsfpTxBias>`
                                    
                                    .. attribute:: qsfp_tx_power
                                    
                                    	
                                    	**type**\:  :py:class:`QsfpTxPower <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA03Data.QsfpTxPower>`
                                    
                                    .. attribute:: qsfp_rx_power
                                    
                                    	
                                    	**type**\:  :py:class:`QsfpRxPower <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA03Data.QsfpRxPower>`
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA03Data, self).__init__()

                                        self.yang_name = "qsfp_page_A0_3_data"
                                        self.yang_parent_name = "qsfp-details"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("qsfp-temperature", ("qsfp_temperature", Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA03Data.QsfpTemperature)), ("qsfp-voltage", ("qsfp_voltage", Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA03Data.QsfpVoltage)), ("qsfp-tx-bias", ("qsfp_tx_bias", Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA03Data.QsfpTxBias)), ("qsfp-tx-power", ("qsfp_tx_power", Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA03Data.QsfpTxPower)), ("qsfp-rx-power", ("qsfp_rx_power", Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA03Data.QsfpRxPower))])
                                        self._leafs = OrderedDict()

                                        self.qsfp_temperature = Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA03Data.QsfpTemperature()
                                        self.qsfp_temperature.parent = self
                                        self._children_name_map["qsfp_temperature"] = "qsfp-temperature"

                                        self.qsfp_voltage = Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA03Data.QsfpVoltage()
                                        self.qsfp_voltage.parent = self
                                        self._children_name_map["qsfp_voltage"] = "qsfp-voltage"

                                        self.qsfp_tx_bias = Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA03Data.QsfpTxBias()
                                        self.qsfp_tx_bias.parent = self
                                        self._children_name_map["qsfp_tx_bias"] = "qsfp-tx-bias"

                                        self.qsfp_tx_power = Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA03Data.QsfpTxPower()
                                        self.qsfp_tx_power.parent = self
                                        self._children_name_map["qsfp_tx_power"] = "qsfp-tx-power"

                                        self.qsfp_rx_power = Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA03Data.QsfpRxPower()
                                        self.qsfp_rx_power.parent = self
                                        self._children_name_map["qsfp_rx_power"] = "qsfp-rx-power"
                                        self._segment_path = lambda: "qsfp_page_A0_3_data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA03Data, [], name, value)


                                    class QsfpTemperature(Entity):
                                        """
                                        
                                        
                                        .. attribute:: qsfp_temp_alarm_high
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: qsfp_temp_warning_high
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: qsfp_temp_warning_low
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: qsfp_temp_alarm_low
                                        
                                        	
                                        	**type**\: str
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA03Data.QsfpTemperature, self).__init__()

                                            self.yang_name = "qsfp-temperature"
                                            self.yang_parent_name = "qsfp_page_A0_3_data"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('qsfp_temp_alarm_high', YLeaf(YType.str, 'qsfp-temp-alarm-high')),
                                                ('qsfp_temp_warning_high', YLeaf(YType.str, 'qsfp-temp-warning-high')),
                                                ('qsfp_temp_warning_low', YLeaf(YType.str, 'qsfp-temp-warning-low')),
                                                ('qsfp_temp_alarm_low', YLeaf(YType.str, 'qsfp-temp-alarm-low')),
                                            ])
                                            self.qsfp_temp_alarm_high = None
                                            self.qsfp_temp_warning_high = None
                                            self.qsfp_temp_warning_low = None
                                            self.qsfp_temp_alarm_low = None
                                            self._segment_path = lambda: "qsfp-temperature"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA03Data.QsfpTemperature, [u'qsfp_temp_alarm_high', u'qsfp_temp_warning_high', u'qsfp_temp_warning_low', u'qsfp_temp_alarm_low'], name, value)


                                    class QsfpVoltage(Entity):
                                        """
                                        
                                        
                                        .. attribute:: qsfp_volt_alarm_high
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: qsfp_volt_warning_high
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: qsfp_volt_warning_low
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: qsfp_volt_alarm_low
                                        
                                        	
                                        	**type**\: str
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA03Data.QsfpVoltage, self).__init__()

                                            self.yang_name = "qsfp-voltage"
                                            self.yang_parent_name = "qsfp_page_A0_3_data"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('qsfp_volt_alarm_high', YLeaf(YType.str, 'qsfp-volt-alarm-high')),
                                                ('qsfp_volt_warning_high', YLeaf(YType.str, 'qsfp-volt-warning-high')),
                                                ('qsfp_volt_warning_low', YLeaf(YType.str, 'qsfp-volt-warning-low')),
                                                ('qsfp_volt_alarm_low', YLeaf(YType.str, 'qsfp-volt-alarm-low')),
                                            ])
                                            self.qsfp_volt_alarm_high = None
                                            self.qsfp_volt_warning_high = None
                                            self.qsfp_volt_warning_low = None
                                            self.qsfp_volt_alarm_low = None
                                            self._segment_path = lambda: "qsfp-voltage"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA03Data.QsfpVoltage, [u'qsfp_volt_alarm_high', u'qsfp_volt_warning_high', u'qsfp_volt_warning_low', u'qsfp_volt_alarm_low'], name, value)


                                    class QsfpTxBias(Entity):
                                        """
                                        
                                        
                                        .. attribute:: qsfp_tx_bias_alarm_high
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: qsfp_tx_bias_warning_high
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: qsfp_tx_bias_warning_low
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: qsfp_tx_bias_alarm_low
                                        
                                        	
                                        	**type**\: str
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA03Data.QsfpTxBias, self).__init__()

                                            self.yang_name = "qsfp-tx-bias"
                                            self.yang_parent_name = "qsfp_page_A0_3_data"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('qsfp_tx_bias_alarm_high', YLeaf(YType.str, 'qsfp-tx-bias-alarm-high')),
                                                ('qsfp_tx_bias_warning_high', YLeaf(YType.str, 'qsfp-tx-bias-warning-high')),
                                                ('qsfp_tx_bias_warning_low', YLeaf(YType.str, 'qsfp-tx-bias-warning-low')),
                                                ('qsfp_tx_bias_alarm_low', YLeaf(YType.str, 'qsfp-tx-bias-alarm-low')),
                                            ])
                                            self.qsfp_tx_bias_alarm_high = None
                                            self.qsfp_tx_bias_warning_high = None
                                            self.qsfp_tx_bias_warning_low = None
                                            self.qsfp_tx_bias_alarm_low = None
                                            self._segment_path = lambda: "qsfp-tx-bias"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA03Data.QsfpTxBias, [u'qsfp_tx_bias_alarm_high', u'qsfp_tx_bias_warning_high', u'qsfp_tx_bias_warning_low', u'qsfp_tx_bias_alarm_low'], name, value)


                                    class QsfpTxPower(Entity):
                                        """
                                        
                                        
                                        .. attribute:: qsfp_tx_power_alarm_high
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: qsfp_tx_power_warning_high
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: qsfp_tx_power_warning_low
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: qsfp_tx_power_alarm_low
                                        
                                        	
                                        	**type**\: str
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA03Data.QsfpTxPower, self).__init__()

                                            self.yang_name = "qsfp-tx-power"
                                            self.yang_parent_name = "qsfp_page_A0_3_data"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('qsfp_tx_power_alarm_high', YLeaf(YType.str, 'qsfp-tx-power-alarm-high')),
                                                ('qsfp_tx_power_warning_high', YLeaf(YType.str, 'qsfp-tx-power-warning-high')),
                                                ('qsfp_tx_power_warning_low', YLeaf(YType.str, 'qsfp-tx-power-warning-low')),
                                                ('qsfp_tx_power_alarm_low', YLeaf(YType.str, 'qsfp-tx-power-alarm-low')),
                                            ])
                                            self.qsfp_tx_power_alarm_high = None
                                            self.qsfp_tx_power_warning_high = None
                                            self.qsfp_tx_power_warning_low = None
                                            self.qsfp_tx_power_alarm_low = None
                                            self._segment_path = lambda: "qsfp-tx-power"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA03Data.QsfpTxPower, [u'qsfp_tx_power_alarm_high', u'qsfp_tx_power_warning_high', u'qsfp_tx_power_warning_low', u'qsfp_tx_power_alarm_low'], name, value)


                                    class QsfpRxPower(Entity):
                                        """
                                        
                                        
                                        .. attribute:: qsfp_rx_power_alarm_high
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: qsfp_rx_power_warning_high
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: qsfp_rx_power_warning_low
                                        
                                        	
                                        	**type**\: str
                                        
                                        .. attribute:: qsfp_rx_power_alarm_low
                                        
                                        	
                                        	**type**\: str
                                        
                                        

                                        """

                                        _prefix = 'calvados_controllers'
                                        _revision = '2017-01-31'

                                        def __init__(self):
                                            super(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA03Data.QsfpRxPower, self).__init__()

                                            self.yang_name = "qsfp-rx-power"
                                            self.yang_parent_name = "qsfp_page_A0_3_data"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('qsfp_rx_power_alarm_high', YLeaf(YType.str, 'qsfp-rx-power-alarm-high')),
                                                ('qsfp_rx_power_warning_high', YLeaf(YType.str, 'qsfp-rx-power-warning-high')),
                                                ('qsfp_rx_power_warning_low', YLeaf(YType.str, 'qsfp-rx-power-warning-low')),
                                                ('qsfp_rx_power_alarm_low', YLeaf(YType.str, 'qsfp-rx-power-alarm-low')),
                                            ])
                                            self.qsfp_rx_power_alarm_high = None
                                            self.qsfp_rx_power_warning_high = None
                                            self.qsfp_rx_power_warning_low = None
                                            self.qsfp_rx_power_alarm_low = None
                                            self._segment_path = lambda: "qsfp-rx-power"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Controller.Switch.Oper.Sfp.Detail.Location.SfpPortIter.QsfpDetails.QsfpPageA03Data.QsfpRxPower, [u'qsfp_rx_power_alarm_high', u'qsfp_rx_power_warning_high', u'qsfp_rx_power_warning_low', u'qsfp_rx_power_alarm_low'], name, value)


            class Mlap(Entity):
                """
                MLAP switch data
                
                .. attribute:: reachable
                
                	
                	**type**\:  :py:class:`Reachable <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Mlap.Reachable>`
                
                .. attribute:: detail
                
                	
                	**type**\:  :py:class:`Detail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Mlap.Detail>`
                
                .. attribute:: statistics
                
                	
                	**type**\:  :py:class:`Statistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Mlap.Statistics>`
                
                .. attribute:: summary_data
                
                	
                	**type**\:  :py:class:`SummaryData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Mlap.SummaryData>`
                
                .. attribute:: debug
                
                	
                	**type**\:  :py:class:`Debug <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Mlap.Debug>`
                
                .. attribute:: trace
                
                	show traceable processes
                	**type**\: list of  		 :py:class:`Trace <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Mlap.Trace>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Controller.Switch.Oper.Mlap, self).__init__()

                    self.yang_name = "mlap"
                    self.yang_parent_name = "oper"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("reachable", ("reachable", Controller.Switch.Oper.Mlap.Reachable)), ("detail", ("detail", Controller.Switch.Oper.Mlap.Detail)), ("statistics", ("statistics", Controller.Switch.Oper.Mlap.Statistics)), ("summary-data", ("summary_data", Controller.Switch.Oper.Mlap.SummaryData)), ("debug", ("debug", Controller.Switch.Oper.Mlap.Debug)), ("trace", ("trace", Controller.Switch.Oper.Mlap.Trace))])
                    self._leafs = OrderedDict()

                    self.reachable = Controller.Switch.Oper.Mlap.Reachable()
                    self.reachable.parent = self
                    self._children_name_map["reachable"] = "reachable"

                    self.detail = Controller.Switch.Oper.Mlap.Detail()
                    self.detail.parent = self
                    self._children_name_map["detail"] = "detail"

                    self.statistics = Controller.Switch.Oper.Mlap.Statistics()
                    self.statistics.parent = self
                    self._children_name_map["statistics"] = "statistics"

                    self.summary_data = Controller.Switch.Oper.Mlap.SummaryData()
                    self.summary_data.parent = self
                    self._children_name_map["summary_data"] = "summary-data"

                    self.debug = Controller.Switch.Oper.Mlap.Debug()
                    self.debug.parent = self
                    self._children_name_map["debug"] = "debug"

                    self.trace = YList(self)
                    self._segment_path = lambda: "mlap"
                    self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Controller.Switch.Oper.Mlap, [], name, value)


                class Reachable(Entity):
                    """
                    
                    
                    .. attribute:: location
                    
                    	
                    	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Mlap.Reachable.Location>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.Switch.Oper.Mlap.Reachable, self).__init__()

                        self.yang_name = "reachable"
                        self.yang_parent_name = "mlap"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("location", ("location", Controller.Switch.Oper.Mlap.Reachable.Location))])
                        self._leafs = OrderedDict()

                        self.location = YList(self)
                        self._segment_path = lambda: "reachable"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/mlap/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.Switch.Oper.Mlap.Reachable, [], name, value)


                    class Location(Entity):
                        """
                        
                        
                        .. attribute:: rack  (key)
                        
                        	
                        	**type**\:  :py:class:`EsdmaRackNumEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaRackNumEnum>`
                        
                        .. attribute:: card  (key)
                        
                        	
                        	**type**\:  :py:class:`EsdmaCpu <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaCpu>`
                        
                        .. attribute:: switch_id  (key)
                        
                        	
                        	**type**\:  :py:class:`EsdmaSwitchTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaSwitchTypeEnum>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Switch.Oper.Mlap.Reachable.Location, self).__init__()

                            self.yang_name = "location"
                            self.yang_parent_name = "reachable"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = ['rack','card','switch_id']
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('rack', YLeaf(YType.enumeration, 'rack')),
                                ('card', YLeaf(YType.enumeration, 'card')),
                                ('switch_id', YLeaf(YType.enumeration, 'switch-id')),
                            ])
                            self.rack = None
                            self.card = None
                            self.switch_id = None
                            self._segment_path = lambda: "location" + "[rack='" + str(self.rack) + "']" + "[card='" + str(self.card) + "']" + "[switch-id='" + str(self.switch_id) + "']"
                            self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/mlap/reachable/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Switch.Oper.Mlap.Reachable.Location, ['rack', 'card', 'switch_id'], name, value)


                class Detail(Entity):
                    """
                    
                    
                    .. attribute:: location
                    
                    	
                    	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Mlap.Detail.Location>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.Switch.Oper.Mlap.Detail, self).__init__()

                        self.yang_name = "detail"
                        self.yang_parent_name = "mlap"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("location", ("location", Controller.Switch.Oper.Mlap.Detail.Location))])
                        self._leafs = OrderedDict()

                        self.location = YList(self)
                        self._segment_path = lambda: "detail"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/mlap/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.Switch.Oper.Mlap.Detail, [], name, value)


                    class Location(Entity):
                        """
                        
                        
                        .. attribute:: rack  (key)
                        
                        	
                        	**type**\:  :py:class:`EsdmaRackNumEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaRackNumEnum>`
                        
                        .. attribute:: card  (key)
                        
                        	
                        	**type**\:  :py:class:`EsdmaCpu <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaCpu>`
                        
                        .. attribute:: switch_id  (key)
                        
                        	Switch type
                        	**type**\:  :py:class:`EsdmaSwitchTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaSwitchTypeEnum>`
                        
                        .. attribute:: port_iter
                        
                        	
                        	**type**\: list of  		 :py:class:`PortIter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Mlap.Detail.Location.PortIter>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Switch.Oper.Mlap.Detail.Location, self).__init__()

                            self.yang_name = "location"
                            self.yang_parent_name = "detail"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = ['rack','card','switch_id']
                            self._child_classes = OrderedDict([("port-iter", ("port_iter", Controller.Switch.Oper.Mlap.Detail.Location.PortIter))])
                            self._leafs = OrderedDict([
                                ('rack', YLeaf(YType.enumeration, 'rack')),
                                ('card', YLeaf(YType.enumeration, 'card')),
                                ('switch_id', YLeaf(YType.enumeration, 'switch-id')),
                            ])
                            self.rack = None
                            self.card = None
                            self.switch_id = None

                            self.port_iter = YList(self)
                            self._segment_path = lambda: "location" + "[rack='" + str(self.rack) + "']" + "[card='" + str(self.card) + "']" + "[switch-id='" + str(self.switch_id) + "']"
                            self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/mlap/detail/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Switch.Oper.Mlap.Detail.Location, ['rack', 'card', 'switch_id'], name, value)


                        class PortIter(Entity):
                            """
                            
                            
                            .. attribute:: port  (key)
                            
                            	Switch port
                            	**type**\: int
                            
                            	**range:** 0..127
                            
                            .. attribute:: gen_data
                            
                            	
                            	**type**\:  :py:class:`GenData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Mlap.Detail.Location.PortIter.GenData>`
                            
                            .. attribute:: mlap_internal_details
                            
                            	
                            	**type**\:  :py:class:`MlapInternalDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Mlap.Detail.Location.PortIter.MlapInternalDetails>`
                            
                            .. attribute:: mlap_external_details
                            
                            	
                            	**type**\:  :py:class:`MlapExternalDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Mlap.Detail.Location.PortIter.MlapExternalDetails>`
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Switch.Oper.Mlap.Detail.Location.PortIter, self).__init__()

                                self.yang_name = "port-iter"
                                self.yang_parent_name = "location"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['port']
                                self._child_classes = OrderedDict([("gen-data", ("gen_data", Controller.Switch.Oper.Mlap.Detail.Location.PortIter.GenData)), ("mlap-internal-details", ("mlap_internal_details", Controller.Switch.Oper.Mlap.Detail.Location.PortIter.MlapInternalDetails)), ("mlap-external-details", ("mlap_external_details", Controller.Switch.Oper.Mlap.Detail.Location.PortIter.MlapExternalDetails))])
                                self._leafs = OrderedDict([
                                    ('port', YLeaf(YType.int32, 'port')),
                                ])
                                self.port = None

                                self.gen_data = Controller.Switch.Oper.Mlap.Detail.Location.PortIter.GenData()
                                self.gen_data.parent = self
                                self._children_name_map["gen_data"] = "gen-data"

                                self.mlap_internal_details = Controller.Switch.Oper.Mlap.Detail.Location.PortIter.MlapInternalDetails()
                                self.mlap_internal_details.parent = self
                                self._children_name_map["mlap_internal_details"] = "mlap-internal-details"

                                self.mlap_external_details = Controller.Switch.Oper.Mlap.Detail.Location.PortIter.MlapExternalDetails()
                                self.mlap_external_details.parent = self
                                self._children_name_map["mlap_external_details"] = "mlap-external-details"
                                self._segment_path = lambda: "port-iter" + "[port='" + str(self.port) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Switch.Oper.Mlap.Detail.Location.PortIter, ['port'], name, value)


                            class GenData(Entity):
                                """
                                
                                
                                .. attribute:: serial_num
                                
                                	Rack serial number
                                	**type**\: str
                                
                                .. attribute:: connects_to
                                
                                	Indicates what this port connects to
                                	**type**\: str
                                
                                .. attribute:: phys_state
                                
                                	Physical port state
                                	**type**\:  :py:class:`EsdmaSwitchPortState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaSwitchPortState>`
                                
                                .. attribute:: admin_state
                                
                                	Administrative port state
                                	**type**\:  :py:class:`EsdmaSwitchPortState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaSwitchPortState>`
                                
                                .. attribute:: protocol_state
                                
                                	Protocol invoked port state
                                	**type**\:  :py:class:`MlapStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.MlapStateEnum>`
                                
                                .. attribute:: forwarding
                                
                                	Indicates whether this port is allowed to forward traffic
                                	**type**\:  :py:class:`SwitchForwardingState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.SwitchForwardingState>`
                                
                                .. attribute:: mlap_protocol
                                
                                	Indicates whether the internal or external MLAP protocol is active on this port
                                	**type**\:  :py:class:`MlapProtocolEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.MlapProtocolEnum>`
                                
                                .. attribute:: protocol_pkt_sent
                                
                                	Number of protocol packets sent
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: protocol_pkt_recv
                                
                                	Number of protocol packets received
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: protocol_set_color_pkts_sent
                                
                                	Number of set\-active\-VLAN requests
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: protocol_set_color_pkts_recv
                                
                                	Number of set\-active\-VLAN responses
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: protocol_send_error
                                
                                	Number of protocol packet send errors
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: protocol_recv_error
                                
                                	Number of protocol packet receive errors
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: protocol_state_changes
                                
                                	Number of state changes
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.Switch.Oper.Mlap.Detail.Location.PortIter.GenData, self).__init__()

                                    self.yang_name = "gen-data"
                                    self.yang_parent_name = "port-iter"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('serial_num', YLeaf(YType.str, 'serial-num')),
                                        ('connects_to', YLeaf(YType.str, 'connects-to')),
                                        ('phys_state', YLeaf(YType.enumeration, 'phys-state')),
                                        ('admin_state', YLeaf(YType.enumeration, 'admin-state')),
                                        ('protocol_state', YLeaf(YType.enumeration, 'protocol-state')),
                                        ('forwarding', YLeaf(YType.enumeration, 'forwarding')),
                                        ('mlap_protocol', YLeaf(YType.enumeration, 'mlap-protocol')),
                                        ('protocol_pkt_sent', YLeaf(YType.uint64, 'protocol-pkt-sent')),
                                        ('protocol_pkt_recv', YLeaf(YType.uint64, 'protocol-pkt-recv')),
                                        ('protocol_set_color_pkts_sent', YLeaf(YType.uint64, 'protocol-set-color-pkts-sent')),
                                        ('protocol_set_color_pkts_recv', YLeaf(YType.uint64, 'protocol-set-color-pkts-recv')),
                                        ('protocol_send_error', YLeaf(YType.uint64, 'protocol-send-error')),
                                        ('protocol_recv_error', YLeaf(YType.uint64, 'protocol-recv-error')),
                                        ('protocol_state_changes', YLeaf(YType.uint32, 'protocol-state-changes')),
                                    ])
                                    self.serial_num = None
                                    self.connects_to = None
                                    self.phys_state = None
                                    self.admin_state = None
                                    self.protocol_state = None
                                    self.forwarding = None
                                    self.mlap_protocol = None
                                    self.protocol_pkt_sent = None
                                    self.protocol_pkt_recv = None
                                    self.protocol_set_color_pkts_sent = None
                                    self.protocol_set_color_pkts_recv = None
                                    self.protocol_send_error = None
                                    self.protocol_recv_error = None
                                    self.protocol_state_changes = None
                                    self._segment_path = lambda: "gen-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.Switch.Oper.Mlap.Detail.Location.PortIter.GenData, ['serial_num', 'connects_to', 'phys_state', 'admin_state', 'protocol_state', 'forwarding', 'mlap_protocol', 'protocol_pkt_sent', 'protocol_pkt_recv', 'protocol_set_color_pkts_sent', 'protocol_set_color_pkts_recv', 'protocol_send_error', 'protocol_recv_error', 'protocol_state_changes'], name, value)


                            class MlapInternalDetails(Entity):
                                """
                                
                                
                                .. attribute:: info
                                
                                	
                                	**type**\:  :py:class:`Info <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Mlap.Detail.Location.PortIter.MlapInternalDetails.Info>`
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.Switch.Oper.Mlap.Detail.Location.PortIter.MlapInternalDetails, self).__init__()

                                    self.yang_name = "mlap-internal-details"
                                    self.yang_parent_name = "port-iter"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([("info", ("info", Controller.Switch.Oper.Mlap.Detail.Location.PortIter.MlapInternalDetails.Info))])
                                    self._leafs = OrderedDict()

                                    self.info = Controller.Switch.Oper.Mlap.Detail.Location.PortIter.MlapInternalDetails.Info()
                                    self.info.parent = self
                                    self._children_name_map["info"] = "info"
                                    self._segment_path = lambda: "mlap-internal-details"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.Switch.Oper.Mlap.Detail.Location.PortIter.MlapInternalDetails, [], name, value)


                                class Info(Entity):
                                    """
                                    
                                    
                                    .. attribute:: port_owner
                                    
                                    	Indicates which switch data path the port belongs to
                                    	**type**\:  :py:class:`EsdmaCpu <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaCpu>`
                                    
                                    .. attribute:: current_active_owner
                                    
                                    	Indicates which switch is currently mastering chassis data
                                    	**type**\:  :py:class:`EsdmaCpu <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaCpu>`
                                    
                                    .. attribute:: mlap_peer_flags
                                    
                                    	Peer's port MLAP protocol flags
                                    	**type**\:  :py:class:`MlapPeerFlags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Mlap.Detail.Location.PortIter.MlapInternalDetails.Info.MlapPeerFlags>`
                                    
                                    .. attribute:: mlap_peer_idle_count
                                    
                                    	Time intervals peer has not updated information
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: my_connection_active_mask
                                    
                                    	My port active mask view
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: peer_connection_active_mask
                                    
                                    	Peer's port active mask view
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: endpoint_card_type
                                    
                                    	Indicates the high\-level card type this switch port is peering with
                                    	**type**\:  :py:class:`MlapEpType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.MlapEpType>`
                                    
                                    .. attribute:: endpoint_mac_address
                                    
                                    	MAC addess of device of the protocol peer for this switch port
                                    	**type**\: str
                                    
                                    	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.Switch.Oper.Mlap.Detail.Location.PortIter.MlapInternalDetails.Info, self).__init__()

                                        self.yang_name = "info"
                                        self.yang_parent_name = "mlap-internal-details"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('port_owner', YLeaf(YType.enumeration, 'port-owner')),
                                            ('current_active_owner', YLeaf(YType.enumeration, 'current-active-owner')),
                                            ('mlap_peer_flags', YLeaf(YType.bits, 'mlap-peer-flags')),
                                            ('mlap_peer_idle_count', YLeaf(YType.uint32, 'mlap-peer-idle-count')),
                                            ('my_connection_active_mask', YLeaf(YType.uint64, 'my-connection-active-mask')),
                                            ('peer_connection_active_mask', YLeaf(YType.uint64, 'peer-connection-active-mask')),
                                            ('endpoint_card_type', YLeaf(YType.enumeration, 'endpoint-card-type')),
                                            ('endpoint_mac_address', YLeaf(YType.str, 'endpoint-mac-address')),
                                        ])
                                        self.port_owner = None
                                        self.current_active_owner = None
                                        self.mlap_peer_flags = Bits()
                                        self.mlap_peer_idle_count = None
                                        self.my_connection_active_mask = None
                                        self.peer_connection_active_mask = None
                                        self.endpoint_card_type = None
                                        self.endpoint_mac_address = None
                                        self._segment_path = lambda: "info"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.Switch.Oper.Mlap.Detail.Location.PortIter.MlapInternalDetails.Info, ['port_owner', 'current_active_owner', 'mlap_peer_flags', 'mlap_peer_idle_count', 'my_connection_active_mask', 'peer_connection_active_mask', 'endpoint_card_type', 'endpoint_mac_address'], name, value)


                            class MlapExternalDetails(Entity):
                                """
                                
                                
                                .. attribute:: local_state_information
                                
                                	MLAP state information from this port's perspective
                                	**type**\:  :py:class:`LocalStateInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Mlap.Detail.Location.PortIter.MlapExternalDetails.LocalStateInformation>`
                                
                                .. attribute:: peer_state_information
                                
                                	MLAP state information from peer port's perspective
                                	**type**\:  :py:class:`PeerStateInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Mlap.Detail.Location.PortIter.MlapExternalDetails.PeerStateInformation>`
                                
                                .. attribute:: peer_other_link_state_information
                                
                                	MLAP state information for peer's other uplink perspective (RP/SC only)
                                	**type**\:  :py:class:`PeerOtherLinkStateInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Mlap.Detail.Location.PortIter.MlapExternalDetails.PeerOtherLinkStateInformation>`
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.Switch.Oper.Mlap.Detail.Location.PortIter.MlapExternalDetails, self).__init__()

                                    self.yang_name = "mlap-external-details"
                                    self.yang_parent_name = "port-iter"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([("local-state-information", ("local_state_information", Controller.Switch.Oper.Mlap.Detail.Location.PortIter.MlapExternalDetails.LocalStateInformation)), ("peer-state-information", ("peer_state_information", Controller.Switch.Oper.Mlap.Detail.Location.PortIter.MlapExternalDetails.PeerStateInformation)), ("peer-other-link-state-information", ("peer_other_link_state_information", Controller.Switch.Oper.Mlap.Detail.Location.PortIter.MlapExternalDetails.PeerOtherLinkStateInformation))])
                                    self._leafs = OrderedDict()

                                    self.local_state_information = Controller.Switch.Oper.Mlap.Detail.Location.PortIter.MlapExternalDetails.LocalStateInformation()
                                    self.local_state_information.parent = self
                                    self._children_name_map["local_state_information"] = "local-state-information"

                                    self.peer_state_information = Controller.Switch.Oper.Mlap.Detail.Location.PortIter.MlapExternalDetails.PeerStateInformation()
                                    self.peer_state_information.parent = self
                                    self._children_name_map["peer_state_information"] = "peer-state-information"

                                    self.peer_other_link_state_information = Controller.Switch.Oper.Mlap.Detail.Location.PortIter.MlapExternalDetails.PeerOtherLinkStateInformation()
                                    self.peer_other_link_state_information.parent = self
                                    self._children_name_map["peer_other_link_state_information"] = "peer-other-link-state-information"
                                    self._segment_path = lambda: "mlap-external-details"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.Switch.Oper.Mlap.Detail.Location.PortIter.MlapExternalDetails, [], name, value)


                                class LocalStateInformation(Entity):
                                    """
                                    MLAP state information from this port's perspective
                                    
                                    .. attribute:: valid
                                    
                                    	Indicates whether this endpoint information contains valid data
                                    	**type**\: bool
                                    
                                    .. attribute:: chassis_type
                                    
                                    	The chassis type of this endpoint is in
                                    	**type**\:  :py:class:`EsdmaRackTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaRackTypeEnum>`
                                    
                                    .. attribute:: endpoint_type
                                    
                                    	The type of endpoint this endpoint switch is on
                                    	**type**\:  :py:class:`EsdmaSwitchTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaSwitchTypeEnum>`
                                    
                                    .. attribute:: endpoint_slot_number
                                    
                                    	Slot number of this endpoint
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: endpoint_switch_number
                                    
                                    	Switch number for the endpoint
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: endpoint_switch_port_number
                                    
                                    	Port number on the switch for the endpoint
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: endpoint_chassis_serial_number
                                    
                                    	Serial number for the endpoint
                                    	**type**\: str
                                    
                                    .. attribute:: mlap_state
                                    
                                    	Protocol invoked port state
                                    	**type**\:  :py:class:`MlapStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.MlapStateEnum>`
                                    
                                    .. attribute:: inter_fcc_sw_port
                                    
                                    	Indicates whether this port is used for an inter\-F\-SW connection
                                    	**type**\: bool
                                    
                                    .. attribute:: fcc_sw_indirectly_reachable
                                    
                                    	Indicates whether this port can indirectly reach an F\-SW
                                    	**type**\: bool
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.Switch.Oper.Mlap.Detail.Location.PortIter.MlapExternalDetails.LocalStateInformation, self).__init__()

                                        self.yang_name = "local-state-information"
                                        self.yang_parent_name = "mlap-external-details"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('valid', YLeaf(YType.boolean, 'valid')),
                                            ('chassis_type', YLeaf(YType.enumeration, 'chassis-type')),
                                            ('endpoint_type', YLeaf(YType.enumeration, 'endpoint-type')),
                                            ('endpoint_slot_number', YLeaf(YType.uint32, 'endpoint-slot-number')),
                                            ('endpoint_switch_number', YLeaf(YType.uint32, 'endpoint-switch-number')),
                                            ('endpoint_switch_port_number', YLeaf(YType.uint32, 'endpoint-switch-port-number')),
                                            ('endpoint_chassis_serial_number', YLeaf(YType.str, 'endpoint-chassis-serial-number')),
                                            ('mlap_state', YLeaf(YType.enumeration, 'mlap-state')),
                                            ('inter_fcc_sw_port', YLeaf(YType.boolean, 'inter-fcc_sw-port')),
                                            ('fcc_sw_indirectly_reachable', YLeaf(YType.boolean, 'fcc_sw-indirectly-reachable')),
                                        ])
                                        self.valid = None
                                        self.chassis_type = None
                                        self.endpoint_type = None
                                        self.endpoint_slot_number = None
                                        self.endpoint_switch_number = None
                                        self.endpoint_switch_port_number = None
                                        self.endpoint_chassis_serial_number = None
                                        self.mlap_state = None
                                        self.inter_fcc_sw_port = None
                                        self.fcc_sw_indirectly_reachable = None
                                        self._segment_path = lambda: "local-state-information"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.Switch.Oper.Mlap.Detail.Location.PortIter.MlapExternalDetails.LocalStateInformation, ['valid', 'chassis_type', 'endpoint_type', 'endpoint_slot_number', 'endpoint_switch_number', 'endpoint_switch_port_number', 'endpoint_chassis_serial_number', 'mlap_state', 'inter_fcc_sw_port', 'fcc_sw_indirectly_reachable'], name, value)


                                class PeerStateInformation(Entity):
                                    """
                                    MLAP state information from peer port's perspective
                                    
                                    .. attribute:: valid
                                    
                                    	Indicates whether this endpoint information contains valid data
                                    	**type**\: bool
                                    
                                    .. attribute:: chassis_type
                                    
                                    	The chassis type of this endpoint is in
                                    	**type**\:  :py:class:`EsdmaRackTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaRackTypeEnum>`
                                    
                                    .. attribute:: endpoint_type
                                    
                                    	The type of endpoint this endpoint switch is on
                                    	**type**\:  :py:class:`EsdmaSwitchTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaSwitchTypeEnum>`
                                    
                                    .. attribute:: endpoint_slot_number
                                    
                                    	Slot number of this endpoint
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: endpoint_switch_number
                                    
                                    	Switch number for the endpoint
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: endpoint_switch_port_number
                                    
                                    	Port number on the switch for the endpoint
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: endpoint_chassis_serial_number
                                    
                                    	Serial number for the endpoint
                                    	**type**\: str
                                    
                                    .. attribute:: mlap_state
                                    
                                    	Protocol invoked port state
                                    	**type**\:  :py:class:`MlapStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.MlapStateEnum>`
                                    
                                    .. attribute:: inter_fcc_sw_port
                                    
                                    	Indicates whether this port is used for an inter\-F\-SW connection
                                    	**type**\: bool
                                    
                                    .. attribute:: fcc_sw_indirectly_reachable
                                    
                                    	Indicates whether this port can indirectly reach an F\-SW
                                    	**type**\: bool
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.Switch.Oper.Mlap.Detail.Location.PortIter.MlapExternalDetails.PeerStateInformation, self).__init__()

                                        self.yang_name = "peer-state-information"
                                        self.yang_parent_name = "mlap-external-details"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('valid', YLeaf(YType.boolean, 'valid')),
                                            ('chassis_type', YLeaf(YType.enumeration, 'chassis-type')),
                                            ('endpoint_type', YLeaf(YType.enumeration, 'endpoint-type')),
                                            ('endpoint_slot_number', YLeaf(YType.uint32, 'endpoint-slot-number')),
                                            ('endpoint_switch_number', YLeaf(YType.uint32, 'endpoint-switch-number')),
                                            ('endpoint_switch_port_number', YLeaf(YType.uint32, 'endpoint-switch-port-number')),
                                            ('endpoint_chassis_serial_number', YLeaf(YType.str, 'endpoint-chassis-serial-number')),
                                            ('mlap_state', YLeaf(YType.enumeration, 'mlap-state')),
                                            ('inter_fcc_sw_port', YLeaf(YType.boolean, 'inter-fcc_sw-port')),
                                            ('fcc_sw_indirectly_reachable', YLeaf(YType.boolean, 'fcc_sw-indirectly-reachable')),
                                        ])
                                        self.valid = None
                                        self.chassis_type = None
                                        self.endpoint_type = None
                                        self.endpoint_slot_number = None
                                        self.endpoint_switch_number = None
                                        self.endpoint_switch_port_number = None
                                        self.endpoint_chassis_serial_number = None
                                        self.mlap_state = None
                                        self.inter_fcc_sw_port = None
                                        self.fcc_sw_indirectly_reachable = None
                                        self._segment_path = lambda: "peer-state-information"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.Switch.Oper.Mlap.Detail.Location.PortIter.MlapExternalDetails.PeerStateInformation, ['valid', 'chassis_type', 'endpoint_type', 'endpoint_slot_number', 'endpoint_switch_number', 'endpoint_switch_port_number', 'endpoint_chassis_serial_number', 'mlap_state', 'inter_fcc_sw_port', 'fcc_sw_indirectly_reachable'], name, value)


                                class PeerOtherLinkStateInformation(Entity):
                                    """
                                    MLAP state information for peer's other uplink perspective (RP/SC only)
                                    
                                    .. attribute:: valid
                                    
                                    	Indicates whether this endpoint information contains valid data
                                    	**type**\: bool
                                    
                                    .. attribute:: chassis_type
                                    
                                    	The chassis type of this endpoint is in
                                    	**type**\:  :py:class:`EsdmaRackTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaRackTypeEnum>`
                                    
                                    .. attribute:: endpoint_type
                                    
                                    	The type of endpoint this endpoint switch is on
                                    	**type**\:  :py:class:`EsdmaSwitchTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaSwitchTypeEnum>`
                                    
                                    .. attribute:: endpoint_slot_number
                                    
                                    	Slot number of this endpoint
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: endpoint_switch_number
                                    
                                    	Switch number for the endpoint
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: endpoint_switch_port_number
                                    
                                    	Port number on the switch for the endpoint
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: endpoint_chassis_serial_number
                                    
                                    	Serial number for the endpoint
                                    	**type**\: str
                                    
                                    .. attribute:: mlap_state
                                    
                                    	Protocol invoked port state
                                    	**type**\:  :py:class:`MlapStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.MlapStateEnum>`
                                    
                                    .. attribute:: inter_fcc_sw_port
                                    
                                    	Indicates whether this port is used for an inter\-F\-SW connection
                                    	**type**\: bool
                                    
                                    .. attribute:: fcc_sw_indirectly_reachable
                                    
                                    	Indicates whether this port can indirectly reach an F\-SW
                                    	**type**\: bool
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.Switch.Oper.Mlap.Detail.Location.PortIter.MlapExternalDetails.PeerOtherLinkStateInformation, self).__init__()

                                        self.yang_name = "peer-other-link-state-information"
                                        self.yang_parent_name = "mlap-external-details"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('valid', YLeaf(YType.boolean, 'valid')),
                                            ('chassis_type', YLeaf(YType.enumeration, 'chassis-type')),
                                            ('endpoint_type', YLeaf(YType.enumeration, 'endpoint-type')),
                                            ('endpoint_slot_number', YLeaf(YType.uint32, 'endpoint-slot-number')),
                                            ('endpoint_switch_number', YLeaf(YType.uint32, 'endpoint-switch-number')),
                                            ('endpoint_switch_port_number', YLeaf(YType.uint32, 'endpoint-switch-port-number')),
                                            ('endpoint_chassis_serial_number', YLeaf(YType.str, 'endpoint-chassis-serial-number')),
                                            ('mlap_state', YLeaf(YType.enumeration, 'mlap-state')),
                                            ('inter_fcc_sw_port', YLeaf(YType.boolean, 'inter-fcc_sw-port')),
                                            ('fcc_sw_indirectly_reachable', YLeaf(YType.boolean, 'fcc_sw-indirectly-reachable')),
                                        ])
                                        self.valid = None
                                        self.chassis_type = None
                                        self.endpoint_type = None
                                        self.endpoint_slot_number = None
                                        self.endpoint_switch_number = None
                                        self.endpoint_switch_port_number = None
                                        self.endpoint_chassis_serial_number = None
                                        self.mlap_state = None
                                        self.inter_fcc_sw_port = None
                                        self.fcc_sw_indirectly_reachable = None
                                        self._segment_path = lambda: "peer-other-link-state-information"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.Switch.Oper.Mlap.Detail.Location.PortIter.MlapExternalDetails.PeerOtherLinkStateInformation, ['valid', 'chassis_type', 'endpoint_type', 'endpoint_slot_number', 'endpoint_switch_number', 'endpoint_switch_port_number', 'endpoint_chassis_serial_number', 'mlap_state', 'inter_fcc_sw_port', 'fcc_sw_indirectly_reachable'], name, value)


                class Statistics(Entity):
                    """
                    
                    
                    .. attribute:: location
                    
                    	
                    	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Mlap.Statistics.Location>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.Switch.Oper.Mlap.Statistics, self).__init__()

                        self.yang_name = "statistics"
                        self.yang_parent_name = "mlap"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("location", ("location", Controller.Switch.Oper.Mlap.Statistics.Location))])
                        self._leafs = OrderedDict()

                        self.location = YList(self)
                        self._segment_path = lambda: "statistics"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/mlap/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.Switch.Oper.Mlap.Statistics, [], name, value)


                    class Location(Entity):
                        """
                        
                        
                        .. attribute:: rack  (key)
                        
                        	
                        	**type**\:  :py:class:`EsdmaRackNumEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaRackNumEnum>`
                        
                        .. attribute:: card  (key)
                        
                        	Card that owns a switch of interest
                        	**type**\:  :py:class:`EsdmaCpu <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaCpu>`
                        
                        .. attribute:: switch_id  (key)
                        
                        	Switch type
                        	**type**\:  :py:class:`EsdmaSwitchTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaSwitchTypeEnum>`
                        
                        .. attribute:: serial_num
                        
                        	Rack serial number
                        	**type**\: str
                        
                        .. attribute:: port_iter
                        
                        	
                        	**type**\: list of  		 :py:class:`PortIter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Mlap.Statistics.Location.PortIter>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Switch.Oper.Mlap.Statistics.Location, self).__init__()

                            self.yang_name = "location"
                            self.yang_parent_name = "statistics"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = ['rack','card','switch_id']
                            self._child_classes = OrderedDict([("port-iter", ("port_iter", Controller.Switch.Oper.Mlap.Statistics.Location.PortIter))])
                            self._leafs = OrderedDict([
                                ('rack', YLeaf(YType.enumeration, 'rack')),
                                ('card', YLeaf(YType.enumeration, 'card')),
                                ('switch_id', YLeaf(YType.enumeration, 'switch-id')),
                                ('serial_num', YLeaf(YType.str, 'serial-num')),
                            ])
                            self.rack = None
                            self.card = None
                            self.switch_id = None
                            self.serial_num = None

                            self.port_iter = YList(self)
                            self._segment_path = lambda: "location" + "[rack='" + str(self.rack) + "']" + "[card='" + str(self.card) + "']" + "[switch-id='" + str(self.switch_id) + "']"
                            self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/mlap/statistics/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Switch.Oper.Mlap.Statistics.Location, ['rack', 'card', 'switch_id', 'serial_num'], name, value)


                        class PortIter(Entity):
                            """
                            
                            
                            .. attribute:: port  (key)
                            
                            	Switch port
                            	**type**\: int
                            
                            	**range:** 0..127
                            
                            .. attribute:: protocol_state
                            
                            	Protocol invoked port state
                            	**type**\:  :py:class:`MlapStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.MlapStateEnum>`
                            
                            .. attribute:: protocol_state_changes
                            
                            	Number of state changes
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: protocol_pkt_sent
                            
                            	Number of protocol packets sent
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: protocol_pkt_recv
                            
                            	Number of protocol packets received
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: protocol_set_color_pkts_sent
                            
                            	Number of set\-active\-VLAN requests
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: protocol_set_color_pkts_recv
                            
                            	Number of set\-active\-VLAN responses
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: protocol_send_error
                            
                            	Number of protocol packet send errors
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: protocol_recv_error
                            
                            	Number of protocol packet receive errors
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: connects_to
                            
                            	Indicates what this port connects to
                            	**type**\: str
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Switch.Oper.Mlap.Statistics.Location.PortIter, self).__init__()

                                self.yang_name = "port-iter"
                                self.yang_parent_name = "location"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['port']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('port', YLeaf(YType.int32, 'port')),
                                    ('protocol_state', YLeaf(YType.enumeration, 'protocol-state')),
                                    ('protocol_state_changes', YLeaf(YType.uint32, 'protocol-state-changes')),
                                    ('protocol_pkt_sent', YLeaf(YType.uint64, 'protocol-pkt-sent')),
                                    ('protocol_pkt_recv', YLeaf(YType.uint64, 'protocol-pkt-recv')),
                                    ('protocol_set_color_pkts_sent', YLeaf(YType.uint64, 'protocol-set-color-pkts-sent')),
                                    ('protocol_set_color_pkts_recv', YLeaf(YType.uint64, 'protocol-set-color-pkts-recv')),
                                    ('protocol_send_error', YLeaf(YType.uint64, 'protocol-send-error')),
                                    ('protocol_recv_error', YLeaf(YType.uint64, 'protocol-recv-error')),
                                    ('connects_to', YLeaf(YType.str, 'connects-to')),
                                ])
                                self.port = None
                                self.protocol_state = None
                                self.protocol_state_changes = None
                                self.protocol_pkt_sent = None
                                self.protocol_pkt_recv = None
                                self.protocol_set_color_pkts_sent = None
                                self.protocol_set_color_pkts_recv = None
                                self.protocol_send_error = None
                                self.protocol_recv_error = None
                                self.connects_to = None
                                self._segment_path = lambda: "port-iter" + "[port='" + str(self.port) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Switch.Oper.Mlap.Statistics.Location.PortIter, ['port', 'protocol_state', 'protocol_state_changes', 'protocol_pkt_sent', 'protocol_pkt_recv', 'protocol_set_color_pkts_sent', 'protocol_set_color_pkts_recv', 'protocol_send_error', 'protocol_recv_error', 'connects_to'], name, value)


                class SummaryData(Entity):
                    """
                    
                    
                    .. attribute:: location
                    
                    	
                    	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Mlap.SummaryData.Location>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.Switch.Oper.Mlap.SummaryData, self).__init__()

                        self.yang_name = "summary-data"
                        self.yang_parent_name = "mlap"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("location", ("location", Controller.Switch.Oper.Mlap.SummaryData.Location))])
                        self._leafs = OrderedDict()

                        self.location = YList(self)
                        self._segment_path = lambda: "summary-data"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/mlap/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.Switch.Oper.Mlap.SummaryData, [], name, value)


                    class Location(Entity):
                        """
                        
                        
                        .. attribute:: rack  (key)
                        
                        	
                        	**type**\:  :py:class:`EsdmaRackNumEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaRackNumEnum>`
                        
                        .. attribute:: card  (key)
                        
                        	Card that owns a switch of interest
                        	**type**\:  :py:class:`EsdmaCpu <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaCpu>`
                        
                        .. attribute:: switch_id  (key)
                        
                        	Switch type
                        	**type**\:  :py:class:`EsdmaSwitchTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaSwitchTypeEnum>`
                        
                        .. attribute:: serial_num
                        
                        	Rack serial number
                        	**type**\: str
                        
                        .. attribute:: port_iter
                        
                        	
                        	**type**\: list of  		 :py:class:`PortIter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Mlap.SummaryData.Location.PortIter>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Switch.Oper.Mlap.SummaryData.Location, self).__init__()

                            self.yang_name = "location"
                            self.yang_parent_name = "summary-data"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = ['rack','card','switch_id']
                            self._child_classes = OrderedDict([("port-iter", ("port_iter", Controller.Switch.Oper.Mlap.SummaryData.Location.PortIter))])
                            self._leafs = OrderedDict([
                                ('rack', YLeaf(YType.enumeration, 'rack')),
                                ('card', YLeaf(YType.enumeration, 'card')),
                                ('switch_id', YLeaf(YType.enumeration, 'switch-id')),
                                ('serial_num', YLeaf(YType.str, 'serial-num')),
                            ])
                            self.rack = None
                            self.card = None
                            self.switch_id = None
                            self.serial_num = None

                            self.port_iter = YList(self)
                            self._segment_path = lambda: "location" + "[rack='" + str(self.rack) + "']" + "[card='" + str(self.card) + "']" + "[switch-id='" + str(self.switch_id) + "']"
                            self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/mlap/summary-data/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Switch.Oper.Mlap.SummaryData.Location, ['rack', 'card', 'switch_id', 'serial_num'], name, value)


                        class PortIter(Entity):
                            """
                            
                            
                            .. attribute:: port  (key)
                            
                            	Switch port
                            	**type**\: int
                            
                            	**range:** 0..127
                            
                            .. attribute:: phys_state
                            
                            	Physical port state
                            	**type**\:  :py:class:`EsdmaSwitchPortState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaSwitchPortState>`
                            
                            .. attribute:: admin_state
                            
                            	Administrative port state
                            	**type**\:  :py:class:`EsdmaSwitchPortState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaSwitchPortState>`
                            
                            .. attribute:: protocol_state
                            
                            	Protocol invoked port state
                            	**type**\:  :py:class:`MlapStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.MlapStateEnum>`
                            
                            .. attribute:: forwarding
                            
                            	Indicates whether this port is allowed to forward traffic
                            	**type**\:  :py:class:`SwitchForwardingState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.SwitchForwardingState>`
                            
                            .. attribute:: mlap_protocol
                            
                            	Indicates whether the internal or external MLAP protocol is active on this port
                            	**type**\:  :py:class:`MlapProtocolEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.MlapProtocolEnum>`
                            
                            .. attribute:: connects_to
                            
                            	Indicates what this port connects to
                            	**type**\: str
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Switch.Oper.Mlap.SummaryData.Location.PortIter, self).__init__()

                                self.yang_name = "port-iter"
                                self.yang_parent_name = "location"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['port']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('port', YLeaf(YType.int32, 'port')),
                                    ('phys_state', YLeaf(YType.enumeration, 'phys-state')),
                                    ('admin_state', YLeaf(YType.enumeration, 'admin-state')),
                                    ('protocol_state', YLeaf(YType.enumeration, 'protocol-state')),
                                    ('forwarding', YLeaf(YType.enumeration, 'forwarding')),
                                    ('mlap_protocol', YLeaf(YType.enumeration, 'mlap-protocol')),
                                    ('connects_to', YLeaf(YType.str, 'connects-to')),
                                ])
                                self.port = None
                                self.phys_state = None
                                self.admin_state = None
                                self.protocol_state = None
                                self.forwarding = None
                                self.mlap_protocol = None
                                self.connects_to = None
                                self._segment_path = lambda: "port-iter" + "[port='" + str(self.port) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Switch.Oper.Mlap.SummaryData.Location.PortIter, ['port', 'phys_state', 'admin_state', 'protocol_state', 'forwarding', 'mlap_protocol', 'connects_to'], name, value)


                class Debug(Entity):
                    """
                    
                    
                    .. attribute:: counters
                    
                    	
                    	**type**\:  :py:class:`Counters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Mlap.Debug.Counters>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.Switch.Oper.Mlap.Debug, self).__init__()

                        self.yang_name = "debug"
                        self.yang_parent_name = "mlap"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("counters", ("counters", Controller.Switch.Oper.Mlap.Debug.Counters))])
                        self._leafs = OrderedDict()

                        self.counters = Controller.Switch.Oper.Mlap.Debug.Counters()
                        self.counters.parent = self
                        self._children_name_map["counters"] = "counters"
                        self._segment_path = lambda: "debug"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/mlap/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.Switch.Oper.Mlap.Debug, [], name, value)


                    class Counters(Entity):
                        """
                        
                        
                        .. attribute:: location
                        
                        	
                        	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Mlap.Debug.Counters.Location>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Switch.Oper.Mlap.Debug.Counters, self).__init__()

                            self.yang_name = "counters"
                            self.yang_parent_name = "debug"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("location", ("location", Controller.Switch.Oper.Mlap.Debug.Counters.Location))])
                            self._leafs = OrderedDict()

                            self.location = YList(self)
                            self._segment_path = lambda: "counters"
                            self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/mlap/debug/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Switch.Oper.Mlap.Debug.Counters, [], name, value)


                        class Location(Entity):
                            """
                            
                            
                            .. attribute:: rack  (key)
                            
                            	
                            	**type**\:  :py:class:`EsdmaRackNumEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaRackNumEnum>`
                            
                            .. attribute:: card  (key)
                            
                            	
                            	**type**\:  :py:class:`EsdmaCpu <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaCpu>`
                            
                            .. attribute:: switch_id  (key)
                            
                            	
                            	**type**\:  :py:class:`EsdmaSwitchTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaSwitchTypeEnum>`
                            
                            .. attribute:: counters
                            
                            	
                            	**type**\:  :py:class:`Counters_ <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Mlap.Debug.Counters.Location.Counters_>`
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Switch.Oper.Mlap.Debug.Counters.Location, self).__init__()

                                self.yang_name = "location"
                                self.yang_parent_name = "counters"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = ['rack','card','switch_id']
                                self._child_classes = OrderedDict([("counters", ("counters", Controller.Switch.Oper.Mlap.Debug.Counters.Location.Counters_))])
                                self._leafs = OrderedDict([
                                    ('rack', YLeaf(YType.enumeration, 'rack')),
                                    ('card', YLeaf(YType.enumeration, 'card')),
                                    ('switch_id', YLeaf(YType.enumeration, 'switch-id')),
                                ])
                                self.rack = None
                                self.card = None
                                self.switch_id = None

                                self.counters = Controller.Switch.Oper.Mlap.Debug.Counters.Location.Counters_()
                                self.counters.parent = self
                                self._children_name_map["counters"] = "counters"
                                self._segment_path = lambda: "location" + "[rack='" + str(self.rack) + "']" + "[card='" + str(self.card) + "']" + "[switch-id='" + str(self.switch_id) + "']"
                                self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/mlap/debug/counters/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Switch.Oper.Mlap.Debug.Counters.Location, ['rack', 'card', 'switch_id'], name, value)


                            class Counters_(Entity):
                                """
                                
                                
                                .. attribute:: eval_all_links_called
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: timer_event_queued
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: rx_packet_event_queued
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: eval_all_links_queued
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: link_status_queued
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: admin_status_queued
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: fwd_status_queued
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: current_fifo_depth
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: max_fifo_depth
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: vlan_color_changes
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: current_mlap_timeout_ms_interval
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: aging_debug_enabled
                                
                                	
                                	**type**\: bool
                                
                                .. attribute:: trace_verbosity
                                
                                	
                                	**type**\:  :py:class:`MlapTraceVerbosity <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.MlapTraceVerbosity>`
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.Switch.Oper.Mlap.Debug.Counters.Location.Counters_, self).__init__()

                                    self.yang_name = "counters"
                                    self.yang_parent_name = "location"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('eval_all_links_called', YLeaf(YType.uint64, 'eval-all-links-called')),
                                        ('timer_event_queued', YLeaf(YType.uint64, 'timer-event-queued')),
                                        ('rx_packet_event_queued', YLeaf(YType.uint64, 'rx-packet-event-queued')),
                                        ('eval_all_links_queued', YLeaf(YType.uint64, 'eval-all-links-queued')),
                                        ('link_status_queued', YLeaf(YType.uint64, 'link-status-queued')),
                                        ('admin_status_queued', YLeaf(YType.uint64, 'admin-status-queued')),
                                        ('fwd_status_queued', YLeaf(YType.uint64, 'fwd-status-queued')),
                                        ('current_fifo_depth', YLeaf(YType.uint64, 'current-fifo-depth')),
                                        ('max_fifo_depth', YLeaf(YType.uint64, 'max-fifo-depth')),
                                        ('vlan_color_changes', YLeaf(YType.uint32, 'vlan-color-changes')),
                                        ('current_mlap_timeout_ms_interval', YLeaf(YType.uint32, 'current-mlap-timeout-ms-interval')),
                                        ('aging_debug_enabled', YLeaf(YType.boolean, 'aging-debug-enabled')),
                                        ('trace_verbosity', YLeaf(YType.enumeration, 'trace-verbosity')),
                                    ])
                                    self.eval_all_links_called = None
                                    self.timer_event_queued = None
                                    self.rx_packet_event_queued = None
                                    self.eval_all_links_queued = None
                                    self.link_status_queued = None
                                    self.admin_status_queued = None
                                    self.fwd_status_queued = None
                                    self.current_fifo_depth = None
                                    self.max_fifo_depth = None
                                    self.vlan_color_changes = None
                                    self.current_mlap_timeout_ms_interval = None
                                    self.aging_debug_enabled = None
                                    self.trace_verbosity = None
                                    self._segment_path = lambda: "counters"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.Switch.Oper.Mlap.Debug.Counters.Location.Counters_, ['eval_all_links_called', 'timer_event_queued', 'rx_packet_event_queued', 'eval_all_links_queued', 'link_status_queued', 'admin_status_queued', 'fwd_status_queued', 'current_fifo_depth', 'max_fifo_depth', 'vlan_color_changes', 'current_mlap_timeout_ms_interval', 'aging_debug_enabled', 'trace_verbosity'], name, value)


                class Trace(Entity):
                    """
                    show traceable processes
                    
                    .. attribute:: buffer  (key)
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: location
                    
                    	
                    	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Mlap.Trace.Location>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.Switch.Oper.Mlap.Trace, self).__init__()

                        self.yang_name = "trace"
                        self.yang_parent_name = "mlap"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['buffer']
                        self._child_classes = OrderedDict([("location", ("location", Controller.Switch.Oper.Mlap.Trace.Location))])
                        self._leafs = OrderedDict([
                            ('buffer', YLeaf(YType.str, 'buffer')),
                        ])
                        self.buffer = None

                        self.location = YList(self)
                        self._segment_path = lambda: "trace" + "[buffer='" + str(self.buffer) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/mlap/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.Switch.Oper.Mlap.Trace, [u'buffer'], name, value)


                    class Location(Entity):
                        """
                        
                        
                        .. attribute:: location_name  (key)
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: all_options
                        
                        	
                        	**type**\: list of  		 :py:class:`AllOptions <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Mlap.Trace.Location.AllOptions>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Switch.Oper.Mlap.Trace.Location, self).__init__()

                            self.yang_name = "location"
                            self.yang_parent_name = "trace"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['location_name']
                            self._child_classes = OrderedDict([("all-options", ("all_options", Controller.Switch.Oper.Mlap.Trace.Location.AllOptions))])
                            self._leafs = OrderedDict([
                                ('location_name', YLeaf(YType.str, 'location_name')),
                            ])
                            self.location_name = None

                            self.all_options = YList(self)
                            self._segment_path = lambda: "location" + "[location_name='" + str(self.location_name) + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Switch.Oper.Mlap.Trace.Location, [u'location_name'], name, value)


                        class AllOptions(Entity):
                            """
                            
                            
                            .. attribute:: option  (key)
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: trace_blocks
                            
                            	
                            	**type**\: list of  		 :py:class:`TraceBlocks <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Mlap.Trace.Location.AllOptions.TraceBlocks>`
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Switch.Oper.Mlap.Trace.Location.AllOptions, self).__init__()

                                self.yang_name = "all-options"
                                self.yang_parent_name = "location"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['option']
                                self._child_classes = OrderedDict([("trace-blocks", ("trace_blocks", Controller.Switch.Oper.Mlap.Trace.Location.AllOptions.TraceBlocks))])
                                self._leafs = OrderedDict([
                                    ('option', YLeaf(YType.str, 'option')),
                                ])
                                self.option = None

                                self.trace_blocks = YList(self)
                                self._segment_path = lambda: "all-options" + "[option='" + str(self.option) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Switch.Oper.Mlap.Trace.Location.AllOptions, [u'option'], name, value)


                            class TraceBlocks(Entity):
                                """
                                
                                
                                .. attribute:: data
                                
                                	Trace output block
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.Switch.Oper.Mlap.Trace.Location.AllOptions.TraceBlocks, self).__init__()

                                    self.yang_name = "trace-blocks"
                                    self.yang_parent_name = "all-options"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('data', YLeaf(YType.str, 'data')),
                                    ])
                                    self.data = None
                                    self._segment_path = lambda: "trace-blocks"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.Switch.Oper.Mlap.Trace.Location.AllOptions.TraceBlocks, [u'data'], name, value)


            class SwitchDebugCont(Entity):
                """
                
                
                .. attribute:: debug
                
                	
                	**type**\:  :py:class:`Debug <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.SwitchDebugCont.Debug>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Controller.Switch.Oper.SwitchDebugCont, self).__init__()

                    self.yang_name = "switch-debug-cont"
                    self.yang_parent_name = "oper"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("debug", ("debug", Controller.Switch.Oper.SwitchDebugCont.Debug))])
                    self._leafs = OrderedDict()

                    self.debug = Controller.Switch.Oper.SwitchDebugCont.Debug()
                    self.debug.parent = self
                    self._children_name_map["debug"] = "debug"
                    self._segment_path = lambda: "switch-debug-cont"
                    self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Controller.Switch.Oper.SwitchDebugCont, [], name, value)


                class Debug(Entity):
                    """
                    
                    
                    .. attribute:: counters
                    
                    	
                    	**type**\:  :py:class:`Counters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.SwitchDebugCont.Debug.Counters>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.Switch.Oper.SwitchDebugCont.Debug, self).__init__()

                        self.yang_name = "debug"
                        self.yang_parent_name = "switch-debug-cont"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("counters", ("counters", Controller.Switch.Oper.SwitchDebugCont.Debug.Counters))])
                        self._leafs = OrderedDict()

                        self.counters = Controller.Switch.Oper.SwitchDebugCont.Debug.Counters()
                        self.counters.parent = self
                        self._children_name_map["counters"] = "counters"
                        self._segment_path = lambda: "debug"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/switch-debug-cont/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.Switch.Oper.SwitchDebugCont.Debug, [], name, value)


                    class Counters(Entity):
                        """
                        
                        
                        .. attribute:: location
                        
                        	
                        	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.SwitchDebugCont.Debug.Counters.Location>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Switch.Oper.SwitchDebugCont.Debug.Counters, self).__init__()

                            self.yang_name = "counters"
                            self.yang_parent_name = "debug"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("location", ("location", Controller.Switch.Oper.SwitchDebugCont.Debug.Counters.Location))])
                            self._leafs = OrderedDict()

                            self.location = YList(self)
                            self._segment_path = lambda: "counters"
                            self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/switch-debug-cont/debug/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Switch.Oper.SwitchDebugCont.Debug.Counters, [], name, value)


                        class Location(Entity):
                            """
                            
                            
                            .. attribute:: rack  (key)
                            
                            	
                            	**type**\:  :py:class:`EsdmaRackNumEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaRackNumEnum>`
                            
                            .. attribute:: card  (key)
                            
                            	
                            	**type**\:  :py:class:`EsdmaCpu <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaCpu>`
                            
                            .. attribute:: switch_id  (key)
                            
                            	
                            	**type**\:  :py:class:`EsdmaSwitchTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaSwitchTypeEnum>`
                            
                            .. attribute:: counters
                            
                            	
                            	**type**\:  :py:class:`Counters_ <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.SwitchDebugCont.Debug.Counters.Location.Counters_>`
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Switch.Oper.SwitchDebugCont.Debug.Counters.Location, self).__init__()

                                self.yang_name = "location"
                                self.yang_parent_name = "counters"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = ['rack','card','switch_id']
                                self._child_classes = OrderedDict([("counters", ("counters", Controller.Switch.Oper.SwitchDebugCont.Debug.Counters.Location.Counters_))])
                                self._leafs = OrderedDict([
                                    ('rack', YLeaf(YType.enumeration, 'rack')),
                                    ('card', YLeaf(YType.enumeration, 'card')),
                                    ('switch_id', YLeaf(YType.enumeration, 'switch-id')),
                                ])
                                self.rack = None
                                self.card = None
                                self.switch_id = None

                                self.counters = Controller.Switch.Oper.SwitchDebugCont.Debug.Counters.Location.Counters_()
                                self.counters.parent = self
                                self._children_name_map["counters"] = "counters"
                                self._segment_path = lambda: "location" + "[rack='" + str(self.rack) + "']" + "[card='" + str(self.card) + "']" + "[switch-id='" + str(self.switch_id) + "']"
                                self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/switch-debug-cont/debug/counters/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Switch.Oper.SwitchDebugCont.Debug.Counters.Location, [u'rack', u'card', u'switch_id'], name, value)


                            class Counters_(Entity):
                                """
                                
                                
                                .. attribute:: phy_polling_enabled
                                
                                	
                                	**type**\: bool
                                
                                .. attribute:: tx_thread_wdog_cnt
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: rx_thread_wdog_cnt
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: task_lock_longest_wait_time
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: task_lock_longest_wait_event
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: task_lock_longest_held_time
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: task_lock_longest_held_event
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: task_unlock_longest_wait_time
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: task_unlock_longest_wait_event
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: dma_max_rx_dequeued_per_int
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: dma_rx_packets_dequeued
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: dma_rx_packet_dequeue_errors
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: dma_tx_packets_queued
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: dma_tx_packets_completed
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: dma_tx_packet_no_msg_errors
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: dma_tx_packet_msg_too_big_errors
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: dma_tx_packet_no_buffer_errors
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: dma_tx_packet_queue_errors
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: dma_tx_packet_completion_errors
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: dma_max_tx_freed_per_int
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: dma_tx_buf_alloc_count
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: dma_tx_buf_free_count
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: switch_core
                                
                                	
                                	**type**\: list of  		 :py:class:`SwitchCore <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.SwitchDebugCont.Debug.Counters.Location.Counters_.SwitchCore>`
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.Switch.Oper.SwitchDebugCont.Debug.Counters.Location.Counters_, self).__init__()

                                    self.yang_name = "counters"
                                    self.yang_parent_name = "location"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([("switch-core", ("switch_core", Controller.Switch.Oper.SwitchDebugCont.Debug.Counters.Location.Counters_.SwitchCore))])
                                    self._leafs = OrderedDict([
                                        ('phy_polling_enabled', YLeaf(YType.boolean, 'phy-polling-enabled')),
                                        ('tx_thread_wdog_cnt', YLeaf(YType.uint64, 'tx-thread-wdog-cnt')),
                                        ('rx_thread_wdog_cnt', YLeaf(YType.uint64, 'rx-thread-wdog-cnt')),
                                        ('task_lock_longest_wait_time', YLeaf(YType.uint64, 'task-lock-longest-wait-time')),
                                        ('task_lock_longest_wait_event', YLeaf(YType.uint32, 'task-lock-longest-wait-event')),
                                        ('task_lock_longest_held_time', YLeaf(YType.uint64, 'task-lock-longest-held-time')),
                                        ('task_lock_longest_held_event', YLeaf(YType.uint32, 'task-lock-longest-held-event')),
                                        ('task_unlock_longest_wait_time', YLeaf(YType.uint64, 'task-unlock-longest-wait-time')),
                                        ('task_unlock_longest_wait_event', YLeaf(YType.uint32, 'task-unlock-longest-wait-event')),
                                        ('dma_max_rx_dequeued_per_int', YLeaf(YType.uint64, 'dma-max-rx-dequeued-per-int')),
                                        ('dma_rx_packets_dequeued', YLeaf(YType.uint64, 'dma-rx-packets-dequeued')),
                                        ('dma_rx_packet_dequeue_errors', YLeaf(YType.uint64, 'dma-rx-packet-dequeue-errors')),
                                        ('dma_tx_packets_queued', YLeaf(YType.uint64, 'dma-tx-packets-queued')),
                                        ('dma_tx_packets_completed', YLeaf(YType.uint64, 'dma-tx-packets-completed')),
                                        ('dma_tx_packet_no_msg_errors', YLeaf(YType.uint64, 'dma-tx-packet-no-msg-errors')),
                                        ('dma_tx_packet_msg_too_big_errors', YLeaf(YType.uint64, 'dma-tx-packet-msg-too-big-errors')),
                                        ('dma_tx_packet_no_buffer_errors', YLeaf(YType.uint64, 'dma-tx-packet-no-buffer-errors')),
                                        ('dma_tx_packet_queue_errors', YLeaf(YType.uint64, 'dma-tx-packet-queue-errors')),
                                        ('dma_tx_packet_completion_errors', YLeaf(YType.uint64, 'dma-tx-packet-completion-errors')),
                                        ('dma_max_tx_freed_per_int', YLeaf(YType.uint64, 'dma-max-tx-freed-per-int')),
                                        ('dma_tx_buf_alloc_count', YLeaf(YType.uint64, 'dma-tx-buf-alloc-count')),
                                        ('dma_tx_buf_free_count', YLeaf(YType.uint64, 'dma-tx-buf-free-count')),
                                    ])
                                    self.phy_polling_enabled = None
                                    self.tx_thread_wdog_cnt = None
                                    self.rx_thread_wdog_cnt = None
                                    self.task_lock_longest_wait_time = None
                                    self.task_lock_longest_wait_event = None
                                    self.task_lock_longest_held_time = None
                                    self.task_lock_longest_held_event = None
                                    self.task_unlock_longest_wait_time = None
                                    self.task_unlock_longest_wait_event = None
                                    self.dma_max_rx_dequeued_per_int = None
                                    self.dma_rx_packets_dequeued = None
                                    self.dma_rx_packet_dequeue_errors = None
                                    self.dma_tx_packets_queued = None
                                    self.dma_tx_packets_completed = None
                                    self.dma_tx_packet_no_msg_errors = None
                                    self.dma_tx_packet_msg_too_big_errors = None
                                    self.dma_tx_packet_no_buffer_errors = None
                                    self.dma_tx_packet_queue_errors = None
                                    self.dma_tx_packet_completion_errors = None
                                    self.dma_max_tx_freed_per_int = None
                                    self.dma_tx_buf_alloc_count = None
                                    self.dma_tx_buf_free_count = None

                                    self.switch_core = YList(self)
                                    self._segment_path = lambda: "counters"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.Switch.Oper.SwitchDebugCont.Debug.Counters.Location.Counters_, [u'phy_polling_enabled', u'tx_thread_wdog_cnt', u'rx_thread_wdog_cnt', u'task_lock_longest_wait_time', u'task_lock_longest_wait_event', u'task_lock_longest_held_time', u'task_lock_longest_held_event', u'task_unlock_longest_wait_time', u'task_unlock_longest_wait_event', u'dma_max_rx_dequeued_per_int', u'dma_rx_packets_dequeued', u'dma_rx_packet_dequeue_errors', u'dma_tx_packets_queued', u'dma_tx_packets_completed', u'dma_tx_packet_no_msg_errors', u'dma_tx_packet_msg_too_big_errors', u'dma_tx_packet_no_buffer_errors', u'dma_tx_packet_queue_errors', u'dma_tx_packet_completion_errors', u'dma_max_tx_freed_per_int', u'dma_tx_buf_alloc_count', u'dma_tx_buf_free_count'], name, value)


                                class SwitchCore(Entity):
                                    """
                                    
                                    
                                    .. attribute:: core  (key)
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: msi_count
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: aer_count
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: hp_count
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: wdog_count
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: core_task_lock_longest_wait_time
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: core_task_lock_longest_held_time
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: core_task_unlock_longest_wait_time
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.Switch.Oper.SwitchDebugCont.Debug.Counters.Location.Counters_.SwitchCore, self).__init__()

                                        self.yang_name = "switch-core"
                                        self.yang_parent_name = "counters"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['core']
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('core', YLeaf(YType.uint8, 'core')),
                                            ('msi_count', YLeaf(YType.uint64, 'msi-count')),
                                            ('aer_count', YLeaf(YType.uint64, 'aer-count')),
                                            ('hp_count', YLeaf(YType.uint64, 'hp-count')),
                                            ('wdog_count', YLeaf(YType.uint64, 'wdog-count')),
                                            ('core_task_lock_longest_wait_time', YLeaf(YType.uint64, 'core-task-lock-longest-wait-time')),
                                            ('core_task_lock_longest_held_time', YLeaf(YType.uint64, 'core-task-lock-longest-held-time')),
                                            ('core_task_unlock_longest_wait_time', YLeaf(YType.uint64, 'core-task-unlock-longest-wait-time')),
                                        ])
                                        self.core = None
                                        self.msi_count = None
                                        self.aer_count = None
                                        self.hp_count = None
                                        self.wdog_count = None
                                        self.core_task_lock_longest_wait_time = None
                                        self.core_task_lock_longest_held_time = None
                                        self.core_task_unlock_longest_wait_time = None
                                        self._segment_path = lambda: "switch-core" + "[core='" + str(self.core) + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.Switch.Oper.SwitchDebugCont.Debug.Counters.Location.Counters_.SwitchCore, [u'core', u'msi_count', u'aer_count', u'hp_count', u'wdog_count', u'core_task_lock_longest_wait_time', u'core_task_lock_longest_held_time', u'core_task_unlock_longest_wait_time'], name, value)


            class Esd(Entity):
                """
                
                
                .. attribute:: instance
                
                	show traceable process instance names
                	**type**\: list of  		 :py:class:`Instance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Esd.Instance>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Controller.Switch.Oper.Esd, self).__init__()

                    self.yang_name = "esd"
                    self.yang_parent_name = "oper"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("instance", ("instance", Controller.Switch.Oper.Esd.Instance))])
                    self._leafs = OrderedDict()

                    self.instance = YList(self)
                    self._segment_path = lambda: "esd"
                    self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Controller.Switch.Oper.Esd, [], name, value)


                class Instance(Entity):
                    """
                    show traceable process instance names
                    
                    .. attribute:: process_name  (key)
                    
                    	
                    	**type**\: str
                    
                    .. attribute:: trace
                    
                    	show traceable processes
                    	**type**\: list of  		 :py:class:`Trace <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Esd.Instance.Trace>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.Switch.Oper.Esd.Instance, self).__init__()

                        self.yang_name = "instance"
                        self.yang_parent_name = "esd"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['process_name']
                        self._child_classes = OrderedDict([("trace", ("trace", Controller.Switch.Oper.Esd.Instance.Trace))])
                        self._leafs = OrderedDict([
                            ('process_name', YLeaf(YType.str, 'process_name')),
                        ])
                        self.process_name = None

                        self.trace = YList(self)
                        self._segment_path = lambda: "instance" + "[process_name='" + str(self.process_name) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/esd/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.Switch.Oper.Esd.Instance, [u'process_name'], name, value)


                    class Trace(Entity):
                        """
                        show traceable processes
                        
                        .. attribute:: buffer  (key)
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: location
                        
                        	
                        	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Esd.Instance.Trace.Location>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Switch.Oper.Esd.Instance.Trace, self).__init__()

                            self.yang_name = "trace"
                            self.yang_parent_name = "instance"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['buffer']
                            self._child_classes = OrderedDict([("location", ("location", Controller.Switch.Oper.Esd.Instance.Trace.Location))])
                            self._leafs = OrderedDict([
                                ('buffer', YLeaf(YType.str, 'buffer')),
                            ])
                            self.buffer = None

                            self.location = YList(self)
                            self._segment_path = lambda: "trace" + "[buffer='" + str(self.buffer) + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Switch.Oper.Esd.Instance.Trace, [u'buffer'], name, value)


                        class Location(Entity):
                            """
                            
                            
                            .. attribute:: location_name  (key)
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: all_options
                            
                            	
                            	**type**\: list of  		 :py:class:`AllOptions <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Esd.Instance.Trace.Location.AllOptions>`
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Switch.Oper.Esd.Instance.Trace.Location, self).__init__()

                                self.yang_name = "location"
                                self.yang_parent_name = "trace"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['location_name']
                                self._child_classes = OrderedDict([("all-options", ("all_options", Controller.Switch.Oper.Esd.Instance.Trace.Location.AllOptions))])
                                self._leafs = OrderedDict([
                                    ('location_name', YLeaf(YType.str, 'location_name')),
                                ])
                                self.location_name = None

                                self.all_options = YList(self)
                                self._segment_path = lambda: "location" + "[location_name='" + str(self.location_name) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Switch.Oper.Esd.Instance.Trace.Location, [u'location_name'], name, value)


                            class AllOptions(Entity):
                                """
                                
                                
                                .. attribute:: option  (key)
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: trace_blocks
                                
                                	
                                	**type**\: list of  		 :py:class:`TraceBlocks <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Esd.Instance.Trace.Location.AllOptions.TraceBlocks>`
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.Switch.Oper.Esd.Instance.Trace.Location.AllOptions, self).__init__()

                                    self.yang_name = "all-options"
                                    self.yang_parent_name = "location"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['option']
                                    self._child_classes = OrderedDict([("trace-blocks", ("trace_blocks", Controller.Switch.Oper.Esd.Instance.Trace.Location.AllOptions.TraceBlocks))])
                                    self._leafs = OrderedDict([
                                        ('option', YLeaf(YType.str, 'option')),
                                    ])
                                    self.option = None

                                    self.trace_blocks = YList(self)
                                    self._segment_path = lambda: "all-options" + "[option='" + str(self.option) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.Switch.Oper.Esd.Instance.Trace.Location.AllOptions, [u'option'], name, value)


                                class TraceBlocks(Entity):
                                    """
                                    
                                    
                                    .. attribute:: data
                                    
                                    	Trace output block
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.Switch.Oper.Esd.Instance.Trace.Location.AllOptions.TraceBlocks, self).__init__()

                                        self.yang_name = "trace-blocks"
                                        self.yang_parent_name = "all-options"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('data', YLeaf(YType.str, 'data')),
                                        ])
                                        self.data = None
                                        self._segment_path = lambda: "trace-blocks"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.Switch.Oper.Esd.Instance.Trace.Location.AllOptions.TraceBlocks, [u'data'], name, value)


            class MgmtAgent(Entity):
                """
                
                
                .. attribute:: esdma
                
                	
                	**type**\:  :py:class:`Esdma <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.MgmtAgent.Esdma>`
                
                .. attribute:: connections
                
                	
                	**type**\:  :py:class:`Connections <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.MgmtAgent.Connections>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Controller.Switch.Oper.MgmtAgent, self).__init__()

                    self.yang_name = "mgmt-agent"
                    self.yang_parent_name = "oper"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("esdma", ("esdma", Controller.Switch.Oper.MgmtAgent.Esdma)), ("connections", ("connections", Controller.Switch.Oper.MgmtAgent.Connections))])
                    self._leafs = OrderedDict()

                    self.esdma = Controller.Switch.Oper.MgmtAgent.Esdma()
                    self.esdma.parent = self
                    self._children_name_map["esdma"] = "esdma"

                    self.connections = Controller.Switch.Oper.MgmtAgent.Connections()
                    self.connections.parent = self
                    self._children_name_map["connections"] = "connections"
                    self._segment_path = lambda: "mgmt-agent"
                    self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Controller.Switch.Oper.MgmtAgent, [], name, value)


                class Esdma(Entity):
                    """
                    
                    
                    .. attribute:: trace
                    
                    	show traceable processes
                    	**type**\: list of  		 :py:class:`Trace <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.MgmtAgent.Esdma.Trace>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.Switch.Oper.MgmtAgent.Esdma, self).__init__()

                        self.yang_name = "esdma"
                        self.yang_parent_name = "mgmt-agent"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("trace", ("trace", Controller.Switch.Oper.MgmtAgent.Esdma.Trace))])
                        self._leafs = OrderedDict()

                        self.trace = YList(self)
                        self._segment_path = lambda: "esdma"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/mgmt-agent/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.Switch.Oper.MgmtAgent.Esdma, [], name, value)


                    class Trace(Entity):
                        """
                        show traceable processes
                        
                        .. attribute:: buffer  (key)
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: location
                        
                        	
                        	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.MgmtAgent.Esdma.Trace.Location>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Switch.Oper.MgmtAgent.Esdma.Trace, self).__init__()

                            self.yang_name = "trace"
                            self.yang_parent_name = "esdma"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = ['buffer']
                            self._child_classes = OrderedDict([("location", ("location", Controller.Switch.Oper.MgmtAgent.Esdma.Trace.Location))])
                            self._leafs = OrderedDict([
                                ('buffer', YLeaf(YType.str, 'buffer')),
                            ])
                            self.buffer = None

                            self.location = YList(self)
                            self._segment_path = lambda: "trace" + "[buffer='" + str(self.buffer) + "']"
                            self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/mgmt-agent/esdma/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Switch.Oper.MgmtAgent.Esdma.Trace, [u'buffer'], name, value)


                        class Location(Entity):
                            """
                            
                            
                            .. attribute:: location_name  (key)
                            
                            	
                            	**type**\: str
                            
                            .. attribute:: all_options
                            
                            	
                            	**type**\: list of  		 :py:class:`AllOptions <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.MgmtAgent.Esdma.Trace.Location.AllOptions>`
                            
                            

                            """

                            _prefix = 'calvados_controllers'
                            _revision = '2017-01-31'

                            def __init__(self):
                                super(Controller.Switch.Oper.MgmtAgent.Esdma.Trace.Location, self).__init__()

                                self.yang_name = "location"
                                self.yang_parent_name = "trace"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['location_name']
                                self._child_classes = OrderedDict([("all-options", ("all_options", Controller.Switch.Oper.MgmtAgent.Esdma.Trace.Location.AllOptions))])
                                self._leafs = OrderedDict([
                                    ('location_name', YLeaf(YType.str, 'location_name')),
                                ])
                                self.location_name = None

                                self.all_options = YList(self)
                                self._segment_path = lambda: "location" + "[location_name='" + str(self.location_name) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Controller.Switch.Oper.MgmtAgent.Esdma.Trace.Location, [u'location_name'], name, value)


                            class AllOptions(Entity):
                                """
                                
                                
                                .. attribute:: option  (key)
                                
                                	
                                	**type**\: str
                                
                                .. attribute:: trace_blocks
                                
                                	
                                	**type**\: list of  		 :py:class:`TraceBlocks <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.MgmtAgent.Esdma.Trace.Location.AllOptions.TraceBlocks>`
                                
                                

                                """

                                _prefix = 'calvados_controllers'
                                _revision = '2017-01-31'

                                def __init__(self):
                                    super(Controller.Switch.Oper.MgmtAgent.Esdma.Trace.Location.AllOptions, self).__init__()

                                    self.yang_name = "all-options"
                                    self.yang_parent_name = "location"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['option']
                                    self._child_classes = OrderedDict([("trace-blocks", ("trace_blocks", Controller.Switch.Oper.MgmtAgent.Esdma.Trace.Location.AllOptions.TraceBlocks))])
                                    self._leafs = OrderedDict([
                                        ('option', YLeaf(YType.str, 'option')),
                                    ])
                                    self.option = None

                                    self.trace_blocks = YList(self)
                                    self._segment_path = lambda: "all-options" + "[option='" + str(self.option) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Controller.Switch.Oper.MgmtAgent.Esdma.Trace.Location.AllOptions, [u'option'], name, value)


                                class TraceBlocks(Entity):
                                    """
                                    
                                    
                                    .. attribute:: data
                                    
                                    	Trace output block
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'calvados_controllers'
                                    _revision = '2017-01-31'

                                    def __init__(self):
                                        super(Controller.Switch.Oper.MgmtAgent.Esdma.Trace.Location.AllOptions.TraceBlocks, self).__init__()

                                        self.yang_name = "trace-blocks"
                                        self.yang_parent_name = "all-options"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('data', YLeaf(YType.str, 'data')),
                                        ])
                                        self.data = None
                                        self._segment_path = lambda: "trace-blocks"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Controller.Switch.Oper.MgmtAgent.Esdma.Trace.Location.AllOptions.TraceBlocks, [u'data'], name, value)


                class Connections(Entity):
                    """
                    
                    
                    .. attribute:: esdma_info
                    
                    	
                    	**type**\:  :py:class:`EsdmaInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.MgmtAgent.Connections.EsdmaInfo>`
                    
                    .. attribute:: sdr_nm_client_id
                    
                    	
                    	**type**\: list of  		 :py:class:`SdrNmClientId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.MgmtAgent.Connections.SdrNmClientId>`
                    
                    .. attribute:: sdr_nm_num_clients
                    
                    	
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: esd_client_id
                    
                    	
                    	**type**\: list of  		 :py:class:`EsdClientId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.MgmtAgent.Connections.EsdClientId>`
                    
                    .. attribute:: esd_client_num_clients
                    
                    	
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: mlap_client_id
                    
                    	
                    	**type**\: list of  		 :py:class:`MlapClientId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.MgmtAgent.Connections.MlapClientId>`
                    
                    .. attribute:: mlap_client_num_clients
                    
                    	
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.Switch.Oper.MgmtAgent.Connections, self).__init__()

                        self.yang_name = "connections"
                        self.yang_parent_name = "mgmt-agent"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("esdma-info", ("esdma_info", Controller.Switch.Oper.MgmtAgent.Connections.EsdmaInfo)), ("sdr-nm-client-id", ("sdr_nm_client_id", Controller.Switch.Oper.MgmtAgent.Connections.SdrNmClientId)), ("esd-client-id", ("esd_client_id", Controller.Switch.Oper.MgmtAgent.Connections.EsdClientId)), ("mlap-client-id", ("mlap_client_id", Controller.Switch.Oper.MgmtAgent.Connections.MlapClientId))])
                        self._leafs = OrderedDict([
                            ('sdr_nm_num_clients', YLeaf(YType.uint32, 'sdr-nm-num-clients')),
                            ('esd_client_num_clients', YLeaf(YType.uint32, 'esd-client-num-clients')),
                            ('mlap_client_num_clients', YLeaf(YType.uint32, 'mlap-client-num-clients')),
                        ])
                        self.sdr_nm_num_clients = None
                        self.esd_client_num_clients = None
                        self.mlap_client_num_clients = None

                        self.esdma_info = Controller.Switch.Oper.MgmtAgent.Connections.EsdmaInfo()
                        self.esdma_info.parent = self
                        self._children_name_map["esdma_info"] = "esdma-info"

                        self.sdr_nm_client_id = YList(self)
                        self.esd_client_id = YList(self)
                        self.mlap_client_id = YList(self)
                        self._segment_path = lambda: "connections"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/mgmt-agent/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.Switch.Oper.MgmtAgent.Connections, [u'sdr_nm_num_clients', u'esd_client_num_clients', u'mlap_client_num_clients'], name, value)


                    class EsdmaInfo(Entity):
                        """
                        
                        
                        .. attribute:: active_esdma_address
                        
                        	
                        	**type**\: union of the below types:
                        
                        		**type**\: str
                        
                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        		**type**\: str
                        
                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Switch.Oper.MgmtAgent.Connections.EsdmaInfo, self).__init__()

                            self.yang_name = "esdma-info"
                            self.yang_parent_name = "connections"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('active_esdma_address', YLeaf(YType.str, 'active-esdma-address')),
                            ])
                            self.active_esdma_address = None
                            self._segment_path = lambda: "esdma-info"
                            self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/mgmt-agent/connections/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Switch.Oper.MgmtAgent.Connections.EsdmaInfo, [u'active_esdma_address'], name, value)


                    class SdrNmClientId(Entity):
                        """
                        
                        
                        .. attribute:: sdr_nm_ip_address
                        
                        	
                        	**type**\: union of the below types:
                        
                        		**type**\: str
                        
                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        		**type**\: str
                        
                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: sdr_nm_port_num
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Switch.Oper.MgmtAgent.Connections.SdrNmClientId, self).__init__()

                            self.yang_name = "sdr-nm-client-id"
                            self.yang_parent_name = "connections"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('sdr_nm_ip_address', YLeaf(YType.str, 'sdr-nm-ip-address')),
                                ('sdr_nm_port_num', YLeaf(YType.uint16, 'sdr-nm-port-num')),
                            ])
                            self.sdr_nm_ip_address = None
                            self.sdr_nm_port_num = None
                            self._segment_path = lambda: "sdr-nm-client-id"
                            self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/mgmt-agent/connections/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Switch.Oper.MgmtAgent.Connections.SdrNmClientId, [u'sdr_nm_ip_address', u'sdr_nm_port_num'], name, value)


                    class EsdClientId(Entity):
                        """
                        
                        
                        .. attribute:: esd_client_ip_address
                        
                        	
                        	**type**\: union of the below types:
                        
                        		**type**\: str
                        
                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        		**type**\: str
                        
                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: esd_client_port_num
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: esd_client_location
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: esd_client_switch_info_cached
                        
                        	
                        	**type**\:  :py:class:`EsdmaSwitchYesNoEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaSwitchYesNoEnum>`
                        
                        .. attribute:: esd_client_sdr_info_cached
                        
                        	
                        	**type**\:  :py:class:`EsdmaSwitchYesNoEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaSwitchYesNoEnum>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Switch.Oper.MgmtAgent.Connections.EsdClientId, self).__init__()

                            self.yang_name = "esd-client-id"
                            self.yang_parent_name = "connections"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('esd_client_ip_address', YLeaf(YType.str, 'esd-client-ip-address')),
                                ('esd_client_port_num', YLeaf(YType.uint16, 'esd-client-port-num')),
                                ('esd_client_location', YLeaf(YType.str, 'esd-client-location')),
                                ('esd_client_switch_info_cached', YLeaf(YType.enumeration, 'esd-client-switch-info-cached')),
                                ('esd_client_sdr_info_cached', YLeaf(YType.enumeration, 'esd-client-sdr-info-cached')),
                            ])
                            self.esd_client_ip_address = None
                            self.esd_client_port_num = None
                            self.esd_client_location = None
                            self.esd_client_switch_info_cached = None
                            self.esd_client_sdr_info_cached = None
                            self._segment_path = lambda: "esd-client-id"
                            self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/mgmt-agent/connections/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Switch.Oper.MgmtAgent.Connections.EsdClientId, [u'esd_client_ip_address', u'esd_client_port_num', u'esd_client_location', u'esd_client_switch_info_cached', u'esd_client_sdr_info_cached'], name, value)


                    class MlapClientId(Entity):
                        """
                        
                        
                        .. attribute:: mlap_client_ip_address
                        
                        	
                        	**type**\: union of the below types:
                        
                        		**type**\: str
                        
                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        		**type**\: str
                        
                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: mlap_client_port_num
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: mlap_client_location
                        
                        	
                        	**type**\: str
                        
                        .. attribute:: mlap_client_switch_info_cached
                        
                        	
                        	**type**\:  :py:class:`EsdmaSwitchYesNoEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaSwitchYesNoEnum>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Switch.Oper.MgmtAgent.Connections.MlapClientId, self).__init__()

                            self.yang_name = "mlap-client-id"
                            self.yang_parent_name = "connections"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('mlap_client_ip_address', YLeaf(YType.str, 'mlap-client-ip-address')),
                                ('mlap_client_port_num', YLeaf(YType.uint16, 'mlap-client-port-num')),
                                ('mlap_client_location', YLeaf(YType.str, 'mlap-client-location')),
                                ('mlap_client_switch_info_cached', YLeaf(YType.enumeration, 'mlap-client-switch-info-cached')),
                            ])
                            self.mlap_client_ip_address = None
                            self.mlap_client_port_num = None
                            self.mlap_client_location = None
                            self.mlap_client_switch_info_cached = None
                            self._segment_path = lambda: "mlap-client-id"
                            self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/mgmt-agent/connections/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Switch.Oper.MgmtAgent.Connections.MlapClientId, [u'mlap_client_ip_address', u'mlap_client_port_num', u'mlap_client_location', u'mlap_client_switch_info_cached'], name, value)


            class PortState(Entity):
                """
                
                
                .. attribute:: location
                
                	
                	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.PortState.Location>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Controller.Switch.Oper.PortState, self).__init__()

                    self.yang_name = "port-state"
                    self.yang_parent_name = "oper"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("location", ("location", Controller.Switch.Oper.PortState.Location))])
                    self._leafs = OrderedDict()

                    self.location = YList(self)
                    self._segment_path = lambda: "port-state"
                    self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Controller.Switch.Oper.PortState, [], name, value)


                class Location(Entity):
                    """
                    
                    
                    .. attribute:: rack  (key)
                    
                    	
                    	**type**\:  :py:class:`EsdmaRackNumEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaRackNumEnum>`
                    
                    .. attribute:: card  (key)
                    
                    	Card that owns a switch of interest
                    	**type**\:  :py:class:`EsdmaCpu <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaCpu>`
                    
                    .. attribute:: switch_id  (key)
                    
                    	Switch type
                    	**type**\:  :py:class:`EsdmaSwitchTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaSwitchTypeEnum>`
                    
                    .. attribute:: port_iter
                    
                    	
                    	**type**\: list of  		 :py:class:`PortIter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.PortState.Location.PortIter>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.Switch.Oper.PortState.Location, self).__init__()

                        self.yang_name = "location"
                        self.yang_parent_name = "port-state"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['rack','card','switch_id']
                        self._child_classes = OrderedDict([("port-iter", ("port_iter", Controller.Switch.Oper.PortState.Location.PortIter))])
                        self._leafs = OrderedDict([
                            ('rack', YLeaf(YType.enumeration, 'rack')),
                            ('card', YLeaf(YType.enumeration, 'card')),
                            ('switch_id', YLeaf(YType.enumeration, 'switch-id')),
                        ])
                        self.rack = None
                        self.card = None
                        self.switch_id = None

                        self.port_iter = YList(self)
                        self._segment_path = lambda: "location" + "[rack='" + str(self.rack) + "']" + "[card='" + str(self.card) + "']" + "[switch-id='" + str(self.switch_id) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/port-state/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.Switch.Oper.PortState.Location, ['rack', 'card', 'switch_id'], name, value)


                    class PortIter(Entity):
                        """
                        
                        
                        .. attribute:: port  (key)
                        
                        	Switch port
                        	**type**\: int
                        
                        	**range:** 0..127
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Switch.Oper.PortState.Location.PortIter, self).__init__()

                            self.yang_name = "port-iter"
                            self.yang_parent_name = "location"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['port']
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('port', YLeaf(YType.int32, 'port')),
                            ])
                            self.port = None
                            self._segment_path = lambda: "port-iter" + "[port='" + str(self.port) + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Switch.Oper.PortState.Location.PortIter, ['port'], name, value)


            class Trunk(Entity):
                """
                
                
                .. attribute:: location
                
                	
                	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Trunk.Location>`
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Controller.Switch.Oper.Trunk, self).__init__()

                    self.yang_name = "trunk"
                    self.yang_parent_name = "oper"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("location", ("location", Controller.Switch.Oper.Trunk.Location))])
                    self._leafs = OrderedDict()

                    self.location = YList(self)
                    self._segment_path = lambda: "trunk"
                    self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Controller.Switch.Oper.Trunk, [], name, value)


                class Location(Entity):
                    """
                    
                    
                    .. attribute:: rack  (key)
                    
                    	Rack to display the switch trunk group information for
                    	**type**\:  :py:class:`EsdmaRackNumEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaRackNumEnum>`
                    
                    .. attribute:: card  (key)
                    
                    	Card to display the switch trunk group information for
                    	**type**\:  :py:class:`EsdmaCpu <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaCpu>`
                    
                    .. attribute:: switch_id  (key)
                    
                    	Switch type to display the switch trunk group information for
                    	**type**\:  :py:class:`EsdmaSwitchTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaSwitchTypeEnum>`
                    
                    .. attribute:: trunk_member_count
                    
                    	Number of member ports in the trunk group
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: trunk_name
                    
                    	Name of the trunk group
                    	**type**\: str
                    
                    .. attribute:: trunk_member_port_iter
                    
                    	
                    	**type**\: list of  		 :py:class:`TrunkMemberPortIter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.Switch.Oper.Trunk.Location.TrunkMemberPortIter>`
                    
                    

                    """

                    _prefix = 'calvados_controllers'
                    _revision = '2017-01-31'

                    def __init__(self):
                        super(Controller.Switch.Oper.Trunk.Location, self).__init__()

                        self.yang_name = "location"
                        self.yang_parent_name = "trunk"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['rack','card','switch_id']
                        self._child_classes = OrderedDict([("trunk-member-port-iter", ("trunk_member_port_iter", Controller.Switch.Oper.Trunk.Location.TrunkMemberPortIter))])
                        self._leafs = OrderedDict([
                            ('rack', YLeaf(YType.enumeration, 'rack')),
                            ('card', YLeaf(YType.enumeration, 'card')),
                            ('switch_id', YLeaf(YType.enumeration, 'switch-id')),
                            ('trunk_member_count', YLeaf(YType.uint32, 'trunk-member-count')),
                            ('trunk_name', YLeaf(YType.str, 'trunk-name')),
                        ])
                        self.rack = None
                        self.card = None
                        self.switch_id = None
                        self.trunk_member_count = None
                        self.trunk_name = None

                        self.trunk_member_port_iter = YList(self)
                        self._segment_path = lambda: "location" + "[rack='" + str(self.rack) + "']" + "[card='" + str(self.card) + "']" + "[switch-id='" + str(self.switch_id) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/switch/oper/trunk/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Controller.Switch.Oper.Trunk.Location, ['rack', 'card', 'switch_id', 'trunk_member_count', 'trunk_name'], name, value)


                    class TrunkMemberPortIter(Entity):
                        """
                        
                        
                        .. attribute:: trunk_member_port  (key)
                        
                        	Trunk Member Port
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: trunk_member_status
                        
                        	Trunk Member Status
                        	**type**\:  :py:class:`EsdmaTrunkMemberStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_ethsw_esdma_types.EsdmaTrunkMemberStatus>`
                        
                        

                        """

                        _prefix = 'calvados_controllers'
                        _revision = '2017-01-31'

                        def __init__(self):
                            super(Controller.Switch.Oper.Trunk.Location.TrunkMemberPortIter, self).__init__()

                            self.yang_name = "trunk-member-port-iter"
                            self.yang_parent_name = "location"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['trunk_member_port']
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('trunk_member_port', YLeaf(YType.uint32, 'trunk-member-port')),
                                ('trunk_member_status', YLeaf(YType.enumeration, 'trunk-member-status')),
                            ])
                            self.trunk_member_port = None
                            self.trunk_member_status = None
                            self._segment_path = lambda: "trunk-member-port-iter" + "[trunk-member-port='" + str(self.trunk_member_port) + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Controller.Switch.Oper.Trunk.Location.TrunkMemberPortIter, ['trunk_member_port', 'trunk_member_status'], name, value)


    class FabricAction(Entity):
        """
        
        
        .. attribute:: fabric
        
        	Fabric resource commands
        	**type**\:  :py:class:`Fabric <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.FabricAction.Fabric>`
        
        

        """

        _prefix = 'calvados_controllers'
        _revision = '2017-01-31'

        def __init__(self):
            super(Controller.FabricAction, self).__init__()

            self.yang_name = "fabric_action"
            self.yang_parent_name = "controller"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([("fabric", ("fabric", Controller.FabricAction.Fabric))])
            self._leafs = OrderedDict()

            self.fabric = Controller.FabricAction.Fabric()
            self.fabric.parent = self
            self._children_name_map["fabric"] = "fabric"
            self._segment_path = lambda: "fabric_action"
            self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Controller.FabricAction, [], name, value)


        class Fabric(Entity):
            """
            Fabric resource commands
            
            .. attribute:: ppu
            
            	Plane by plane upgrade
            	**type**\:  :py:class:`Ppu <ydk.models.cisco_ios_xr.Cisco_IOS_XR_sysadmin_controllers.Controller.FabricAction.Fabric.Ppu>`
            
            

            """

            _prefix = 'calvados_controllers'
            _revision = '2017-01-31'

            def __init__(self):
                super(Controller.FabricAction.Fabric, self).__init__()

                self.yang_name = "fabric"
                self.yang_parent_name = "fabric_action"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("ppu", ("ppu", Controller.FabricAction.Fabric.Ppu))])
                self._leafs = OrderedDict()

                self.ppu = Controller.FabricAction.Fabric.Ppu()
                self.ppu.parent = self
                self._children_name_map["ppu"] = "ppu"
                self._segment_path = lambda: "fabric"
                self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric_action/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Controller.FabricAction.Fabric, [], name, value)


            class Ppu(Entity):
                """
                Plane by plane upgrade.
                
                

                """

                _prefix = 'calvados_controllers'
                _revision = '2017-01-31'

                def __init__(self):
                    super(Controller.FabricAction.Fabric.Ppu, self).__init__()

                    self.yang_name = "ppu"
                    self.yang_parent_name = "fabric"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict()
                    self._segment_path = lambda: "ppu"
                    self._absolute_path = lambda: "Cisco-IOS-XR-sysadmin-controllers:controller/fabric_action/fabric/%s" % self._segment_path()

    def clone_ptr(self):
        self._top_entity = Controller()
        return self._top_entity

