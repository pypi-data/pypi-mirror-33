# -*- coding: utf-8 -*-
from Acquisition import aq_parent
from DateTime import DateTime
from Products.CMFPlone.utils import base_hasattr
from plone.app.content.interfaces import INameFromTitle
from random import randint
from zExceptions import BadRequest
from zope.container.interfaces import INameChooser

import transaction


def create(container, type_, id_=None, title=None):
    """Create a new content item."""

    # Generate a temporary id if the id is not given
    if not id_:
        now = DateTime()
        new_id = '{}.{}.{}{:04d}'.format(
            type_.lower().replace(' ', '_'),
            now.strftime('%Y-%m-%d'),
            str(now.millis())[7:],
            randint(0, 9999))
    else:
        new_id = id_

    try:
        new_id = container.invokeFactory(type_, new_id, title=title)
    except (BadRequest, ValueError) as exc:
        return {'error': {
            'type': exc.__class__.__name__,
            'message': exc.message,
        }}

    return container[new_id]


def rename(obj):
    """Rename an object if it has a temporary id."""

    # Archetypes objects may get renamed during deserialization.
    # Do not rename again.
    if (base_hasattr(obj, '_isIDAutoGenerated') and
            not obj._isIDAutoGenerated(obj.getId())):
        return

    container = aq_parent(obj)
    chooser = INameChooser(container)
    # INameFromTitle adaptable objects should not get a name
    # suggestion. NameChooser would prefer the given name instead of
    # the one provided by the INameFromTitle adapter.
    suggestion = None
    name_from_title = INameFromTitle(obj, None)
    if name_from_title is None:
        if base_hasattr(obj, 'generateNewId'):
            suggestion = obj.generateNewId()
        else:
            suggestion = obj.Title()
    name = chooser.chooseName(suggestion, obj)
    transaction.savepoint(optimistic=True)
    container.manage_renameObject(obj.getId(), name)
