# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_infomap')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_infomap')
    _infomap = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_infomap', [dirname(__file__)])
        except ImportError:
            import _infomap
            return _infomap
        try:
            _mod = imp.load_module('_infomap', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _infomap = swig_import_helper()
    del swig_import_helper
else:
    import _infomap
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class FlowModel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FlowModel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FlowModel, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _infomap.new_FlowModel()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _infomap.delete_FlowModel
    __del__ = lambda self: None
FlowModel_swigregister = _infomap.FlowModel_swigregister
FlowModel_swigregister(FlowModel)
cvar = _infomap.cvar
FlowModel.undirected = _infomap.cvar.FlowModel_undirected
FlowModel.directed = _infomap.cvar.FlowModel_directed
FlowModel.undirdir = _infomap.cvar.FlowModel_undirdir
FlowModel.outdirdir = _infomap.cvar.FlowModel_outdirdir
FlowModel.rawdir = _infomap.cvar.FlowModel_rawdir

class Config(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Config, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Config, name)
    __repr__ = _swig_repr
    __swig_setmethods__["networkFile"] = _infomap.Config_networkFile_set
    __swig_getmethods__["networkFile"] = _infomap.Config_networkFile_get
    if _newclass:
        networkFile = _swig_property(_infomap.Config_networkFile_get, _infomap.Config_networkFile_set)
    __swig_setmethods__["additionalInput"] = _infomap.Config_additionalInput_set
    __swig_getmethods__["additionalInput"] = _infomap.Config_additionalInput_get
    if _newclass:
        additionalInput = _swig_property(_infomap.Config_additionalInput_get, _infomap.Config_additionalInput_set)
    __swig_setmethods__["inputFormat"] = _infomap.Config_inputFormat_set
    __swig_getmethods__["inputFormat"] = _infomap.Config_inputFormat_get
    if _newclass:
        inputFormat = _swig_property(_infomap.Config_inputFormat_get, _infomap.Config_inputFormat_set)
    __swig_setmethods__["memoryInput"] = _infomap.Config_memoryInput_set
    __swig_getmethods__["memoryInput"] = _infomap.Config_memoryInput_get
    if _newclass:
        memoryInput = _swig_property(_infomap.Config_memoryInput_get, _infomap.Config_memoryInput_set)
    __swig_setmethods__["withMemory"] = _infomap.Config_withMemory_set
    __swig_getmethods__["withMemory"] = _infomap.Config_withMemory_get
    if _newclass:
        withMemory = _swig_property(_infomap.Config_withMemory_get, _infomap.Config_withMemory_set)
    __swig_setmethods__["weightedPaths"] = _infomap.Config_weightedPaths_set
    __swig_getmethods__["weightedPaths"] = _infomap.Config_weightedPaths_get
    if _newclass:
        weightedPaths = _swig_property(_infomap.Config_weightedPaths_get, _infomap.Config_weightedPaths_set)
    __swig_setmethods__["pathMarkovOrder"] = _infomap.Config_pathMarkovOrder_set
    __swig_getmethods__["pathMarkovOrder"] = _infomap.Config_pathMarkovOrder_get
    if _newclass:
        pathMarkovOrder = _swig_property(_infomap.Config_pathMarkovOrder_get, _infomap.Config_pathMarkovOrder_set)
    __swig_setmethods__["bipartite"] = _infomap.Config_bipartite_set
    __swig_getmethods__["bipartite"] = _infomap.Config_bipartite_get
    if _newclass:
        bipartite = _swig_property(_infomap.Config_bipartite_get, _infomap.Config_bipartite_set)
    __swig_setmethods__["skipAdjustBipartiteFlow"] = _infomap.Config_skipAdjustBipartiteFlow_set
    __swig_getmethods__["skipAdjustBipartiteFlow"] = _infomap.Config_skipAdjustBipartiteFlow_get
    if _newclass:
        skipAdjustBipartiteFlow = _swig_property(_infomap.Config_skipAdjustBipartiteFlow_get, _infomap.Config_skipAdjustBipartiteFlow_set)
    __swig_setmethods__["hardPartitions"] = _infomap.Config_hardPartitions_set
    __swig_getmethods__["hardPartitions"] = _infomap.Config_hardPartitions_get
    if _newclass:
        hardPartitions = _swig_property(_infomap.Config_hardPartitions_get, _infomap.Config_hardPartitions_set)
    __swig_setmethods__["nonBacktracking"] = _infomap.Config_nonBacktracking_set
    __swig_getmethods__["nonBacktracking"] = _infomap.Config_nonBacktracking_get
    if _newclass:
        nonBacktracking = _swig_property(_infomap.Config_nonBacktracking_get, _infomap.Config_nonBacktracking_set)
    __swig_setmethods__["parseWithoutIOStreams"] = _infomap.Config_parseWithoutIOStreams_set
    __swig_getmethods__["parseWithoutIOStreams"] = _infomap.Config_parseWithoutIOStreams_get
    if _newclass:
        parseWithoutIOStreams = _swig_property(_infomap.Config_parseWithoutIOStreams_get, _infomap.Config_parseWithoutIOStreams_set)
    __swig_setmethods__["zeroBasedNodeNumbers"] = _infomap.Config_zeroBasedNodeNumbers_set
    __swig_getmethods__["zeroBasedNodeNumbers"] = _infomap.Config_zeroBasedNodeNumbers_get
    if _newclass:
        zeroBasedNodeNumbers = _swig_property(_infomap.Config_zeroBasedNodeNumbers_get, _infomap.Config_zeroBasedNodeNumbers_set)
    __swig_setmethods__["includeSelfLinks"] = _infomap.Config_includeSelfLinks_set
    __swig_getmethods__["includeSelfLinks"] = _infomap.Config_includeSelfLinks_get
    if _newclass:
        includeSelfLinks = _swig_property(_infomap.Config_includeSelfLinks_get, _infomap.Config_includeSelfLinks_set)
    __swig_setmethods__["ignoreEdgeWeights"] = _infomap.Config_ignoreEdgeWeights_set
    __swig_getmethods__["ignoreEdgeWeights"] = _infomap.Config_ignoreEdgeWeights_get
    if _newclass:
        ignoreEdgeWeights = _swig_property(_infomap.Config_ignoreEdgeWeights_get, _infomap.Config_ignoreEdgeWeights_set)
    __swig_setmethods__["skipCompleteDanglingMemoryNodes"] = _infomap.Config_skipCompleteDanglingMemoryNodes_set
    __swig_getmethods__["skipCompleteDanglingMemoryNodes"] = _infomap.Config_skipCompleteDanglingMemoryNodes_get
    if _newclass:
        skipCompleteDanglingMemoryNodes = _swig_property(_infomap.Config_skipCompleteDanglingMemoryNodes_get, _infomap.Config_skipCompleteDanglingMemoryNodes_set)
    __swig_setmethods__["nodeLimit"] = _infomap.Config_nodeLimit_set
    __swig_getmethods__["nodeLimit"] = _infomap.Config_nodeLimit_get
    if _newclass:
        nodeLimit = _swig_property(_infomap.Config_nodeLimit_get, _infomap.Config_nodeLimit_set)
    __swig_setmethods__["preClusterMultilayer"] = _infomap.Config_preClusterMultilayer_set
    __swig_getmethods__["preClusterMultilayer"] = _infomap.Config_preClusterMultilayer_get
    if _newclass:
        preClusterMultilayer = _swig_property(_infomap.Config_preClusterMultilayer_get, _infomap.Config_preClusterMultilayer_set)
    __swig_setmethods__["clusterDataFile"] = _infomap.Config_clusterDataFile_set
    __swig_getmethods__["clusterDataFile"] = _infomap.Config_clusterDataFile_get
    if _newclass:
        clusterDataFile = _swig_property(_infomap.Config_clusterDataFile_get, _infomap.Config_clusterDataFile_set)
    __swig_setmethods__["clusterDataIsHard"] = _infomap.Config_clusterDataIsHard_set
    __swig_getmethods__["clusterDataIsHard"] = _infomap.Config_clusterDataIsHard_get
    if _newclass:
        clusterDataIsHard = _swig_property(_infomap.Config_clusterDataIsHard_get, _infomap.Config_clusterDataIsHard_set)
    __swig_setmethods__["noInfomap"] = _infomap.Config_noInfomap_set
    __swig_getmethods__["noInfomap"] = _infomap.Config_noInfomap_get
    if _newclass:
        noInfomap = _swig_property(_infomap.Config_noInfomap_get, _infomap.Config_noInfomap_set)
    __swig_setmethods__["flowModel"] = _infomap.Config_flowModel_set
    __swig_getmethods__["flowModel"] = _infomap.Config_flowModel_get
    if _newclass:
        flowModel = _swig_property(_infomap.Config_flowModel_get, _infomap.Config_flowModel_set)
    __swig_setmethods__["directed"] = _infomap.Config_directed_set
    __swig_getmethods__["directed"] = _infomap.Config_directed_get
    if _newclass:
        directed = _swig_property(_infomap.Config_directed_get, _infomap.Config_directed_set)
    __swig_setmethods__["undirdir"] = _infomap.Config_undirdir_set
    __swig_getmethods__["undirdir"] = _infomap.Config_undirdir_get
    if _newclass:
        undirdir = _swig_property(_infomap.Config_undirdir_get, _infomap.Config_undirdir_set)
    __swig_setmethods__["outdirdir"] = _infomap.Config_outdirdir_set
    __swig_getmethods__["outdirdir"] = _infomap.Config_outdirdir_get
    if _newclass:
        outdirdir = _swig_property(_infomap.Config_outdirdir_get, _infomap.Config_outdirdir_set)
    __swig_setmethods__["rawdir"] = _infomap.Config_rawdir_set
    __swig_getmethods__["rawdir"] = _infomap.Config_rawdir_get
    if _newclass:
        rawdir = _swig_property(_infomap.Config_rawdir_get, _infomap.Config_rawdir_set)
    __swig_setmethods__["teleportToNodes"] = _infomap.Config_teleportToNodes_set
    __swig_getmethods__["teleportToNodes"] = _infomap.Config_teleportToNodes_get
    if _newclass:
        teleportToNodes = _swig_property(_infomap.Config_teleportToNodes_get, _infomap.Config_teleportToNodes_set)
    __swig_setmethods__["selfTeleportationProbability"] = _infomap.Config_selfTeleportationProbability_set
    __swig_getmethods__["selfTeleportationProbability"] = _infomap.Config_selfTeleportationProbability_get
    if _newclass:
        selfTeleportationProbability = _swig_property(_infomap.Config_selfTeleportationProbability_get, _infomap.Config_selfTeleportationProbability_set)
    __swig_setmethods__["markovTime"] = _infomap.Config_markovTime_set
    __swig_getmethods__["markovTime"] = _infomap.Config_markovTime_get
    if _newclass:
        markovTime = _swig_property(_infomap.Config_markovTime_get, _infomap.Config_markovTime_set)
    __swig_setmethods__["multilayerRelaxRate"] = _infomap.Config_multilayerRelaxRate_set
    __swig_getmethods__["multilayerRelaxRate"] = _infomap.Config_multilayerRelaxRate_get
    if _newclass:
        multilayerRelaxRate = _swig_property(_infomap.Config_multilayerRelaxRate_get, _infomap.Config_multilayerRelaxRate_set)
    __swig_setmethods__["multilayerRelaxLimit"] = _infomap.Config_multilayerRelaxLimit_set
    __swig_getmethods__["multilayerRelaxLimit"] = _infomap.Config_multilayerRelaxLimit_get
    if _newclass:
        multilayerRelaxLimit = _swig_property(_infomap.Config_multilayerRelaxLimit_get, _infomap.Config_multilayerRelaxLimit_set)
    __swig_setmethods__["twoLevel"] = _infomap.Config_twoLevel_set
    __swig_getmethods__["twoLevel"] = _infomap.Config_twoLevel_get
    if _newclass:
        twoLevel = _swig_property(_infomap.Config_twoLevel_get, _infomap.Config_twoLevel_set)
    __swig_setmethods__["noCoarseTune"] = _infomap.Config_noCoarseTune_set
    __swig_getmethods__["noCoarseTune"] = _infomap.Config_noCoarseTune_get
    if _newclass:
        noCoarseTune = _swig_property(_infomap.Config_noCoarseTune_get, _infomap.Config_noCoarseTune_set)
    __swig_setmethods__["directedEdges"] = _infomap.Config_directedEdges_set
    __swig_getmethods__["directedEdges"] = _infomap.Config_directedEdges_get
    if _newclass:
        directedEdges = _swig_property(_infomap.Config_directedEdges_get, _infomap.Config_directedEdges_set)
    __swig_setmethods__["recordedTeleportation"] = _infomap.Config_recordedTeleportation_set
    __swig_getmethods__["recordedTeleportation"] = _infomap.Config_recordedTeleportation_get
    if _newclass:
        recordedTeleportation = _swig_property(_infomap.Config_recordedTeleportation_get, _infomap.Config_recordedTeleportation_set)
    __swig_setmethods__["teleportationProbability"] = _infomap.Config_teleportationProbability_set
    __swig_getmethods__["teleportationProbability"] = _infomap.Config_teleportationProbability_get
    if _newclass:
        teleportationProbability = _swig_property(_infomap.Config_teleportationProbability_get, _infomap.Config_teleportationProbability_set)
    __swig_setmethods__["preferredNumberOfModules"] = _infomap.Config_preferredNumberOfModules_set
    __swig_getmethods__["preferredNumberOfModules"] = _infomap.Config_preferredNumberOfModules_get
    if _newclass:
        preferredNumberOfModules = _swig_property(_infomap.Config_preferredNumberOfModules_get, _infomap.Config_preferredNumberOfModules_set)
    __swig_setmethods__["seedToRandomNumberGenerator"] = _infomap.Config_seedToRandomNumberGenerator_set
    __swig_getmethods__["seedToRandomNumberGenerator"] = _infomap.Config_seedToRandomNumberGenerator_get
    if _newclass:
        seedToRandomNumberGenerator = _swig_property(_infomap.Config_seedToRandomNumberGenerator_get, _infomap.Config_seedToRandomNumberGenerator_set)
    __swig_setmethods__["numTrials"] = _infomap.Config_numTrials_set
    __swig_getmethods__["numTrials"] = _infomap.Config_numTrials_get
    if _newclass:
        numTrials = _swig_property(_infomap.Config_numTrials_get, _infomap.Config_numTrials_set)
    __swig_setmethods__["minimumCodelengthImprovement"] = _infomap.Config_minimumCodelengthImprovement_set
    __swig_getmethods__["minimumCodelengthImprovement"] = _infomap.Config_minimumCodelengthImprovement_get
    if _newclass:
        minimumCodelengthImprovement = _swig_property(_infomap.Config_minimumCodelengthImprovement_get, _infomap.Config_minimumCodelengthImprovement_set)
    __swig_setmethods__["minimumSingleNodeCodelengthImprovement"] = _infomap.Config_minimumSingleNodeCodelengthImprovement_set
    __swig_getmethods__["minimumSingleNodeCodelengthImprovement"] = _infomap.Config_minimumSingleNodeCodelengthImprovement_get
    if _newclass:
        minimumSingleNodeCodelengthImprovement = _swig_property(_infomap.Config_minimumSingleNodeCodelengthImprovement_get, _infomap.Config_minimumSingleNodeCodelengthImprovement_set)
    __swig_setmethods__["randomizeCoreLoopLimit"] = _infomap.Config_randomizeCoreLoopLimit_set
    __swig_getmethods__["randomizeCoreLoopLimit"] = _infomap.Config_randomizeCoreLoopLimit_get
    if _newclass:
        randomizeCoreLoopLimit = _swig_property(_infomap.Config_randomizeCoreLoopLimit_get, _infomap.Config_randomizeCoreLoopLimit_set)
    __swig_setmethods__["coreLoopLimit"] = _infomap.Config_coreLoopLimit_set
    __swig_getmethods__["coreLoopLimit"] = _infomap.Config_coreLoopLimit_get
    if _newclass:
        coreLoopLimit = _swig_property(_infomap.Config_coreLoopLimit_get, _infomap.Config_coreLoopLimit_set)
    __swig_setmethods__["levelAggregationLimit"] = _infomap.Config_levelAggregationLimit_set
    __swig_getmethods__["levelAggregationLimit"] = _infomap.Config_levelAggregationLimit_get
    if _newclass:
        levelAggregationLimit = _swig_property(_infomap.Config_levelAggregationLimit_get, _infomap.Config_levelAggregationLimit_set)
    __swig_setmethods__["tuneIterationLimit"] = _infomap.Config_tuneIterationLimit_set
    __swig_getmethods__["tuneIterationLimit"] = _infomap.Config_tuneIterationLimit_get
    if _newclass:
        tuneIterationLimit = _swig_property(_infomap.Config_tuneIterationLimit_get, _infomap.Config_tuneIterationLimit_set)
    __swig_setmethods__["minimumRelativeTuneIterationImprovement"] = _infomap.Config_minimumRelativeTuneIterationImprovement_set
    __swig_getmethods__["minimumRelativeTuneIterationImprovement"] = _infomap.Config_minimumRelativeTuneIterationImprovement_get
    if _newclass:
        minimumRelativeTuneIterationImprovement = _swig_property(_infomap.Config_minimumRelativeTuneIterationImprovement_get, _infomap.Config_minimumRelativeTuneIterationImprovement_set)
    __swig_setmethods__["fastCoarseTunePartition"] = _infomap.Config_fastCoarseTunePartition_set
    __swig_getmethods__["fastCoarseTunePartition"] = _infomap.Config_fastCoarseTunePartition_get
    if _newclass:
        fastCoarseTunePartition = _swig_property(_infomap.Config_fastCoarseTunePartition_get, _infomap.Config_fastCoarseTunePartition_set)
    __swig_setmethods__["alternateCoarseTuneLevel"] = _infomap.Config_alternateCoarseTuneLevel_set
    __swig_getmethods__["alternateCoarseTuneLevel"] = _infomap.Config_alternateCoarseTuneLevel_get
    if _newclass:
        alternateCoarseTuneLevel = _swig_property(_infomap.Config_alternateCoarseTuneLevel_get, _infomap.Config_alternateCoarseTuneLevel_set)
    __swig_setmethods__["coarseTuneLevel"] = _infomap.Config_coarseTuneLevel_set
    __swig_getmethods__["coarseTuneLevel"] = _infomap.Config_coarseTuneLevel_get
    if _newclass:
        coarseTuneLevel = _swig_property(_infomap.Config_coarseTuneLevel_get, _infomap.Config_coarseTuneLevel_set)
    __swig_setmethods__["superLevelLimit"] = _infomap.Config_superLevelLimit_set
    __swig_getmethods__["superLevelLimit"] = _infomap.Config_superLevelLimit_get
    if _newclass:
        superLevelLimit = _swig_property(_infomap.Config_superLevelLimit_get, _infomap.Config_superLevelLimit_set)
    __swig_setmethods__["onlySuperModules"] = _infomap.Config_onlySuperModules_set
    __swig_getmethods__["onlySuperModules"] = _infomap.Config_onlySuperModules_get
    if _newclass:
        onlySuperModules = _swig_property(_infomap.Config_onlySuperModules_get, _infomap.Config_onlySuperModules_set)
    __swig_setmethods__["fastHierarchicalSolution"] = _infomap.Config_fastHierarchicalSolution_set
    __swig_getmethods__["fastHierarchicalSolution"] = _infomap.Config_fastHierarchicalSolution_get
    if _newclass:
        fastHierarchicalSolution = _swig_property(_infomap.Config_fastHierarchicalSolution_get, _infomap.Config_fastHierarchicalSolution_set)
    __swig_setmethods__["fastFirstIteration"] = _infomap.Config_fastFirstIteration_set
    __swig_getmethods__["fastFirstIteration"] = _infomap.Config_fastFirstIteration_get
    if _newclass:
        fastFirstIteration = _swig_property(_infomap.Config_fastFirstIteration_get, _infomap.Config_fastFirstIteration_set)
    __swig_setmethods__["skipReplaceToOneModuleIfBetter"] = _infomap.Config_skipReplaceToOneModuleIfBetter_set
    __swig_getmethods__["skipReplaceToOneModuleIfBetter"] = _infomap.Config_skipReplaceToOneModuleIfBetter_get
    if _newclass:
        skipReplaceToOneModuleIfBetter = _swig_property(_infomap.Config_skipReplaceToOneModuleIfBetter_get, _infomap.Config_skipReplaceToOneModuleIfBetter_set)
    __swig_setmethods__["lowMemoryPriority"] = _infomap.Config_lowMemoryPriority_set
    __swig_getmethods__["lowMemoryPriority"] = _infomap.Config_lowMemoryPriority_get
    if _newclass:
        lowMemoryPriority = _swig_property(_infomap.Config_lowMemoryPriority_get, _infomap.Config_lowMemoryPriority_set)
    __swig_setmethods__["innerParallelization"] = _infomap.Config_innerParallelization_set
    __swig_getmethods__["innerParallelization"] = _infomap.Config_innerParallelization_get
    if _newclass:
        innerParallelization = _swig_property(_infomap.Config_innerParallelization_get, _infomap.Config_innerParallelization_set)
    __swig_setmethods__["outDirectory"] = _infomap.Config_outDirectory_set
    __swig_getmethods__["outDirectory"] = _infomap.Config_outDirectory_get
    if _newclass:
        outDirectory = _swig_property(_infomap.Config_outDirectory_get, _infomap.Config_outDirectory_set)
    __swig_setmethods__["outName"] = _infomap.Config_outName_set
    __swig_getmethods__["outName"] = _infomap.Config_outName_get
    if _newclass:
        outName = _swig_property(_infomap.Config_outName_get, _infomap.Config_outName_set)
    __swig_setmethods__["originallyUndirected"] = _infomap.Config_originallyUndirected_set
    __swig_getmethods__["originallyUndirected"] = _infomap.Config_originallyUndirected_get
    if _newclass:
        originallyUndirected = _swig_property(_infomap.Config_originallyUndirected_get, _infomap.Config_originallyUndirected_set)
    __swig_setmethods__["printTree"] = _infomap.Config_printTree_set
    __swig_getmethods__["printTree"] = _infomap.Config_printTree_get
    if _newclass:
        printTree = _swig_property(_infomap.Config_printTree_get, _infomap.Config_printTree_set)
    __swig_setmethods__["printFlowTree"] = _infomap.Config_printFlowTree_set
    __swig_getmethods__["printFlowTree"] = _infomap.Config_printFlowTree_get
    if _newclass:
        printFlowTree = _swig_property(_infomap.Config_printFlowTree_get, _infomap.Config_printFlowTree_set)
    __swig_setmethods__["printMap"] = _infomap.Config_printMap_set
    __swig_getmethods__["printMap"] = _infomap.Config_printMap_get
    if _newclass:
        printMap = _swig_property(_infomap.Config_printMap_get, _infomap.Config_printMap_set)
    __swig_setmethods__["printClu"] = _infomap.Config_printClu_set
    __swig_getmethods__["printClu"] = _infomap.Config_printClu_get
    if _newclass:
        printClu = _swig_property(_infomap.Config_printClu_get, _infomap.Config_printClu_set)
    __swig_setmethods__["printNodeRanks"] = _infomap.Config_printNodeRanks_set
    __swig_getmethods__["printNodeRanks"] = _infomap.Config_printNodeRanks_get
    if _newclass:
        printNodeRanks = _swig_property(_infomap.Config_printNodeRanks_get, _infomap.Config_printNodeRanks_set)
    __swig_setmethods__["printFlowNetwork"] = _infomap.Config_printFlowNetwork_set
    __swig_getmethods__["printFlowNetwork"] = _infomap.Config_printFlowNetwork_get
    if _newclass:
        printFlowNetwork = _swig_property(_infomap.Config_printFlowNetwork_get, _infomap.Config_printFlowNetwork_set)
    __swig_setmethods__["printPajekNetwork"] = _infomap.Config_printPajekNetwork_set
    __swig_getmethods__["printPajekNetwork"] = _infomap.Config_printPajekNetwork_get
    if _newclass:
        printPajekNetwork = _swig_property(_infomap.Config_printPajekNetwork_get, _infomap.Config_printPajekNetwork_set)
    __swig_setmethods__["printStateNetwork"] = _infomap.Config_printStateNetwork_set
    __swig_getmethods__["printStateNetwork"] = _infomap.Config_printStateNetwork_get
    if _newclass:
        printStateNetwork = _swig_property(_infomap.Config_printStateNetwork_get, _infomap.Config_printStateNetwork_set)
    __swig_setmethods__["printBinaryTree"] = _infomap.Config_printBinaryTree_set
    __swig_getmethods__["printBinaryTree"] = _infomap.Config_printBinaryTree_get
    if _newclass:
        printBinaryTree = _swig_property(_infomap.Config_printBinaryTree_get, _infomap.Config_printBinaryTree_set)
    __swig_setmethods__["printBinaryFlowTree"] = _infomap.Config_printBinaryFlowTree_set
    __swig_getmethods__["printBinaryFlowTree"] = _infomap.Config_printBinaryFlowTree_get
    if _newclass:
        printBinaryFlowTree = _swig_property(_infomap.Config_printBinaryFlowTree_get, _infomap.Config_printBinaryFlowTree_set)
    __swig_setmethods__["printExpanded"] = _infomap.Config_printExpanded_set
    __swig_getmethods__["printExpanded"] = _infomap.Config_printExpanded_get
    if _newclass:
        printExpanded = _swig_property(_infomap.Config_printExpanded_get, _infomap.Config_printExpanded_set)
    __swig_setmethods__["noFileOutput"] = _infomap.Config_noFileOutput_set
    __swig_getmethods__["noFileOutput"] = _infomap.Config_noFileOutput_get
    if _newclass:
        noFileOutput = _swig_property(_infomap.Config_noFileOutput_get, _infomap.Config_noFileOutput_set)
    __swig_setmethods__["verbosity"] = _infomap.Config_verbosity_set
    __swig_getmethods__["verbosity"] = _infomap.Config_verbosity_get
    if _newclass:
        verbosity = _swig_property(_infomap.Config_verbosity_get, _infomap.Config_verbosity_set)
    __swig_setmethods__["verboseNumberPrecision"] = _infomap.Config_verboseNumberPrecision_set
    __swig_getmethods__["verboseNumberPrecision"] = _infomap.Config_verboseNumberPrecision_get
    if _newclass:
        verboseNumberPrecision = _swig_property(_infomap.Config_verboseNumberPrecision_get, _infomap.Config_verboseNumberPrecision_set)
    __swig_setmethods__["silent"] = _infomap.Config_silent_set
    __swig_getmethods__["silent"] = _infomap.Config_silent_get
    if _newclass:
        silent = _swig_property(_infomap.Config_silent_get, _infomap.Config_silent_set)
    __swig_setmethods__["benchmark"] = _infomap.Config_benchmark_set
    __swig_getmethods__["benchmark"] = _infomap.Config_benchmark_get
    if _newclass:
        benchmark = _swig_property(_infomap.Config_benchmark_get, _infomap.Config_benchmark_set)
    __swig_setmethods__["maxNodeIndexVisible"] = _infomap.Config_maxNodeIndexVisible_set
    __swig_getmethods__["maxNodeIndexVisible"] = _infomap.Config_maxNodeIndexVisible_get
    if _newclass:
        maxNodeIndexVisible = _swig_property(_infomap.Config_maxNodeIndexVisible_get, _infomap.Config_maxNodeIndexVisible_set)
    __swig_setmethods__["showBiNodes"] = _infomap.Config_showBiNodes_set
    __swig_getmethods__["showBiNodes"] = _infomap.Config_showBiNodes_get
    if _newclass:
        showBiNodes = _swig_property(_infomap.Config_showBiNodes_get, _infomap.Config_showBiNodes_set)
    __swig_setmethods__["minBipartiteNodeIndex"] = _infomap.Config_minBipartiteNodeIndex_set
    __swig_getmethods__["minBipartiteNodeIndex"] = _infomap.Config_minBipartiteNodeIndex_get
    if _newclass:
        minBipartiteNodeIndex = _swig_property(_infomap.Config_minBipartiteNodeIndex_get, _infomap.Config_minBipartiteNodeIndex_set)
    __swig_setmethods__["startDate"] = _infomap.Config_startDate_set
    __swig_getmethods__["startDate"] = _infomap.Config_startDate_get
    if _newclass:
        startDate = _swig_property(_infomap.Config_startDate_get, _infomap.Config_startDate_set)
    __swig_setmethods__["version"] = _infomap.Config_version_set
    __swig_getmethods__["version"] = _infomap.Config_version_get
    if _newclass:
        version = _swig_property(_infomap.Config_version_get, _infomap.Config_version_set)
    __swig_setmethods__["parsedString"] = _infomap.Config_parsedString_set
    __swig_getmethods__["parsedString"] = _infomap.Config_parsedString_get
    if _newclass:
        parsedString = _swig_property(_infomap.Config_parsedString_get, _infomap.Config_parsedString_set)
    __swig_setmethods__["parsedOptions"] = _infomap.Config_parsedOptions_set
    __swig_getmethods__["parsedOptions"] = _infomap.Config_parsedOptions_get
    if _newclass:
        parsedOptions = _swig_property(_infomap.Config_parsedOptions_get, _infomap.Config_parsedOptions_set)
    __swig_setmethods__["error"] = _infomap.Config_error_set
    __swig_getmethods__["error"] = _infomap.Config_error_get
    if _newclass:
        error = _swig_property(_infomap.Config_error_get, _infomap.Config_error_set)

    def __init__(self, *args):
        this = _infomap.new_Config(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def cloneAsNonMain(self, other: 'Config') -> "infomap::Config &":
        return _infomap.Config_cloneAsNonMain(self, other)

    def setOptimizationLevel(self, level: 'unsigned int') -> "void":
        return _infomap.Config_setOptimizationLevel(self, level)

    def adaptDefaults(self) -> "void":
        return _infomap.Config_adaptDefaults(self)

    def setDirectedInput(self) -> "bool":
        return _infomap.Config_setDirectedInput(self)

    def setMemoryInput(self) -> "void":
        return _infomap.Config_setMemoryInput(self)

    def isUndirectedClustering(self) -> "bool":
        return _infomap.Config_isUndirectedClustering(self)

    def isUndirectedFlow(self) -> "bool":
        return _infomap.Config_isUndirectedFlow(self)

    def printAsUndirected(self) -> "bool":
        return _infomap.Config_printAsUndirected(self)

    def useTeleportation(self) -> "bool":
        return _infomap.Config_useTeleportation(self)

    def is3gram(self) -> "bool":
        return _infomap.Config_is3gram(self)

    def isPath(self) -> "bool":
        return _infomap.Config_isPath(self)

    def isMultilayerNetwork(self) -> "bool":
        return _infomap.Config_isMultilayerNetwork(self)

    def isStateNetwork(self) -> "bool":
        return _infomap.Config_isStateNetwork(self)

    def isBipartite(self) -> "bool":
        return _infomap.Config_isBipartite(self)

    def isMemoryNetwork(self) -> "bool":
        return _infomap.Config_isMemoryNetwork(self)

    def haveOutput(self) -> "bool":
        return _infomap.Config_haveOutput(self)

    def haveModularResultOutput(self) -> "bool":
        return _infomap.Config_haveModularResultOutput(self)

    def elapsedTime(self) -> "ElapsedTime":
        return _infomap.Config_elapsedTime(self)

    def setError(self, err: 'std::string const &') -> "void":
        return _infomap.Config_setError(self, err)

    def haveError(self) -> "bool":
        return _infomap.Config_haveError(self)
    if _newclass:
        fromString = staticmethod(_infomap.Config_fromString)
    else:
        fromString = _infomap.Config_fromString
    __swig_destroy__ = _infomap.delete_Config
    __del__ = lambda self: None
Config_swigregister = _infomap.Config_swigregister
Config_swigregister(Config)

def Config_fromString(flags: 'std::string', requireFileInput: 'bool'=False) -> "infomap::Config":
    return _infomap.Config_fromString(flags, requireFileInput)
Config_fromString = _infomap.Config_fromString

class FlowData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FlowData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FlowData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _infomap.new_FlowData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["flow"] = _infomap.FlowData_flow_set
    __swig_getmethods__["flow"] = _infomap.FlowData_flow_get
    if _newclass:
        flow = _swig_property(_infomap.FlowData_flow_get, _infomap.FlowData_flow_set)
    __swig_setmethods__["enterFlow"] = _infomap.FlowData_enterFlow_set
    __swig_getmethods__["enterFlow"] = _infomap.FlowData_enterFlow_get
    if _newclass:
        enterFlow = _swig_property(_infomap.FlowData_enterFlow_get, _infomap.FlowData_enterFlow_set)
    __swig_setmethods__["exitFlow"] = _infomap.FlowData_exitFlow_set
    __swig_getmethods__["exitFlow"] = _infomap.FlowData_exitFlow_get
    if _newclass:
        exitFlow = _swig_property(_infomap.FlowData_exitFlow_get, _infomap.FlowData_exitFlow_set)

    def __iadd__(self, other: 'FlowData') -> "infomap::FlowData &":
        return _infomap.FlowData___iadd__(self, other)

    def __isub__(self, other: 'FlowData') -> "infomap::FlowData &":
        return _infomap.FlowData___isub__(self, other)
    __swig_destroy__ = _infomap.delete_FlowData
    __del__ = lambda self: None
FlowData_swigregister = _infomap.FlowData_swigregister
FlowData_swigregister(FlowData)

class DeltaFlow(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeltaFlow, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DeltaFlow, name)
    __repr__ = _swig_repr
    __swig_setmethods__["module"] = _infomap.DeltaFlow_module_set
    __swig_getmethods__["module"] = _infomap.DeltaFlow_module_get
    if _newclass:
        module = _swig_property(_infomap.DeltaFlow_module_get, _infomap.DeltaFlow_module_set)
    __swig_setmethods__["deltaExit"] = _infomap.DeltaFlow_deltaExit_set
    __swig_getmethods__["deltaExit"] = _infomap.DeltaFlow_deltaExit_get
    if _newclass:
        deltaExit = _swig_property(_infomap.DeltaFlow_deltaExit_get, _infomap.DeltaFlow_deltaExit_set)
    __swig_setmethods__["deltaEnter"] = _infomap.DeltaFlow_deltaEnter_set
    __swig_getmethods__["deltaEnter"] = _infomap.DeltaFlow_deltaEnter_get
    if _newclass:
        deltaEnter = _swig_property(_infomap.DeltaFlow_deltaEnter_get, _infomap.DeltaFlow_deltaEnter_set)
    __swig_setmethods__["count"] = _infomap.DeltaFlow_count_set
    __swig_getmethods__["count"] = _infomap.DeltaFlow_count_get
    if _newclass:
        count = _swig_property(_infomap.DeltaFlow_count_get, _infomap.DeltaFlow_count_set)
    __swig_destroy__ = _infomap.delete_DeltaFlow
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _infomap.new_DeltaFlow(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iadd__(self, other: 'DeltaFlow') -> "infomap::DeltaFlow &":
        return _infomap.DeltaFlow___iadd__(self, other)

    def reset(self) -> "void":
        return _infomap.DeltaFlow_reset(self)
DeltaFlow_swigregister = _infomap.DeltaFlow_swigregister
DeltaFlow_swigregister(DeltaFlow)

class MemDeltaFlow(DeltaFlow):
    __swig_setmethods__ = {}
    for _s in [DeltaFlow]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MemDeltaFlow, name, value)
    __swig_getmethods__ = {}
    for _s in [DeltaFlow]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MemDeltaFlow, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sumDeltaPlogpPhysFlow"] = _infomap.MemDeltaFlow_sumDeltaPlogpPhysFlow_set
    __swig_getmethods__["sumDeltaPlogpPhysFlow"] = _infomap.MemDeltaFlow_sumDeltaPlogpPhysFlow_get
    if _newclass:
        sumDeltaPlogpPhysFlow = _swig_property(_infomap.MemDeltaFlow_sumDeltaPlogpPhysFlow_get, _infomap.MemDeltaFlow_sumDeltaPlogpPhysFlow_set)
    __swig_setmethods__["sumPlogpPhysFlow"] = _infomap.MemDeltaFlow_sumPlogpPhysFlow_set
    __swig_getmethods__["sumPlogpPhysFlow"] = _infomap.MemDeltaFlow_sumPlogpPhysFlow_get
    if _newclass:
        sumPlogpPhysFlow = _swig_property(_infomap.MemDeltaFlow_sumPlogpPhysFlow_get, _infomap.MemDeltaFlow_sumPlogpPhysFlow_set)

    def __init__(self, *args):
        this = _infomap.new_MemDeltaFlow(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iadd__(self, other: 'MemDeltaFlow') -> "infomap::MemDeltaFlow &":
        return _infomap.MemDeltaFlow___iadd__(self, other)

    def reset(self) -> "void":
        return _infomap.MemDeltaFlow_reset(self)
    __swig_destroy__ = _infomap.delete_MemDeltaFlow
    __del__ = lambda self: None
MemDeltaFlow_swigregister = _infomap.MemDeltaFlow_swigregister
MemDeltaFlow_swigregister(MemDeltaFlow)

class PhysData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PhysData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PhysData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _infomap.new_PhysData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["physNodeIndex"] = _infomap.PhysData_physNodeIndex_set
    __swig_getmethods__["physNodeIndex"] = _infomap.PhysData_physNodeIndex_get
    if _newclass:
        physNodeIndex = _swig_property(_infomap.PhysData_physNodeIndex_get, _infomap.PhysData_physNodeIndex_set)
    __swig_setmethods__["sumFlowFromM2Node"] = _infomap.PhysData_sumFlowFromM2Node_set
    __swig_getmethods__["sumFlowFromM2Node"] = _infomap.PhysData_sumFlowFromM2Node_get
    if _newclass:
        sumFlowFromM2Node = _swig_property(_infomap.PhysData_sumFlowFromM2Node_get, _infomap.PhysData_sumFlowFromM2Node_set)
    __swig_destroy__ = _infomap.delete_PhysData
    __del__ = lambda self: None
PhysData_swigregister = _infomap.PhysData_swigregister
PhysData_swigregister(PhysData)

class InfoNode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InfoNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InfoNode, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _infomap.InfoNode_data_set
    __swig_getmethods__["data"] = _infomap.InfoNode_data_get
    if _newclass:
        data = _swig_property(_infomap.InfoNode_data_get, _infomap.InfoNode_data_set)
    __swig_setmethods__["index"] = _infomap.InfoNode_index_set
    __swig_getmethods__["index"] = _infomap.InfoNode_index_get
    if _newclass:
        index = _swig_property(_infomap.InfoNode_index_get, _infomap.InfoNode_index_set)
    __swig_setmethods__["stateId"] = _infomap.InfoNode_stateId_set
    __swig_getmethods__["stateId"] = _infomap.InfoNode_stateId_get
    if _newclass:
        stateId = _swig_property(_infomap.InfoNode_stateId_get, _infomap.InfoNode_stateId_set)
    __swig_setmethods__["physicalId"] = _infomap.InfoNode_physicalId_set
    __swig_getmethods__["physicalId"] = _infomap.InfoNode_physicalId_get
    if _newclass:
        physicalId = _swig_property(_infomap.InfoNode_physicalId_get, _infomap.InfoNode_physicalId_set)
    __swig_setmethods__["layerId"] = _infomap.InfoNode_layerId_set
    __swig_getmethods__["layerId"] = _infomap.InfoNode_layerId_get
    if _newclass:
        layerId = _swig_property(_infomap.InfoNode_layerId_get, _infomap.InfoNode_layerId_set)
    __swig_setmethods__["owner"] = _infomap.InfoNode_owner_set
    __swig_getmethods__["owner"] = _infomap.InfoNode_owner_get
    if _newclass:
        owner = _swig_property(_infomap.InfoNode_owner_get, _infomap.InfoNode_owner_set)
    __swig_setmethods__["parent"] = _infomap.InfoNode_parent_set
    __swig_getmethods__["parent"] = _infomap.InfoNode_parent_get
    if _newclass:
        parent = _swig_property(_infomap.InfoNode_parent_get, _infomap.InfoNode_parent_set)
    __swig_setmethods__["previous"] = _infomap.InfoNode_previous_set
    __swig_getmethods__["previous"] = _infomap.InfoNode_previous_get
    if _newclass:
        previous = _swig_property(_infomap.InfoNode_previous_get, _infomap.InfoNode_previous_set)
    __swig_setmethods__["next"] = _infomap.InfoNode_next_set
    __swig_getmethods__["next"] = _infomap.InfoNode_next_get
    if _newclass:
        next = _swig_property(_infomap.InfoNode_next_get, _infomap.InfoNode_next_set)
    __swig_setmethods__["firstChild"] = _infomap.InfoNode_firstChild_set
    __swig_getmethods__["firstChild"] = _infomap.InfoNode_firstChild_get
    if _newclass:
        firstChild = _swig_property(_infomap.InfoNode_firstChild_get, _infomap.InfoNode_firstChild_set)
    __swig_setmethods__["lastChild"] = _infomap.InfoNode_lastChild_set
    __swig_getmethods__["lastChild"] = _infomap.InfoNode_lastChild_get
    if _newclass:
        lastChild = _swig_property(_infomap.InfoNode_lastChild_get, _infomap.InfoNode_lastChild_set)
    __swig_setmethods__["collapsedFirstChild"] = _infomap.InfoNode_collapsedFirstChild_set
    __swig_getmethods__["collapsedFirstChild"] = _infomap.InfoNode_collapsedFirstChild_get
    if _newclass:
        collapsedFirstChild = _swig_property(_infomap.InfoNode_collapsedFirstChild_get, _infomap.InfoNode_collapsedFirstChild_set)
    __swig_setmethods__["collapsedLastChild"] = _infomap.InfoNode_collapsedLastChild_set
    __swig_getmethods__["collapsedLastChild"] = _infomap.InfoNode_collapsedLastChild_get
    if _newclass:
        collapsedLastChild = _swig_property(_infomap.InfoNode_collapsedLastChild_get, _infomap.InfoNode_collapsedLastChild_set)
    __swig_setmethods__["codelength"] = _infomap.InfoNode_codelength_set
    __swig_getmethods__["codelength"] = _infomap.InfoNode_codelength_get
    if _newclass:
        codelength = _swig_property(_infomap.InfoNode_codelength_get, _infomap.InfoNode_codelength_set)
    __swig_setmethods__["dirty"] = _infomap.InfoNode_dirty_set
    __swig_getmethods__["dirty"] = _infomap.InfoNode_dirty_get
    if _newclass:
        dirty = _swig_property(_infomap.InfoNode_dirty_get, _infomap.InfoNode_dirty_set)
    __swig_setmethods__["physicalNodes"] = _infomap.InfoNode_physicalNodes_set
    __swig_getmethods__["physicalNodes"] = _infomap.InfoNode_physicalNodes_get
    if _newclass:
        physicalNodes = _swig_property(_infomap.InfoNode_physicalNodes_get, _infomap.InfoNode_physicalNodes_set)

    def __init__(self, *args):
        this = _infomap.new_InfoNode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _infomap.delete_InfoNode
    __del__ = lambda self: None

    def getInfomap(self) -> "infomap::InfomapBase &":
        return _infomap.InfoNode_getInfomap(self)

    def setInfomap(self, arg2: 'InfomapBase') -> "infomap::InfomapBase &":
        return _infomap.InfoNode_setInfomap(self, arg2)

    def getInfomapRoot(self, *args) -> "infomap::InfoNode const *":
        return _infomap.InfoNode_getInfomapRoot(self, *args)

    def disposeInfomap(self) -> "bool":
        return _infomap.InfoNode_disposeInfomap(self)

    def numPhysicalNodes(self) -> "unsigned int":
        return _infomap.InfoNode_numPhysicalNodes(self)

    def begin(self, *args) -> "infomap::InfoNode::const_sibling_iterator":
        return _infomap.InfoNode_begin(self, *args)

    def end(self, *args) -> "infomap::InfoNode::const_sibling_iterator":
        return _infomap.InfoNode_end(self, *args)

    def begin_child(self, *args) -> "infomap::InfoNode::const_sibling_iterator":
        return _infomap.InfoNode_begin_child(self, *args)

    def end_child(self, *args) -> "infomap::InfoNode::const_sibling_iterator":
        return _infomap.InfoNode_end_child(self, *args)

    def begin_leaf(self) -> "infomap::InfoNode::leaf_iterator":
        return _infomap.InfoNode_begin_leaf(self)

    def end_leaf(self) -> "infomap::InfoNode::leaf_iterator":
        return _infomap.InfoNode_end_leaf(self)

    def begin_depthFirst(self, *args) -> "infomap::InfoNode::const_pre_depth_first_iterator":
        return _infomap.InfoNode_begin_depthFirst(self, *args)

    def end_depthFirst(self, *args) -> "infomap::InfoNode::const_pre_depth_first_iterator":
        return _infomap.InfoNode_end_depthFirst(self, *args)

    def begin_tree(self, *args) -> "infomap::InfoNode::const_infomap_cluster_iterator":
        return _infomap.InfoNode_begin_tree(self, *args)

    def end_tree(self, *args) -> "infomap::InfoNode::const_infomap_cluster_iterator":
        return _infomap.InfoNode_end_tree(self, *args)

    def begin_treePath(self, *args) -> "infomap::InfoNode::const_infomap_depth_first_iterator":
        return _infomap.InfoNode_begin_treePath(self, *args)

    def end_treePath(self, *args) -> "infomap::InfoNode::const_infomap_depth_first_iterator":
        return _infomap.InfoNode_end_treePath(self, *args)

    def infomapTree(self, *args) -> "infomap::InfoNode::const_infomap_iterator_wrapper":
        return _infomap.InfoNode_infomapTree(self, *args)

    def begin_outEdge(self) -> "infomap::InfoNode::edge_iterator":
        return _infomap.InfoNode_begin_outEdge(self)

    def end_outEdge(self) -> "infomap::InfoNode::edge_iterator":
        return _infomap.InfoNode_end_outEdge(self)

    def begin_inEdge(self) -> "infomap::InfoNode::edge_iterator":
        return _infomap.InfoNode_begin_inEdge(self)

    def end_inEdge(self) -> "infomap::InfoNode::edge_iterator":
        return _infomap.InfoNode_end_inEdge(self)

    def outEdges(self) -> "infomap::InfoNode::edge_iterator_wrapper":
        return _infomap.InfoNode_outEdges(self)

    def inEdges(self) -> "infomap::InfoNode::edge_iterator_wrapper":
        return _infomap.InfoNode_inEdges(self)

    def childDegree(self) -> "unsigned int":
        return _infomap.InfoNode_childDegree(self)

    def isLeaf(self) -> "bool":
        return _infomap.InfoNode_isLeaf(self)

    def isLeafModule(self) -> "bool":
        return _infomap.InfoNode_isLeafModule(self)

    def isRoot(self) -> "bool":
        return _infomap.InfoNode_isRoot(self)

    def depth(self) -> "unsigned int":
        return _infomap.InfoNode_depth(self)

    def firstDepthBelow(self) -> "unsigned int":
        return _infomap.InfoNode_firstDepthBelow(self)

    def numLeafMembers(self) -> "unsigned int":
        return _infomap.InfoNode_numLeafMembers(self)

    def isDangling(self) -> "bool":
        return _infomap.InfoNode_isDangling(self)

    def outDegree(self) -> "unsigned int":
        return _infomap.InfoNode_outDegree(self)

    def inDegree(self) -> "unsigned int":
        return _infomap.InfoNode_inDegree(self)

    def degree(self) -> "unsigned int":
        return _infomap.InfoNode_degree(self)

    def isFirst(self) -> "bool":
        return _infomap.InfoNode_isFirst(self)

    def isLast(self) -> "bool":
        return _infomap.InfoNode_isLast(self)

    def childIndex(self) -> "unsigned int":
        return _infomap.InfoNode_childIndex(self)

    def __eq__(self, rhs: 'InfoNode') -> "bool":
        return _infomap.InfoNode___eq__(self, rhs)

    def __ne__(self, rhs: 'InfoNode') -> "bool":
        return _infomap.InfoNode___ne__(self, rhs)

    def initClean(self) -> "void":
        return _infomap.InfoNode_initClean(self)

    def collapseChildren(self) -> "unsigned int":
        return _infomap.InfoNode_collapseChildren(self)

    def expandChildren(self) -> "unsigned int":
        return _infomap.InfoNode_expandChildren(self)

    def setChildDegree(self, value: 'unsigned int') -> "void":
        return _infomap.InfoNode_setChildDegree(self, value)

    def setNumLeafNodes(self, value: 'unsigned int') -> "void":
        return _infomap.InfoNode_setNumLeafNodes(self, value)

    def addChild(self, child: 'InfoNode') -> "void":
        return _infomap.InfoNode_addChild(self, child)

    def releaseChildren(self) -> "void":
        return _infomap.InfoNode_releaseChildren(self)

    def replaceChildrenWithOneNode(self) -> "infomap::InfoNode &":
        return _infomap.InfoNode_replaceChildrenWithOneNode(self)

    def replaceWithChildren(self) -> "unsigned int":
        return _infomap.InfoNode_replaceWithChildren(self)

    def replaceWithChildrenDebug(self) -> "void":
        return _infomap.InfoNode_replaceWithChildrenDebug(self)

    def replaceChildrenWithGrandChildren(self) -> "unsigned int":
        return _infomap.InfoNode_replaceChildrenWithGrandChildren(self)

    def replaceChildrenWithGrandChildrenDebug(self) -> "void":
        return _infomap.InfoNode_replaceChildrenWithGrandChildrenDebug(self)

    def remove(self, removeChildren: 'bool') -> "void":
        return _infomap.InfoNode_remove(self, removeChildren)

    def deleteChildren(self) -> "void":
        return _infomap.InfoNode_deleteChildren(self)

    def addOutEdge(self, target: 'InfoNode', weight: 'double', flow: 'double'=0.0) -> "infomap::InfoNode::EdgeType *":
        return _infomap.InfoNode_addOutEdge(self, target, weight, flow)
InfoNode_swigregister = _infomap.InfoNode_swigregister
InfoNode_swigregister(InfoNode)

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _infomap.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _infomap.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _infomap.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _infomap.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _infomap.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _infomap.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _infomap.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _infomap.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _infomap.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _infomap.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _infomap.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _infomap.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _infomap.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _infomap.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _infomap.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _infomap.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _infomap.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _infomap.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class deque_uint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, deque_uint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, deque_uint, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _infomap.deque_uint_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _infomap.deque_uint___nonzero__(self)

    def __bool__(self) -> "bool":
        return _infomap.deque_uint___bool__(self)

    def __len__(self) -> "std::deque< unsigned int >::size_type":
        return _infomap.deque_uint___len__(self)

    def __getslice__(self, i: 'std::deque< unsigned int >::difference_type', j: 'std::deque< unsigned int >::difference_type') -> "std::deque< unsigned int,std::allocator< unsigned int > > *":
        return _infomap.deque_uint___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _infomap.deque_uint___setslice__(self, *args)

    def __delslice__(self, i: 'std::deque< unsigned int >::difference_type', j: 'std::deque< unsigned int >::difference_type') -> "void":
        return _infomap.deque_uint___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _infomap.deque_uint___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::deque< unsigned int >::value_type const &":
        return _infomap.deque_uint___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _infomap.deque_uint___setitem__(self, *args)

    def pop(self) -> "std::deque< unsigned int >::value_type":
        return _infomap.deque_uint_pop(self)

    def append(self, x: 'std::deque< unsigned int >::value_type const &') -> "void":
        return _infomap.deque_uint_append(self, x)

    def empty(self) -> "bool":
        return _infomap.deque_uint_empty(self)

    def size(self) -> "std::deque< unsigned int >::size_type":
        return _infomap.deque_uint_size(self)

    def swap(self, v: 'deque_uint') -> "void":
        return _infomap.deque_uint_swap(self, v)

    def begin(self) -> "std::deque< unsigned int >::iterator":
        return _infomap.deque_uint_begin(self)

    def end(self) -> "std::deque< unsigned int >::iterator":
        return _infomap.deque_uint_end(self)

    def rbegin(self) -> "std::deque< unsigned int >::reverse_iterator":
        return _infomap.deque_uint_rbegin(self)

    def rend(self) -> "std::deque< unsigned int >::reverse_iterator":
        return _infomap.deque_uint_rend(self)

    def clear(self) -> "void":
        return _infomap.deque_uint_clear(self)

    def get_allocator(self) -> "std::deque< unsigned int >::allocator_type":
        return _infomap.deque_uint_get_allocator(self)

    def pop_back(self) -> "void":
        return _infomap.deque_uint_pop_back(self)

    def erase(self, *args) -> "std::deque< unsigned int >::iterator":
        return _infomap.deque_uint_erase(self, *args)

    def __init__(self, *args):
        this = _infomap.new_deque_uint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'std::deque< unsigned int >::value_type const &') -> "void":
        return _infomap.deque_uint_push_back(self, x)

    def front(self) -> "std::deque< unsigned int >::value_type const &":
        return _infomap.deque_uint_front(self)

    def back(self) -> "std::deque< unsigned int >::value_type const &":
        return _infomap.deque_uint_back(self)

    def assign(self, n: 'std::deque< unsigned int >::size_type', x: 'std::deque< unsigned int >::value_type const &') -> "void":
        return _infomap.deque_uint_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _infomap.deque_uint_resize(self, *args)

    def insert(self, *args) -> "void":
        return _infomap.deque_uint_insert(self, *args)

    def pop_front(self) -> "void":
        return _infomap.deque_uint_pop_front(self)

    def push_front(self, x: 'std::deque< unsigned int >::value_type const &') -> "void":
        return _infomap.deque_uint_push_front(self, x)
    __swig_destroy__ = _infomap.delete_deque_uint
    __del__ = lambda self: None
deque_uint_swigregister = _infomap.deque_uint_swigregister
deque_uint_swigregister(deque_uint)

class InfomapIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InfomapIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InfomapIterator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _infomap.new_InfomapIterator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _infomap.delete_InfomapIterator
    __del__ = lambda self: None

    def init(self) -> "void":
        return _infomap.InfomapIterator_init(self)

    def current(self, *args) -> "infomap::InfoNode const *":
        return _infomap.InfomapIterator_current(self, *args)

    def __ref__(self, *args) -> "infomap::InfoNode const &":
        return _infomap.InfomapIterator___ref__(self, *args)

    def __deref__(self, *args) -> "infomap::InfoNode const *":
        return _infomap.InfomapIterator___deref__(self, *args)

    def stepForward(self) -> "infomap::InfomapIterator &":
        return _infomap.InfomapIterator_stepForward(self)

    def path(self) -> "std::deque< unsigned int,std::allocator< unsigned int > > const &":
        return _infomap.InfomapIterator_path(self)

    def moduleIndex(self) -> "unsigned int":
        return _infomap.InfomapIterator_moduleIndex(self)

    def depth(self) -> "unsigned int":
        return _infomap.InfomapIterator_depth(self)

    def isEnd(self) -> "bool":
        return _infomap.InfomapIterator_isEnd(self)

    def __iter__(self):
    	self._firstYielded = False
    	return self

    def __next__(self):
    	if not self._firstYielded:
    		self._firstYielded = True
    	else:
    		self.stepForward()

    	if self.isEnd():
    		raise StopIteration

    	return self

    __swig_setmethods__["data"] = _infomap.InfomapIterator_data_set
    __swig_getmethods__["data"] = _infomap.InfomapIterator_data_get
    if _newclass:
        data = _swig_property(_infomap.InfomapIterator_data_get, _infomap.InfomapIterator_data_set)
    __swig_setmethods__["index"] = _infomap.InfomapIterator_index_set
    __swig_getmethods__["index"] = _infomap.InfomapIterator_index_get
    if _newclass:
        index = _swig_property(_infomap.InfomapIterator_index_get, _infomap.InfomapIterator_index_set)
    __swig_setmethods__["stateId"] = _infomap.InfomapIterator_stateId_set
    __swig_getmethods__["stateId"] = _infomap.InfomapIterator_stateId_get
    if _newclass:
        stateId = _swig_property(_infomap.InfomapIterator_stateId_get, _infomap.InfomapIterator_stateId_set)
    __swig_setmethods__["physicalId"] = _infomap.InfomapIterator_physicalId_set
    __swig_getmethods__["physicalId"] = _infomap.InfomapIterator_physicalId_get
    if _newclass:
        physicalId = _swig_property(_infomap.InfomapIterator_physicalId_get, _infomap.InfomapIterator_physicalId_set)
    __swig_setmethods__["layerId"] = _infomap.InfomapIterator_layerId_set
    __swig_getmethods__["layerId"] = _infomap.InfomapIterator_layerId_get
    if _newclass:
        layerId = _swig_property(_infomap.InfomapIterator_layerId_get, _infomap.InfomapIterator_layerId_set)
    __swig_setmethods__["owner"] = _infomap.InfomapIterator_owner_set
    __swig_getmethods__["owner"] = _infomap.InfomapIterator_owner_get
    if _newclass:
        owner = _swig_property(_infomap.InfomapIterator_owner_get, _infomap.InfomapIterator_owner_set)
    __swig_setmethods__["parent"] = _infomap.InfomapIterator_parent_set
    __swig_getmethods__["parent"] = _infomap.InfomapIterator_parent_get
    if _newclass:
        parent = _swig_property(_infomap.InfomapIterator_parent_get, _infomap.InfomapIterator_parent_set)
    __swig_setmethods__["previous"] = _infomap.InfomapIterator_previous_set
    __swig_getmethods__["previous"] = _infomap.InfomapIterator_previous_get
    if _newclass:
        previous = _swig_property(_infomap.InfomapIterator_previous_get, _infomap.InfomapIterator_previous_set)
    __swig_setmethods__["next"] = _infomap.InfomapIterator_next_set
    __swig_getmethods__["next"] = _infomap.InfomapIterator_next_get
    if _newclass:
        next = _swig_property(_infomap.InfomapIterator_next_get, _infomap.InfomapIterator_next_set)
    __swig_setmethods__["firstChild"] = _infomap.InfomapIterator_firstChild_set
    __swig_getmethods__["firstChild"] = _infomap.InfomapIterator_firstChild_get
    if _newclass:
        firstChild = _swig_property(_infomap.InfomapIterator_firstChild_get, _infomap.InfomapIterator_firstChild_set)
    __swig_setmethods__["lastChild"] = _infomap.InfomapIterator_lastChild_set
    __swig_getmethods__["lastChild"] = _infomap.InfomapIterator_lastChild_get
    if _newclass:
        lastChild = _swig_property(_infomap.InfomapIterator_lastChild_get, _infomap.InfomapIterator_lastChild_set)
    __swig_setmethods__["collapsedFirstChild"] = _infomap.InfomapIterator_collapsedFirstChild_set
    __swig_getmethods__["collapsedFirstChild"] = _infomap.InfomapIterator_collapsedFirstChild_get
    if _newclass:
        collapsedFirstChild = _swig_property(_infomap.InfomapIterator_collapsedFirstChild_get, _infomap.InfomapIterator_collapsedFirstChild_set)
    __swig_setmethods__["collapsedLastChild"] = _infomap.InfomapIterator_collapsedLastChild_set
    __swig_getmethods__["collapsedLastChild"] = _infomap.InfomapIterator_collapsedLastChild_get
    if _newclass:
        collapsedLastChild = _swig_property(_infomap.InfomapIterator_collapsedLastChild_get, _infomap.InfomapIterator_collapsedLastChild_set)
    __swig_setmethods__["codelength"] = _infomap.InfomapIterator_codelength_set
    __swig_getmethods__["codelength"] = _infomap.InfomapIterator_codelength_get
    if _newclass:
        codelength = _swig_property(_infomap.InfomapIterator_codelength_get, _infomap.InfomapIterator_codelength_set)
    __swig_setmethods__["dirty"] = _infomap.InfomapIterator_dirty_set
    __swig_getmethods__["dirty"] = _infomap.InfomapIterator_dirty_get
    if _newclass:
        dirty = _swig_property(_infomap.InfomapIterator_dirty_get, _infomap.InfomapIterator_dirty_set)
    __swig_setmethods__["physicalNodes"] = _infomap.InfomapIterator_physicalNodes_set
    __swig_getmethods__["physicalNodes"] = _infomap.InfomapIterator_physicalNodes_get
    if _newclass:
        physicalNodes = _swig_property(_infomap.InfomapIterator_physicalNodes_get, _infomap.InfomapIterator_physicalNodes_set)

    def getInfomap(self) -> "infomap::InfomapBase &":
        return _infomap.InfomapIterator_getInfomap(self)

    def setInfomap(self, arg2: 'InfomapBase') -> "infomap::InfomapBase &":
        return _infomap.InfomapIterator_setInfomap(self, arg2)

    def getInfomapRoot(self, *args) -> "infomap::InfoNode const *":
        return _infomap.InfomapIterator_getInfomapRoot(self, *args)

    def disposeInfomap(self) -> "bool":
        return _infomap.InfomapIterator_disposeInfomap(self)

    def numPhysicalNodes(self) -> "unsigned int":
        return _infomap.InfomapIterator_numPhysicalNodes(self)

    def begin_child(self, *args) -> "infomap::InfoNode::const_sibling_iterator":
        return _infomap.InfomapIterator_begin_child(self, *args)

    def end_child(self, *args) -> "infomap::InfoNode::const_sibling_iterator":
        return _infomap.InfomapIterator_end_child(self, *args)

    def begin(self, *args) -> "infomap::InfoNode::const_sibling_iterator":
        return _infomap.InfomapIterator_begin(self, *args)

    def end(self, *args) -> "infomap::InfoNode::const_sibling_iterator":
        return _infomap.InfomapIterator_end(self, *args)

    def begin_leaf(self) -> "infomap::InfoNode::leaf_iterator":
        return _infomap.InfomapIterator_begin_leaf(self)

    def end_leaf(self) -> "infomap::InfoNode::leaf_iterator":
        return _infomap.InfomapIterator_end_leaf(self)

    def begin_depthFirst(self, *args) -> "infomap::InfoNode::const_pre_depth_first_iterator":
        return _infomap.InfomapIterator_begin_depthFirst(self, *args)

    def end_depthFirst(self, *args) -> "infomap::InfoNode::const_pre_depth_first_iterator":
        return _infomap.InfomapIterator_end_depthFirst(self, *args)

    def begin_tree(self, *args) -> "infomap::InfoNode::const_infomap_cluster_iterator":
        return _infomap.InfomapIterator_begin_tree(self, *args)

    def end_tree(self, *args) -> "infomap::InfoNode::const_infomap_cluster_iterator":
        return _infomap.InfomapIterator_end_tree(self, *args)

    def begin_treePath(self, *args) -> "infomap::InfoNode::const_infomap_depth_first_iterator":
        return _infomap.InfomapIterator_begin_treePath(self, *args)

    def end_treePath(self, *args) -> "infomap::InfoNode::const_infomap_depth_first_iterator":
        return _infomap.InfomapIterator_end_treePath(self, *args)

    def infomapTree(self, *args) -> "infomap::InfoNode::const_infomap_iterator_wrapper":
        return _infomap.InfomapIterator_infomapTree(self, *args)

    def begin_outEdge(self) -> "infomap::InfoNode::edge_iterator":
        return _infomap.InfomapIterator_begin_outEdge(self)

    def end_outEdge(self) -> "infomap::InfoNode::edge_iterator":
        return _infomap.InfomapIterator_end_outEdge(self)

    def begin_inEdge(self) -> "infomap::InfoNode::edge_iterator":
        return _infomap.InfomapIterator_begin_inEdge(self)

    def end_inEdge(self) -> "infomap::InfoNode::edge_iterator":
        return _infomap.InfomapIterator_end_inEdge(self)

    def outEdges(self) -> "infomap::InfoNode::edge_iterator_wrapper":
        return _infomap.InfomapIterator_outEdges(self)

    def inEdges(self) -> "infomap::InfoNode::edge_iterator_wrapper":
        return _infomap.InfomapIterator_inEdges(self)

    def childDegree(self) -> "unsigned int":
        return _infomap.InfomapIterator_childDegree(self)

    def isLeaf(self) -> "bool":
        return _infomap.InfomapIterator_isLeaf(self)

    def isLeafModule(self) -> "bool":
        return _infomap.InfomapIterator_isLeafModule(self)

    def isRoot(self) -> "bool":
        return _infomap.InfomapIterator_isRoot(self)

    def firstDepthBelow(self) -> "unsigned int":
        return _infomap.InfomapIterator_firstDepthBelow(self)

    def numLeafMembers(self) -> "unsigned int":
        return _infomap.InfomapIterator_numLeafMembers(self)

    def isDangling(self) -> "bool":
        return _infomap.InfomapIterator_isDangling(self)

    def outDegree(self) -> "unsigned int":
        return _infomap.InfomapIterator_outDegree(self)

    def inDegree(self) -> "unsigned int":
        return _infomap.InfomapIterator_inDegree(self)

    def degree(self) -> "unsigned int":
        return _infomap.InfomapIterator_degree(self)

    def isFirst(self) -> "bool":
        return _infomap.InfomapIterator_isFirst(self)

    def isLast(self) -> "bool":
        return _infomap.InfomapIterator_isLast(self)

    def childIndex(self) -> "unsigned int":
        return _infomap.InfomapIterator_childIndex(self)

    def __eq__(self, rhs: 'InfoNode') -> "bool":
        return _infomap.InfomapIterator___eq__(self, rhs)

    def __ne__(self, rhs: 'InfoNode') -> "bool":
        return _infomap.InfomapIterator___ne__(self, rhs)

    def initClean(self) -> "void":
        return _infomap.InfomapIterator_initClean(self)

    def collapseChildren(self) -> "unsigned int":
        return _infomap.InfomapIterator_collapseChildren(self)

    def expandChildren(self) -> "unsigned int":
        return _infomap.InfomapIterator_expandChildren(self)

    def setChildDegree(self, value: 'unsigned int') -> "void":
        return _infomap.InfomapIterator_setChildDegree(self, value)

    def setNumLeafNodes(self, value: 'unsigned int') -> "void":
        return _infomap.InfomapIterator_setNumLeafNodes(self, value)

    def addChild(self, child: 'InfoNode') -> "void":
        return _infomap.InfomapIterator_addChild(self, child)

    def releaseChildren(self) -> "void":
        return _infomap.InfomapIterator_releaseChildren(self)

    def replaceChildrenWithOneNode(self) -> "infomap::InfoNode &":
        return _infomap.InfomapIterator_replaceChildrenWithOneNode(self)

    def replaceWithChildren(self) -> "unsigned int":
        return _infomap.InfomapIterator_replaceWithChildren(self)

    def replaceWithChildrenDebug(self) -> "void":
        return _infomap.InfomapIterator_replaceWithChildrenDebug(self)

    def replaceChildrenWithGrandChildren(self) -> "unsigned int":
        return _infomap.InfomapIterator_replaceChildrenWithGrandChildren(self)

    def replaceChildrenWithGrandChildrenDebug(self) -> "void":
        return _infomap.InfomapIterator_replaceChildrenWithGrandChildrenDebug(self)

    def remove(self, removeChildren: 'bool') -> "void":
        return _infomap.InfomapIterator_remove(self, removeChildren)

    def deleteChildren(self) -> "void":
        return _infomap.InfomapIterator_deleteChildren(self)

    def addOutEdge(self, target: 'InfoNode', weight: 'double', flow: 'double'=0.0) -> "infomap::InfoNode::EdgeType *":
        return _infomap.InfomapIterator_addOutEdge(self, target, weight, flow)
InfomapIterator_swigregister = _infomap.InfomapIterator_swigregister
InfomapIterator_swigregister(InfomapIterator)

class InfomapModuleIterator(InfomapIterator):
    __swig_setmethods__ = {}
    for _s in [InfomapIterator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InfomapModuleIterator, name, value)
    __swig_getmethods__ = {}
    for _s in [InfomapIterator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InfomapModuleIterator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _infomap.new_InfomapModuleIterator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _infomap.delete_InfomapModuleIterator
    __del__ = lambda self: None
InfomapModuleIterator_swigregister = _infomap.InfomapModuleIterator_swigregister
InfomapModuleIterator_swigregister(InfomapModuleIterator)

class InfomapLeafModuleIterator(InfomapIterator):
    __swig_setmethods__ = {}
    for _s in [InfomapIterator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InfomapLeafModuleIterator, name, value)
    __swig_getmethods__ = {}
    for _s in [InfomapIterator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InfomapLeafModuleIterator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _infomap.new_InfomapLeafModuleIterator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def init(self) -> "void":
        return _infomap.InfomapLeafModuleIterator_init(self)

    def __iter__(self):
    	self._firstYielded = False
    	return self

    def __next__(self):
    	if not self._firstYielded:
    		self._firstYielded = True
    	else:
    		self.stepForward()

    	if self.isEnd():
    		raise StopIteration

    	return self

    __swig_destroy__ = _infomap.delete_InfomapLeafModuleIterator
    __del__ = lambda self: None
InfomapLeafModuleIterator_swigregister = _infomap.InfomapLeafModuleIterator_swigregister
InfomapLeafModuleIterator_swigregister(InfomapLeafModuleIterator)

class InfomapLeafIterator(InfomapIterator):
    __swig_setmethods__ = {}
    for _s in [InfomapIterator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InfomapLeafIterator, name, value)
    __swig_getmethods__ = {}
    for _s in [InfomapIterator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InfomapLeafIterator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _infomap.new_InfomapLeafIterator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def init(self) -> "void":
        return _infomap.InfomapLeafIterator_init(self)

    def __iter__(self):
    	self._firstYielded = False
    	return self

    def __next__(self):
    	if not self._firstYielded:
    		self._firstYielded = True
    	else:
    		self.stepForward()

    	if self.isEnd():
    		raise StopIteration

    	return self

    __swig_destroy__ = _infomap.delete_InfomapLeafIterator
    __del__ = lambda self: None
InfomapLeafIterator_swigregister = _infomap.InfomapLeafIterator_swigregister
InfomapLeafIterator_swigregister(InfomapLeafIterator)

class InfomapIteratorPhysical(InfomapIterator):
    __swig_setmethods__ = {}
    for _s in [InfomapIterator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InfomapIteratorPhysical, name, value)
    __swig_getmethods__ = {}
    for _s in [InfomapIterator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InfomapIteratorPhysical, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _infomap.new_InfomapIteratorPhysical(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
    	self._firstYielded = False
    	return self

    def __next__(self):
    	if not self._firstYielded:
    		self._firstYielded = True
    	else:
    		self.stepForward()

    	if self.isEnd():
    		raise StopIteration

    	return self

    __swig_destroy__ = _infomap.delete_InfomapIteratorPhysical
    __del__ = lambda self: None
InfomapIteratorPhysical_swigregister = _infomap.InfomapIteratorPhysical_swigregister
InfomapIteratorPhysical_swigregister(InfomapIteratorPhysical)

class InfomapLeafIteratorPhysical(InfomapIteratorPhysical):
    __swig_setmethods__ = {}
    for _s in [InfomapIteratorPhysical]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InfomapLeafIteratorPhysical, name, value)
    __swig_getmethods__ = {}
    for _s in [InfomapIteratorPhysical]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InfomapLeafIteratorPhysical, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _infomap.new_InfomapLeafIteratorPhysical(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def init(self) -> "void":
        return _infomap.InfomapLeafIteratorPhysical_init(self)

    def __iter__(self):
    	self._firstYielded = False
    	return self

    def __next__(self):
    	if not self._firstYielded:
    		self._firstYielded = True
    	else:
    		self.stepForward()

    	if self.isEnd():
    		raise StopIteration

    	return self

    __swig_destroy__ = _infomap.delete_InfomapLeafIteratorPhysical
    __del__ = lambda self: None
InfomapLeafIteratorPhysical_swigregister = _infomap.InfomapLeafIteratorPhysical_swigregister
InfomapLeafIteratorPhysical_swigregister(InfomapLeafIteratorPhysical)

class InfomapUpIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InfomapUpIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InfomapUpIterator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _infomap.new_InfomapUpIterator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _infomap.delete_InfomapUpIterator
    __del__ = lambda self: None

    def current(self, *args) -> "infomap::InfoNode const *":
        return _infomap.InfomapUpIterator_current(self, *args)

    def __ref__(self, *args) -> "infomap::InfoNode const &":
        return _infomap.InfomapUpIterator___ref__(self, *args)

    def __deref__(self, *args) -> "infomap::InfoNode const *":
        return _infomap.InfomapUpIterator___deref__(self, *args)

    def stepForward(self) -> "infomap::InfomapUpIterator &":
        return _infomap.InfomapUpIterator_stepForward(self)

    def isEnd(self) -> "bool":
        return _infomap.InfomapUpIterator_isEnd(self)
    __swig_setmethods__["data"] = _infomap.InfomapUpIterator_data_set
    __swig_getmethods__["data"] = _infomap.InfomapUpIterator_data_get
    if _newclass:
        data = _swig_property(_infomap.InfomapUpIterator_data_get, _infomap.InfomapUpIterator_data_set)
    __swig_setmethods__["index"] = _infomap.InfomapUpIterator_index_set
    __swig_getmethods__["index"] = _infomap.InfomapUpIterator_index_get
    if _newclass:
        index = _swig_property(_infomap.InfomapUpIterator_index_get, _infomap.InfomapUpIterator_index_set)
    __swig_setmethods__["stateId"] = _infomap.InfomapUpIterator_stateId_set
    __swig_getmethods__["stateId"] = _infomap.InfomapUpIterator_stateId_get
    if _newclass:
        stateId = _swig_property(_infomap.InfomapUpIterator_stateId_get, _infomap.InfomapUpIterator_stateId_set)
    __swig_setmethods__["physicalId"] = _infomap.InfomapUpIterator_physicalId_set
    __swig_getmethods__["physicalId"] = _infomap.InfomapUpIterator_physicalId_get
    if _newclass:
        physicalId = _swig_property(_infomap.InfomapUpIterator_physicalId_get, _infomap.InfomapUpIterator_physicalId_set)
    __swig_setmethods__["layerId"] = _infomap.InfomapUpIterator_layerId_set
    __swig_getmethods__["layerId"] = _infomap.InfomapUpIterator_layerId_get
    if _newclass:
        layerId = _swig_property(_infomap.InfomapUpIterator_layerId_get, _infomap.InfomapUpIterator_layerId_set)
    __swig_setmethods__["owner"] = _infomap.InfomapUpIterator_owner_set
    __swig_getmethods__["owner"] = _infomap.InfomapUpIterator_owner_get
    if _newclass:
        owner = _swig_property(_infomap.InfomapUpIterator_owner_get, _infomap.InfomapUpIterator_owner_set)
    __swig_setmethods__["parent"] = _infomap.InfomapUpIterator_parent_set
    __swig_getmethods__["parent"] = _infomap.InfomapUpIterator_parent_get
    if _newclass:
        parent = _swig_property(_infomap.InfomapUpIterator_parent_get, _infomap.InfomapUpIterator_parent_set)
    __swig_setmethods__["previous"] = _infomap.InfomapUpIterator_previous_set
    __swig_getmethods__["previous"] = _infomap.InfomapUpIterator_previous_get
    if _newclass:
        previous = _swig_property(_infomap.InfomapUpIterator_previous_get, _infomap.InfomapUpIterator_previous_set)
    __swig_setmethods__["next"] = _infomap.InfomapUpIterator_next_set
    __swig_getmethods__["next"] = _infomap.InfomapUpIterator_next_get
    if _newclass:
        next = _swig_property(_infomap.InfomapUpIterator_next_get, _infomap.InfomapUpIterator_next_set)
    __swig_setmethods__["firstChild"] = _infomap.InfomapUpIterator_firstChild_set
    __swig_getmethods__["firstChild"] = _infomap.InfomapUpIterator_firstChild_get
    if _newclass:
        firstChild = _swig_property(_infomap.InfomapUpIterator_firstChild_get, _infomap.InfomapUpIterator_firstChild_set)
    __swig_setmethods__["lastChild"] = _infomap.InfomapUpIterator_lastChild_set
    __swig_getmethods__["lastChild"] = _infomap.InfomapUpIterator_lastChild_get
    if _newclass:
        lastChild = _swig_property(_infomap.InfomapUpIterator_lastChild_get, _infomap.InfomapUpIterator_lastChild_set)
    __swig_setmethods__["collapsedFirstChild"] = _infomap.InfomapUpIterator_collapsedFirstChild_set
    __swig_getmethods__["collapsedFirstChild"] = _infomap.InfomapUpIterator_collapsedFirstChild_get
    if _newclass:
        collapsedFirstChild = _swig_property(_infomap.InfomapUpIterator_collapsedFirstChild_get, _infomap.InfomapUpIterator_collapsedFirstChild_set)
    __swig_setmethods__["collapsedLastChild"] = _infomap.InfomapUpIterator_collapsedLastChild_set
    __swig_getmethods__["collapsedLastChild"] = _infomap.InfomapUpIterator_collapsedLastChild_get
    if _newclass:
        collapsedLastChild = _swig_property(_infomap.InfomapUpIterator_collapsedLastChild_get, _infomap.InfomapUpIterator_collapsedLastChild_set)
    __swig_setmethods__["codelength"] = _infomap.InfomapUpIterator_codelength_set
    __swig_getmethods__["codelength"] = _infomap.InfomapUpIterator_codelength_get
    if _newclass:
        codelength = _swig_property(_infomap.InfomapUpIterator_codelength_get, _infomap.InfomapUpIterator_codelength_set)
    __swig_setmethods__["dirty"] = _infomap.InfomapUpIterator_dirty_set
    __swig_getmethods__["dirty"] = _infomap.InfomapUpIterator_dirty_get
    if _newclass:
        dirty = _swig_property(_infomap.InfomapUpIterator_dirty_get, _infomap.InfomapUpIterator_dirty_set)
    __swig_setmethods__["physicalNodes"] = _infomap.InfomapUpIterator_physicalNodes_set
    __swig_getmethods__["physicalNodes"] = _infomap.InfomapUpIterator_physicalNodes_get
    if _newclass:
        physicalNodes = _swig_property(_infomap.InfomapUpIterator_physicalNodes_get, _infomap.InfomapUpIterator_physicalNodes_set)

    def getInfomap(self) -> "infomap::InfomapBase &":
        return _infomap.InfomapUpIterator_getInfomap(self)

    def setInfomap(self, arg2: 'InfomapBase') -> "infomap::InfomapBase &":
        return _infomap.InfomapUpIterator_setInfomap(self, arg2)

    def getInfomapRoot(self, *args) -> "infomap::InfoNode const *":
        return _infomap.InfomapUpIterator_getInfomapRoot(self, *args)

    def disposeInfomap(self) -> "bool":
        return _infomap.InfomapUpIterator_disposeInfomap(self)

    def numPhysicalNodes(self) -> "unsigned int":
        return _infomap.InfomapUpIterator_numPhysicalNodes(self)

    def begin_child(self, *args) -> "infomap::InfoNode::const_sibling_iterator":
        return _infomap.InfomapUpIterator_begin_child(self, *args)

    def end_child(self, *args) -> "infomap::InfoNode::const_sibling_iterator":
        return _infomap.InfomapUpIterator_end_child(self, *args)

    def begin(self, *args) -> "infomap::InfoNode::const_sibling_iterator":
        return _infomap.InfomapUpIterator_begin(self, *args)

    def end(self, *args) -> "infomap::InfoNode::const_sibling_iterator":
        return _infomap.InfomapUpIterator_end(self, *args)

    def begin_leaf(self) -> "infomap::InfoNode::leaf_iterator":
        return _infomap.InfomapUpIterator_begin_leaf(self)

    def end_leaf(self) -> "infomap::InfoNode::leaf_iterator":
        return _infomap.InfomapUpIterator_end_leaf(self)

    def begin_depthFirst(self, *args) -> "infomap::InfoNode::const_pre_depth_first_iterator":
        return _infomap.InfomapUpIterator_begin_depthFirst(self, *args)

    def end_depthFirst(self, *args) -> "infomap::InfoNode::const_pre_depth_first_iterator":
        return _infomap.InfomapUpIterator_end_depthFirst(self, *args)

    def begin_tree(self, *args) -> "infomap::InfoNode::const_infomap_cluster_iterator":
        return _infomap.InfomapUpIterator_begin_tree(self, *args)

    def end_tree(self, *args) -> "infomap::InfoNode::const_infomap_cluster_iterator":
        return _infomap.InfomapUpIterator_end_tree(self, *args)

    def begin_treePath(self, *args) -> "infomap::InfoNode::const_infomap_depth_first_iterator":
        return _infomap.InfomapUpIterator_begin_treePath(self, *args)

    def end_treePath(self, *args) -> "infomap::InfoNode::const_infomap_depth_first_iterator":
        return _infomap.InfomapUpIterator_end_treePath(self, *args)

    def infomapTree(self, *args) -> "infomap::InfoNode::const_infomap_iterator_wrapper":
        return _infomap.InfomapUpIterator_infomapTree(self, *args)

    def begin_outEdge(self) -> "infomap::InfoNode::edge_iterator":
        return _infomap.InfomapUpIterator_begin_outEdge(self)

    def end_outEdge(self) -> "infomap::InfoNode::edge_iterator":
        return _infomap.InfomapUpIterator_end_outEdge(self)

    def begin_inEdge(self) -> "infomap::InfoNode::edge_iterator":
        return _infomap.InfomapUpIterator_begin_inEdge(self)

    def end_inEdge(self) -> "infomap::InfoNode::edge_iterator":
        return _infomap.InfomapUpIterator_end_inEdge(self)

    def outEdges(self) -> "infomap::InfoNode::edge_iterator_wrapper":
        return _infomap.InfomapUpIterator_outEdges(self)

    def inEdges(self) -> "infomap::InfoNode::edge_iterator_wrapper":
        return _infomap.InfomapUpIterator_inEdges(self)

    def childDegree(self) -> "unsigned int":
        return _infomap.InfomapUpIterator_childDegree(self)

    def isLeaf(self) -> "bool":
        return _infomap.InfomapUpIterator_isLeaf(self)

    def isLeafModule(self) -> "bool":
        return _infomap.InfomapUpIterator_isLeafModule(self)

    def isRoot(self) -> "bool":
        return _infomap.InfomapUpIterator_isRoot(self)

    def depth(self) -> "unsigned int":
        return _infomap.InfomapUpIterator_depth(self)

    def firstDepthBelow(self) -> "unsigned int":
        return _infomap.InfomapUpIterator_firstDepthBelow(self)

    def numLeafMembers(self) -> "unsigned int":
        return _infomap.InfomapUpIterator_numLeafMembers(self)

    def isDangling(self) -> "bool":
        return _infomap.InfomapUpIterator_isDangling(self)

    def outDegree(self) -> "unsigned int":
        return _infomap.InfomapUpIterator_outDegree(self)

    def inDegree(self) -> "unsigned int":
        return _infomap.InfomapUpIterator_inDegree(self)

    def degree(self) -> "unsigned int":
        return _infomap.InfomapUpIterator_degree(self)

    def isFirst(self) -> "bool":
        return _infomap.InfomapUpIterator_isFirst(self)

    def isLast(self) -> "bool":
        return _infomap.InfomapUpIterator_isLast(self)

    def childIndex(self) -> "unsigned int":
        return _infomap.InfomapUpIterator_childIndex(self)

    def __eq__(self, rhs: 'InfoNode') -> "bool":
        return _infomap.InfomapUpIterator___eq__(self, rhs)

    def __ne__(self, rhs: 'InfoNode') -> "bool":
        return _infomap.InfomapUpIterator___ne__(self, rhs)

    def initClean(self) -> "void":
        return _infomap.InfomapUpIterator_initClean(self)

    def collapseChildren(self) -> "unsigned int":
        return _infomap.InfomapUpIterator_collapseChildren(self)

    def expandChildren(self) -> "unsigned int":
        return _infomap.InfomapUpIterator_expandChildren(self)

    def setChildDegree(self, value: 'unsigned int') -> "void":
        return _infomap.InfomapUpIterator_setChildDegree(self, value)

    def setNumLeafNodes(self, value: 'unsigned int') -> "void":
        return _infomap.InfomapUpIterator_setNumLeafNodes(self, value)

    def addChild(self, child: 'InfoNode') -> "void":
        return _infomap.InfomapUpIterator_addChild(self, child)

    def releaseChildren(self) -> "void":
        return _infomap.InfomapUpIterator_releaseChildren(self)

    def replaceChildrenWithOneNode(self) -> "infomap::InfoNode &":
        return _infomap.InfomapUpIterator_replaceChildrenWithOneNode(self)

    def replaceWithChildren(self) -> "unsigned int":
        return _infomap.InfomapUpIterator_replaceWithChildren(self)

    def replaceWithChildrenDebug(self) -> "void":
        return _infomap.InfomapUpIterator_replaceWithChildrenDebug(self)

    def replaceChildrenWithGrandChildren(self) -> "unsigned int":
        return _infomap.InfomapUpIterator_replaceChildrenWithGrandChildren(self)

    def replaceChildrenWithGrandChildrenDebug(self) -> "void":
        return _infomap.InfomapUpIterator_replaceChildrenWithGrandChildrenDebug(self)

    def remove(self, removeChildren: 'bool') -> "void":
        return _infomap.InfomapUpIterator_remove(self, removeChildren)

    def deleteChildren(self) -> "void":
        return _infomap.InfomapUpIterator_deleteChildren(self)

    def addOutEdge(self, target: 'InfoNode', weight: 'double', flow: 'double'=0.0) -> "infomap::InfoNode::EdgeType *":
        return _infomap.InfomapUpIterator_addOutEdge(self, target, weight, flow)
InfomapUpIterator_swigregister = _infomap.InfomapUpIterator_swigregister
InfomapUpIterator_swigregister(InfomapUpIterator)

class vector_uint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_uint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_uint, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _infomap.vector_uint_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _infomap.vector_uint___nonzero__(self)

    def __bool__(self) -> "bool":
        return _infomap.vector_uint___bool__(self)

    def __len__(self) -> "std::vector< unsigned int >::size_type":
        return _infomap.vector_uint___len__(self)

    def __getslice__(self, i: 'std::vector< unsigned int >::difference_type', j: 'std::vector< unsigned int >::difference_type') -> "std::vector< unsigned int,std::allocator< unsigned int > > *":
        return _infomap.vector_uint___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _infomap.vector_uint___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< unsigned int >::difference_type', j: 'std::vector< unsigned int >::difference_type') -> "void":
        return _infomap.vector_uint___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _infomap.vector_uint___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< unsigned int >::value_type const &":
        return _infomap.vector_uint___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _infomap.vector_uint___setitem__(self, *args)

    def pop(self) -> "std::vector< unsigned int >::value_type":
        return _infomap.vector_uint_pop(self)

    def append(self, x: 'std::vector< unsigned int >::value_type const &') -> "void":
        return _infomap.vector_uint_append(self, x)

    def empty(self) -> "bool":
        return _infomap.vector_uint_empty(self)

    def size(self) -> "std::vector< unsigned int >::size_type":
        return _infomap.vector_uint_size(self)

    def swap(self, v: 'vector_uint') -> "void":
        return _infomap.vector_uint_swap(self, v)

    def begin(self) -> "std::vector< unsigned int >::iterator":
        return _infomap.vector_uint_begin(self)

    def end(self) -> "std::vector< unsigned int >::iterator":
        return _infomap.vector_uint_end(self)

    def rbegin(self) -> "std::vector< unsigned int >::reverse_iterator":
        return _infomap.vector_uint_rbegin(self)

    def rend(self) -> "std::vector< unsigned int >::reverse_iterator":
        return _infomap.vector_uint_rend(self)

    def clear(self) -> "void":
        return _infomap.vector_uint_clear(self)

    def get_allocator(self) -> "std::vector< unsigned int >::allocator_type":
        return _infomap.vector_uint_get_allocator(self)

    def pop_back(self) -> "void":
        return _infomap.vector_uint_pop_back(self)

    def erase(self, *args) -> "std::vector< unsigned int >::iterator":
        return _infomap.vector_uint_erase(self, *args)

    def __init__(self, *args):
        this = _infomap.new_vector_uint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'std::vector< unsigned int >::value_type const &') -> "void":
        return _infomap.vector_uint_push_back(self, x)

    def front(self) -> "std::vector< unsigned int >::value_type const &":
        return _infomap.vector_uint_front(self)

    def back(self) -> "std::vector< unsigned int >::value_type const &":
        return _infomap.vector_uint_back(self)

    def assign(self, n: 'std::vector< unsigned int >::size_type', x: 'std::vector< unsigned int >::value_type const &') -> "void":
        return _infomap.vector_uint_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _infomap.vector_uint_resize(self, *args)

    def insert(self, *args) -> "void":
        return _infomap.vector_uint_insert(self, *args)

    def reserve(self, n: 'std::vector< unsigned int >::size_type') -> "void":
        return _infomap.vector_uint_reserve(self, n)

    def capacity(self) -> "std::vector< unsigned int >::size_type":
        return _infomap.vector_uint_capacity(self)
    __swig_destroy__ = _infomap.delete_vector_uint
    __del__ = lambda self: None
vector_uint_swigregister = _infomap.vector_uint_swigregister
vector_uint_swigregister(vector_uint)

class StateNetwork(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StateNetwork, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StateNetwork, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _infomap.new_StateNetwork(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _infomap.delete_StateNetwork
    __del__ = lambda self: None

    def setConfig(self, config: 'Config') -> "void":
        return _infomap.StateNetwork_setConfig(self, config)

    def getConfig(self) -> "infomap::Config const &":
        return _infomap.StateNetwork_getConfig(self)

    def addStateNode(self, *args) -> "std::pair< infomap::StateNetwork::NodeMap::iterator,bool >":
        return _infomap.StateNetwork_addStateNode(self, *args)

    def addNode(self, *args) -> "std::pair< infomap::StateNetwork::NodeMap::iterator,bool >":
        return _infomap.StateNetwork_addNode(self, *args)

    def addPhysicalNode(self, *args) -> "infomap::StateNetwork::PhysNode &":
        return _infomap.StateNetwork_addPhysicalNode(self, *args)

    def addName(self, id: 'unsigned int', arg3: 'std::string') -> "std::pair< std::map< unsigned int,std::string >::iterator,bool >":
        return _infomap.StateNetwork_addName(self, id, arg3)

    def addLink(self, sourceId: 'unsigned int', targetId: 'unsigned int', weight: 'double'=1.0) -> "bool":
        return _infomap.StateNetwork_addLink(self, sourceId, targetId, weight)

    def addPath(self, nodes: 'vector_uint', markovOrder: 'unsigned int', weight: 'double'=1.0) -> "bool":
        return _infomap.StateNetwork_addPath(self, nodes, markovOrder, weight)

    def calculateFlow(self) -> "void":
        return _infomap.StateNetwork_calculateFlow(self)

    def dispose(self) -> "void":
        return _infomap.StateNetwork_dispose(self)

    def nodes(self) -> "infomap::StateNetwork::NodeMap const &":
        return _infomap.StateNetwork_nodes(self)

    def numNodes(self) -> "unsigned int":
        return _infomap.StateNetwork_numNodes(self)

    def numPhysicalNodes(self) -> "unsigned int":
        return _infomap.StateNetwork_numPhysicalNodes(self)

    def nodeLinkMap(self, *args) -> "infomap::StateNetwork::NodeLinkMap &":
        return _infomap.StateNetwork_nodeLinkMap(self, *args)

    def numLinks(self) -> "unsigned int":
        return _infomap.StateNetwork_numLinks(self)

    def sumLinkWeight(self) -> "double":
        return _infomap.StateNetwork_sumLinkWeight(self)

    def sumSelfLinkWeight(self) -> "double":
        return _infomap.StateNetwork_sumSelfLinkWeight(self)

    def outWeights(self) -> "std::map< unsigned int,double > &":
        return _infomap.StateNetwork_outWeights(self)

    def names(self, *args) -> "std::map< unsigned int,std::string > const &":
        return _infomap.StateNetwork_names(self, *args)

    def haveDirectedInput(self) -> "bool":
        return _infomap.StateNetwork_haveDirectedInput(self)

    def haveMemoryInput(self) -> "bool":
        return _infomap.StateNetwork_haveMemoryInput(self)

    def writeStateNetwork(self, filename: 'std::string') -> "void":
        return _infomap.StateNetwork_writeStateNetwork(self, filename)

    def writePajekNetwork(self, filename: 'std::string') -> "void":
        return _infomap.StateNetwork_writePajekNetwork(self, filename)
StateNetwork_swigregister = _infomap.StateNetwork_swigregister
StateNetwork_swigregister(StateNetwork)

class Network(StateNetwork):
    __swig_setmethods__ = {}
    for _s in [StateNetwork]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Network, name, value)
    __swig_getmethods__ = {}
    for _s in [StateNetwork]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Network, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _infomap.new_Network(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _infomap.delete_Network
    __del__ = lambda self: None

    def readInputData(self, *args) -> "void":
        return _infomap.Network_readInputData(self, *args)

    def generateStateNetworkFromMultilayer(self) -> "void":
        return _infomap.Network_generateStateNetworkFromMultilayer(self)

    def generateStateNetworkFromMultilayerWithInterLinks(self) -> "void":
        return _infomap.Network_generateStateNetworkFromMultilayerWithInterLinks(self)

    def generateStateNetworkFromMultilayerWithSimulatedInterLinks(self) -> "void":
        return _infomap.Network_generateStateNetworkFromMultilayerWithSimulatedInterLinks(self)

    def simulateInterLayerLinks(self) -> "void":
        return _infomap.Network_simulateInterLayerLinks(self)

    def addMultilayerLink(self, layer1: 'unsigned int', n1: 'unsigned int', layer2: 'unsigned int', n2: 'unsigned int', weight: 'double') -> "void":
        return _infomap.Network_addMultilayerLink(self, layer1, n1, layer2, n2, weight)

    def addMultilayerIntraLink(self, layer: 'unsigned int', n1: 'unsigned int', n2: 'unsigned int', weight: 'double') -> "void":
        return _infomap.Network_addMultilayerIntraLink(self, layer, n1, n2, weight)

    def addMultilayerInterLink(self, layer1: 'unsigned int', n: 'unsigned int', layer2: 'unsigned int', interWeight: 'double') -> "void":
        return _infomap.Network_addMultilayerInterLink(self, layer1, n, layer2, interWeight)
Network_swigregister = _infomap.Network_swigregister
Network_swigregister(Network)

class LayerNode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LayerNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LayerNode, name)
    __repr__ = _swig_repr
    __swig_setmethods__["layer"] = _infomap.LayerNode_layer_set
    __swig_getmethods__["layer"] = _infomap.LayerNode_layer_get
    if _newclass:
        layer = _swig_property(_infomap.LayerNode_layer_get, _infomap.LayerNode_layer_set)
    __swig_setmethods__["node"] = _infomap.LayerNode_node_set
    __swig_getmethods__["node"] = _infomap.LayerNode_node_get
    if _newclass:
        node = _swig_property(_infomap.LayerNode_node_get, _infomap.LayerNode_node_set)

    def __init__(self, layer: 'unsigned int'=0, node: 'unsigned int'=0):
        this = _infomap.new_LayerNode(layer, node)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __lt__(self, other: 'LayerNode') -> "bool":
        return _infomap.LayerNode___lt__(self, other)
    __swig_destroy__ = _infomap.delete_LayerNode
    __del__ = lambda self: None
LayerNode_swigregister = _infomap.LayerNode_swigregister
LayerNode_swigregister(LayerNode)

class Bigram(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bigram, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Bigram, name)
    __repr__ = _swig_repr
    __swig_setmethods__["first"] = _infomap.Bigram_first_set
    __swig_getmethods__["first"] = _infomap.Bigram_first_get
    if _newclass:
        first = _swig_property(_infomap.Bigram_first_get, _infomap.Bigram_first_set)
    __swig_setmethods__["second"] = _infomap.Bigram_second_set
    __swig_getmethods__["second"] = _infomap.Bigram_second_get
    if _newclass:
        second = _swig_property(_infomap.Bigram_second_get, _infomap.Bigram_second_set)

    def __init__(self, first: 'unsigned int'=0, second: 'unsigned int'=0):
        this = _infomap.new_Bigram(first, second)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __lt__(self, other: 'Bigram') -> "bool":
        return _infomap.Bigram___lt__(self, other)
    __swig_destroy__ = _infomap.delete_Bigram
    __del__ = lambda self: None
Bigram_swigregister = _infomap.Bigram_swigregister
Bigram_swigregister(Bigram)

class BipartiteLink(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BipartiteLink, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BipartiteLink, name)
    __repr__ = _swig_repr
    __swig_setmethods__["featureNode"] = _infomap.BipartiteLink_featureNode_set
    __swig_getmethods__["featureNode"] = _infomap.BipartiteLink_featureNode_get
    if _newclass:
        featureNode = _swig_property(_infomap.BipartiteLink_featureNode_get, _infomap.BipartiteLink_featureNode_set)
    __swig_setmethods__["node"] = _infomap.BipartiteLink_node_set
    __swig_getmethods__["node"] = _infomap.BipartiteLink_node_get
    if _newclass:
        node = _swig_property(_infomap.BipartiteLink_node_get, _infomap.BipartiteLink_node_set)
    __swig_setmethods__["swapOrder"] = _infomap.BipartiteLink_swapOrder_set
    __swig_getmethods__["swapOrder"] = _infomap.BipartiteLink_swapOrder_get
    if _newclass:
        swapOrder = _swig_property(_infomap.BipartiteLink_swapOrder_get, _infomap.BipartiteLink_swapOrder_set)

    def __init__(self, featureNode: 'unsigned int'=0, node: 'unsigned int'=0, swapOrder: 'bool'=False):
        this = _infomap.new_BipartiteLink(featureNode, node, swapOrder)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __lt__(self, other: 'BipartiteLink') -> "bool":
        return _infomap.BipartiteLink___lt__(self, other)
    __swig_destroy__ = _infomap.delete_BipartiteLink
    __del__ = lambda self: None
BipartiteLink_swigregister = _infomap.BipartiteLink_swigregister
BipartiteLink_swigregister(BipartiteLink)

class Weight(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Weight, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Weight, name)
    __repr__ = _swig_repr
    __swig_setmethods__["weight"] = _infomap.Weight_weight_set
    __swig_getmethods__["weight"] = _infomap.Weight_weight_get
    if _newclass:
        weight = _swig_property(_infomap.Weight_weight_get, _infomap.Weight_weight_set)

    def __init__(self, weight: 'double'=0):
        this = _infomap.new_Weight(weight)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iadd__(self, w: 'double') -> "infomap::Weight &":
        return _infomap.Weight___iadd__(self, w)
    __swig_destroy__ = _infomap.delete_Weight
    __del__ = lambda self: None
Weight_swigregister = _infomap.Weight_swigregister
Weight_swigregister(Weight)

class Triple(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Triple, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Triple, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _infomap.new_Triple(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _infomap.delete_Triple
    __del__ = lambda self: None

    def __lt__(self, other: 'Triple') -> "bool":
        return _infomap.Triple___lt__(self, other)

    def __eq__(self, other: 'Triple') -> "bool":
        return _infomap.Triple___eq__(self, other)
    __swig_setmethods__["n1"] = _infomap.Triple_n1_set
    __swig_getmethods__["n1"] = _infomap.Triple_n1_get
    if _newclass:
        n1 = _swig_property(_infomap.Triple_n1_get, _infomap.Triple_n1_set)
    __swig_setmethods__["n2"] = _infomap.Triple_n2_set
    __swig_getmethods__["n2"] = _infomap.Triple_n2_get
    if _newclass:
        n2 = _swig_property(_infomap.Triple_n2_get, _infomap.Triple_n2_set)
    __swig_setmethods__["n3"] = _infomap.Triple_n3_set
    __swig_getmethods__["n3"] = _infomap.Triple_n3_get
    if _newclass:
        n3 = _swig_property(_infomap.Triple_n3_get, _infomap.Triple_n3_set)
Triple_swigregister = _infomap.Triple_swigregister
Triple_swigregister(Triple)

class InfomapConfigInfomapBase(Config):
    __swig_setmethods__ = {}
    for _s in [Config]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InfomapConfigInfomapBase, name, value)
    __swig_getmethods__ = {}
    for _s in [Config]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InfomapConfigInfomapBase, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _infomap.new_InfomapConfigInfomapBase(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _infomap.delete_InfomapConfigInfomapBase
    __del__ = lambda self: None

    def getConfig(self) -> "infomap::Config &":
        return _infomap.InfomapConfigInfomapBase_getConfig(self)

    def setConfig(self, conf: 'Config') -> "infomap::InfomapBase &":
        return _infomap.InfomapConfigInfomapBase_setConfig(self, conf)

    def setNonMainConfig(self, conf: 'Config') -> "infomap::InfomapBase &":
        return _infomap.InfomapConfigInfomapBase_setNonMainConfig(self, conf)

    def setNumTrials(self, N: 'unsigned int') -> "infomap::InfomapBase &":
        return _infomap.InfomapConfigInfomapBase_setNumTrials(self, N)

    def setTwoLevel(self, value: 'bool') -> "infomap::InfomapBase &":
        return _infomap.InfomapConfigInfomapBase_setTwoLevel(self, value)

    def setTuneIterationLimit(self, value: 'unsigned int') -> "infomap::InfomapBase &":
        return _infomap.InfomapConfigInfomapBase_setTuneIterationLimit(self, value)

    def setFastHierarchicalSolution(self, level: 'unsigned int') -> "infomap::InfomapBase &":
        return _infomap.InfomapConfigInfomapBase_setFastHierarchicalSolution(self, level)

    def setOnlySuperModules(self, value: 'bool') -> "infomap::InfomapBase &":
        return _infomap.InfomapConfigInfomapBase_setOnlySuperModules(self, value)

    def setNoCoarseTune(self, value: 'bool') -> "infomap::InfomapBase &":
        return _infomap.InfomapConfigInfomapBase_setNoCoarseTune(self, value)

    def setMarkovTime(self, codeRate: 'double') -> "infomap::InfomapBase &":
        return _infomap.InfomapConfigInfomapBase_setMarkovTime(self, codeRate)

    def reseed(self, seed: 'unsigned int') -> "infomap::InfomapBase &":
        return _infomap.InfomapConfigInfomapBase_reseed(self, seed)
InfomapConfigInfomapBase_swigregister = _infomap.InfomapConfigInfomapBase_swigregister
InfomapConfigInfomapBase_swigregister(InfomapConfigInfomapBase)

class InfomapBase(InfomapConfigInfomapBase):
    __swig_setmethods__ = {}
    for _s in [InfomapConfigInfomapBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InfomapBase, name, value)
    __swig_getmethods__ = {}
    for _s in [InfomapConfigInfomapBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InfomapBase, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _infomap.delete_InfomapBase
    __del__ = lambda self: None

    def network(self, *args) -> "infomap::Network &":
        return _infomap.InfomapBase_network(self, *args)

    def root(self, *args) -> "infomap::InfoNode const &":
        return _infomap.InfomapBase_root(self, *args)

    def iterTree(self, *args) -> "infomap::InfomapIterator":
        return _infomap.InfomapBase_iterTree(self, *args)

    def iterTreePhysical(self, *args) -> "infomap::InfomapIteratorPhysical":
        return _infomap.InfomapBase_iterTreePhysical(self, *args)

    def iterModules(self, *args) -> "infomap::InfomapModuleIterator":
        return _infomap.InfomapBase_iterModules(self, *args)

    def iterLeafModules(self, *args) -> "infomap::InfomapLeafModuleIterator":
        return _infomap.InfomapBase_iterLeafModules(self, *args)

    def iterLeafNodes(self, *args) -> "infomap::InfomapLeafIterator":
        return _infomap.InfomapBase_iterLeafNodes(self, *args)

    def iterLeafNodesPhysical(self, *args) -> "infomap::InfomapLeafIteratorPhysical":
        return _infomap.InfomapBase_iterLeafNodesPhysical(self, *args)

    def begin(self, *args) -> "infomap::InfomapIterator":
        return _infomap.InfomapBase_begin(self, *args)

    def end(self) -> "infomap::InfomapIterator":
        return _infomap.InfomapBase_end(self)

    def numLeafNodes(self) -> "unsigned int":
        return _infomap.InfomapBase_numLeafNodes(self)

    def leafNodes(self) -> "std::vector< infomap::InfoNode *,std::allocator< infomap::InfoNode * > > const &":
        return _infomap.InfomapBase_leafNodes(self)

    def numTopModules(self) -> "unsigned int":
        return _infomap.InfomapBase_numTopModules(self)

    def numActiveModules(self) -> "unsigned int":
        return _infomap.InfomapBase_numActiveModules(self)

    def numNonTrivialTopModules(self) -> "unsigned int":
        return _infomap.InfomapBase_numNonTrivialTopModules(self)

    def haveModules(self) -> "bool":
        return _infomap.InfomapBase_haveModules(self)

    def haveNonTrivialModules(self) -> "bool":
        return _infomap.InfomapBase_haveNonTrivialModules(self)

    def numLevels(self) -> "unsigned int":
        return _infomap.InfomapBase_numLevels(self)

    def maxTreeDepth(self) -> "unsigned int":
        return _infomap.InfomapBase_maxTreeDepth(self)

    def getCodelength(self) -> "double":
        return _infomap.InfomapBase_getCodelength(self)

    def codelength(self) -> "double":
        return _infomap.InfomapBase_codelength(self)

    def getIndexCodelength(self) -> "double":
        return _infomap.InfomapBase_getIndexCodelength(self)

    def getModuleCodelength(self) -> "double":
        return _infomap.InfomapBase_getModuleCodelength(self)

    def getHierarchicalCodelength(self) -> "double":
        return _infomap.InfomapBase_getHierarchicalCodelength(self)

    def getOneLevelCodelength(self) -> "double":
        return _infomap.InfomapBase_getOneLevelCodelength(self)

    def isFullNetwork(self) -> "bool":
        return _infomap.InfomapBase_isFullNetwork(self)

    def isFirstLoop(self) -> "bool":
        return _infomap.InfomapBase_isFirstLoop(self)

    def getNewInfomapInstance(self) -> "infomap::InfomapBase *":
        return _infomap.InfomapBase_getNewInfomapInstance(self)

    def getNewInfomapInstanceWithoutMemory(self) -> "infomap::InfomapBase *":
        return _infomap.InfomapBase_getNewInfomapInstanceWithoutMemory(self)

    def getSubInfomap(self, node: 'InfoNode') -> "infomap::InfomapBase &":
        return _infomap.InfomapBase_getSubInfomap(self, node)

    def getSuperInfomap(self, node: 'InfoNode') -> "infomap::InfomapBase &":
        return _infomap.InfomapBase_getSuperInfomap(self, node)

    def setIsMain(self, isMain: 'bool') -> "infomap::InfomapBase &":
        return _infomap.InfomapBase_setIsMain(self, isMain)

    def setSubLevel(self, level: 'unsigned int') -> "infomap::InfomapBase &":
        return _infomap.InfomapBase_setSubLevel(self, level)

    def isTopLevel(self) -> "bool":
        return _infomap.InfomapBase_isTopLevel(self)

    def isSuperLevelOnTopLevel(self) -> "bool":
        return _infomap.InfomapBase_isSuperLevelOnTopLevel(self)

    def isMainInfomap(self) -> "bool":
        return _infomap.InfomapBase_isMainInfomap(self)

    def haveMemory(self) -> "bool":
        return _infomap.InfomapBase_haveMemory(self)

    def haveHardPartition(self) -> "bool":
        return _infomap.InfomapBase_haveHardPartition(self)

    def activeNetwork(self) -> "std::vector< infomap::InfoNode *,std::allocator< infomap::InfoNode * > > &":
        return _infomap.InfomapBase_activeNetwork(self)

    def toString(self, out: 'std::ostream &') -> "std::ostream &":
        return _infomap.InfomapBase_toString(self, out)

    def run(self, *args) -> "void":
        return _infomap.InfomapBase_run(self, *args)

    def generateSubNetwork(self, *args) -> "void":
        return _infomap.InfomapBase_generateSubNetwork(self, *args)

    def init(self) -> "void":
        return _infomap.InfomapBase_init(self)

    def runPartition(self) -> "void":
        return _infomap.InfomapBase_runPartition(self)

    def restoreHardPartition(self) -> "void":
        return _infomap.InfomapBase_restoreHardPartition(self)

    def writeResult(self) -> "void":
        return _infomap.InfomapBase_writeResult(self)

    def hierarchicalPartition(self) -> "void":
        return _infomap.InfomapBase_hierarchicalPartition(self)

    def partition(self) -> "void":
        return _infomap.InfomapBase_partition(self)

    def initEnterExitFlow(self) -> "void":
        return _infomap.InfomapBase_initEnterExitFlow(self)

    def initNetwork(self, *args) -> "void":
        return _infomap.InfomapBase_initNetwork(self, *args)

    def initSuperNetwork(self) -> "void":
        return _infomap.InfomapBase_initSuperNetwork(self)

    def calcCodelength(self, parent: 'InfoNode') -> "double":
        return _infomap.InfomapBase_calcCodelength(self, parent)

    def calcCodelengthOnTree(self, includeRoot: 'bool'=True) -> "double":
        return _infomap.InfomapBase_calcCodelengthOnTree(self, includeRoot)

    def setActiveNetworkFromLeafs(self) -> "void":
        return _infomap.InfomapBase_setActiveNetworkFromLeafs(self)

    def setActiveNetworkFromChildrenOfRoot(self) -> "void":
        return _infomap.InfomapBase_setActiveNetworkFromChildrenOfRoot(self)

    def initPartition(self, *args) -> "void":
        return _infomap.InfomapBase_initPartition(self, *args)

    def findTopModulesRepeatedly(self, maxLevels: 'unsigned int') -> "void":
        return _infomap.InfomapBase_findTopModulesRepeatedly(self, maxLevels)

    def fineTune(self) -> "unsigned int":
        return _infomap.InfomapBase_fineTune(self)

    def coarseTune(self) -> "unsigned int":
        return _infomap.InfomapBase_coarseTune(self)

    def optimizeActiveNetwork(self) -> "unsigned int":
        return _infomap.InfomapBase_optimizeActiveNetwork(self)

    def moveActiveNodesToPredifinedModules(self, modules: 'vector_uint') -> "void":
        return _infomap.InfomapBase_moveActiveNodesToPredifinedModules(self, modules)

    def consolidateModules(self, replaceExistingModules: 'bool'=True) -> "void":
        return _infomap.InfomapBase_consolidateModules(self, replaceExistingModules)

    def calculateNumNonTrivialTopModules(self) -> "void":
        return _infomap.InfomapBase_calculateNumNonTrivialTopModules(self)

    def calculateMaxDepth(self) -> "unsigned int":
        return _infomap.InfomapBase_calculateMaxDepth(self)

    def restoreConsolidatedOptimizationPointIfNoImprovement(self, forceRestore: 'bool'=False) -> "bool":
        return _infomap.InfomapBase_restoreConsolidatedOptimizationPointIfNoImprovement(self, forceRestore)

    def findHierarchicalSuperModules(self, *args) -> "unsigned int":
        return _infomap.InfomapBase_findHierarchicalSuperModules(self, *args)

    def findHierarchicalSuperModulesFast(self, *args) -> "unsigned int":
        return _infomap.InfomapBase_findHierarchicalSuperModulesFast(self, *args)

    def transformNodeFlowToEnterFlow(self, parent: 'InfoNode') -> "void":
        return _infomap.InfomapBase_transformNodeFlowToEnterFlow(self, parent)

    def resetFlowOnModules(self) -> "void":
        return _infomap.InfomapBase_resetFlowOnModules(self)

    def removeModules(self) -> "unsigned int":
        return _infomap.InfomapBase_removeModules(self)

    def removeSubModules(self, recalculateCodelengthOnTree: 'bool') -> "unsigned int":
        return _infomap.InfomapBase_removeSubModules(self, recalculateCodelengthOnTree)

    def recursivePartition(self) -> "unsigned int":
        return _infomap.InfomapBase_recursivePartition(self)

    def queueTopModules(self, partitionQueue: 'PartitionQueue &') -> "void":
        return _infomap.InfomapBase_queueTopModules(self, partitionQueue)

    def queueLeafModules(self, partitionQueue: 'PartitionQueue &') -> "void":
        return _infomap.InfomapBase_queueLeafModules(self, partitionQueue)

    def processPartitionQueue(self, queue: 'PartitionQueue &', nextLevel: 'PartitionQueue &') -> "bool":
        return _infomap.InfomapBase_processPartitionQueue(self, queue, nextLevel)

    def writeTree(self, *args) -> "std::string":
        return _infomap.InfomapBase_writeTree(self, *args)

    def writeFlowTree(self, *args) -> "std::string":
        return _infomap.InfomapBase_writeFlowTree(self, *args)

    def writeClu(self, *args) -> "std::string":
        return _infomap.InfomapBase_writeClu(self, *args)

    def writeMap(self, *args) -> "std::string":
        return _infomap.InfomapBase_writeMap(self, *args)

    def printPerLevelCodelength(self, out: 'std::ostream &') -> "unsigned int":
        return _infomap.InfomapBase_printPerLevelCodelength(self, out)

    def aggregatePerLevelCodelength(self, *args) -> "void":
        return _infomap.InfomapBase_aggregatePerLevelCodelength(self, *args)

    def printDebug(self) -> "void":
        return _infomap.InfomapBase_printDebug(self)

    def printRSS(self, minVerboseLevel: 'unsigned int'=0) -> "void":
        return _infomap.InfomapBase_printRSS(self, minVerboseLevel)
InfomapBase_swigregister = _infomap.InfomapBase_swigregister
InfomapBase_swigregister(InfomapBase)

class PerLevelStat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PerLevelStat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PerLevelStat, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _infomap.new_PerLevelStat()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def codelength(self) -> "double":
        return _infomap.PerLevelStat_codelength(self)

    def numNodes(self) -> "unsigned int":
        return _infomap.PerLevelStat_numNodes(self)
    __swig_setmethods__["numModules"] = _infomap.PerLevelStat_numModules_set
    __swig_getmethods__["numModules"] = _infomap.PerLevelStat_numModules_get
    if _newclass:
        numModules = _swig_property(_infomap.PerLevelStat_numModules_get, _infomap.PerLevelStat_numModules_set)
    __swig_setmethods__["numLeafNodes"] = _infomap.PerLevelStat_numLeafNodes_set
    __swig_getmethods__["numLeafNodes"] = _infomap.PerLevelStat_numLeafNodes_get
    if _newclass:
        numLeafNodes = _swig_property(_infomap.PerLevelStat_numLeafNodes_get, _infomap.PerLevelStat_numLeafNodes_set)
    __swig_setmethods__["indexLength"] = _infomap.PerLevelStat_indexLength_set
    __swig_getmethods__["indexLength"] = _infomap.PerLevelStat_indexLength_get
    if _newclass:
        indexLength = _swig_property(_infomap.PerLevelStat_indexLength_get, _infomap.PerLevelStat_indexLength_set)
    __swig_setmethods__["leafLength"] = _infomap.PerLevelStat_leafLength_set
    __swig_getmethods__["leafLength"] = _infomap.PerLevelStat_leafLength_get
    if _newclass:
        leafLength = _swig_property(_infomap.PerLevelStat_leafLength_get, _infomap.PerLevelStat_leafLength_set)
    __swig_destroy__ = _infomap.delete_PerLevelStat
    __del__ = lambda self: None
PerLevelStat_swigregister = _infomap.PerLevelStat_swigregister
PerLevelStat_swigregister(PerLevelStat)

class PerIterationStats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PerIterationStats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PerIterationStats, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _infomap.new_PerIterationStats()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["iterationIndex"] = _infomap.PerIterationStats_iterationIndex_set
    __swig_getmethods__["iterationIndex"] = _infomap.PerIterationStats_iterationIndex_get
    if _newclass:
        iterationIndex = _swig_property(_infomap.PerIterationStats_iterationIndex_get, _infomap.PerIterationStats_iterationIndex_set)
    __swig_setmethods__["numTopModules"] = _infomap.PerIterationStats_numTopModules_set
    __swig_getmethods__["numTopModules"] = _infomap.PerIterationStats_numTopModules_get
    if _newclass:
        numTopModules = _swig_property(_infomap.PerIterationStats_numTopModules_get, _infomap.PerIterationStats_numTopModules_set)
    __swig_setmethods__["numBottomModules"] = _infomap.PerIterationStats_numBottomModules_set
    __swig_getmethods__["numBottomModules"] = _infomap.PerIterationStats_numBottomModules_get
    if _newclass:
        numBottomModules = _swig_property(_infomap.PerIterationStats_numBottomModules_get, _infomap.PerIterationStats_numBottomModules_set)
    __swig_setmethods__["topPerplexity"] = _infomap.PerIterationStats_topPerplexity_set
    __swig_getmethods__["topPerplexity"] = _infomap.PerIterationStats_topPerplexity_get
    if _newclass:
        topPerplexity = _swig_property(_infomap.PerIterationStats_topPerplexity_get, _infomap.PerIterationStats_topPerplexity_set)
    __swig_setmethods__["bottomPerplexity"] = _infomap.PerIterationStats_bottomPerplexity_set
    __swig_getmethods__["bottomPerplexity"] = _infomap.PerIterationStats_bottomPerplexity_get
    if _newclass:
        bottomPerplexity = _swig_property(_infomap.PerIterationStats_bottomPerplexity_get, _infomap.PerIterationStats_bottomPerplexity_set)
    __swig_setmethods__["topOverlap"] = _infomap.PerIterationStats_topOverlap_set
    __swig_getmethods__["topOverlap"] = _infomap.PerIterationStats_topOverlap_get
    if _newclass:
        topOverlap = _swig_property(_infomap.PerIterationStats_topOverlap_get, _infomap.PerIterationStats_topOverlap_set)
    __swig_setmethods__["bottomOverlap"] = _infomap.PerIterationStats_bottomOverlap_set
    __swig_getmethods__["bottomOverlap"] = _infomap.PerIterationStats_bottomOverlap_get
    if _newclass:
        bottomOverlap = _swig_property(_infomap.PerIterationStats_bottomOverlap_get, _infomap.PerIterationStats_bottomOverlap_set)
    __swig_setmethods__["codelength"] = _infomap.PerIterationStats_codelength_set
    __swig_getmethods__["codelength"] = _infomap.PerIterationStats_codelength_get
    if _newclass:
        codelength = _swig_property(_infomap.PerIterationStats_codelength_get, _infomap.PerIterationStats_codelength_set)
    __swig_setmethods__["maxDepth"] = _infomap.PerIterationStats_maxDepth_set
    __swig_getmethods__["maxDepth"] = _infomap.PerIterationStats_maxDepth_get
    if _newclass:
        maxDepth = _swig_property(_infomap.PerIterationStats_maxDepth_get, _infomap.PerIterationStats_maxDepth_set)
    __swig_setmethods__["weightedDepth"] = _infomap.PerIterationStats_weightedDepth_set
    __swig_getmethods__["weightedDepth"] = _infomap.PerIterationStats_weightedDepth_get
    if _newclass:
        weightedDepth = _swig_property(_infomap.PerIterationStats_weightedDepth_get, _infomap.PerIterationStats_weightedDepth_set)
    __swig_setmethods__["seconds"] = _infomap.PerIterationStats_seconds_set
    __swig_getmethods__["seconds"] = _infomap.PerIterationStats_seconds_get
    if _newclass:
        seconds = _swig_property(_infomap.PerIterationStats_seconds_get, _infomap.PerIterationStats_seconds_set)
    __swig_setmethods__["isMinimum"] = _infomap.PerIterationStats_isMinimum_set
    __swig_getmethods__["isMinimum"] = _infomap.PerIterationStats_isMinimum_get
    if _newclass:
        isMinimum = _swig_property(_infomap.PerIterationStats_isMinimum_get, _infomap.PerIterationStats_isMinimum_set)
    __swig_destroy__ = _infomap.delete_PerIterationStats
    __del__ = lambda self: None
PerIterationStats_swigregister = _infomap.PerIterationStats_swigregister
PerIterationStats_swigregister(PerIterationStats)

class MapEquation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MapEquation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MapEquation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _infomap.new_MapEquation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _infomap.delete_MapEquation
    __del__ = lambda self: None
    if _newclass:
        haveMemory = staticmethod(_infomap.MapEquation_haveMemory)
    else:
        haveMemory = _infomap.MapEquation_haveMemory

    def _print(self, arg2: 'std::ostream &') -> "std::ostream &":
        return _infomap.MapEquation__print(self, arg2)

    def initNetwork(self, root: 'InfoNode') -> "void":
        return _infomap.MapEquation_initNetwork(self, root)

    def initSuperNetwork(self, root: 'InfoNode') -> "void":
        return _infomap.MapEquation_initSuperNetwork(self, root)

    def initSubNetwork(self, root: 'InfoNode') -> "void":
        return _infomap.MapEquation_initSubNetwork(self, root)

    def initPartition(self, nodes: 'std::vector< infomap::InfoNode *,std::allocator< infomap::InfoNode * > > &') -> "void":
        return _infomap.MapEquation_initPartition(self, nodes)

    def calcCodelength(self, parent: 'InfoNode') -> "double":
        return _infomap.MapEquation_calcCodelength(self, parent)

    def addMemoryContributions(self, *args) -> "void":
        return _infomap.MapEquation_addMemoryContributions(self, *args)

    def getDeltaCodelengthOnMovingNode(self, current: 'InfoNode', oldModuleDelta: 'DeltaFlow', newModuleDelta: 'DeltaFlow', moduleFlowData: 'std::vector< infomap::MapEquation::FlowDataType,std::allocator< infomap::MapEquation::FlowDataType > > &') -> "double":
        return _infomap.MapEquation_getDeltaCodelengthOnMovingNode(self, current, oldModuleDelta, newModuleDelta, moduleFlowData)

    def updateCodelengthOnMovingNode(self, current: 'InfoNode', oldModuleDelta: 'DeltaFlow', newModuleDelta: 'DeltaFlow', moduleFlowData: 'std::vector< infomap::MapEquation::FlowDataType,std::allocator< infomap::MapEquation::FlowDataType > > &') -> "void":
        return _infomap.MapEquation_updateCodelengthOnMovingNode(self, current, oldModuleDelta, newModuleDelta, moduleFlowData)

    def consolidateModules(self, modules: 'std::vector< infomap::InfoNode *,std::allocator< infomap::InfoNode * > > &') -> "void":
        return _infomap.MapEquation_consolidateModules(self, modules)

    def printDebug(self) -> "void":
        return _infomap.MapEquation_printDebug(self)
    __swig_setmethods__["codelength"] = _infomap.MapEquation_codelength_set
    __swig_getmethods__["codelength"] = _infomap.MapEquation_codelength_get
    if _newclass:
        codelength = _swig_property(_infomap.MapEquation_codelength_get, _infomap.MapEquation_codelength_set)
    __swig_setmethods__["indexCodelength"] = _infomap.MapEquation_indexCodelength_set
    __swig_getmethods__["indexCodelength"] = _infomap.MapEquation_indexCodelength_get
    if _newclass:
        indexCodelength = _swig_property(_infomap.MapEquation_indexCodelength_get, _infomap.MapEquation_indexCodelength_set)
    __swig_setmethods__["moduleCodelength"] = _infomap.MapEquation_moduleCodelength_set
    __swig_getmethods__["moduleCodelength"] = _infomap.MapEquation_moduleCodelength_get
    if _newclass:
        moduleCodelength = _swig_property(_infomap.MapEquation_moduleCodelength_get, _infomap.MapEquation_moduleCodelength_set)
MapEquation_swigregister = _infomap.MapEquation_swigregister
MapEquation_swigregister(MapEquation)

def MapEquation_haveMemory() -> "bool":
    return _infomap.MapEquation_haveMemory()
MapEquation_haveMemory = _infomap.MapEquation_haveMemory

class MemMapEquation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MemMapEquation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MemMapEquation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _infomap.new_MemMapEquation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _infomap.delete_MemMapEquation
    __del__ = lambda self: None
    if _newclass:
        haveMemory = staticmethod(_infomap.MemMapEquation_haveMemory)
    else:
        haveMemory = _infomap.MemMapEquation_haveMemory

    def _print(self, out: 'std::ostream &') -> "std::ostream &":
        return _infomap.MemMapEquation__print(self, out)

    def initNetwork(self, root: 'InfoNode') -> "void":
        return _infomap.MemMapEquation_initNetwork(self, root)

    def initSuperNetwork(self, root: 'InfoNode') -> "void":
        return _infomap.MemMapEquation_initSuperNetwork(self, root)

    def initSubNetwork(self, root: 'InfoNode') -> "void":
        return _infomap.MemMapEquation_initSubNetwork(self, root)

    def initPartition(self, nodes: 'std::vector< infomap::InfoNode *,std::allocator< infomap::InfoNode * > > &') -> "void":
        return _infomap.MemMapEquation_initPartition(self, nodes)

    def calcCodelength(self, parent: 'InfoNode') -> "double":
        return _infomap.MemMapEquation_calcCodelength(self, parent)

    def addMemoryContributions(self, current: 'InfoNode', oldModuleDelta: 'MemDeltaFlow', moduleDeltaFlow: 'VectorMap< infomap::MemMapEquation::DeltaFlowDataType > &') -> "void":
        return _infomap.MemMapEquation_addMemoryContributions(self, current, oldModuleDelta, moduleDeltaFlow)

    def getDeltaCodelengthOnMovingNode(self, current: 'InfoNode', oldModuleDelta: 'MemDeltaFlow', newModuleDelta: 'MemDeltaFlow', moduleFlowData: 'std::vector< infomap::MemMapEquation::FlowDataType,std::allocator< infomap::MemMapEquation::FlowDataType > > &') -> "double":
        return _infomap.MemMapEquation_getDeltaCodelengthOnMovingNode(self, current, oldModuleDelta, newModuleDelta, moduleFlowData)

    def updateCodelengthOnMovingNode(self, current: 'InfoNode', oldModuleDelta: 'MemDeltaFlow', newModuleDelta: 'MemDeltaFlow', moduleFlowData: 'std::vector< infomap::MemMapEquation::FlowDataType,std::allocator< infomap::MemMapEquation::FlowDataType > > &') -> "void":
        return _infomap.MemMapEquation_updateCodelengthOnMovingNode(self, current, oldModuleDelta, newModuleDelta, moduleFlowData)

    def consolidateModules(self, modules: 'std::vector< infomap::InfoNode *,std::allocator< infomap::InfoNode * > > &') -> "void":
        return _infomap.MemMapEquation_consolidateModules(self, modules)

    def printDebug(self) -> "void":
        return _infomap.MemMapEquation_printDebug(self)
    __swig_setmethods__["codelength"] = _infomap.MemMapEquation_codelength_set
    __swig_getmethods__["codelength"] = _infomap.MemMapEquation_codelength_get
    if _newclass:
        codelength = _swig_property(_infomap.MemMapEquation_codelength_get, _infomap.MemMapEquation_codelength_set)
    __swig_setmethods__["indexCodelength"] = _infomap.MemMapEquation_indexCodelength_set
    __swig_getmethods__["indexCodelength"] = _infomap.MemMapEquation_indexCodelength_get
    if _newclass:
        indexCodelength = _swig_property(_infomap.MemMapEquation_indexCodelength_get, _infomap.MemMapEquation_indexCodelength_set)
    __swig_setmethods__["moduleCodelength"] = _infomap.MemMapEquation_moduleCodelength_set
    __swig_getmethods__["moduleCodelength"] = _infomap.MemMapEquation_moduleCodelength_get
    if _newclass:
        moduleCodelength = _swig_property(_infomap.MemMapEquation_moduleCodelength_get, _infomap.MemMapEquation_moduleCodelength_set)
MemMapEquation_swigregister = _infomap.MemMapEquation_swigregister
MemMapEquation_swigregister(MemMapEquation)

def MemMapEquation_haveMemory() -> "bool":
    return _infomap.MemMapEquation_haveMemory()
MemMapEquation_haveMemory = _infomap.MemMapEquation_haveMemory

class MemNodeSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MemNodeSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MemNodeSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _infomap.new_MemNodeSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["numMemNodes"] = _infomap.MemNodeSet_numMemNodes_set
    __swig_getmethods__["numMemNodes"] = _infomap.MemNodeSet_numMemNodes_get
    if _newclass:
        numMemNodes = _swig_property(_infomap.MemNodeSet_numMemNodes_get, _infomap.MemNodeSet_numMemNodes_set)
    __swig_setmethods__["sumFlow"] = _infomap.MemNodeSet_sumFlow_set
    __swig_getmethods__["sumFlow"] = _infomap.MemNodeSet_sumFlow_get
    if _newclass:
        sumFlow = _swig_property(_infomap.MemNodeSet_sumFlow_get, _infomap.MemNodeSet_sumFlow_set)
    __swig_destroy__ = _infomap.delete_MemNodeSet
    __del__ = lambda self: None
MemNodeSet_swigregister = _infomap.MemNodeSet_swigregister
MemNodeSet_swigregister(MemNodeSet)

class Infomap(InfomapBase):
    __swig_setmethods__ = {}
    for _s in [InfomapBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Infomap, name, value)
    __swig_getmethods__ = {}
    for _s in [InfomapBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Infomap, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _infomap.new_Infomap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _infomap.delete_Infomap
    __del__ = lambda self: None

    def toString(self, out: 'std::ostream &') -> "std::ostream &":
        return _infomap.Infomap_toString(self, out)

    def getCodelength(self) -> "double":
        return _infomap.Infomap_getCodelength(self)

    def getIndexCodelength(self) -> "double":
        return _infomap.Infomap_getIndexCodelength(self)

    def getModuleCodelength(self) -> "double":
        return _infomap.Infomap_getModuleCodelength(self)
Infomap_swigregister = _infomap.Infomap_swigregister
Infomap_swigregister(Infomap)

# This file is compatible with both classic and new-style classes.



def main():
  import sys
  import infomap as im
  args = " ".join(sys.argv[1:])
  infomap = im.Infomap(im.Config(args, True))
  infomap.run()

if __name__ == '__main__':
  main()
