from six.moves import range
import numpy as np
import sympy as sp
from sympy import Matrix

X, Y, Z, LA, g = sp.symbols('X,Y,Z,LA,g')
rho, qx, qy = sp.symbols('rho, qx, qy')
m = [[sp.Symbol("m[%d][%d]"%(i,j)) for j in range(25)] for i in range(10)]

velocity = range(9)

relax = [0]*9

poly = [[1,
         LA*X, LA*Y,
         3*(X**2+Y**2)-4,
         0.5*(9*(X**2+Y**2)**2-21*(X**2+Y**2)+8),
         3*X*(X**2+Y**2)-5*X, 3*Y*(X**2+Y**2)-5*Y,
         X**2-Y**2, X*Y],
         [1,
         'LA*X', 'LA*Y',
         '3*(X**2+Y**2)-4',
         '0.5*(9*(X**2+Y**2)**2-21*(X**2+Y**2)+8)',
         '3*X*(X**2+Y**2)-5*X', '3*Y*(X**2+Y**2)-5*Y',
         'X**2-Y**2', 'X*Y']]

eq = [[[m[0][0],
       m[0][1], m[0][2],
       -2*m[0][0] + 3*(m[0][1]**2+m[0][2]**2),
       m[0][0]+1.5*(m[0][1]**2+m[0][2]**2),
       -m[0][1]/LA, -m[0][2]/LA,
       m[0][1]**2-m[0][2]**2, m[0][1]*m[0][2]]],
       [[rho,
       qx, qy,
       -2*rho + 3*(qx**2+qy**2),
       rho + 1.5*(qx**2+qy**2),
       -qx/LA, -qy/LA,
       qx**2-qy**2, qx*qy]
       ]]

param = [{LA: 1.}, {'LA': 1.}]

consm = [[None], [[rho, qx, qy]]]

EQ_result = [Matrix([
[                                  m[0][0]],
[                                  m[0][1]],
[                                  m[0][2]],
[ -2*m[0][0] + 3*m[0][1]**2 + 3*m[0][2]**2],
[m[0][0] + 1.5*m[0][1]**2 + 1.5*m[0][2]**2],
[                              -m[0][1]/LA],
[                              -m[0][2]/LA],
[                  m[0][1]**2 - m[0][2]**2],
[                          m[0][1]*m[0][2]]])]

Mnum = [np.array([[ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.],
       [ 0.,  1.,  0., -1.,  0.,  1., -1., -1.,  1.],
       [ 0.,  0.,  1.,  0., -1.,  1.,  1., -1., -1.],
       [-4., -1., -1., -1., -1.,  2.,  2.,  2.,  2.],
       [ 4., -2., -2., -2., -2.,  1.,  1.,  1.,  1.],
       [ 0., -2.,  0.,  2.,  0.,  1., -1., -1.,  1.],
       [ 0.,  0., -2.,  0.,  2.,  1.,  1., -1., -1.],
       [ 0.,  1., -1.,  1., -1.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  1., -1.,  1., -1.]])]
