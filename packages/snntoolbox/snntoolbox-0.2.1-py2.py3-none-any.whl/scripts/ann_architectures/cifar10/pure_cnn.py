# -*- coding: utf-8 -*-
"""

see http://arxiv.org/pdf/1412.6806.pdf

Should get to 7.25% error when using data-augmentation (9.08% without).

Created on Fri Aug 19 09:15:25 2016

@author: rbodo
"""


from __future__ import absolute_import
from __future__ import print_function

from keras.callbacks import ModelCheckpoint
from keras.datasets import cifar10
from keras.layers.convolutional import Conv2D, AveragePooling2D
from keras.layers.core import Dropout, Activation, Flatten
from keras.layers.normalization import BatchNormalization
from keras.models import Sequential
from keras.preprocessing.image import ImageDataGenerator
from keras.utils import np_utils

from snntoolbox.simulation.plotting import plot_history

# from keras.regularizers import l2

nb_epoch = 200
batch_size = 128
nb_classes = 10

# Input image dimensions
img_rows, img_cols = 32, 32
img_channels = 3

init = 'he_normal'
reg = None  # l2(0.001)
padding = 'same'
activation = 'relu'

# Data set
(x_train, y_train), (x_test, y_test) = cifar10.load_data()
y_train = np_utils.to_categorical(y_train, nb_classes)
y_test = np_utils.to_categorical(y_test, nb_classes)
print(x_train.shape[0], 'train samples')
print(x_test.shape[0], 'test samples')

model = Sequential()

model.add(Dropout(0.1, input_shape=(img_channels, img_rows, img_cols)))
model.add(Conv2D(96, 3, kernel_initializer=init, kernel_regularizer=reg,
                 bias_regularizer=reg))
model.add(BatchNormalization(axis=1))
model.add(Activation(activation))
model.add(Conv2D(96, 3, kernel_initializer=init, kernel_regularizer=reg,
                 bias_regularizer=reg))
model.add(BatchNormalization(axis=1))
model.add(Activation(activation))
model.add(Conv2D(96, 3, kernel_initializer=init, strides=(2, 2),
                 kernel_regularizer=reg, bias_regularizer=reg))
model.add(BatchNormalization(axis=1))
model.add(Activation(activation))
model.add(Dropout(0.1))

model.add(Conv2D(192, 3, padding=padding, kernel_initializer=init,
                 kernel_regularizer=reg, bias_regularizer=reg))
model.add(BatchNormalization(axis=1))
model.add(Activation(activation))
model.add(Conv2D(192, 3, padding=padding, kernel_initializer=init,
                 kernel_regularizer=reg, bias_regularizer=reg))
model.add(BatchNormalization(axis=1))
model.add(Activation(activation))
model.add(Conv2D(192, 3, kernel_initializer=init, strides=(2, 2),
                 kernel_regularizer=reg, bias_regularizer=reg))
model.add(BatchNormalization(axis=1))
model.add(Activation(activation))
model.add(Dropout(0.1))

model.add(Conv2D(192, 3, padding=padding, kernel_initializer=init,
                 kernel_regularizer=reg, bias_regularizer=reg))
model.add(BatchNormalization(axis=1))
model.add(Activation(activation))
model.add(Conv2D(192, 1, padding=padding, kernel_initializer=init,
                 kernel_regularizer=reg, bias_regularizer=reg))
model.add(BatchNormalization(axis=1))
model.add(Activation(activation))
model.add(Conv2D(10, 1, padding=padding, kernel_initializer=init,
                 kernel_regularizer=reg, bias_regularizer=reg))
model.add(BatchNormalization(axis=1))
model.add(Activation(activation))
model.add(AveragePooling2D((6, 6), (1, 1)))
model.add(Flatten())
model.add(Activation('softmax'))

model.compile('adam', 'categorical_crossentropy', metrics=['accuracy'])

# Whether to apply global contrast normalization and ZCA whitening
gcn = False
zca = False

traingen = ImageDataGenerator(rescale=1./255, featurewise_center=gcn,
                              featurewise_std_normalization=gcn,
                              zca_whitening=zca, horizontal_flip=True,
                              rotation_range=10, width_shift_range=0.1,
                              height_shift_range=0.1)

# Compute quantities required for featurewise normalization
# (std, mean, and principal components if ZCA whitening is applied)
if zca:
    traingen.fit(x_train/255.)

trainflow = traingen.flow(x_train, y_train, batch_size)

testgen = ImageDataGenerator(rescale=1./255, featurewise_center=gcn,
                             featurewise_std_normalization=gcn,
                             zca_whitening=zca)

testgen.fit(x_test/255.)

testflow = testgen.flow(x_test, y_test, batch_size)

checkpointer = ModelCheckpoint('weights.{epoch:02d}-{val_acc:.2f}.h5',
                               verbose=1, save_best_only=True)

# Fit the model on the batches generated by datagen.flow()
history = model.fit_generator(trainflow, len(x_train) / batch_size, nb_epoch,
                              validation_data=testflow,
                              validation_steps=len(x_test) / batch_size,
                              callbacks=[checkpointer])
plot_history(history)

score = model.evaluate_generator(testflow, len(x_test) / batch_size)
print('Test score:', score[0])
print('Test accuracy:', score[1])

model.save('{:2.2f}.h5'.format(score[1]*100))
