# coding: utf-8

"""
    goodlens-api

    This is a API document for GoodLens  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class FoodOriginMaterial(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'origin_place': 'str',
        'rate': 'str',
        'rate_unit': 'str'
    }

    attribute_map = {
        'name': 'name',
        'origin_place': 'origin_place',
        'rate': 'rate',
        'rate_unit': 'rate_unit'
    }

    def __init__(self, name=None, origin_place=None, rate=None, rate_unit=None):  # noqa: E501
        """FoodOriginMaterial - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._origin_place = None
        self._rate = None
        self._rate_unit = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if origin_place is not None:
            self.origin_place = origin_place
        if rate is not None:
            self.rate = rate
        if rate_unit is not None:
            self.rate_unit = rate_unit

    @property
    def name(self):
        """Gets the name of this FoodOriginMaterial.  # noqa: E501

        원재료명  # noqa: E501

        :return: The name of this FoodOriginMaterial.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FoodOriginMaterial.

        원재료명  # noqa: E501

        :param name: The name of this FoodOriginMaterial.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def origin_place(self):
        """Gets the origin_place of this FoodOriginMaterial.  # noqa: E501

        원산지  # noqa: E501

        :return: The origin_place of this FoodOriginMaterial.  # noqa: E501
        :rtype: str
        """
        return self._origin_place

    @origin_place.setter
    def origin_place(self, origin_place):
        """Sets the origin_place of this FoodOriginMaterial.

        원산지  # noqa: E501

        :param origin_place: The origin_place of this FoodOriginMaterial.  # noqa: E501
        :type: str
        """

        self._origin_place = origin_place

    @property
    def rate(self):
        """Gets the rate of this FoodOriginMaterial.  # noqa: E501

        비중  # noqa: E501

        :return: The rate of this FoodOriginMaterial.  # noqa: E501
        :rtype: str
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this FoodOriginMaterial.

        비중  # noqa: E501

        :param rate: The rate of this FoodOriginMaterial.  # noqa: E501
        :type: str
        """

        self._rate = rate

    @property
    def rate_unit(self):
        """Gets the rate_unit of this FoodOriginMaterial.  # noqa: E501

        비중 단위(%, mg/g, ...)  # noqa: E501

        :return: The rate_unit of this FoodOriginMaterial.  # noqa: E501
        :rtype: str
        """
        return self._rate_unit

    @rate_unit.setter
    def rate_unit(self, rate_unit):
        """Sets the rate_unit of this FoodOriginMaterial.

        비중 단위(%, mg/g, ...)  # noqa: E501

        :param rate_unit: The rate_unit of this FoodOriginMaterial.  # noqa: E501
        :type: str
        """

        self._rate_unit = rate_unit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FoodOriginMaterial):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
