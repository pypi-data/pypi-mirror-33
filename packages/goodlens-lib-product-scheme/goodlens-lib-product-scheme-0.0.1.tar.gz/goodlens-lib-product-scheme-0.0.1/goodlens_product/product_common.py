# coding: utf-8

"""
    goodlens-api

    This is a API document for GoodLens  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ProductCommon(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'product_id': 'str',
        'kan': 'str',
        'gtin': 'str',
        'product_name': 'str',
        'product_name_en': 'str',
        'product_name_extra': 'str',
        'brand_manufacturer': 'str',
        'brand_main': 'str',
        'brand_extra': 'str',
        'image_front': 'str',
        'image_front_angle': 'str',
        'image_barcode': 'str',
        'image_labels': 'list[str]',
        'origin_place': 'str',
        'manufacturer': 'str',
        'manufacture_seller': 'str',
        'is_imported': 'bool',
        'import_trader': 'str',
        'weight_total': 'int',
        'weight_pure': 'int',
        'width': 'int',
        'depth': 'int',
        'height': 'int',
        'pack_material': 'str',
        'pack_type': 'str',
        'product_number': 'str',
        'model_name': 'str',
        'product_unit': 'str',
        'product_capacity': 'str',
        'is_adult_product': 'str',
        'is_child_product': 'str',
        'create_date': 'int',
        'update_date': 'int',
        'product_code': 'str'
    }

    attribute_map = {
        'product_id': 'product_id',
        'kan': 'KAN',
        'gtin': 'GTIN',
        'product_name': 'product_name',
        'product_name_en': 'product_name_en',
        'product_name_extra': 'product_name_extra',
        'brand_manufacturer': 'brand_manufacturer',
        'brand_main': 'brand_main',
        'brand_extra': 'brand_extra',
        'image_front': 'image_front',
        'image_front_angle': 'image_front_angle',
        'image_barcode': 'image_barcode',
        'image_labels': 'image_labels',
        'origin_place': 'origin_place',
        'manufacturer': 'manufacturer',
        'manufacture_seller': 'manufacture_seller',
        'is_imported': 'is_imported',
        'import_trader': 'import_trader',
        'weight_total': 'weight_total',
        'weight_pure': 'weight_pure',
        'width': 'width',
        'depth': 'depth',
        'height': 'height',
        'pack_material': 'pack_material',
        'pack_type': 'pack_type',
        'product_number': 'product_number',
        'model_name': 'model_name',
        'product_unit': 'product_unit',
        'product_capacity': 'product_capacity',
        'is_adult_product': 'is_adult_product',
        'is_child_product': 'is_child_product',
        'create_date': 'create_date',
        'update_date': 'update_date',
        'product_code': 'product_code'
    }

    def __init__(self, product_id=None, kan=None, gtin=None, product_name=None, product_name_en=None, product_name_extra=None, brand_manufacturer=None, brand_main=None, brand_extra=None, image_front=None, image_front_angle=None, image_barcode=None, image_labels=None, origin_place=None, manufacturer=None, manufacture_seller=None, is_imported=None, import_trader=None, weight_total=None, weight_pure=None, width=None, depth=None, height=None, pack_material=None, pack_type=None, product_number=None, model_name=None, product_unit=None, product_capacity=None, is_adult_product=None, is_child_product=None, create_date=None, update_date=None, product_code=None):  # noqa: E501
        """ProductCommon - a model defined in Swagger"""  # noqa: E501

        self._product_id = None
        self._kan = None
        self._gtin = None
        self._product_name = None
        self._product_name_en = None
        self._product_name_extra = None
        self._brand_manufacturer = None
        self._brand_main = None
        self._brand_extra = None
        self._image_front = None
        self._image_front_angle = None
        self._image_barcode = None
        self._image_labels = None
        self._origin_place = None
        self._manufacturer = None
        self._manufacture_seller = None
        self._is_imported = None
        self._import_trader = None
        self._weight_total = None
        self._weight_pure = None
        self._width = None
        self._depth = None
        self._height = None
        self._pack_material = None
        self._pack_type = None
        self._product_number = None
        self._model_name = None
        self._product_unit = None
        self._product_capacity = None
        self._is_adult_product = None
        self._is_child_product = None
        self._create_date = None
        self._update_date = None
        self._product_code = None
        self.discriminator = None

        if product_id is not None:
            self.product_id = product_id
        if kan is not None:
            self.kan = kan
        if gtin is not None:
            self.gtin = gtin
        if product_name is not None:
            self.product_name = product_name
        if product_name_en is not None:
            self.product_name_en = product_name_en
        if product_name_extra is not None:
            self.product_name_extra = product_name_extra
        if brand_manufacturer is not None:
            self.brand_manufacturer = brand_manufacturer
        if brand_main is not None:
            self.brand_main = brand_main
        if brand_extra is not None:
            self.brand_extra = brand_extra
        if image_front is not None:
            self.image_front = image_front
        if image_front_angle is not None:
            self.image_front_angle = image_front_angle
        if image_barcode is not None:
            self.image_barcode = image_barcode
        if image_labels is not None:
            self.image_labels = image_labels
        if origin_place is not None:
            self.origin_place = origin_place
        if manufacturer is not None:
            self.manufacturer = manufacturer
        if manufacture_seller is not None:
            self.manufacture_seller = manufacture_seller
        if is_imported is not None:
            self.is_imported = is_imported
        if import_trader is not None:
            self.import_trader = import_trader
        if weight_total is not None:
            self.weight_total = weight_total
        if weight_pure is not None:
            self.weight_pure = weight_pure
        if width is not None:
            self.width = width
        if depth is not None:
            self.depth = depth
        if height is not None:
            self.height = height
        if pack_material is not None:
            self.pack_material = pack_material
        if pack_type is not None:
            self.pack_type = pack_type
        if product_number is not None:
            self.product_number = product_number
        if model_name is not None:
            self.model_name = model_name
        if product_unit is not None:
            self.product_unit = product_unit
        if product_capacity is not None:
            self.product_capacity = product_capacity
        if is_adult_product is not None:
            self.is_adult_product = is_adult_product
        if is_child_product is not None:
            self.is_child_product = is_child_product
        if create_date is not None:
            self.create_date = create_date
        if update_date is not None:
            self.update_date = update_date
        if product_code is not None:
            self.product_code = product_code

    @property
    def product_id(self):
        """Gets the product_id of this ProductCommon.  # noqa: E501


        :return: The product_id of this ProductCommon.  # noqa: E501
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this ProductCommon.


        :param product_id: The product_id of this ProductCommon.  # noqa: E501
        :type: str
        """

        self._product_id = product_id

    @property
    def kan(self):
        """Gets the kan of this ProductCommon.  # noqa: E501

        KAN 상품분류  # noqa: E501

        :return: The kan of this ProductCommon.  # noqa: E501
        :rtype: str
        """
        return self._kan

    @kan.setter
    def kan(self, kan):
        """Sets the kan of this ProductCommon.

        KAN 상품분류  # noqa: E501

        :param kan: The kan of this ProductCommon.  # noqa: E501
        :type: str
        """

        self._kan = kan

    @property
    def gtin(self):
        """Gets the gtin of this ProductCommon.  # noqa: E501

        GTIN (barcode)  # noqa: E501

        :return: The gtin of this ProductCommon.  # noqa: E501
        :rtype: str
        """
        return self._gtin

    @gtin.setter
    def gtin(self, gtin):
        """Sets the gtin of this ProductCommon.

        GTIN (barcode)  # noqa: E501

        :param gtin: The gtin of this ProductCommon.  # noqa: E501
        :type: str
        """

        self._gtin = gtin

    @property
    def product_name(self):
        """Gets the product_name of this ProductCommon.  # noqa: E501

        상품명(한글)  # noqa: E501

        :return: The product_name of this ProductCommon.  # noqa: E501
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this ProductCommon.

        상품명(한글)  # noqa: E501

        :param product_name: The product_name of this ProductCommon.  # noqa: E501
        :type: str
        """

        self._product_name = product_name

    @property
    def product_name_en(self):
        """Gets the product_name_en of this ProductCommon.  # noqa: E501

        상품명(영어)  # noqa: E501

        :return: The product_name_en of this ProductCommon.  # noqa: E501
        :rtype: str
        """
        return self._product_name_en

    @product_name_en.setter
    def product_name_en(self, product_name_en):
        """Sets the product_name_en of this ProductCommon.

        상품명(영어)  # noqa: E501

        :param product_name_en: The product_name_en of this ProductCommon.  # noqa: E501
        :type: str
        """

        self._product_name_en = product_name_en

    @property
    def product_name_extra(self):
        """Gets the product_name_extra of this ProductCommon.  # noqa: E501

        상품명(추가)  # noqa: E501

        :return: The product_name_extra of this ProductCommon.  # noqa: E501
        :rtype: str
        """
        return self._product_name_extra

    @product_name_extra.setter
    def product_name_extra(self, product_name_extra):
        """Sets the product_name_extra of this ProductCommon.

        상품명(추가)  # noqa: E501

        :param product_name_extra: The product_name_extra of this ProductCommon.  # noqa: E501
        :type: str
        """

        self._product_name_extra = product_name_extra

    @property
    def brand_manufacturer(self):
        """Gets the brand_manufacturer of this ProductCommon.  # noqa: E501

        브랜드명-제조사명 (ex. 대상주식회사)  # noqa: E501

        :return: The brand_manufacturer of this ProductCommon.  # noqa: E501
        :rtype: str
        """
        return self._brand_manufacturer

    @brand_manufacturer.setter
    def brand_manufacturer(self, brand_manufacturer):
        """Sets the brand_manufacturer of this ProductCommon.

        브랜드명-제조사명 (ex. 대상주식회사)  # noqa: E501

        :param brand_manufacturer: The brand_manufacturer of this ProductCommon.  # noqa: E501
        :type: str
        """

        self._brand_manufacturer = brand_manufacturer

    @property
    def brand_main(self):
        """Gets the brand_main of this ProductCommon.  # noqa: E501

        브렌드명-메인 (ex. 청정원)  # noqa: E501

        :return: The brand_main of this ProductCommon.  # noqa: E501
        :rtype: str
        """
        return self._brand_main

    @brand_main.setter
    def brand_main(self, brand_main):
        """Sets the brand_main of this ProductCommon.

        브렌드명-메인 (ex. 청정원)  # noqa: E501

        :param brand_main: The brand_main of this ProductCommon.  # noqa: E501
        :type: str
        """

        self._brand_main = brand_main

    @property
    def brand_extra(self):
        """Gets the brand_extra of this ProductCommon.  # noqa: E501

        브렌드명-추가 (ex. 홍초)  # noqa: E501

        :return: The brand_extra of this ProductCommon.  # noqa: E501
        :rtype: str
        """
        return self._brand_extra

    @brand_extra.setter
    def brand_extra(self, brand_extra):
        """Sets the brand_extra of this ProductCommon.

        브렌드명-추가 (ex. 홍초)  # noqa: E501

        :param brand_extra: The brand_extra of this ProductCommon.  # noqa: E501
        :type: str
        """

        self._brand_extra = brand_extra

    @property
    def image_front(self):
        """Gets the image_front of this ProductCommon.  # noqa: E501

        정면 이미지  # noqa: E501

        :return: The image_front of this ProductCommon.  # noqa: E501
        :rtype: str
        """
        return self._image_front

    @image_front.setter
    def image_front(self, image_front):
        """Sets the image_front of this ProductCommon.

        정면 이미지  # noqa: E501

        :param image_front: The image_front of this ProductCommon.  # noqa: E501
        :type: str
        """

        self._image_front = image_front

    @property
    def image_front_angle(self):
        """Gets the image_front_angle of this ProductCommon.  # noqa: E501

        정면 앵글 이미지  # noqa: E501

        :return: The image_front_angle of this ProductCommon.  # noqa: E501
        :rtype: str
        """
        return self._image_front_angle

    @image_front_angle.setter
    def image_front_angle(self, image_front_angle):
        """Sets the image_front_angle of this ProductCommon.

        정면 앵글 이미지  # noqa: E501

        :param image_front_angle: The image_front_angle of this ProductCommon.  # noqa: E501
        :type: str
        """

        self._image_front_angle = image_front_angle

    @property
    def image_barcode(self):
        """Gets the image_barcode of this ProductCommon.  # noqa: E501

        바코드 이미지  # noqa: E501

        :return: The image_barcode of this ProductCommon.  # noqa: E501
        :rtype: str
        """
        return self._image_barcode

    @image_barcode.setter
    def image_barcode(self, image_barcode):
        """Sets the image_barcode of this ProductCommon.

        바코드 이미지  # noqa: E501

        :param image_barcode: The image_barcode of this ProductCommon.  # noqa: E501
        :type: str
        """

        self._image_barcode = image_barcode

    @property
    def image_labels(self):
        """Gets the image_labels of this ProductCommon.  # noqa: E501

        상품 정보 이미지(ex. 원제료, 내용함량)  # noqa: E501

        :return: The image_labels of this ProductCommon.  # noqa: E501
        :rtype: list[str]
        """
        return self._image_labels

    @image_labels.setter
    def image_labels(self, image_labels):
        """Sets the image_labels of this ProductCommon.

        상품 정보 이미지(ex. 원제료, 내용함량)  # noqa: E501

        :param image_labels: The image_labels of this ProductCommon.  # noqa: E501
        :type: list[str]
        """

        self._image_labels = image_labels

    @property
    def origin_place(self):
        """Gets the origin_place of this ProductCommon.  # noqa: E501

        원산지  # noqa: E501

        :return: The origin_place of this ProductCommon.  # noqa: E501
        :rtype: str
        """
        return self._origin_place

    @origin_place.setter
    def origin_place(self, origin_place):
        """Sets the origin_place of this ProductCommon.

        원산지  # noqa: E501

        :param origin_place: The origin_place of this ProductCommon.  # noqa: E501
        :type: str
        """

        self._origin_place = origin_place

    @property
    def manufacturer(self):
        """Gets the manufacturer of this ProductCommon.  # noqa: E501

        제조업자  # noqa: E501

        :return: The manufacturer of this ProductCommon.  # noqa: E501
        :rtype: str
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """Sets the manufacturer of this ProductCommon.

        제조업자  # noqa: E501

        :param manufacturer: The manufacturer of this ProductCommon.  # noqa: E501
        :type: str
        """

        self._manufacturer = manufacturer

    @property
    def manufacture_seller(self):
        """Gets the manufacture_seller of this ProductCommon.  # noqa: E501

        제조판매업자  # noqa: E501

        :return: The manufacture_seller of this ProductCommon.  # noqa: E501
        :rtype: str
        """
        return self._manufacture_seller

    @manufacture_seller.setter
    def manufacture_seller(self, manufacture_seller):
        """Sets the manufacture_seller of this ProductCommon.

        제조판매업자  # noqa: E501

        :param manufacture_seller: The manufacture_seller of this ProductCommon.  # noqa: E501
        :type: str
        """

        self._manufacture_seller = manufacture_seller

    @property
    def is_imported(self):
        """Gets the is_imported of this ProductCommon.  # noqa: E501

        수입 제품 구분  # noqa: E501

        :return: The is_imported of this ProductCommon.  # noqa: E501
        :rtype: bool
        """
        return self._is_imported

    @is_imported.setter
    def is_imported(self, is_imported):
        """Sets the is_imported of this ProductCommon.

        수입 제품 구분  # noqa: E501

        :param is_imported: The is_imported of this ProductCommon.  # noqa: E501
        :type: bool
        """

        self._is_imported = is_imported

    @property
    def import_trader(self):
        """Gets the import_trader of this ProductCommon.  # noqa: E501

        수입업자  # noqa: E501

        :return: The import_trader of this ProductCommon.  # noqa: E501
        :rtype: str
        """
        return self._import_trader

    @import_trader.setter
    def import_trader(self, import_trader):
        """Sets the import_trader of this ProductCommon.

        수입업자  # noqa: E501

        :param import_trader: The import_trader of this ProductCommon.  # noqa: E501
        :type: str
        """

        self._import_trader = import_trader

    @property
    def weight_total(self):
        """Gets the weight_total of this ProductCommon.  # noqa: E501

        총중량  # noqa: E501

        :return: The weight_total of this ProductCommon.  # noqa: E501
        :rtype: int
        """
        return self._weight_total

    @weight_total.setter
    def weight_total(self, weight_total):
        """Sets the weight_total of this ProductCommon.

        총중량  # noqa: E501

        :param weight_total: The weight_total of this ProductCommon.  # noqa: E501
        :type: int
        """

        self._weight_total = weight_total

    @property
    def weight_pure(self):
        """Gets the weight_pure of this ProductCommon.  # noqa: E501

        순중량  # noqa: E501

        :return: The weight_pure of this ProductCommon.  # noqa: E501
        :rtype: int
        """
        return self._weight_pure

    @weight_pure.setter
    def weight_pure(self, weight_pure):
        """Sets the weight_pure of this ProductCommon.

        순중량  # noqa: E501

        :param weight_pure: The weight_pure of this ProductCommon.  # noqa: E501
        :type: int
        """

        self._weight_pure = weight_pure

    @property
    def width(self):
        """Gets the width of this ProductCommon.  # noqa: E501

        가로  # noqa: E501

        :return: The width of this ProductCommon.  # noqa: E501
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this ProductCommon.

        가로  # noqa: E501

        :param width: The width of this ProductCommon.  # noqa: E501
        :type: int
        """

        self._width = width

    @property
    def depth(self):
        """Gets the depth of this ProductCommon.  # noqa: E501

        세로  # noqa: E501

        :return: The depth of this ProductCommon.  # noqa: E501
        :rtype: int
        """
        return self._depth

    @depth.setter
    def depth(self, depth):
        """Sets the depth of this ProductCommon.

        세로  # noqa: E501

        :param depth: The depth of this ProductCommon.  # noqa: E501
        :type: int
        """

        self._depth = depth

    @property
    def height(self):
        """Gets the height of this ProductCommon.  # noqa: E501

        높이  # noqa: E501

        :return: The height of this ProductCommon.  # noqa: E501
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this ProductCommon.

        높이  # noqa: E501

        :param height: The height of this ProductCommon.  # noqa: E501
        :type: int
        """

        self._height = height

    @property
    def pack_material(self):
        """Gets the pack_material of this ProductCommon.  # noqa: E501

        제품포장 재질  # noqa: E501

        :return: The pack_material of this ProductCommon.  # noqa: E501
        :rtype: str
        """
        return self._pack_material

    @pack_material.setter
    def pack_material(self, pack_material):
        """Sets the pack_material of this ProductCommon.

        제품포장 재질  # noqa: E501

        :param pack_material: The pack_material of this ProductCommon.  # noqa: E501
        :type: str
        """

        self._pack_material = pack_material

    @property
    def pack_type(self):
        """Gets the pack_type of this ProductCommon.  # noqa: E501

        제품포장 타입  # noqa: E501

        :return: The pack_type of this ProductCommon.  # noqa: E501
        :rtype: str
        """
        return self._pack_type

    @pack_type.setter
    def pack_type(self, pack_type):
        """Sets the pack_type of this ProductCommon.

        제품포장 타입  # noqa: E501

        :param pack_type: The pack_type of this ProductCommon.  # noqa: E501
        :type: str
        """

        self._pack_type = pack_type

    @property
    def product_number(self):
        """Gets the product_number of this ProductCommon.  # noqa: E501

        제품번호  # noqa: E501

        :return: The product_number of this ProductCommon.  # noqa: E501
        :rtype: str
        """
        return self._product_number

    @product_number.setter
    def product_number(self, product_number):
        """Sets the product_number of this ProductCommon.

        제품번호  # noqa: E501

        :param product_number: The product_number of this ProductCommon.  # noqa: E501
        :type: str
        """

        self._product_number = product_number

    @property
    def model_name(self):
        """Gets the model_name of this ProductCommon.  # noqa: E501

        모델명  # noqa: E501

        :return: The model_name of this ProductCommon.  # noqa: E501
        :rtype: str
        """
        return self._model_name

    @model_name.setter
    def model_name(self, model_name):
        """Sets the model_name of this ProductCommon.

        모델명  # noqa: E501

        :param model_name: The model_name of this ProductCommon.  # noqa: E501
        :type: str
        """

        self._model_name = model_name

    @property
    def product_unit(self):
        """Gets the product_unit of this ProductCommon.  # noqa: E501

        상품 단위  # noqa: E501

        :return: The product_unit of this ProductCommon.  # noqa: E501
        :rtype: str
        """
        return self._product_unit

    @product_unit.setter
    def product_unit(self, product_unit):
        """Sets the product_unit of this ProductCommon.

        상품 단위  # noqa: E501

        :param product_unit: The product_unit of this ProductCommon.  # noqa: E501
        :type: str
        """

        self._product_unit = product_unit

    @property
    def product_capacity(self):
        """Gets the product_capacity of this ProductCommon.  # noqa: E501

        상품 용량  # noqa: E501

        :return: The product_capacity of this ProductCommon.  # noqa: E501
        :rtype: str
        """
        return self._product_capacity

    @product_capacity.setter
    def product_capacity(self, product_capacity):
        """Sets the product_capacity of this ProductCommon.

        상품 용량  # noqa: E501

        :param product_capacity: The product_capacity of this ProductCommon.  # noqa: E501
        :type: str
        """

        self._product_capacity = product_capacity

    @property
    def is_adult_product(self):
        """Gets the is_adult_product of this ProductCommon.  # noqa: E501

        성인용 제품구분  # noqa: E501

        :return: The is_adult_product of this ProductCommon.  # noqa: E501
        :rtype: str
        """
        return self._is_adult_product

    @is_adult_product.setter
    def is_adult_product(self, is_adult_product):
        """Sets the is_adult_product of this ProductCommon.

        성인용 제품구분  # noqa: E501

        :param is_adult_product: The is_adult_product of this ProductCommon.  # noqa: E501
        :type: str
        """

        self._is_adult_product = is_adult_product

    @property
    def is_child_product(self):
        """Gets the is_child_product of this ProductCommon.  # noqa: E501

        어린이용 제품구분  # noqa: E501

        :return: The is_child_product of this ProductCommon.  # noqa: E501
        :rtype: str
        """
        return self._is_child_product

    @is_child_product.setter
    def is_child_product(self, is_child_product):
        """Sets the is_child_product of this ProductCommon.

        어린이용 제품구분  # noqa: E501

        :param is_child_product: The is_child_product of this ProductCommon.  # noqa: E501
        :type: str
        """

        self._is_child_product = is_child_product

    @property
    def create_date(self):
        """Gets the create_date of this ProductCommon.  # noqa: E501

        상품 생성일 (unix timestamp)  # noqa: E501

        :return: The create_date of this ProductCommon.  # noqa: E501
        :rtype: int
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this ProductCommon.

        상품 생성일 (unix timestamp)  # noqa: E501

        :param create_date: The create_date of this ProductCommon.  # noqa: E501
        :type: int
        """

        self._create_date = create_date

    @property
    def update_date(self):
        """Gets the update_date of this ProductCommon.  # noqa: E501

        상품 수정일 (unix timestamp)  # noqa: E501

        :return: The update_date of this ProductCommon.  # noqa: E501
        :rtype: int
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this ProductCommon.

        상품 수정일 (unix timestamp)  # noqa: E501

        :param update_date: The update_date of this ProductCommon.  # noqa: E501
        :type: int
        """

        self._update_date = update_date

    @property
    def product_code(self):
        """Gets the product_code of this ProductCommon.  # noqa: E501

        상품 판매코드 (온라인 몰 별로 별도 관리되는 코드)  # noqa: E501

        :return: The product_code of this ProductCommon.  # noqa: E501
        :rtype: str
        """
        return self._product_code

    @product_code.setter
    def product_code(self, product_code):
        """Sets the product_code of this ProductCommon.

        상품 판매코드 (온라인 몰 별로 별도 관리되는 코드)  # noqa: E501

        :param product_code: The product_code of this ProductCommon.  # noqa: E501
        :type: str
        """

        self._product_code = product_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductCommon):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
