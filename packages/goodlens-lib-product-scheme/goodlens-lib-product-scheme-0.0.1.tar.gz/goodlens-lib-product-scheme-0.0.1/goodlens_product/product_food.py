# coding: utf-8

"""
    goodlens-api

    This is a API document for GoodLens  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from goodlens_product.food_origin_material import FoodOriginMaterial  # noqa: F401,E501
from goodlens_product.nutrient import Nutrient  # noqa: F401,E501


class ProductFood(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'food_type': 'str',
        'manufacture_date': 'str',
        'expiration_date': 'str',
        'origin_materials': 'list[FoodOriginMaterial]',
        'nutrient_total_capacity': 'str',
        'nutrients': 'list[Nutrient]',
        'is_genetic_recombination': 'bool',
        'is_infant_weight_control_food_ad_preview': 'bool',
        'import_declaration_description': 'str',
        'as_owner': 'str',
        'phone_number': 'str',
        'functional_information': 'str',
        'intake': 'str',
        'intake_notice': 'str',
        'possible_side_effects': 'str',
        'is_non_medication_indication': 'str',
        'is_display_ad_preview': 'bool',
        'item_manufacture_mgmt_number': 'str',
        'allergens': 'list[str]',
        'factory_allergens_notice': 'str',
        'function': 'str',
        'step_by_step': 'str',
        'vitamin_type': 'str',
        'min_age': 'int',
        'pack_type': 'str',
        'material': 'str',
        'product_type': 'str',
        'cooking_time': 'str',
        'cooking_capacity': 'str',
        'is_green_certification': 'bool',
        'cetification': 'str',
        'is_no_additives': 'str',
        'is_recycle': 'str',
        'additional_food_type': 'str',
        'item_report_number': 'str',
        'how_to_store': 'str'
    }

    attribute_map = {
        'food_type': 'food_type',
        'manufacture_date': 'manufacture_date',
        'expiration_date': 'expiration_date',
        'origin_materials': 'origin_materials',
        'nutrient_total_capacity': 'nutrient_total_capacity',
        'nutrients': 'nutrients',
        'is_genetic_recombination': 'is_genetic_recombination',
        'is_infant_weight_control_food_ad_preview': 'is_infant_weight_control_food_ad_preview',
        'import_declaration_description': 'import_declaration_description',
        'as_owner': 'as_owner',
        'phone_number': 'phone_number',
        'functional_information': 'functional_information',
        'intake': 'intake',
        'intake_notice': 'intake_notice',
        'possible_side_effects': 'possible_side_effects',
        'is_non_medication_indication': 'is_non_medication_indication',
        'is_display_ad_preview': 'is_display_ad_preview',
        'item_manufacture_mgmt_number': 'item_manufacture_mgmt_number',
        'allergens': 'allergens',
        'factory_allergens_notice': 'factory_allergens_notice',
        'function': 'function',
        'step_by_step': 'step_by_step',
        'vitamin_type': 'vitamin_type',
        'min_age': 'min_age',
        'pack_type': 'pack_type',
        'material': 'material',
        'product_type': 'product_type',
        'cooking_time': 'cooking_time',
        'cooking_capacity': 'cooking_capacity',
        'is_green_certification': 'is_green_certification',
        'cetification': 'cetification',
        'is_no_additives': 'is_no_additives',
        'is_recycle': 'is_recycle',
        'additional_food_type': 'additional_food_type',
        'item_report_number': 'item_report_number',
        'how_to_store': 'how_to_store'
    }

    def __init__(self, food_type=None, manufacture_date=None, expiration_date=None, origin_materials=None, nutrient_total_capacity=None, nutrients=None, is_genetic_recombination=None, is_infant_weight_control_food_ad_preview=None, import_declaration_description=None, as_owner=None, phone_number=None, functional_information=None, intake=None, intake_notice=None, possible_side_effects=None, is_non_medication_indication=None, is_display_ad_preview=None, item_manufacture_mgmt_number=None, allergens=None, factory_allergens_notice=None, function=None, step_by_step=None, vitamin_type=None, min_age=None, pack_type=None, material=None, product_type=None, cooking_time=None, cooking_capacity=None, is_green_certification=None, cetification=None, is_no_additives=None, is_recycle=None, additional_food_type=None, item_report_number=None, how_to_store=None):  # noqa: E501
        """ProductFood - a model defined in Swagger"""  # noqa: E501

        self._food_type = None
        self._manufacture_date = None
        self._expiration_date = None
        self._origin_materials = None
        self._nutrient_total_capacity = None
        self._nutrients = None
        self._is_genetic_recombination = None
        self._is_infant_weight_control_food_ad_preview = None
        self._import_declaration_description = None
        self._as_owner = None
        self._phone_number = None
        self._functional_information = None
        self._intake = None
        self._intake_notice = None
        self._possible_side_effects = None
        self._is_non_medication_indication = None
        self._is_display_ad_preview = None
        self._item_manufacture_mgmt_number = None
        self._allergens = None
        self._factory_allergens_notice = None
        self._function = None
        self._step_by_step = None
        self._vitamin_type = None
        self._min_age = None
        self._pack_type = None
        self._material = None
        self._product_type = None
        self._cooking_time = None
        self._cooking_capacity = None
        self._is_green_certification = None
        self._cetification = None
        self._is_no_additives = None
        self._is_recycle = None
        self._additional_food_type = None
        self._item_report_number = None
        self._how_to_store = None
        self.discriminator = None

        if food_type is not None:
            self.food_type = food_type
        if manufacture_date is not None:
            self.manufacture_date = manufacture_date
        if expiration_date is not None:
            self.expiration_date = expiration_date
        if origin_materials is not None:
            self.origin_materials = origin_materials
        if nutrient_total_capacity is not None:
            self.nutrient_total_capacity = nutrient_total_capacity
        if nutrients is not None:
            self.nutrients = nutrients
        if is_genetic_recombination is not None:
            self.is_genetic_recombination = is_genetic_recombination
        if is_infant_weight_control_food_ad_preview is not None:
            self.is_infant_weight_control_food_ad_preview = is_infant_weight_control_food_ad_preview
        if import_declaration_description is not None:
            self.import_declaration_description = import_declaration_description
        if as_owner is not None:
            self.as_owner = as_owner
        if phone_number is not None:
            self.phone_number = phone_number
        if functional_information is not None:
            self.functional_information = functional_information
        if intake is not None:
            self.intake = intake
        if intake_notice is not None:
            self.intake_notice = intake_notice
        if possible_side_effects is not None:
            self.possible_side_effects = possible_side_effects
        if is_non_medication_indication is not None:
            self.is_non_medication_indication = is_non_medication_indication
        if is_display_ad_preview is not None:
            self.is_display_ad_preview = is_display_ad_preview
        if item_manufacture_mgmt_number is not None:
            self.item_manufacture_mgmt_number = item_manufacture_mgmt_number
        if allergens is not None:
            self.allergens = allergens
        if factory_allergens_notice is not None:
            self.factory_allergens_notice = factory_allergens_notice
        if function is not None:
            self.function = function
        if step_by_step is not None:
            self.step_by_step = step_by_step
        if vitamin_type is not None:
            self.vitamin_type = vitamin_type
        if min_age is not None:
            self.min_age = min_age
        if pack_type is not None:
            self.pack_type = pack_type
        if material is not None:
            self.material = material
        if product_type is not None:
            self.product_type = product_type
        if cooking_time is not None:
            self.cooking_time = cooking_time
        if cooking_capacity is not None:
            self.cooking_capacity = cooking_capacity
        if is_green_certification is not None:
            self.is_green_certification = is_green_certification
        if cetification is not None:
            self.cetification = cetification
        if is_no_additives is not None:
            self.is_no_additives = is_no_additives
        if is_recycle is not None:
            self.is_recycle = is_recycle
        if additional_food_type is not None:
            self.additional_food_type = additional_food_type
        if item_report_number is not None:
            self.item_report_number = item_report_number
        if how_to_store is not None:
            self.how_to_store = how_to_store

    @property
    def food_type(self):
        """Gets the food_type of this ProductFood.  # noqa: E501

        식품의 유형  # noqa: E501

        :return: The food_type of this ProductFood.  # noqa: E501
        :rtype: str
        """
        return self._food_type

    @food_type.setter
    def food_type(self, food_type):
        """Sets the food_type of this ProductFood.

        식품의 유형  # noqa: E501

        :param food_type: The food_type of this ProductFood.  # noqa: E501
        :type: str
        """

        self._food_type = food_type

    @property
    def manufacture_date(self):
        """Gets the manufacture_date of this ProductFood.  # noqa: E501

        제조연월일  # noqa: E501

        :return: The manufacture_date of this ProductFood.  # noqa: E501
        :rtype: str
        """
        return self._manufacture_date

    @manufacture_date.setter
    def manufacture_date(self, manufacture_date):
        """Sets the manufacture_date of this ProductFood.

        제조연월일  # noqa: E501

        :param manufacture_date: The manufacture_date of this ProductFood.  # noqa: E501
        :type: str
        """

        self._manufacture_date = manufacture_date

    @property
    def expiration_date(self):
        """Gets the expiration_date of this ProductFood.  # noqa: E501

        유통기한  # noqa: E501

        :return: The expiration_date of this ProductFood.  # noqa: E501
        :rtype: str
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this ProductFood.

        유통기한  # noqa: E501

        :param expiration_date: The expiration_date of this ProductFood.  # noqa: E501
        :type: str
        """

        self._expiration_date = expiration_date

    @property
    def origin_materials(self):
        """Gets the origin_materials of this ProductFood.  # noqa: E501

        원재료명/함량  # noqa: E501

        :return: The origin_materials of this ProductFood.  # noqa: E501
        :rtype: list[FoodOriginMaterial]
        """
        return self._origin_materials

    @origin_materials.setter
    def origin_materials(self, origin_materials):
        """Sets the origin_materials of this ProductFood.

        원재료명/함량  # noqa: E501

        :param origin_materials: The origin_materials of this ProductFood.  # noqa: E501
        :type: list[FoodOriginMaterial]
        """

        self._origin_materials = origin_materials

    @property
    def nutrient_total_capacity(self):
        """Gets the nutrient_total_capacity of this ProductFood.  # noqa: E501

        영양성분 총내용량  # noqa: E501

        :return: The nutrient_total_capacity of this ProductFood.  # noqa: E501
        :rtype: str
        """
        return self._nutrient_total_capacity

    @nutrient_total_capacity.setter
    def nutrient_total_capacity(self, nutrient_total_capacity):
        """Sets the nutrient_total_capacity of this ProductFood.

        영양성분 총내용량  # noqa: E501

        :param nutrient_total_capacity: The nutrient_total_capacity of this ProductFood.  # noqa: E501
        :type: str
        """

        self._nutrient_total_capacity = nutrient_total_capacity

    @property
    def nutrients(self):
        """Gets the nutrients of this ProductFood.  # noqa: E501

        영양성분  # noqa: E501

        :return: The nutrients of this ProductFood.  # noqa: E501
        :rtype: list[Nutrient]
        """
        return self._nutrients

    @nutrients.setter
    def nutrients(self, nutrients):
        """Sets the nutrients of this ProductFood.

        영양성분  # noqa: E501

        :param nutrients: The nutrients of this ProductFood.  # noqa: E501
        :type: list[Nutrient]
        """

        self._nutrients = nutrients

    @property
    def is_genetic_recombination(self):
        """Gets the is_genetic_recombination of this ProductFood.  # noqa: E501

        유전자재조합식품의 경우 표시  # noqa: E501

        :return: The is_genetic_recombination of this ProductFood.  # noqa: E501
        :rtype: bool
        """
        return self._is_genetic_recombination

    @is_genetic_recombination.setter
    def is_genetic_recombination(self, is_genetic_recombination):
        """Sets the is_genetic_recombination of this ProductFood.

        유전자재조합식품의 경우 표시  # noqa: E501

        :param is_genetic_recombination: The is_genetic_recombination of this ProductFood.  # noqa: E501
        :type: bool
        """

        self._is_genetic_recombination = is_genetic_recombination

    @property
    def is_infant_weight_control_food_ad_preview(self):
        """Gets the is_infant_weight_control_food_ad_preview of this ProductFood.  # noqa: E501

        영유아식/체중조절식품 표시광고 사전심의필  # noqa: E501

        :return: The is_infant_weight_control_food_ad_preview of this ProductFood.  # noqa: E501
        :rtype: bool
        """
        return self._is_infant_weight_control_food_ad_preview

    @is_infant_weight_control_food_ad_preview.setter
    def is_infant_weight_control_food_ad_preview(self, is_infant_weight_control_food_ad_preview):
        """Sets the is_infant_weight_control_food_ad_preview of this ProductFood.

        영유아식/체중조절식품 표시광고 사전심의필  # noqa: E501

        :param is_infant_weight_control_food_ad_preview: The is_infant_weight_control_food_ad_preview of this ProductFood.  # noqa: E501
        :type: bool
        """

        self._is_infant_weight_control_food_ad_preview = is_infant_weight_control_food_ad_preview

    @property
    def import_declaration_description(self):
        """Gets the import_declaration_description of this ProductFood.  # noqa: E501

        식품위생법에 따른 수입신고를 필함 문구  # noqa: E501

        :return: The import_declaration_description of this ProductFood.  # noqa: E501
        :rtype: str
        """
        return self._import_declaration_description

    @import_declaration_description.setter
    def import_declaration_description(self, import_declaration_description):
        """Sets the import_declaration_description of this ProductFood.

        식품위생법에 따른 수입신고를 필함 문구  # noqa: E501

        :param import_declaration_description: The import_declaration_description of this ProductFood.  # noqa: E501
        :type: str
        """

        self._import_declaration_description = import_declaration_description

    @property
    def as_owner(self):
        """Gets the as_owner of this ProductFood.  # noqa: E501

        A/S 책임자  # noqa: E501

        :return: The as_owner of this ProductFood.  # noqa: E501
        :rtype: str
        """
        return self._as_owner

    @as_owner.setter
    def as_owner(self, as_owner):
        """Sets the as_owner of this ProductFood.

        A/S 책임자  # noqa: E501

        :param as_owner: The as_owner of this ProductFood.  # noqa: E501
        :type: str
        """

        self._as_owner = as_owner

    @property
    def phone_number(self):
        """Gets the phone_number of this ProductFood.  # noqa: E501

        전화번호  # noqa: E501

        :return: The phone_number of this ProductFood.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this ProductFood.

        전화번호  # noqa: E501

        :param phone_number: The phone_number of this ProductFood.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def functional_information(self):
        """Gets the functional_information of this ProductFood.  # noqa: E501

        기능정보  # noqa: E501

        :return: The functional_information of this ProductFood.  # noqa: E501
        :rtype: str
        """
        return self._functional_information

    @functional_information.setter
    def functional_information(self, functional_information):
        """Sets the functional_information of this ProductFood.

        기능정보  # noqa: E501

        :param functional_information: The functional_information of this ProductFood.  # noqa: E501
        :type: str
        """

        self._functional_information = functional_information

    @property
    def intake(self):
        """Gets the intake of this ProductFood.  # noqa: E501

        섭취량, 섭취방법  # noqa: E501

        :return: The intake of this ProductFood.  # noqa: E501
        :rtype: str
        """
        return self._intake

    @intake.setter
    def intake(self, intake):
        """Sets the intake of this ProductFood.

        섭취량, 섭취방법  # noqa: E501

        :param intake: The intake of this ProductFood.  # noqa: E501
        :type: str
        """

        self._intake = intake

    @property
    def intake_notice(self):
        """Gets the intake_notice of this ProductFood.  # noqa: E501

        섭취 시 주의사항  # noqa: E501

        :return: The intake_notice of this ProductFood.  # noqa: E501
        :rtype: str
        """
        return self._intake_notice

    @intake_notice.setter
    def intake_notice(self, intake_notice):
        """Sets the intake_notice of this ProductFood.

        섭취 시 주의사항  # noqa: E501

        :param intake_notice: The intake_notice of this ProductFood.  # noqa: E501
        :type: str
        """

        self._intake_notice = intake_notice

    @property
    def possible_side_effects(self):
        """Gets the possible_side_effects of this ProductFood.  # noqa: E501

        부작용 발생 가능성  # noqa: E501

        :return: The possible_side_effects of this ProductFood.  # noqa: E501
        :rtype: str
        """
        return self._possible_side_effects

    @possible_side_effects.setter
    def possible_side_effects(self, possible_side_effects):
        """Sets the possible_side_effects of this ProductFood.

        부작용 발생 가능성  # noqa: E501

        :param possible_side_effects: The possible_side_effects of this ProductFood.  # noqa: E501
        :type: str
        """

        self._possible_side_effects = possible_side_effects

    @property
    def is_non_medication_indication(self):
        """Gets the is_non_medication_indication of this ProductFood.  # noqa: E501

        질병의 예방/치료를 위한 의약품이 아님 표시  # noqa: E501

        :return: The is_non_medication_indication of this ProductFood.  # noqa: E501
        :rtype: str
        """
        return self._is_non_medication_indication

    @is_non_medication_indication.setter
    def is_non_medication_indication(self, is_non_medication_indication):
        """Sets the is_non_medication_indication of this ProductFood.

        질병의 예방/치료를 위한 의약품이 아님 표시  # noqa: E501

        :param is_non_medication_indication: The is_non_medication_indication of this ProductFood.  # noqa: E501
        :type: str
        """

        self._is_non_medication_indication = is_non_medication_indication

    @property
    def is_display_ad_preview(self):
        """Gets the is_display_ad_preview of this ProductFood.  # noqa: E501

        표시광고 사전심의필  # noqa: E501

        :return: The is_display_ad_preview of this ProductFood.  # noqa: E501
        :rtype: bool
        """
        return self._is_display_ad_preview

    @is_display_ad_preview.setter
    def is_display_ad_preview(self, is_display_ad_preview):
        """Sets the is_display_ad_preview of this ProductFood.

        표시광고 사전심의필  # noqa: E501

        :param is_display_ad_preview: The is_display_ad_preview of this ProductFood.  # noqa: E501
        :type: bool
        """

        self._is_display_ad_preview = is_display_ad_preview

    @property
    def item_manufacture_mgmt_number(self):
        """Gets the item_manufacture_mgmt_number of this ProductFood.  # noqa: E501

        품목제조관리번호  # noqa: E501

        :return: The item_manufacture_mgmt_number of this ProductFood.  # noqa: E501
        :rtype: str
        """
        return self._item_manufacture_mgmt_number

    @item_manufacture_mgmt_number.setter
    def item_manufacture_mgmt_number(self, item_manufacture_mgmt_number):
        """Sets the item_manufacture_mgmt_number of this ProductFood.

        품목제조관리번호  # noqa: E501

        :param item_manufacture_mgmt_number: The item_manufacture_mgmt_number of this ProductFood.  # noqa: E501
        :type: str
        """

        self._item_manufacture_mgmt_number = item_manufacture_mgmt_number

    @property
    def allergens(self):
        """Gets the allergens of this ProductFood.  # noqa: E501

        알레르기성분  # noqa: E501

        :return: The allergens of this ProductFood.  # noqa: E501
        :rtype: list[str]
        """
        return self._allergens

    @allergens.setter
    def allergens(self, allergens):
        """Sets the allergens of this ProductFood.

        알레르기성분  # noqa: E501

        :param allergens: The allergens of this ProductFood.  # noqa: E501
        :type: list[str]
        """

        self._allergens = allergens

    @property
    def factory_allergens_notice(self):
        """Gets the factory_allergens_notice of this ProductFood.  # noqa: E501

        제조시설 알레르기 성분 안내  # noqa: E501

        :return: The factory_allergens_notice of this ProductFood.  # noqa: E501
        :rtype: str
        """
        return self._factory_allergens_notice

    @factory_allergens_notice.setter
    def factory_allergens_notice(self, factory_allergens_notice):
        """Sets the factory_allergens_notice of this ProductFood.

        제조시설 알레르기 성분 안내  # noqa: E501

        :param factory_allergens_notice: The factory_allergens_notice of this ProductFood.  # noqa: E501
        :type: str
        """

        self._factory_allergens_notice = factory_allergens_notice

    @property
    def function(self):
        """Gets the function of this ProductFood.  # noqa: E501

        기능  # noqa: E501

        :return: The function of this ProductFood.  # noqa: E501
        :rtype: str
        """
        return self._function

    @function.setter
    def function(self, function):
        """Sets the function of this ProductFood.

        기능  # noqa: E501

        :param function: The function of this ProductFood.  # noqa: E501
        :type: str
        """

        self._function = function

    @property
    def step_by_step(self):
        """Gets the step_by_step of this ProductFood.  # noqa: E501

        단계별  # noqa: E501

        :return: The step_by_step of this ProductFood.  # noqa: E501
        :rtype: str
        """
        return self._step_by_step

    @step_by_step.setter
    def step_by_step(self, step_by_step):
        """Sets the step_by_step of this ProductFood.

        단계별  # noqa: E501

        :param step_by_step: The step_by_step of this ProductFood.  # noqa: E501
        :type: str
        """

        self._step_by_step = step_by_step

    @property
    def vitamin_type(self):
        """Gets the vitamin_type of this ProductFood.  # noqa: E501

        비타민종류  # noqa: E501

        :return: The vitamin_type of this ProductFood.  # noqa: E501
        :rtype: str
        """
        return self._vitamin_type

    @vitamin_type.setter
    def vitamin_type(self, vitamin_type):
        """Sets the vitamin_type of this ProductFood.

        비타민종류  # noqa: E501

        :param vitamin_type: The vitamin_type of this ProductFood.  # noqa: E501
        :type: str
        """

        self._vitamin_type = vitamin_type

    @property
    def min_age(self):
        """Gets the min_age of this ProductFood.  # noqa: E501

        비타민종류  # noqa: E501

        :return: The min_age of this ProductFood.  # noqa: E501
        :rtype: int
        """
        return self._min_age

    @min_age.setter
    def min_age(self, min_age):
        """Sets the min_age of this ProductFood.

        비타민종류  # noqa: E501

        :param min_age: The min_age of this ProductFood.  # noqa: E501
        :type: int
        """

        self._min_age = min_age

    @property
    def pack_type(self):
        """Gets the pack_type of this ProductFood.  # noqa: E501

        포장형태 (ex. 육면체/상자형, 기둥형/캔형  # noqa: E501

        :return: The pack_type of this ProductFood.  # noqa: E501
        :rtype: str
        """
        return self._pack_type

    @pack_type.setter
    def pack_type(self, pack_type):
        """Sets the pack_type of this ProductFood.

        포장형태 (ex. 육면체/상자형, 기둥형/캔형  # noqa: E501

        :param pack_type: The pack_type of this ProductFood.  # noqa: E501
        :type: str
        """

        self._pack_type = pack_type

    @property
    def material(self):
        """Gets the material of this ProductFood.  # noqa: E501

        재료  # noqa: E501

        :return: The material of this ProductFood.  # noqa: E501
        :rtype: str
        """
        return self._material

    @material.setter
    def material(self, material):
        """Sets the material of this ProductFood.

        재료  # noqa: E501

        :param material: The material of this ProductFood.  # noqa: E501
        :type: str
        """

        self._material = material

    @property
    def product_type(self):
        """Gets the product_type of this ProductFood.  # noqa: E501

        제품형태  # noqa: E501

        :return: The product_type of this ProductFood.  # noqa: E501
        :rtype: str
        """
        return self._product_type

    @product_type.setter
    def product_type(self, product_type):
        """Sets the product_type of this ProductFood.

        제품형태  # noqa: E501

        :param product_type: The product_type of this ProductFood.  # noqa: E501
        :type: str
        """

        self._product_type = product_type

    @property
    def cooking_time(self):
        """Gets the cooking_time of this ProductFood.  # noqa: E501

        조리시간  # noqa: E501

        :return: The cooking_time of this ProductFood.  # noqa: E501
        :rtype: str
        """
        return self._cooking_time

    @cooking_time.setter
    def cooking_time(self, cooking_time):
        """Sets the cooking_time of this ProductFood.

        조리시간  # noqa: E501

        :param cooking_time: The cooking_time of this ProductFood.  # noqa: E501
        :type: str
        """

        self._cooking_time = cooking_time

    @property
    def cooking_capacity(self):
        """Gets the cooking_capacity of this ProductFood.  # noqa: E501

        조리양  # noqa: E501

        :return: The cooking_capacity of this ProductFood.  # noqa: E501
        :rtype: str
        """
        return self._cooking_capacity

    @cooking_capacity.setter
    def cooking_capacity(self, cooking_capacity):
        """Sets the cooking_capacity of this ProductFood.

        조리양  # noqa: E501

        :param cooking_capacity: The cooking_capacity of this ProductFood.  # noqa: E501
        :type: str
        """

        self._cooking_capacity = cooking_capacity

    @property
    def is_green_certification(self):
        """Gets the is_green_certification of this ProductFood.  # noqa: E501

        친환경인증  # noqa: E501

        :return: The is_green_certification of this ProductFood.  # noqa: E501
        :rtype: bool
        """
        return self._is_green_certification

    @is_green_certification.setter
    def is_green_certification(self, is_green_certification):
        """Sets the is_green_certification of this ProductFood.

        친환경인증  # noqa: E501

        :param is_green_certification: The is_green_certification of this ProductFood.  # noqa: E501
        :type: bool
        """

        self._is_green_certification = is_green_certification

    @property
    def cetification(self):
        """Gets the cetification of this ProductFood.  # noqa: E501

        인증  # noqa: E501

        :return: The cetification of this ProductFood.  # noqa: E501
        :rtype: str
        """
        return self._cetification

    @cetification.setter
    def cetification(self, cetification):
        """Sets the cetification of this ProductFood.

        인증  # noqa: E501

        :param cetification: The cetification of this ProductFood.  # noqa: E501
        :type: str
        """

        self._cetification = cetification

    @property
    def is_no_additives(self):
        """Gets the is_no_additives of this ProductFood.  # noqa: E501

        무첨가  # noqa: E501

        :return: The is_no_additives of this ProductFood.  # noqa: E501
        :rtype: str
        """
        return self._is_no_additives

    @is_no_additives.setter
    def is_no_additives(self, is_no_additives):
        """Sets the is_no_additives of this ProductFood.

        무첨가  # noqa: E501

        :param is_no_additives: The is_no_additives of this ProductFood.  # noqa: E501
        :type: str
        """

        self._is_no_additives = is_no_additives

    @property
    def is_recycle(self):
        """Gets the is_recycle of this ProductFood.  # noqa: E501

        분리배출 표시  # noqa: E501

        :return: The is_recycle of this ProductFood.  # noqa: E501
        :rtype: str
        """
        return self._is_recycle

    @is_recycle.setter
    def is_recycle(self, is_recycle):
        """Sets the is_recycle of this ProductFood.

        분리배출 표시  # noqa: E501

        :param is_recycle: The is_recycle of this ProductFood.  # noqa: E501
        :type: str
        """

        self._is_recycle = is_recycle

    @property
    def additional_food_type(self):
        """Gets the additional_food_type of this ProductFood.  # noqa: E501

        추가식품유형/개별표시  # noqa: E501

        :return: The additional_food_type of this ProductFood.  # noqa: E501
        :rtype: str
        """
        return self._additional_food_type

    @additional_food_type.setter
    def additional_food_type(self, additional_food_type):
        """Sets the additional_food_type of this ProductFood.

        추가식품유형/개별표시  # noqa: E501

        :param additional_food_type: The additional_food_type of this ProductFood.  # noqa: E501
        :type: str
        """

        self._additional_food_type = additional_food_type

    @property
    def item_report_number(self):
        """Gets the item_report_number of this ProductFood.  # noqa: E501

        품목보고번호  # noqa: E501

        :return: The item_report_number of this ProductFood.  # noqa: E501
        :rtype: str
        """
        return self._item_report_number

    @item_report_number.setter
    def item_report_number(self, item_report_number):
        """Sets the item_report_number of this ProductFood.

        품목보고번호  # noqa: E501

        :param item_report_number: The item_report_number of this ProductFood.  # noqa: E501
        :type: str
        """

        self._item_report_number = item_report_number

    @property
    def how_to_store(self):
        """Gets the how_to_store of this ProductFood.  # noqa: E501

        보관방법  # noqa: E501

        :return: The how_to_store of this ProductFood.  # noqa: E501
        :rtype: str
        """
        return self._how_to_store

    @how_to_store.setter
    def how_to_store(self, how_to_store):
        """Sets the how_to_store of this ProductFood.

        보관방법  # noqa: E501

        :param how_to_store: The how_to_store of this ProductFood.  # noqa: E501
        :type: str
        """

        self._how_to_store = how_to_store

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductFood):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
