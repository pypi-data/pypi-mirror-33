#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""Take a collection of NPZ files at different frequencies generated by gsm2npz.py
and build a model of the various models."""

import sys
import numpy
import getopt

def usage(exitCode=None):
	print """npz2map - Given a collection of NPZ files containing GSM maps, reduce
the maps to a model valid for a variety of frequencies.  Since both spectral index 
and curvature are fit, at least three different frequencies are needed.

Note:  This script assumed that the NPZ filenames reflect the frequency in MHz, i.e.,
       a 74 MHz file would be named gsm_74.npz

Usage: npz2map.py [OPTIONS] gsm_npz gsm_npz gsm_npz [gsm_npz [...]]

Options:
-h, --help              Display this help information
-i, --index-only        Fit the data with a spectral index only
-r, --ref-freq          Reference frequency in MHz for fits (default = 38 MHz)
"""

	if exitCode is not None:
		sys.exit(exitCode)
	else:
		return True


def parseOptions(args):
	config = {}
	config['f0'] = 38.0
	config['order'] = 2
	config['args'] = []

	try:
		opts, args = getopt.getopt(args, "hir:", ["help", "index-only", "ref-freq="])
	except getopt.GetoptError, err:
		# Print help information and exit:
		print str(err) # will print something like "option -a not recognized"
		usage(exitCode=2)

	# Work through opts
	for opt, value in opts:
		if opt in ('-h', '--help'):
			usage(exitCode=0)
		elif opt in ('-r', '--index-only'):
			config['order'] = 1
		elif opt in ('-r', '--ref-freq'):
			config['f0'] = float(value)
		else:
			assert False

	# Add in arguments
	config['args'] = args

	# Return configuration
	return config


def main(args):
	config = parseOptions(args)

	freqs = []
	coords = []
	Ts = []

	# For each input file...
	for npzFilename in config['args']:
		# Get the frequency in MHz from the file name
		junk, freq = npzFilename.split('_')
		freq, junk = freq.split('.')
		freqs.append( float(freq) )

		# Load the data
		print "Reading in file '%s' at %.2f MHz" % (npzFilename, freqs[-1])
		dataDict = numpy.load(npzFilename)
		coords.append(dataDict['eCoords'])
		Ts.append( dataDict['T'] )
		nSide = dataDict['nSide']
		pixRes = dataDict['pixRes']
		pixArea = dataDict['pixArea']
		print "-> Found %i pixels at ~%.4f degree resolution" % (len(Ts[-1]), pixRes)
	freqs = numpy.array(freqs)

	T0s = []
	alphas = []
	betas = []
	for p in xrange(Ts[0].shape[0]):
		cT = []
		for q in xrange(len(freqs)):
			cT.append( Ts[q][p] )
		cT = numpy.array(cT)

		valid = numpy.where(cT > 0)
		cc = numpy.polyfit(numpy.log10(freqs[valid]/config['f0']), numpy.log10(cT[valid]), config['order'])
		if config['order'] == 2:
			# Index + Curvature
			if cc[2] != cc[2]:
				print cT
				print p, 10**cc[2], cc[1], cc[0]
			T0s.append( 10**cc[2] )
			alphas.append( cc[1] )
			betas.append( cc[0] )
		else:
			# Index only
			if cc[1] != cc[1]:
				print cT
				print p, 10**cc[1], cc[0]
			T0s.append( 10**cc[1] )
			alphas.append( cc[0] )


	numpy.savez('gsm.npz', nSide=nSide, pixRes=pixRes, pixArea=pixArea, eCoords=coords[0], T0=numpy.array(T0s), f0=config['f0'], alpha=numpy.array(alphas), beta=numpy.array(betas), freqsUsed=freqs)


if __name__ == "__main__":
	main(sys.argv[1:])
