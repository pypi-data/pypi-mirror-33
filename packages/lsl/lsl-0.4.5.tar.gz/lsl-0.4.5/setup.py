# -*- coding: utf-8 -*

import ez_setup
ez_setup.use_setuptools()

import os
import imp
import sys
import glob
import unittest
import commands
import platform

from setuptools import setup, Extension, Distribution, find_packages
try:
	import numpy
except ImportError:
	pass


def get_version():
	"""Read the VERSION file and return the version number as a string."""

	return open('VERSION').read().strip()

def get_description(filename):
	"""Read in a README-type file and return the contents of the DESCRIPTION
	section."""

	desc = ''
	fh = open(filename, 'r')
	lines = fh.readlines()
	fh.close()

	inDescription = False
	for line in lines:
		line = line.replace('\n', '')
		line = line.replace('\t', '')
		if line.find('DESCRIPTION') == 0:
			inDescription = True
			continue
		if line.find('REQUIREMENTS') == 0:
			inDescription = False
			break
		if inDescription:
			desc = ' '.join([desc, line])

	return desc


def get_fftw():
	"""Use pkg-config (if installed) to figure out the C flags and linker flags
	needed to compile a C program with FFTW3.  If FFTW3 cannot be found via
	pkg-config, some 'sane' values are returned."""

	status, output = commands.getstatusoutput('pkg-config fftw3 --exists')
	if status == 0:
		configCommand = 'pkg-config fftw3'
		outCFLAGS = os.popen('%s --cflags' % configCommand, 'r').readline().rstrip().split()
		outLIBS = os.popen('%s --libs' % configCommand, 'r').readline().rstrip().split()

	else:
		print "WARNING:  FFTW3 cannot be found, using defaults"
		outCFLAGS = []
		outLIBS = ['-lfftw3', '-lm']

	return outCFLAGS, outLIBS


def get_atlas():
	"""Use ldconfig's verbose output to find the location of ATLAS (and cblas).  
	If ATLAS cannot be found, some 'sane' values are returned."""
	
	outLibs = ['-lcblas', '-latlas']
	if sys.platform.find('linux') == -1:
		return outLibs
	else:
		status, output = commands.getstatusoutput('ldconfig -v 2>/dev/null')
		lines = output.split('\n')

		libPath = ''
		found = False
		for line in lines:
			if line[0] != '\t':
				libPath = line.replace(':', '')
			else:
				if line.find('cblas') != -1:
					found = True
					break
					
		if found:
			outLibs.insert(0, '-L%s' % libPath)
		else:
			print "WARNING:  ATLAS and CBLAS cannot be found, using defaults"
		return outLibs


def write_version_info():
	"""Write the version info to a module in LSL."""
	
	lslVersion = get_version()
	shortVersion = '.'.join(lslVersion.split('.')[:2])
	
	contents = """# -*- coding: utf-8 -*-
# This file is automatically generated by setup.py

version = '%s'
full_version = '%s'
short_version = '%s'

""" % (lslVersion, lslVersion, shortVersion)


	
	fh = open('lsl/version.py', 'w')
	fh.write(contents)
	fh.close()
	
	return True


class LSLDist(Distribution):
	"""Sub-class of setupuptools (distutils.core) Distribution class that fixes
	problems building the libnova extension."""

	def parse_config_files(self, filenames=None):
		# parse cfg file, but remove any pacakge specific options
		# otherwise distutils complains
		
		Distribution.parse_config_files(self, filenames)
		self.get_option_dict('build_ext').pop('libnova_prefix')
		try:
			self.get_option_dict('egg_info').pop('libnova_prefix')
		except:
			pass

# Get the FFTW flags/libs and manipulate the flags and libraries for 
# correlator._core appropriately.  This will, hopefully, fix the build
# problems on Mac
cflags, libs = get_fftw()
atlasLibs = get_atlas()
coreExtraFlags = ['-fopenmp',]
coreExtraFlags.extend(cflags)
coreExtraLibs = ['-fopenmp']
coreExtraLibs.extend(libs)
coreExtraLibs.extend(atlasLibs)

drsuExtraFlags = ['-D_GNU_SOURCE', '-O3', '-fmessage-length=0', '-MMD', '-MP']
drsuExtraLibs = ['-lrt', '-lgdbm']

# Create the list of extension modules.  We do this here so that we can turn 
# off the DRSU direct module for non-linux system
ExtensionModules = [Extension('_libnova', ['lsl/libnova.i']), 
			Extension('astro_array', ['lsl/astro_array.c'], include_dirs=[numpy.get_include()]),
			Extension('reader._gofast', ['lsl/reader/gofast.c'], include_dirs=[numpy.get_include()], extra_compile_args=['-funroll-loops']),
			Extension('correlator._spec', ['lsl/correlator/spec.c'], include_dirs=[numpy.get_include()], libraries=['m'], extra_compile_args=coreExtraFlags, extra_link_args=coreExtraLibs), 
			Extension('correlator._core', ['lsl/correlator/core.c'], include_dirs=[numpy.get_include()], libraries=['m'], extra_compile_args=coreExtraFlags, extra_link_args=coreExtraLibs), 
			Extension('reader._drsu', ['lsl/reader/Disk.c', 'lsl/reader/FileSystem.c', 'lsl/reader/HostInterface.c', 'lsl/reader/Log.c', 'lsl/reader/Persistence.c', 'lsl/reader/Time.c', 'lsl/reader/drsu.c'], extra_compile_args=drsuExtraFlags, extra_link_args=drsuExtraLibs)]

# Check if we have linux or not.  If we don't, I don't think we can compile the
# DRSU direct access module. 
if platform.system() != 'Linux':
	print "WARNING: OS does not appear to be linux, skipping _drsu extension"
	del(ExtensionModules[-1])
else:
	# Now, check if we are 64-bit or not
	if platform.architecture()[0] != '64bit':
		print "WARNING: python build does not appear to be 64-bit, skipping _drsu extension"
		del(ExtensionModules[-1])

# Update the version information
write_version_info()

setup(
	distclass = LSLDist, 
	name = "lsl", 
	version = get_version(), 
	description = "LWA Software Library", 
	author = "Jayce Dowell", 
	author_email = "jdowell@unm.edu", 
	url = "http://fornax.phys.unm.edu/lwa/trac/", 
	long_description = get_description('README'), 
	classifiers = ['Development Status :: 4 - Beta',
			'Intended Audience :: Science/Research',
			'Topic :: Scientific/Engineering :: Astronomy'],
	packages = find_packages(), 
	scripts = glob.glob('scripts/*.py'), 
	setup_requires = ['numpy>=1.2'], 
	install_requires = ['pyfits>=2.1', 'numpy>=1.2', 'scipy>=0.7', 'pyephem>=3.7.3', 'aipy>=0.9.1'], 
	dependency_links = ['http://www.stsci.edu/resources/software_hardware/pyfits/Download'], 
	include_package_data = True,  
	ext_package = 'lsl', 
	ext_modules = ExtensionModules,
	zip_safe = False,  
	test_suite = "tests.test_lsl.lsl_tests"
) 
