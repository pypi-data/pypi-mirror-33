{"version":3,"sources":["webpack:///./src/util/custom-panel/set-custom-panel-properties.js","webpack:///./src/util/custom-panel/create-custom-panel-element.js","webpack:///./src/util/custom-panel/load-custom-panel.js","webpack:///./src/panels/custom/ha-panel-custom.js","webpack:///./src/common/dom/load_resource.js"],"names":["setCustomPanelProperties","root","properties","setProperties","Object","keys","forEach","key","createCustomPanelElement","panelConfig","tagName","name","document","createElement","_ref","JS_CACHE","__webpack_exports__","a","regeneratorRuntime","mark","_callee","toLoad","_ref2","_ref3","importHrefPromise","wrap","_context","prev","next","html_url","__webpack_require__","e","then","bind","embed_iframe","push","Promise","all","sent","_slicedToArray","js_url","_common_dom_load_resource_js__WEBPACK_IMPORTED_MODULE_0__","Error","stop","this","_x","apply","arguments","611","module","r","_polymer_polymer_polymer_element_js__WEBPACK_IMPORTED_MODULE_0__","_mixins_events_mixin_js__WEBPACK_IMPORTED_MODULE_1__","_mixins_navigate_mixin_js__WEBPACK_IMPORTED_MODULE_2__","_util_custom_panel_load_custom_panel_js__WEBPACK_IMPORTED_MODULE_3__","_util_custom_panel_create_custom_panel_element_js__WEBPACK_IMPORTED_MODULE_4__","_util_custom_panel_set_custom_panel_properties_js__WEBPACK_IMPORTED_MODULE_5__","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","defineProperty","Constructor","protoProps","staticProps","prototype","HaPanelCustom","_this","__proto__","getPrototypeOf","call","_setProperties","get","hass","narrow","Boolean","showMenu","route","panel","type","observer","value","_this2","window","customPanel","lastChild","remove","config","_panel_custom","tempA","href","trust_external","location","hostname","includes","confirm","innerHTML","iframeDoc","querySelector","contentWindow","open","write","close","element","appendChild","alert","initialize","customElements","define","_load","tag","url","resolve","reject","attr","parent","onload","onerror","async","rel","d","loadModule","loadJS"],"mappings":"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","file":"bf3c9331490936dfb388.chunk.js","sourcesContent":["export default function setCustomPanelProperties(root, properties) {\n  if ('setProperties' in root) {\n    root.setProperties(properties);\n  } else {\n    Object.keys(properties).forEach((key) => {\n      root[key] = properties[key];\n    });\n  }\n}\n","export default function createCustomPanelElement(panelConfig) {\n  // Legacy support. Custom panels used to have to define element ha-panel-{name}\n  const tagName = 'html_url' in panelConfig ? `ha-panel-${panelConfig.name}` : panelConfig.name;\n  return document.createElement(tagName);\n}\n","import { loadJS } from '../../common/dom/load_resource.js';\n\n// Make sure we only import every JS-based panel once (HTML import has this built-in)\nconst JS_CACHE = {};\n\nexport default async function loadCustomPanel(panelConfig) {\n  if (panelConfig.html_url) {\n    const toLoad = [\n      import(/* webpackChunkName: \"import-href-polyfill\" */ '../../resources/html-import/import-href.js'),\n    ];\n\n    if (!panelConfig.embed_iframe) {\n      toLoad.push(import(/* webpackChunkName: \"legacy-support\" */ '../legacy-support.js'));\n    }\n\n    const [{ importHrefPromise }] = await Promise.all(toLoad);\n    await importHrefPromise(panelConfig.html_url);\n  } else if (panelConfig.js_url) {\n    if (!(panelConfig.js_url in JS_CACHE)) {\n      JS_CACHE[panelConfig.js_url] = loadJS(panelConfig.js_url);\n    }\n    await JS_CACHE[panelConfig.js_url];\n  } else {\n    throw new Error('No valid url found in panel config.');\n  }\n}\n","import { PolymerElement } from '@polymer/polymer/polymer-element.js';\n\nimport EventsMixin from '../../mixins/events-mixin.js';\nimport NavigateMixin from '../../mixins/navigate-mixin.js';\nimport loadCustomPanel from '../../util/custom-panel/load-custom-panel.js';\nimport createCustomPanelElement from '../../util/custom-panel/create-custom-panel-element.js';\nimport setCustomPanelProperties from '../../util/custom-panel/set-custom-panel-properties.js';\n\n/*\n * Mixins are used by ifram to communicate with main frontend.\n * @appliesMixin EventsMixin\n * @appliesMixin NavigateMixin\n */\nclass HaPanelCustom extends NavigateMixin(EventsMixin(PolymerElement)) {\n  static get properties() {\n    return {\n      hass: Object,\n      narrow: Boolean,\n      showMenu: Boolean,\n      route: Object,\n      panel: {\n        type: Object,\n        observer: '_panelChanged',\n      }\n    };\n  }\n\n  static get observers() {\n    return [\n      '_dataChanged(hass, narrow, showMenu, route)'\n    ];\n  }\n\n  constructor() {\n    super();\n    this._setProperties = null;\n  }\n\n  _panelChanged(panel) {\n    // Clean up\n    delete window.customPanel;\n    this._setProperties = null;\n    while (this.lastChild) {\n      this.remove(this.lastChild);\n    }\n\n    const config = panel.config._panel_custom;\n\n    const tempA = document.createElement('a');\n    tempA.href = config.html_url || config.js_url;\n\n    if (!config.trust_external && !['localhost', '127.0.0.1', location.hostname].includes(tempA.hostname)) {\n      if (!confirm(`Do you trust the external panel \"${config.name}\" at \"${tempA.href}\"?\n\nIt will have access to all data in Home Assistant.\n\n(Check docs for the panel_custom component to hide this message)`)) {\n        return;\n      }\n    }\n\n    if (!config.embed_iframe) {\n      loadCustomPanel(config)\n        .then(\n          () => {\n            const element = createCustomPanelElement(config);\n            this._setProperties = props => setCustomPanelProperties(element, props);\n            setCustomPanelProperties(element, {\n              panel,\n              hass: this.hass,\n              narrow: this.narrow,\n              showMenu: this.showMenu,\n              route: this.route,\n            });\n            this.appendChild(element);\n          },\n          () => {\n            alert(`Unable to load custom panel from ${tempA.href}`);\n          }\n        );\n      return;\n    }\n\n    window.customPanel = this;\n    this.innerHTML = `\n    <style>\n      iframe {\n        border: 0;\n        width: 100%;\n        height: 100%;\n        display: block;\n      }\n    </style>\n    <iframe></iframe>\n    `;\n    const iframeDoc = this.querySelector('iframe').contentWindow.document;\n    iframeDoc.open();\n    iframeDoc.write(`<script src='${__PUBLIC_PATH__}custom-panel.js'></script>`);\n    iframeDoc.close();\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    delete window.customPanel;\n  }\n\n  _dataChanged(hass, narrow, showMenu, route) {\n    if (!this._setProperties) return;\n    this._setProperties({ hass, narrow, showMenu, route });\n  }\n\n  registerIframe(initialize, setProperties) {\n    initialize(this.panel, {\n      hass: this.hass,\n      narrow: this.narrow,\n      showMenu: this.showMenu,\n      route: this.route,\n    });\n    this._setProperties = setProperties;\n  }\n}\n\ncustomElements.define('ha-panel-custom', HaPanelCustom);\n","// Load a resource and get a promise when loading done.\n// From: https://davidwalsh.name/javascript-loader\n\nfunction _load(tag, url, type) {\n  // This promise will be used by Promise.all to determine success or failure\n  return new Promise(function (resolve, reject) {\n    const element = document.createElement(tag);\n    let attr = 'src';\n    let parent = 'body';\n\n    // Important success and error for the promise\n    element.onload = () => resolve(url);\n    element.onerror = () => reject(url);\n\n    // Need to set different attributes depending on tag type\n    switch (tag) {\n      case 'script':\n        element.async = true;\n        if (type) {\n          element.type = type;\n        }\n        break;\n      case 'link':\n        element.type = 'text/css';\n        element.rel = 'stylesheet';\n        attr = 'href';\n        parent = 'head';\n    }\n\n    // Inject into document to kick off loading\n    element[attr] = url;\n    document[parent].appendChild(element);\n  });\n}\n\nexport const loadCSS = url => _load('link', url);\nexport const loadJS = url => _load('script', url);\nexport const loadImg = url => _load('img', url);\nexport const loadModule = url => _load('script', url, 'module');\n"],"sourceRoot":""}