{
    "overlap": true,
    "columns": [
        "dimension",
        "index",
        "value"
    ],
    "dimensions": {
        "qc_passed_reads_count": {
            "name": "qc_passed_reads_count",
            "regex_pattern": "(?P<qc_passed_reads_count>\\d+) \\+ \\d+ in total",
            "row_type": "single"
        },
        "qc_failed_reads_count": {
            "name": "qc_failed_reads_count",
            "regex_pattern": "\\d+ \\+ (?P<qc_failed_reads_count>\\d+) in total",
            "row_type": "single"
        },
        "duplicates_count": {
            "name": "duplicates_count",
            "regex_pattern": "(?P<duplicates_count>\\d+) \\+ \\d+ duplicates",
            "row_type": "single"
        },
        "mapped_reads_count": {
            "name": "mapped_reads_count",
            "regex_pattern": "(?P<mapped_reads_count>\\d+) \\+ \\d+ mapped",
            "row_type": "single"
        },
        "mapped_reads_perc": {
            "name": "mapped_reads_perc",
            "regex_pattern": "\\d+ \\+ \\d+ mapped \\((?P<mapped_reads_perc>\\d+\\.\\d+)",
            "row_type": "single"
        },
        "paired_reads_count": {
            "name": "paired_reads_count",
            "regex_pattern": "(?P<paired_reads_count>\\d+) \\+ \\d+ paired in sequencing",
            "row_type": "single"
        },
        "read1_count": {
            "name": "read1_count",
            "regex_pattern": "(?P<read1_count>\\d+) \\+ \\d+ read1",
            "row_type": "single"
        },
        "read2_count": {
            "name": "read2_count",
            "regex_pattern": "(?P<read2_count>\\d+) \\+ \\d+ read2",
            "row_type": "single"
        },
        "properly_paired_count": {
            "name": "properly_paired_count",
            "regex_pattern": "(?P<properly_paired_count>\\d+) \\+ \\d+ properly paired",
            "row_type": "single"
        },
        "properly_paired_perc": {
            "name": "properly_paired_perc",
            "regex_pattern": "\\d+ \\+ \\d+ properly paired \\((?P<properly_paired_perc>\\d+\\.\\d+)",
            "row_type": "single"
        },
        "with_itself_mate_mapped": {
            "name": "with_itself_mate_mapped",
            "regex_pattern": "(?P<with_itself_mate_mapped>\\d+) \\+ \\d+ with itself",
            "row_type": "single"
        },
        "singletons_count": {
            "name": "singletons_count",
            "regex_pattern": "(?P<singletons_count>\\d+) \\+ \\d+ singletons",
            "row_type": "single"
        },
        "singletons_perc": {
            "name": "singletons_perc",
            "regex_pattern": "\\d+ \\+ \\d+ singletons \\((?P<singletons_perc>\\d+\\.\\d+)",
            "row_type": "single"
        },
        "mate_mapped_diff_chr": {
            "name": "mate_mapped_diff_chr",
            "regex_pattern": "(?P<mate_mapped_diff_chr>\\d+) \\+ \\d+ with mate mapped to a different chr$",
            "row_type": "single"
        },
        "mate_mapped_diff_chr_mapQ5": {
            "name": "mate_mapped_diff_chr_mapQ5",
            "regex_pattern": "(?P<mate_mapped_diff_chr_mapQ5>\\d+) \\+ \\d+ with mate mapped to a different chr \\(mapQ>",
            "row_type": "single"
        }
    }
}