#
# Copyright 2018 by Delphix
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#
# This class has been automatically generated from:
#     /delphix-end-entity-certificate-replace-chain-parameters.json
#
# Do not edit this file manually!
#

from delphixpy.web.objects.EndEntityCertificateReplaceParameters import EndEntityCertificateReplaceParameters
from delphixpy import factory
from delphixpy import common

class __Undef(object):
    def __repr__(self):
        return "undef"

_UNDEFINED = __Undef()

class EndEntityCertificateReplaceChainParameters(EndEntityCertificateReplaceParameters):
    """
    *(extends*
    :py:class:`delphixpy.web.vo.EndEntityCertificateReplaceParameters` *)* The
    parameters for replacing an end-entity certificate with a PEM certificate
    chain.
    """
    def __init__(self, undef_enabled=True):
        super(EndEntityCertificateReplaceChainParameters, self).__init__()
        self._type = ("EndEntityCertificateReplaceChainParameters", True)
        self._chain = (self.__undef__, True)

    API_VERSION = "1.9.3"

    @classmethod
    def from_dict(cls, data, dirty=False, undef_enabled=True):
        obj = super(EndEntityCertificateReplaceChainParameters, cls).from_dict(data, dirty, undef_enabled)
        if "chain" not in data:
            raise ValueError("Missing required property \"chain\".")
        if "chain" in data and data["chain"] is not None:
            obj._chain = (factory.create_object(data["chain"], "PemCertificateChain"), dirty)
            factory.validate_type(obj._chain[0], "PemCertificateChain")
        else:
            obj._chain = (obj.__undef__, dirty)
        return obj

    def to_dict(self, dirty=False):
        dct = super(EndEntityCertificateReplaceChainParameters, self).to_dict(dirty)

        def dictify(obj):
            if isinstance(obj, list):
                return [dictify(o) for o in obj]
            elif hasattr(obj, "to_dict"):
                return obj.to_dict()
            else:
                return obj
        if "chain" == "type" or (self.chain is not self.__undef__ and not (dirty and not self._chain[1])):
            dct["chain"] = dictify(self.chain)
        return dct

    def dirty(self):
        return self.from_dict(self.to_dict(dirty=False), dirty=True)

    def force_dirty(self):
        self._chain = (self._chain[0], True)

    def is_dirty(self):
        return any([self._chain[1]])

    def __eq__(self, other):
        if other is None:
            return False
        if not isinstance(other, EndEntityCertificateReplaceChainParameters):
            return False
        return super(EndEntityCertificateReplaceChainParameters, self).__eq__(other) and \
               self.chain == other.chain

    def __ne__(self, other):
        return not self.__eq__(other)

    def __repr__(self):
        return common.generate_repr_string(self)

    @property
    def chain(self):
        """
        The PEM certificate chain.

        :rtype: :py:class:`delphixpy.web.vo.PemCertificateChain`
        """
        return self._chain[0]

    @chain.setter
    def chain(self, value):
        self._chain = (value, True)

