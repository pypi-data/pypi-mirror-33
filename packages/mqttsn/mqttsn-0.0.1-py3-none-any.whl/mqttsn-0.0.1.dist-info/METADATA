Metadata-Version: 2.1
Name: mqttsn
Version: 0.0.1
Summary: Python client based on Eclipse RSMB client for MQTT-SN brokers
Home-page: https://github.com/luanguimaraesla/mqttsn
Author: Luan Guimar√£es Lacerda
Author-email: luan@live.in
License: MIT License
Keywords: iot,mosquitto,mqtt,mqttsn,mqtt-sn,message,queue,pipeline,sensors,network,udp,protocol
Platform: UNKNOWN
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: Operating System :: POSIX
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3.6
Classifier: Topic :: Software Development :: Libraries
Provides-Extra: dev
Provides-Extra: docs
Requires-Dist: paho-mqtt
Provides-Extra: dev
Requires-Dist: pytest; extra == 'dev'
Requires-Dist: pytest-cov; extra == 'dev'
Requires-Dist: coverage; extra == 'dev'
Requires-Dist: flake8; extra == 'dev'
Requires-Dist: bumpversion; extra == 'dev'
Provides-Extra: docs
Requires-Dist: docutils; extra == 'docs'
Requires-Dist: sphinx-autobuild; extra == 'docs'

## Python Client for MQTT-SN brokers

### Usage examples

```python
mclient = Client("myclientid", host="225.0.18.83", port=1883)
mclient.registerCallback(Callback())
mclient.start()

publish("long topic name", "qos -1 start", port=1884)

callback = Callback()

aclient = Client("myclientid", port=1884)
aclient.registerCallback(callback)

aclient.connect()
aclient.disconnect()

aclient.connect()
aclient.subscribe("k ", 2)
aclient.subscribe("jkjkjkjkj", 2)
aclient.publish("k ", "qos 0")
aclient.publish("k ", "qos 1", 1)
aclient.publish("jkjkjkjkj", "qos 2", 2)
topicid = aclient.register("jkjkjkjkj")
#time.sleep(1.0)
aclient.publish(topicid, "qos 2 - registered topic id", 2)
#time.sleep(1.0)
aclient.disconnect()
publish("long topic name", "qos -1 end", port=1884)

time.sleep(30)
mclient.stop()
```

```python 
from mqttsn.client import Client, Callback

if __name__ == '__main__':
    aclient = Client("linh", port=1883)
    aclient.register_callback(Callback())
    aclient.connect()

    rc, topic1 = aclient.subscribe("topic1")
    print("topic id for topic1 is", topic1)

    rc, topic2 = aclient.subscribe("topic2")
    print("topic id for topic2 is", topic2)

    aclient.publish(topic1, "aaaa", qos=0)
    aclient.publish(topic2, "bbbb", qos=0)

    aclient.unsubscribe("topic1")

    aclient.publish(topic2, "bbbb", qos=0)
    aclient.publish(topic1, "aaaa", qos=0)

    aclient.disconnect()
```


