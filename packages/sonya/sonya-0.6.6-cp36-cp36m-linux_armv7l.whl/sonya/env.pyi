from typing import Dict, Union, Generator, Tuple, Any

from . import sophia
from .db import Database
from .schema import Schema


class Environment:
    def __init__(self, path: str):
        self.path = ...         # type: str
        self.env = ...          # type: sophia.Environment
        self.databases = ...    # type: Dict[str, Tuple[Database, Dict[str, Any]]]

    def _create_env(self): ...
    def __setitem__(self, key, value): ...
    def open(self) -> bool: ...
    def __del__(self): ...
    def __getitem__(self, item: str) -> Union[str, int]: ...
    def __iter__(self): Generator[str, Union[int, str]]: ...
    def close(self): ...
    def database(self, name: str, schema: Schema, **kwargs) -> Database: ...

    @property
    def engine_config(self) -> Dict[str, Union[int, str]]: ...

    @property
    def is_closed(self) -> bool: ...

    @property
    def is_opened(self) -> bool: ...
