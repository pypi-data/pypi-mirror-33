# NtDocutils https://nt.web.ve/en/projects/ntdocutils
# Copyright (c) 2017 Miguel Angel Rivera Notararigo

"""
NtDocutils writer.

Provides:

* ``Writer``: basic writer.

* ``dict2args``: dictionary to arguments list converter.

* ``apply_template``: overwriting for
  ``docutils.writers._html_base.Writer.apply_template``.
"""

__docformat__ = "reStructuredText"

import re

from docutils.core import publish_cmdline
from docutils.writers._html_base import Writer as DocutilsWriter

from ntdocutils.exceptions import OfflineUnsupported


class Writer:
    """Creates a basic structure for themes writers."""

    docutils_argv = {
        "strip-comments": True,
        "pep-references": True,
        "rfc-references": True,
        "syntax-highlight": "short",
        "tab-width": 4,
        "xml-declaration": True
    }
    """Options passed to Docutils."""

    def __init__(self, server=False):
        """
        ``Writer(["<server>"])``

        ``server`` (string)
          Server from where assets will be downloaded.
        """

        self.server = server

    def assets(self):
        """
        Generates the assets for the template.

        returns
          dictionary - Assets to add at the template.

        See ``ntdocutils.writer.apply_template``.
        """

        return {}

    def offline_mode(self, destination):
        """
        Creates offline assets in ``destination`` parent folder.

        ``obj.offline_mode("<destination>")``

        ``destination`` (string)
          File generated by Docutils.

        Example
        =======

        .. code:: python

            obj.offline_mode("index.html")
        """

        raise OfflineUnsupported(self.theme)

    def write(self, source, destination, extra_argv=[]):
        """
        Generates the destination file.

        ``obj.write("<source>", "<destination>"[, <extra_argv>])``

        ``source`` (string)
          File processed by Doctuils.

        ``destination`` (string)
          File generated by Doctuils.

        ``extra_argv`` (list)
          Docutils arguments captured from the command line.

        Examples
        ========

        .. code:: python

            obj.write("test.rst", "index.html")

        .. code:: python

            obj.write("test.rst", "index.html", ["--syntax-highlight=long"])
        """

        extra_argv.extend((source, destination))

        if self.server == "local":
            self.offline_mode(destination)

        # Overwrite Docutils template processor
        DocutilsWriter.apply_template = apply_template(self.assets())

        publish_cmdline(
            writer_name="html5",
            argv=dict2args(self.docutils_argv) + extra_argv
        )


def apply_template(assets):
    """
    Processes the template.

    Used for overwrite ``docutils.writers._html_base.Writer.apply_template``
    method.

    ``apply_template(<assets>)``

    ``assets`` (dictionary)
      Assets to add at the template, see ``ntdocutils.writer.Writer.assets``.

    returns
      function - Template processor.

    Example
    =======

    .. code:: python

        apply_template({
            "before_styles": '<link rel="stylesheet" href="styles.css" />',
            "scripts": '<script src="script.js"></script>'
                       '<script src="other_script.js"></script>'
        })
    """

    def apply_template(self):
        template_file = open(self.document.settings.template, "rb")
        template = str(template_file.read(), "utf-8")
        template_file.close()

        # Escape ``%`` that don't are special fields
        pattern = r"%(?!\((" + "|".join(self.visitor_attributes) + r")\)s)"
        template = re.subn(pattern, "%%", template)[0]

        subs = self.interpolation_dict()
        return template.format(**assets) % subs

    return apply_template


def dict2args(dictionary):
    """
    Generates an arguments list from a dictionary.

    ``dict2args(<dictionary>)``

    ``dictionary`` (dictionary)
      Dictionary to process.

    returns
      list - Arguments list.

    Example
    =======

    .. code:: python

        docutils_argv = {
            "report": "info",
            "strip-comments": True,
            "pep-references": True,
            "rfc-references": True,
            "syntax-highlight": "short",
            "tab-width": 4,
            "xml-declaration": True
        }

        dict2args(docutils_argv)
    """

    args = []

    for key, value in dictionary.items():
        arg = "-"

        if len(key) > 1:
            arg += "-"

        arg += key

        if not isinstance(value, bool):
            arg += "=" + str(value)

        args.append(arg)

    return args
