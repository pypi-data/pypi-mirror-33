from star_builder import validators
from apistar.http import QueryParams, RequestData

from paas_star import ModelComponent, Type
{% if module %}{{"from %s import %s\n" % (module, cls)}} {% endif %}

class {{class_name}}(Type):
{% if fields %}{% for name, type in fields %}    {{name}} = validators.{{type}}()
{% endfor %}{% endif %}
    async def load(self):
        """
        load方法使用self中的现在字段值(如：id)从特定数据源中获取数据。
        load方法中禁止使用 await 获取self中的字段值，如果这个字段值不存在，
        会引发无限递归，推荐直接使用self["id"]获取。
        eg:
        id = self.get("id")
        assert id is not None, (777, "id is None, cannot load!")
        return User(await self.col.find_one({"id": id}))
        """
        pass


class {{class_name}}Component(ModelComponent):

    async def resolve(self, {{"%s: %s," % (cls.lower(), cls) if cls else ""}}
                     params: QueryParams,
                     form: RequestData) -> {{class_name}}:
        # gather方法将params和form中的参数聚集在一起，传入model类中
        # model类根据自已的需要选择字段值，在format之后，其余字段会被移除。
        total_params = super().gather(params, form)
        {% if module %}{{class_name}}.init({{cls.lower()}}={{cls.lower()}}){% endif %}
        return {{class_name}}(total_params)
