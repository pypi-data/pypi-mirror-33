import typing


class AdvancedProperty:
    def __init__(
            self,
            fget: typing.Optional[typing.Callable[[typing.Any, ], typing.Any]]=None,
            fset: typing.Optional[typing.Callable[[typing.Any, typing.Any], None]]=None,
            fdel: typing.Optional[typing.Callable[[typing.Any, ], None]]=None,
            fcget: typing.Optional[typing.Callable[[typing.Any, ], typing.Any]]=None,
    ) -> None: ...

    def cgetter(self, fcget: typing.Optional[typing.Callable[[typing.Any, ], typing.Any]]) -> AdvancedProperty: ...

    def getter(self, fget : typing.Optional[typing.Callable[[typing.Any, ], typing.Any]]) -> AdvancedProperty: ...

    def setter(self, fset: typing.Optional[typing.Callable[[typing.Any, typing.Any], None]]) -> AdvancedProperty: ...

    def deleter(self, fdel: typing.Optional[typing.Callable[[typing.Any, ], None]]) -> AdvancedProperty: ...

    @property
    def fcget(self) -> typing.Optional[typing.Callable[[typing.Any, ], typing.Any]]: ...

    @property
    def fget(self) -> typing.Optional[typing.Callable[[typing.Any, ], typing.Any]]: ...

    @property
    def fset(self) -> typing.Optional[typing.Callable[[typing.Any, typing.Any], None]]: ...

    @property
    def fdel(self) -> typing.Optional[typing.Callable[[typing.Any, ], None]]: ...

    def __get__(self, instance: typing.Optional[object], owner: typing.Type[object]) -> typing.Any: ...

    def __set__(self, instance: typing.Any, value: typing.Any) -> None: ...

    def __delete__(self, instance: typing.Any) -> None: ...
