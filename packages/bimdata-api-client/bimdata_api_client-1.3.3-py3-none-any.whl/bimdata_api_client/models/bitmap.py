# coding: utf-8

"""
    BIMData API

    BIMData API documentation  # noqa: E501

    OpenAPI spec version: v1
    Contact: contact@bimdata.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Bitmap(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'guid': 'str',
        'bitmap_type': 'str',
        'location': 'Point',
        'normal': 'Direction',
        'up': 'Direction',
        'height': 'int',
        'bitmap_data': 'str'
    }

    attribute_map = {
        'guid': 'guid',
        'bitmap_type': 'bitmap_type',
        'location': 'location',
        'normal': 'normal',
        'up': 'up',
        'height': 'height',
        'bitmap_data': 'bitmap_data'
    }

    def __init__(self, guid=None, bitmap_type=None, location=None, normal=None, up=None, height=None, bitmap_data=None):  # noqa: E501
        """Bitmap - a model defined in OpenAPI"""  # noqa: E501

        self._guid = None
        self._bitmap_type = None
        self._location = None
        self._normal = None
        self._up = None
        self._height = None
        self._bitmap_data = None
        self.discriminator = None

        if guid is not None:
            self.guid = guid
        self.bitmap_type = bitmap_type
        self.location = location
        self.normal = normal
        self.up = up
        self.height = height
        if bitmap_data is not None:
            self.bitmap_data = bitmap_data

    @property
    def guid(self):
        """Gets the guid of this Bitmap.  # noqa: E501


        :return: The guid of this Bitmap.  # noqa: E501
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this Bitmap.


        :param guid: The guid of this Bitmap.  # noqa: E501
        :type: str
        """

        self._guid = guid

    @property
    def bitmap_type(self):
        """Gets the bitmap_type of this Bitmap.  # noqa: E501


        :return: The bitmap_type of this Bitmap.  # noqa: E501
        :rtype: str
        """
        return self._bitmap_type

    @bitmap_type.setter
    def bitmap_type(self, bitmap_type):
        """Sets the bitmap_type of this Bitmap.


        :param bitmap_type: The bitmap_type of this Bitmap.  # noqa: E501
        :type: str
        """
        if bitmap_type is None:
            raise ValueError("Invalid value for `bitmap_type`, must not be `None`")  # noqa: E501
        if bitmap_type is not None and len(bitmap_type) > 255:
            raise ValueError("Invalid value for `bitmap_type`, length must be less than or equal to `255`")  # noqa: E501
        if bitmap_type is not None and len(bitmap_type) < 1:
            raise ValueError("Invalid value for `bitmap_type`, length must be greater than or equal to `1`")  # noqa: E501

        self._bitmap_type = bitmap_type

    @property
    def location(self):
        """Gets the location of this Bitmap.  # noqa: E501


        :return: The location of this Bitmap.  # noqa: E501
        :rtype: Point
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Bitmap.


        :param location: The location of this Bitmap.  # noqa: E501
        :type: Point
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501

        self._location = location

    @property
    def normal(self):
        """Gets the normal of this Bitmap.  # noqa: E501


        :return: The normal of this Bitmap.  # noqa: E501
        :rtype: Direction
        """
        return self._normal

    @normal.setter
    def normal(self, normal):
        """Sets the normal of this Bitmap.


        :param normal: The normal of this Bitmap.  # noqa: E501
        :type: Direction
        """
        if normal is None:
            raise ValueError("Invalid value for `normal`, must not be `None`")  # noqa: E501

        self._normal = normal

    @property
    def up(self):
        """Gets the up of this Bitmap.  # noqa: E501


        :return: The up of this Bitmap.  # noqa: E501
        :rtype: Direction
        """
        return self._up

    @up.setter
    def up(self, up):
        """Sets the up of this Bitmap.


        :param up: The up of this Bitmap.  # noqa: E501
        :type: Direction
        """
        if up is None:
            raise ValueError("Invalid value for `up`, must not be `None`")  # noqa: E501

        self._up = up

    @property
    def height(self):
        """Gets the height of this Bitmap.  # noqa: E501


        :return: The height of this Bitmap.  # noqa: E501
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this Bitmap.


        :param height: The height of this Bitmap.  # noqa: E501
        :type: int
        """
        if height is None:
            raise ValueError("Invalid value for `height`, must not be `None`")  # noqa: E501
        if height is not None and height > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `height`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if height is not None and height < -2147483648:  # noqa: E501
            raise ValueError("Invalid value for `height`, must be a value greater than or equal to `-2147483648`")  # noqa: E501

        self._height = height

    @property
    def bitmap_data(self):
        """Gets the bitmap_data of this Bitmap.  # noqa: E501


        :return: The bitmap_data of this Bitmap.  # noqa: E501
        :rtype: str
        """
        return self._bitmap_data

    @bitmap_data.setter
    def bitmap_data(self, bitmap_data):
        """Sets the bitmap_data of this Bitmap.


        :param bitmap_data: The bitmap_data of this Bitmap.  # noqa: E501
        :type: str
        """

        self._bitmap_data = bitmap_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Bitmap):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
