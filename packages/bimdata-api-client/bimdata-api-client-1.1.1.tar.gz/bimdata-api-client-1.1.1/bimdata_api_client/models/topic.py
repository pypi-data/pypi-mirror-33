# coding: utf-8

"""
    BIMData API

    BIMData API documentation  # noqa: E501

    OpenAPI spec version: v1
    Contact: contact@bimdata.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Topic(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'guid': 'str',
        'topic_type': 'TopicType',
        'topic_status': 'TopicStatus',
        'reference_links': 'list[ReferenceLink]',
        'title': 'str',
        'priority': 'Priority',
        'index': 'int',
        'labels': 'list[Label]',
        'creation_date': 'datetime',
        'creation_author': 'User',
        'modified_date': 'datetime',
        'modified_author': 'User',
        'assigned_to': 'User',
        'stage': 'Stage',
        'description': 'str',
        'bim_snippet': 'BimSnippet',
        'due_date': 'datetime',
        'autorization_topic_actions': 'list[TopicAction]',
        'autorization_topic_status': 'list[TopicStatus]',
        'bcf_project_id': 'str'
    }

    attribute_map = {
        'guid': 'guid',
        'topic_type': 'topic_type',
        'topic_status': 'topic_status',
        'reference_links': 'reference_links',
        'title': 'title',
        'priority': 'priority',
        'index': 'index',
        'labels': 'labels',
        'creation_date': 'creation_date',
        'creation_author': 'creation_author',
        'modified_date': 'modified_date',
        'modified_author': 'modified_author',
        'assigned_to': 'assigned_to',
        'stage': 'stage',
        'description': 'description',
        'bim_snippet': 'bim_snippet',
        'due_date': 'due_date',
        'autorization_topic_actions': 'autorization_topic_actions',
        'autorization_topic_status': 'autorization_topic_status',
        'bcf_project_id': 'bcf_project_id'
    }

    def __init__(self, guid=None, topic_type=None, topic_status=None, reference_links=None, title=None, priority=None, index=None, labels=None, creation_date=None, creation_author=None, modified_date=None, modified_author=None, assigned_to=None, stage=None, description=None, bim_snippet=None, due_date=None, autorization_topic_actions=None, autorization_topic_status=None, bcf_project_id=None):  # noqa: E501
        """Topic - a model defined in OpenAPI"""  # noqa: E501

        self._guid = None
        self._topic_type = None
        self._topic_status = None
        self._reference_links = None
        self._title = None
        self._priority = None
        self._index = None
        self._labels = None
        self._creation_date = None
        self._creation_author = None
        self._modified_date = None
        self._modified_author = None
        self._assigned_to = None
        self._stage = None
        self._description = None
        self._bim_snippet = None
        self._due_date = None
        self._autorization_topic_actions = None
        self._autorization_topic_status = None
        self._bcf_project_id = None
        self.discriminator = None

        if guid is not None:
            self.guid = guid
        if topic_type is not None:
            self.topic_type = topic_type
        if topic_status is not None:
            self.topic_status = topic_status
        if reference_links is not None:
            self.reference_links = reference_links
        self.title = title
        if priority is not None:
            self.priority = priority
        if index is not None:
            self.index = index
        if labels is not None:
            self.labels = labels
        if creation_date is not None:
            self.creation_date = creation_date
        if creation_author is not None:
            self.creation_author = creation_author
        if modified_date is not None:
            self.modified_date = modified_date
        if modified_author is not None:
            self.modified_author = modified_author
        if assigned_to is not None:
            self.assigned_to = assigned_to
        if stage is not None:
            self.stage = stage
        if description is not None:
            self.description = description
        if bim_snippet is not None:
            self.bim_snippet = bim_snippet
        if due_date is not None:
            self.due_date = due_date
        if autorization_topic_actions is not None:
            self.autorization_topic_actions = autorization_topic_actions
        if autorization_topic_status is not None:
            self.autorization_topic_status = autorization_topic_status
        if bcf_project_id is not None:
            self.bcf_project_id = bcf_project_id

    @property
    def guid(self):
        """Gets the guid of this Topic.  # noqa: E501


        :return: The guid of this Topic.  # noqa: E501
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this Topic.


        :param guid: The guid of this Topic.  # noqa: E501
        :type: str
        """

        self._guid = guid

    @property
    def topic_type(self):
        """Gets the topic_type of this Topic.  # noqa: E501


        :return: The topic_type of this Topic.  # noqa: E501
        :rtype: TopicType
        """
        return self._topic_type

    @topic_type.setter
    def topic_type(self, topic_type):
        """Sets the topic_type of this Topic.


        :param topic_type: The topic_type of this Topic.  # noqa: E501
        :type: TopicType
        """

        self._topic_type = topic_type

    @property
    def topic_status(self):
        """Gets the topic_status of this Topic.  # noqa: E501


        :return: The topic_status of this Topic.  # noqa: E501
        :rtype: TopicStatus
        """
        return self._topic_status

    @topic_status.setter
    def topic_status(self, topic_status):
        """Sets the topic_status of this Topic.


        :param topic_status: The topic_status of this Topic.  # noqa: E501
        :type: TopicStatus
        """

        self._topic_status = topic_status

    @property
    def reference_links(self):
        """Gets the reference_links of this Topic.  # noqa: E501


        :return: The reference_links of this Topic.  # noqa: E501
        :rtype: list[ReferenceLink]
        """
        return self._reference_links

    @reference_links.setter
    def reference_links(self, reference_links):
        """Sets the reference_links of this Topic.


        :param reference_links: The reference_links of this Topic.  # noqa: E501
        :type: list[ReferenceLink]
        """

        self._reference_links = reference_links

    @property
    def title(self):
        """Gets the title of this Topic.  # noqa: E501


        :return: The title of this Topic.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Topic.


        :param title: The title of this Topic.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501
        if title is not None and len(title) > 255:
            raise ValueError("Invalid value for `title`, length must be less than or equal to `255`")  # noqa: E501
        if title is not None and len(title) < 1:
            raise ValueError("Invalid value for `title`, length must be greater than or equal to `1`")  # noqa: E501

        self._title = title

    @property
    def priority(self):
        """Gets the priority of this Topic.  # noqa: E501


        :return: The priority of this Topic.  # noqa: E501
        :rtype: Priority
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this Topic.


        :param priority: The priority of this Topic.  # noqa: E501
        :type: Priority
        """

        self._priority = priority

    @property
    def index(self):
        """Gets the index of this Topic.  # noqa: E501


        :return: The index of this Topic.  # noqa: E501
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this Topic.


        :param index: The index of this Topic.  # noqa: E501
        :type: int
        """
        if index is not None and index > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `index`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if index is not None and index < -2147483648:  # noqa: E501
            raise ValueError("Invalid value for `index`, must be a value greater than or equal to `-2147483648`")  # noqa: E501

        self._index = index

    @property
    def labels(self):
        """Gets the labels of this Topic.  # noqa: E501


        :return: The labels of this Topic.  # noqa: E501
        :rtype: list[Label]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Topic.


        :param labels: The labels of this Topic.  # noqa: E501
        :type: list[Label]
        """

        self._labels = labels

    @property
    def creation_date(self):
        """Gets the creation_date of this Topic.  # noqa: E501


        :return: The creation_date of this Topic.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this Topic.


        :param creation_date: The creation_date of this Topic.  # noqa: E501
        :type: datetime
        """

        self._creation_date = creation_date

    @property
    def creation_author(self):
        """Gets the creation_author of this Topic.  # noqa: E501


        :return: The creation_author of this Topic.  # noqa: E501
        :rtype: User
        """
        return self._creation_author

    @creation_author.setter
    def creation_author(self, creation_author):
        """Sets the creation_author of this Topic.


        :param creation_author: The creation_author of this Topic.  # noqa: E501
        :type: User
        """

        self._creation_author = creation_author

    @property
    def modified_date(self):
        """Gets the modified_date of this Topic.  # noqa: E501


        :return: The modified_date of this Topic.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_date

    @modified_date.setter
    def modified_date(self, modified_date):
        """Sets the modified_date of this Topic.


        :param modified_date: The modified_date of this Topic.  # noqa: E501
        :type: datetime
        """

        self._modified_date = modified_date

    @property
    def modified_author(self):
        """Gets the modified_author of this Topic.  # noqa: E501


        :return: The modified_author of this Topic.  # noqa: E501
        :rtype: User
        """
        return self._modified_author

    @modified_author.setter
    def modified_author(self, modified_author):
        """Sets the modified_author of this Topic.


        :param modified_author: The modified_author of this Topic.  # noqa: E501
        :type: User
        """

        self._modified_author = modified_author

    @property
    def assigned_to(self):
        """Gets the assigned_to of this Topic.  # noqa: E501


        :return: The assigned_to of this Topic.  # noqa: E501
        :rtype: User
        """
        return self._assigned_to

    @assigned_to.setter
    def assigned_to(self, assigned_to):
        """Sets the assigned_to of this Topic.


        :param assigned_to: The assigned_to of this Topic.  # noqa: E501
        :type: User
        """

        self._assigned_to = assigned_to

    @property
    def stage(self):
        """Gets the stage of this Topic.  # noqa: E501


        :return: The stage of this Topic.  # noqa: E501
        :rtype: Stage
        """
        return self._stage

    @stage.setter
    def stage(self, stage):
        """Sets the stage of this Topic.


        :param stage: The stage of this Topic.  # noqa: E501
        :type: Stage
        """

        self._stage = stage

    @property
    def description(self):
        """Gets the description of this Topic.  # noqa: E501


        :return: The description of this Topic.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Topic.


        :param description: The description of this Topic.  # noqa: E501
        :type: str
        """
        if description is not None and len(description) > 255:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `255`")  # noqa: E501

        self._description = description

    @property
    def bim_snippet(self):
        """Gets the bim_snippet of this Topic.  # noqa: E501


        :return: The bim_snippet of this Topic.  # noqa: E501
        :rtype: BimSnippet
        """
        return self._bim_snippet

    @bim_snippet.setter
    def bim_snippet(self, bim_snippet):
        """Sets the bim_snippet of this Topic.


        :param bim_snippet: The bim_snippet of this Topic.  # noqa: E501
        :type: BimSnippet
        """

        self._bim_snippet = bim_snippet

    @property
    def due_date(self):
        """Gets the due_date of this Topic.  # noqa: E501


        :return: The due_date of this Topic.  # noqa: E501
        :rtype: datetime
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this Topic.


        :param due_date: The due_date of this Topic.  # noqa: E501
        :type: datetime
        """

        self._due_date = due_date

    @property
    def autorization_topic_actions(self):
        """Gets the autorization_topic_actions of this Topic.  # noqa: E501


        :return: The autorization_topic_actions of this Topic.  # noqa: E501
        :rtype: list[TopicAction]
        """
        return self._autorization_topic_actions

    @autorization_topic_actions.setter
    def autorization_topic_actions(self, autorization_topic_actions):
        """Sets the autorization_topic_actions of this Topic.


        :param autorization_topic_actions: The autorization_topic_actions of this Topic.  # noqa: E501
        :type: list[TopicAction]
        """

        self._autorization_topic_actions = autorization_topic_actions

    @property
    def autorization_topic_status(self):
        """Gets the autorization_topic_status of this Topic.  # noqa: E501


        :return: The autorization_topic_status of this Topic.  # noqa: E501
        :rtype: list[TopicStatus]
        """
        return self._autorization_topic_status

    @autorization_topic_status.setter
    def autorization_topic_status(self, autorization_topic_status):
        """Sets the autorization_topic_status of this Topic.


        :param autorization_topic_status: The autorization_topic_status of this Topic.  # noqa: E501
        :type: list[TopicStatus]
        """

        self._autorization_topic_status = autorization_topic_status

    @property
    def bcf_project_id(self):
        """Gets the bcf_project_id of this Topic.  # noqa: E501


        :return: The bcf_project_id of this Topic.  # noqa: E501
        :rtype: str
        """
        return self._bcf_project_id

    @bcf_project_id.setter
    def bcf_project_id(self, bcf_project_id):
        """Sets the bcf_project_id of this Topic.


        :param bcf_project_id: The bcf_project_id of this Topic.  # noqa: E501
        :type: str
        """

        self._bcf_project_id = bcf_project_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Topic):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
