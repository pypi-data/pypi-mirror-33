# coding: utf-8

"""
    BIMData API

    BIMData API documentation  # noqa: E501

    OpenAPI spec version: v1
    Contact: contact@bimdata.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class CommentEvent(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'comment_guid': 'str',
        'topic_guid': 'str',
        'date': 'datetime',
        'author': 'User',
        'actions': 'list[EventAction]'
    }

    attribute_map = {
        'comment_guid': 'comment_guid',
        'topic_guid': 'topic_guid',
        'date': 'date',
        'author': 'author',
        'actions': 'actions'
    }

    def __init__(self, comment_guid=None, topic_guid=None, date=None, author=None, actions=None):  # noqa: E501
        """CommentEvent - a model defined in OpenAPI"""  # noqa: E501

        self._comment_guid = None
        self._topic_guid = None
        self._date = None
        self._author = None
        self._actions = None
        self.discriminator = None

        self.comment_guid = comment_guid
        self.topic_guid = topic_guid
        if date is not None:
            self.date = date
        self.author = author
        self.actions = actions

    @property
    def comment_guid(self):
        """Gets the comment_guid of this CommentEvent.  # noqa: E501


        :return: The comment_guid of this CommentEvent.  # noqa: E501
        :rtype: str
        """
        return self._comment_guid

    @comment_guid.setter
    def comment_guid(self, comment_guid):
        """Sets the comment_guid of this CommentEvent.


        :param comment_guid: The comment_guid of this CommentEvent.  # noqa: E501
        :type: str
        """
        if comment_guid is None:
            raise ValueError("Invalid value for `comment_guid`, must not be `None`")  # noqa: E501

        self._comment_guid = comment_guid

    @property
    def topic_guid(self):
        """Gets the topic_guid of this CommentEvent.  # noqa: E501


        :return: The topic_guid of this CommentEvent.  # noqa: E501
        :rtype: str
        """
        return self._topic_guid

    @topic_guid.setter
    def topic_guid(self, topic_guid):
        """Sets the topic_guid of this CommentEvent.


        :param topic_guid: The topic_guid of this CommentEvent.  # noqa: E501
        :type: str
        """
        if topic_guid is None:
            raise ValueError("Invalid value for `topic_guid`, must not be `None`")  # noqa: E501

        self._topic_guid = topic_guid

    @property
    def date(self):
        """Gets the date of this CommentEvent.  # noqa: E501


        :return: The date of this CommentEvent.  # noqa: E501
        :rtype: datetime
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this CommentEvent.


        :param date: The date of this CommentEvent.  # noqa: E501
        :type: datetime
        """

        self._date = date

    @property
    def author(self):
        """Gets the author of this CommentEvent.  # noqa: E501


        :return: The author of this CommentEvent.  # noqa: E501
        :rtype: User
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this CommentEvent.


        :param author: The author of this CommentEvent.  # noqa: E501
        :type: User
        """
        if author is None:
            raise ValueError("Invalid value for `author`, must not be `None`")  # noqa: E501

        self._author = author

    @property
    def actions(self):
        """Gets the actions of this CommentEvent.  # noqa: E501


        :return: The actions of this CommentEvent.  # noqa: E501
        :rtype: list[EventAction]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this CommentEvent.


        :param actions: The actions of this CommentEvent.  # noqa: E501
        :type: list[EventAction]
        """
        if actions is None:
            raise ValueError("Invalid value for `actions`, must not be `None`")  # noqa: E501

        self._actions = actions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommentEvent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
