# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_scanapi')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_scanapi')
    _scanapi = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_scanapi', [dirname(__file__)])
        except ImportError:
            import _scanapi
            return _scanapi
        try:
            _mod = imp.load_module('_scanapi', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _scanapi = swig_import_helper()
    del swig_import_helper
else:
    import _scanapi
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def LoadImageByPath(img_page, page_index):
    return _scanapi.LoadImageByPath(img_page, page_index)
LoadImageByPath = _scanapi.LoadImageByPath

def CheckBlankImageAndPageNumber():
    return _scanapi.CheckBlankImageAndPageNumber()
CheckBlankImageAndPageNumber = _scanapi.CheckBlankImageAndPageNumber

def LoadCoordinateJSON(json_file):
    return _scanapi.LoadCoordinateJSON(json_file)
LoadCoordinateJSON = _scanapi.LoadCoordinateJSON

def LoadCoordinateJsonDocument(document):
    return _scanapi.LoadCoordinateJsonDocument(document)
LoadCoordinateJsonDocument = _scanapi.LoadCoordinateJsonDocument

def CheckCoordinate():
    return _scanapi.CheckCoordinate()
CheckCoordinate = _scanapi.CheckCoordinate

def SaveToJSON(file):
    return _scanapi.SaveToJSON(file)
SaveToJSON = _scanapi.SaveToJSON

def CroppedImage(pImg, roi, num, savedPaths):
    return _scanapi.CroppedImage(pImg, roi, num, savedPaths)
CroppedImage = _scanapi.CroppedImage

def ImageToMnist(pathToImageFolder, pathToSavedFolder):
    return _scanapi.ImageToMnist(pathToImageFolder, pathToSavedFolder)
ImageToMnist = _scanapi.ImageToMnist

def TransformImageToMnist(path, dst_path):
    return _scanapi.TransformImageToMnist(path, dst_path)
TransformImageToMnist = _scanapi.TransformImageToMnist

def LocateDigitPositions(pImg, roi, save_path, digitNum=0):
    return _scanapi.LocateDigitPositions(pImg, roi, save_path, digitNum)
LocateDigitPositions = _scanapi.LocateDigitPositions

def LoacteAndTransformDigit(pathToImageFolder, pathToSavedFolder):
    return _scanapi.LoacteAndTransformDigit(pathToImageFolder, pathToSavedFolder)
LoacteAndTransformDigit = _scanapi.LoacteAndTransformDigit

def CreateRecognizer():
    return _scanapi.CreateRecognizer()
CreateRecognizer = _scanapi.CreateRecognizer

def RotateImageClockwise(pRecognizer, src):
    return _scanapi.RotateImageClockwise(pRecognizer, src)
RotateImageClockwise = _scanapi.RotateImageClockwise

def ReduceRectArea_C(src, titleArea):
    return _scanapi.ReduceRectArea_C(src, titleArea)
ReduceRectArea_C = _scanapi.ReduceRectArea_C

def ReduceRectArea(src, titleArea):
    return _scanapi.ReduceRectArea(src, titleArea)
ReduceRectArea = _scanapi.ReduceRectArea

def ReadImage(imgPath):
    return _scanapi.ReadImage(imgPath)
ReadImage = _scanapi.ReadImage

def ReleaseImage(img):
    return _scanapi.ReleaseImage(img)
ReleaseImage = _scanapi.ReleaseImage

def SaveImage(img, imgPath):
    return _scanapi.SaveImage(img, imgPath)
SaveImage = _scanapi.SaveImage

def RotateImageArbitraryDegree(src, degree):
    return _scanapi.RotateImageArbitraryDegree(src, degree)
RotateImageArbitraryDegree = _scanapi.RotateImageArbitraryDegree

def GetSchoolNumberBlocks_C(image, roiArea, sampleWidth=0, sampleHeight=0):
    return _scanapi.GetSchoolNumberBlocks_C(image, roiArea, sampleWidth, sampleHeight)
GetSchoolNumberBlocks_C = _scanapi.GetSchoolNumberBlocks_C

def GetSchoolNumberBlocks(image, roiArea, sampleWidth=0, sampleHeight=0):
    return _scanapi.GetSchoolNumberBlocks(image, roiArea, sampleWidth, sampleHeight)
GetSchoolNumberBlocks = _scanapi.GetSchoolNumberBlocks

def GetObjectiveQuetionBlocks_C(image, roiArea, sampleWidth=0, sampleHeight=0):
    return _scanapi.GetObjectiveQuetionBlocks_C(image, roiArea, sampleWidth, sampleHeight)
GetObjectiveQuetionBlocks_C = _scanapi.GetObjectiveQuetionBlocks_C

def GetObjectiveQuetionBlocks(image, roiArea, sampleWidth=0, sampleHeight=0):
    return _scanapi.GetObjectiveQuetionBlocks(image, roiArea, sampleWidth, sampleHeight)
GetObjectiveQuetionBlocks = _scanapi.GetObjectiveQuetionBlocks

def GetOmrObjectiveInterface_C(ocrstring, blobstring, selectArea, sortOrient):
    return _scanapi.GetOmrObjectiveInterface_C(ocrstring, blobstring, selectArea, sortOrient)
GetOmrObjectiveInterface_C = _scanapi.GetOmrObjectiveInterface_C

def GetOmrObjectiveInterface(ocrstring, blobstring, selectArea, sortOrient):
    return _scanapi.GetOmrObjectiveInterface(ocrstring, blobstring, selectArea, sortOrient)
GetOmrObjectiveInterface = _scanapi.GetOmrObjectiveInterface

def GetOmrObjectiveInterfaceAtOnce(image, roiArea, sortOrient, sampleWidth=0, sampleHeight=0):
    return _scanapi.GetOmrObjectiveInterfaceAtOnce(image, roiArea, sortOrient, sampleWidth, sampleHeight)
GetOmrObjectiveInterfaceAtOnce = _scanapi.GetOmrObjectiveInterfaceAtOnce

def GetOmrObjectiveInterfaceAtOnce_C(image, roiArea, sortOrient, sampleWidth=0, sampleHeight=0):
    return _scanapi.GetOmrObjectiveInterfaceAtOnce_C(image, roiArea, sortOrient, sampleWidth, sampleHeight)
GetOmrObjectiveInterfaceAtOnce_C = _scanapi.GetOmrObjectiveInterfaceAtOnce_C

def GetSingleBlocks_C(image, roiArea):
    return _scanapi.GetSingleBlocks_C(image, roiArea)
GetSingleBlocks_C = _scanapi.GetSingleBlocks_C

def GetSingleBlocks(image, roiArea):
    return _scanapi.GetSingleBlocks(image, roiArea)
GetSingleBlocks = _scanapi.GetSingleBlocks

def GetTwoBlocks_C(image, roiArea):
    return _scanapi.GetTwoBlocks_C(image, roiArea)
GetTwoBlocks_C = _scanapi.GetTwoBlocks_C

def GetTwoBlocks(image, roiArea):
    return _scanapi.GetTwoBlocks(image, roiArea)
GetTwoBlocks = _scanapi.GetTwoBlocks

def GetOptionalQuetionBlocks_C(image, roiArea):
    return _scanapi.GetOptionalQuetionBlocks_C(image, roiArea)
GetOptionalQuetionBlocks_C = _scanapi.GetOptionalQuetionBlocks_C

def GetOptionalQuetionBlocks(image, roiArea):
    return _scanapi.GetOptionalQuetionBlocks(image, roiArea)
GetOptionalQuetionBlocks = _scanapi.GetOptionalQuetionBlocks

def GetOptionalQuetionBlocksBySize(image, roiArea, blockNum):
    return _scanapi.GetOptionalQuetionBlocksBySize(image, roiArea, blockNum)
GetOptionalQuetionBlocksBySize = _scanapi.GetOptionalQuetionBlocksBySize

def GetOptionalQuetionBlocksBySize_C(image, roiArea, blockNum):
    return _scanapi.GetOptionalQuetionBlocksBySize_C(image, roiArea, blockNum)
GetOptionalQuetionBlocksBySize_C = _scanapi.GetOptionalQuetionBlocksBySize_C

def RotateImageSmallDegree_C(src, degree, imgPath):
    return _scanapi.RotateImageSmallDegree_C(src, degree, imgPath)
RotateImageSmallDegree_C = _scanapi.RotateImageSmallDegree_C

def RotateImageSmallDegree(src, degree, imgPath):
    return _scanapi.RotateImageSmallDegree(src, degree, imgPath)
RotateImageSmallDegree = _scanapi.RotateImageSmallDegree

def rotateImage90Degree_C(src, degree, imgPath):
    return _scanapi.rotateImage90Degree_C(src, degree, imgPath)
rotateImage90Degree_C = _scanapi.rotateImage90Degree_C

def rotateImage90Degree(src, degree, imgPath):
    return _scanapi.rotateImage90Degree(src, degree, imgPath)
rotateImage90Degree = _scanapi.rotateImage90Degree

def checkImageBlank_C(src):
    return _scanapi.checkImageBlank_C(src)
checkImageBlank_C = _scanapi.checkImageBlank_C

def checkImageBlank(src):
    return _scanapi.checkImageBlank(src)
checkImageBlank = _scanapi.checkImageBlank

def checkImageBlankInRect(src, rect, rateThreadHold):
    return _scanapi.checkImageBlankInRect(src, rect, rateThreadHold)
checkImageBlankInRect = _scanapi.checkImageBlankInRect

def checkTitleAnchor_C(tpl, target, roiArea):
    return _scanapi.checkTitleAnchor_C(tpl, target, roiArea)
checkTitleAnchor_C = _scanapi.checkTitleAnchor_C

def checkTitleAnchor(tpl, target, roiArea):
    return _scanapi.checkTitleAnchor(tpl, target, roiArea)
checkTitleAnchor = _scanapi.checkTitleAnchor

def ReleaseCharArray(pArray):
    return _scanapi.ReleaseCharArray(pArray)
ReleaseCharArray = _scanapi.ReleaseCharArray

def ConvertRGBImageToBinImage(rgb, thresh):
    return _scanapi.ConvertRGBImageToBinImage(rgb, thresh)
ConvertRGBImageToBinImage = _scanapi.ConvertRGBImageToBinImage

def ConvertRGBToBinWithPath(imagePath, thresh):
    return _scanapi.ConvertRGBToBinWithPath(imagePath, thresh)
ConvertRGBToBinWithPath = _scanapi.ConvertRGBToBinWithPath

def ReplaceBlackBlock(img, optRects):
    return _scanapi.ReplaceBlackBlock(img, optRects)
ReplaceBlackBlock = _scanapi.ReplaceBlackBlock

def CalcBlackPxlPercentage(img, optRects, optNum):
    return _scanapi.CalcBlackPxlPercentage(img, optRects, optNum)
CalcBlackPxlPercentage = _scanapi.CalcBlackPxlPercentage

def IsMarkedImage(img, optRects):
    return _scanapi.IsMarkedImage(img, optRects)
IsMarkedImage = _scanapi.IsMarkedImage

def CreateScanner():
    return _scanapi.CreateScanner()
CreateScanner = _scanapi.CreateScanner

def ReleaseScanner(pScanner):
    return _scanapi.ReleaseScanner(pScanner)
ReleaseScanner = _scanapi.ReleaseScanner

def SetPageNum(pScanner, pageNum):
    return _scanapi.SetPageNum(pScanner, pageNum)
SetPageNum = _scanapi.SetPageNum

def SetPagePair(pScanner, pagePairs):
    return _scanapi.SetPagePair(pScanner, pagePairs)
SetPagePair = _scanapi.SetPagePair

def LoadTmplImage(pScanner, tmplImagePath, pageIndex):
    return _scanapi.LoadTmplImage(pScanner, tmplImagePath, pageIndex)
LoadTmplImage = _scanapi.LoadTmplImage

def loadAnchorImage(pScanner, imagePath, area, pageIndex):
    return _scanapi.loadAnchorImage(pScanner, imagePath, area, pageIndex)
loadAnchorImage = _scanapi.loadAnchorImage

def SetTitleArea(pScanner, area, pageIndex):
    return _scanapi.SetTitleArea(pScanner, area, pageIndex)
SetTitleArea = _scanapi.SetTitleArea

def LoadSourceImageByPath(pScanner, srcImagePath, pageIndex):
    return _scanapi.LoadSourceImageByPath(pScanner, srcImagePath, pageIndex)
LoadSourceImageByPath = _scanapi.LoadSourceImageByPath

def LoadSourceImage(pScanner, srcImage, pageIndex):
    return _scanapi.LoadSourceImage(pScanner, srcImage, pageIndex)
LoadSourceImage = _scanapi.LoadSourceImage

def LoadSrcImageAndUpdate(pScanner, srcImage, savePath, index, degreeRotated):
    return _scanapi.LoadSrcImageAndUpdate(pScanner, srcImage, savePath, index, degreeRotated)
LoadSrcImageAndUpdate = _scanapi.LoadSrcImageAndUpdate

def ReadyToScan(pScanner):
    return _scanapi.ReadyToScan(pScanner)
ReadyToScan = _scanapi.ReadyToScan

def MatchTitle(pScanner):
    return _scanapi.MatchTitle(pScanner)
MatchTitle = _scanapi.MatchTitle

def PreprocessStudentImagesForCommonAnswerSheet(pScanner, pageMap):
    return _scanapi.PreprocessStudentImagesForCommonAnswerSheet(pScanner, pageMap)
PreprocessStudentImagesForCommonAnswerSheet = _scanapi.PreprocessStudentImagesForCommonAnswerSheet

def PreprocessStudentImagesForOnlineAnswerSheet(pScanner, pageMap):
    return _scanapi.PreprocessStudentImagesForOnlineAnswerSheet(pScanner, pageMap)
PreprocessStudentImagesForOnlineAnswerSheet = _scanapi.PreprocessStudentImagesForOnlineAnswerSheet

def GetAdjustedImage(pScanner, pageIndex):
    return _scanapi.GetAdjustedImage(pScanner, pageIndex)
GetAdjustedImage = _scanapi.GetAdjustedImage

def PrepareToLoadNext(pScanner):
    return _scanapi.PrepareToLoadNext(pScanner)
PrepareToLoadNext = _scanapi.PrepareToLoadNext

def Recognize(pScanner, optRects, pageIndex):
    return _scanapi.Recognize(pScanner, optRects, pageIndex)
Recognize = _scanapi.Recognize

def RecognizeOffsetObjectives(pScanner, optRects, newOptRects, pageIndex):
    return _scanapi.RecognizeOffsetObjectives(pScanner, optRects, newOptRects, pageIndex)
RecognizeOffsetObjectives = _scanapi.RecognizeOffsetObjectives

def RecognizeStudentID(pScanner, optRects, pageIndex):
    return _scanapi.RecognizeStudentID(pScanner, optRects, pageIndex)
RecognizeStudentID = _scanapi.RecognizeStudentID

def RecognizeSingleRect(pScanner, rects, pageIndex):
    return _scanapi.RecognizeSingleRect(pScanner, rects, pageIndex)
RecognizeSingleRect = _scanapi.RecognizeSingleRect

def RecognizeMarkedOptionTryHard(pScanner, rects, pageIndex, doubtThreshold, convinceThreshold, chooseOnlyOneOption=False):
    return _scanapi.RecognizeMarkedOptionTryHard(pScanner, rects, pageIndex, doubtThreshold, convinceThreshold, chooseOnlyOneOption)
RecognizeMarkedOptionTryHard = _scanapi.RecognizeMarkedOptionTryHard

def RecognizeEightCode(pScanner, arg2, pageIndex):
    return _scanapi.RecognizeEightCode(pScanner, arg2, pageIndex)
RecognizeEightCode = _scanapi.RecognizeEightCode

def SetConvincedThreshold(pScanner, t=0.25):
    return _scanapi.SetConvincedThreshold(pScanner, t)
SetConvincedThreshold = _scanapi.SetConvincedThreshold

def SetDoubtfulThreshold(pScanner, t=0.24):
    return _scanapi.SetDoubtfulThreshold(pScanner, t)
SetDoubtfulThreshold = _scanapi.SetDoubtfulThreshold

def GetAdjustedOptionRects(pScanner):
    return _scanapi.GetAdjustedOptionRects(pScanner)
GetAdjustedOptionRects = _scanapi.GetAdjustedOptionRects

def RecognizeBarcode_C(barcodeImage):
    return _scanapi.RecognizeBarcode_C(barcodeImage)
RecognizeBarcode_C = _scanapi.RecognizeBarcode_C

def RecognizeBarcodeByROI_C(src, rect):
    return _scanapi.RecognizeBarcodeByROI_C(src, rect)
RecognizeBarcodeByROI_C = _scanapi.RecognizeBarcodeByROI_C

def RecognizeBarcode2DByROI_C(src, rect):
    return _scanapi.RecognizeBarcode2DByROI_C(src, rect)
RecognizeBarcode2DByROI_C = _scanapi.RecognizeBarcode2DByROI_C

def RecognizeBarcodeByPath(filename, rect):
    return _scanapi.RecognizeBarcodeByPath(filename, rect)
RecognizeBarcodeByPath = _scanapi.RecognizeBarcodeByPath

def RecognizeBarcode2DByPath(filename, rect):
    return _scanapi.RecognizeBarcode2DByPath(filename, rect)
RecognizeBarcode2DByPath = _scanapi.RecognizeBarcode2DByPath

def RecognizeBarcode2D(barcodeImage):
    return _scanapi.RecognizeBarcode2D(barcodeImage)
RecognizeBarcode2D = _scanapi.RecognizeBarcode2D

def RecognizeBarcode(barcodeImage):
    return _scanapi.RecognizeBarcode(barcodeImage)
RecognizeBarcode = _scanapi.RecognizeBarcode

def RecognizeBarcodeByROI(src, rect):
    return _scanapi.RecognizeBarcodeByROI(src, rect)
RecognizeBarcodeByROI = _scanapi.RecognizeBarcodeByROI

def LoadTemplateJSON(pScanner, json_file):
    return _scanapi.LoadTemplateJSON(pScanner, json_file)
LoadTemplateJSON = _scanapi.LoadTemplateJSON

def LoadTemplateJsonDocument(pScanner, document):
    return _scanapi.LoadTemplateJsonDocument(pScanner, document)
LoadTemplateJsonDocument = _scanapi.LoadTemplateJsonDocument

def RecognizeWithJSON(pScanner):
    return _scanapi.RecognizeWithJSON(pScanner)
RecognizeWithJSON = _scanapi.RecognizeWithJSON

def RecognizeWithJSONAndNoMatchTitle(pScanner):
    return _scanapi.RecognizeWithJSONAndNoMatchTitle(pScanner)
RecognizeWithJSONAndNoMatchTitle = _scanapi.RecognizeWithJSONAndNoMatchTitle

def RecognizeSubjectiveQuestionsWithJSON(pScanner):
    return _scanapi.RecognizeSubjectiveQuestionsWithJSON(pScanner)
RecognizeSubjectiveQuestionsWithJSON = _scanapi.RecognizeSubjectiveQuestionsWithJSON

def GetRecognizeResultJSON(pScanner):
    return _scanapi.GetRecognizeResultJSON(pScanner)
GetRecognizeResultJSON = _scanapi.GetRecognizeResultJSON

def TEST_GetObjectiveQuestionsAnswer(pScanner):
    return _scanapi.TEST_GetObjectiveQuestionsAnswer(pScanner)
TEST_GetObjectiveQuestionsAnswer = _scanapi.TEST_GetObjectiveQuestionsAnswer

def Visualization(pScanner, imagepath):
    return _scanapi.Visualization(pScanner, imagepath)
Visualization = _scanapi.Visualization

def RotateImageByFourAnchors(pScanner, image, fourAnchors):
    return _scanapi.RotateImageByFourAnchors(pScanner, image, fourAnchors)
RotateImageByFourAnchors = _scanapi.RotateImageByFourAnchors

def SaveScoreBarImage(pScanner, tihaoStr, savePath):
    return _scanapi.SaveScoreBarImage(pScanner, tihaoStr, savePath)
SaveScoreBarImage = _scanapi.SaveScoreBarImage

def SetMatchType(pScanner, type):
    return _scanapi.SetMatchType(pScanner, type)
SetMatchType = _scanapi.SetMatchType

def SetMatchRate(pScanner, rate):
    return _scanapi.SetMatchRate(pScanner, rate)
SetMatchRate = _scanapi.SetMatchRate

def SaveDigitCoordToJsonFile(pScanner, jsonpath):
    return _scanapi.SaveDigitCoordToJsonFile(pScanner, jsonpath)
SaveDigitCoordToJsonFile = _scanapi.SaveDigitCoordToJsonFile

def ValidateOmrObjectiveResult_C(image, datajson):
    return _scanapi.ValidateOmrObjectiveResult_C(image, datajson)
ValidateOmrObjectiveResult_C = _scanapi.ValidateOmrObjectiveResult_C

def ValidateOmrObjectiveResult(image, datajson):
    return _scanapi.ValidateOmrObjectiveResult(image, datajson)
ValidateOmrObjectiveResult = _scanapi.ValidateOmrObjectiveResult

def AutoSkewCorrection(pScanner, src, rotateImg):
    return _scanapi.AutoSkewCorrection(pScanner, src, rotateImg)
AutoSkewCorrection = _scanapi.AutoSkewCorrection

def AutoSkewCorrectionInPath(pScanner, path):
    return _scanapi.AutoSkewCorrectionInPath(pScanner, path)
AutoSkewCorrectionInPath = _scanapi.AutoSkewCorrectionInPath

def new_intP():
    return _scanapi.new_intP()
new_intP = _scanapi.new_intP

def copy_intP(value):
    return _scanapi.copy_intP(value)
copy_intP = _scanapi.copy_intP

def delete_intP(obj):
    return _scanapi.delete_intP(obj)
delete_intP = _scanapi.delete_intP

def intP_assign(obj, value):
    return _scanapi.intP_assign(obj, value)
intP_assign = _scanapi.intP_assign

def intP_value(obj):
    return _scanapi.intP_value(obj)
intP_value = _scanapi.intP_value

def new_stringP():
    return _scanapi.new_stringP()
new_stringP = _scanapi.new_stringP

def copy_stringP(value):
    return _scanapi.copy_stringP(value)
copy_stringP = _scanapi.copy_stringP

def delete_stringP(obj):
    return _scanapi.delete_stringP(obj)
delete_stringP = _scanapi.delete_stringP

def stringP_assign(obj, value):
    return _scanapi.stringP_assign(obj, value)
stringP_assign = _scanapi.stringP_assign

def stringP_value(obj):
    return _scanapi.stringP_value(obj)
stringP_value = _scanapi.stringP_value
# This file is compatible with both classic and new-style classes.


