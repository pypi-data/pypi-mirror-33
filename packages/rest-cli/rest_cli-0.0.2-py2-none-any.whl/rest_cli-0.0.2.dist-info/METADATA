Metadata-Version: 2.1
Name: rest-cli
Version: 0.0.2
Summary: A perfect tool for creating Restful web service in PHP
Home-page: https://github.com/loint/rest-cli
Author: Loi Nguyen
Author-email: loinguyentrung@gmail.com
License: UNKNOWN
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 2
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Description-Content-Type: text/markdown
Requires-Dist: pytest
Requires-Dist: click
Requires-Dist: mysql-connector-python

# Rest CLI (technical preview)
[![Build Status](https://travis-ci.org/loint/rest-cli.svg?branch=master)](https://travis-ci.org/loint/rest-cli) [![PyPI version](https://badge.fury.io/py/rest-cli.svg)](https://badge.fury.io/py/rest-cli) [![Documentation](https://img.shields.io/badge/documentation-rest-ff69b4.svg)](https://loint.github.io/rest-cli/index.md)

If you love ?
- Beautiful restful web service with standard architecture
- The fastest way to get things done with less human manipulation
- Easy way to initialize hundred units in minutes
- Well tested structure with maintainable like Java with the flexible from PHP

Then this powerful tool is the right choice for you.

### Prerequisite
- Docker
- Python 2.7 with pip
- PHP 7.2 with composer

### Installation
```
$ pip install rest-cli
```

### Road map
- [x] Create web service base on a lightweight skeleton
- [x] Database schema migration
- [x] Reverse schema to model - repository - service and dependency injectors
- [x] Support built-in query annotations
- [x] Compile api routes and generate controller with integration tests
- [x] Serve and test application
- [ ] Generate swagger documentation base on api routes
- [ ] Export micro-service interfaces for inter-communication in SOA
- [ ] Support RPC exception via response verification

### Usages
1. Create web service application
- --quite : Quite mode without asking anything about configuration
- --force : Force creating application without complaining about existing project
- --mysql : Start a mysql container with default information
```
$ rest create <awesome-service>
```
2. Change directory to service and write some migrations at `src/Shared/Migration`
```
$ rest migrate
```
3. Synchronize model - repository - service - controller - test cases
- To create some awesome apis, modify your routes at `config/api`
```
$ rest sync
```
4. View route list
- To see which routes are configured and manage apis
```
$ rest route
```
5. Serve your application to test in browser
```
$ rest serve
```
6. Test your application with PHPUnit
```
$ rest test
```
7. Check current version
```
$ rest version
```
8. Update new version of rest-cli ?
```
$ rest upgrade
```
9. Need more help ?
```
$ rest --help
```

