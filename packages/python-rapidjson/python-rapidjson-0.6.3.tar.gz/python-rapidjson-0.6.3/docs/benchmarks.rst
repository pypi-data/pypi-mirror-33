.. -*- coding: utf-8 -*-
.. :Project:   python-rapidjson -- Benchmark tables
.. :Author:    Lele Gaifax <lele@metapensiero.it>
.. :License:   MIT License
.. :Copyright: © 2016, 2017, 2018 Lele Gaifax
..

=============
 Performance
=============

``python-rapidjson`` tries to be as performant as possible while staying compatible with
the ``json`` module.

The following tables show a comparison between this module and other libraries with
different data sets.  Last row (“overall”) is the total time taken by all the benchmarks.

Each number shows the factor between the time taken by each contender and
``python-rapidjson`` (in other words, they are *normalized* against a value of 1.0 for
``python-rapidjson``): the lower the number, the speedier the contender.

In **bold** the winner.


Serialization
~~~~~~~~~~~~~

+-----------------------+----------------------+----------------------+----------------------+----------------------+----------------------+----------------------+----------------------+----------------------+
|       serialize       |  ``dumps()``\ [1]_   | ``Encoder()``\ [2]_  |  ``dumps(n)``\ [3]_  | ``Encoder(n)``\ [4]_ |     ujson\ [5]_      |   simplejson\ [6]_   |     stdlib\ [7]_     |      yajl\ [8]_      |
+=======================+======================+======================+======================+======================+======================+======================+======================+======================+
|    100 arrays dict    |         1.00         |         1.00         |       **0.71**       |         0.71         |         0.86         |         3.47         |         2.09         |         1.25         |
+-----------------------+----------------------+----------------------+----------------------+----------------------+----------------------+----------------------+----------------------+----------------------+
|    100 dicts array    |         1.00         |         1.03         |         0.80         |       **0.75**       |         0.83         |         4.73         |         2.14         |         1.19         |
+-----------------------+----------------------+----------------------+----------------------+----------------------+----------------------+----------------------+----------------------+----------------------+
|    256 Trues array    |       **1.00**       |         1.09         |         1.18         |         1.07         |         1.37         |         2.88         |         2.44         |         1.29         |
+-----------------------+----------------------+----------------------+----------------------+----------------------+----------------------+----------------------+----------------------+----------------------+
|    256 ascii array    |         1.00         |         1.00         |         1.01         |         1.00         |       **0.48**       |         1.08         |         1.03         |         0.85         |
+-----------------------+----------------------+----------------------+----------------------+----------------------+----------------------+----------------------+----------------------+----------------------+
|   256 doubles array   |         1.00         |         1.00         |         1.01         |         1.00         |         1.22         |         1.12         |         0.98         |       **0.71**       |
+-----------------------+----------------------+----------------------+----------------------+----------------------+----------------------+----------------------+----------------------+----------------------+
|   256 unicode array   |         1.00         |         0.86         |         0.86         |         0.86         |         0.54         |         0.71         |         0.88         |       **0.51**       |
+-----------------------+----------------------+----------------------+----------------------+----------------------+----------------------+----------------------+----------------------+----------------------+
|    complex object     |         1.00         |         1.00         |         0.92         |         0.91         |       **0.65**       |         2.19         |         1.56         |         1.28         |
+-----------------------+----------------------+----------------------+----------------------+----------------------+----------------------+----------------------+----------------------+----------------------+
|   composite object    |         1.00         |         1.02         |         0.73         |       **0.70**       |         0.83         |         2.50         |         1.66         |         1.72         |
+-----------------------+----------------------+----------------------+----------------------+----------------------+----------------------+----------------------+----------------------+----------------------+
|        overall        |         1.00         |         1.00         |       **0.71**       |         0.71         |         0.86         |         3.46         |         2.09         |         1.25         |
+-----------------------+----------------------+----------------------+----------------------+----------------------+----------------------+----------------------+----------------------+----------------------+


Deserialization
~~~~~~~~~~~~~~~

+-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+
|      deserialize      |   ``loads()``\ [9]_   | ``Decoder()``\ [10]_  |  ``loads(n)``\ [11]_  | ``Decoder(n)``\ [12]_ |         ujson         |      simplejson       |        stdlib         |         yajl          |
+=======================+=======================+=======================+=======================+=======================+=======================+=======================+=======================+=======================+
|    100 arrays dict    |         1.00          |         1.00          |       **0.91**        |         0.92          |         0.94          |         1.40          |         1.04          |         1.13          |
+-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+
|    100 dicts array    |         1.00          |         1.05          |       **0.88**        |         0.89          |         0.88          |         1.79          |         1.31          |         1.19          |
+-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+
|    256 Trues array    |       **1.00**        |         1.20          |         1.17          |         1.23          |         1.14          |         1.98          |         1.55          |         1.94          |
+-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+
|    256 ascii array    |       **1.00**        |         1.03          |         1.02          |         1.03          |         1.03          |         1.00          |         1.10          |         1.09          |
+-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+
|   256 doubles array   |         1.00          |         1.02          |       **0.23**        |         0.23          |         0.56          |         1.11          |         1.08          |         0.48          |
+-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+
|   256 unicode array   |       **1.00**        |         1.00          |         1.02          |         1.02          |         1.02          |         4.51          |         4.72          |         2.46          |
+-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+
|    complex object     |         1.00          |         1.02          |         0.86          |       **0.85**        |         1.05          |         1.44          |         1.21          |         1.27          |
+-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+
|   composite object    |         1.00          |         1.03          |         0.80          |         0.82          |       **0.78**        |         1.92          |         1.29          |         1.22          |
+-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+
|        overall        |         1.00          |         1.00          |       **0.91**        |         0.92          |         0.94          |         1.40          |         1.05          |         1.13          |
+-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+


ASCII vs UTF-8 Serialization
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

+-------------------------+-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+
|        serialize        |  ``rj ascii``\ [13]_  |  ``rj utf8``\ [14]_   |  ``uj ascii``\ [15]_  |  ``uj utf8``\ [16]_   |  ``sj ascii``\ [17]_  |  ``sj utf8``\ [18]_   | ``json ascii``\ [19]_ | ``json utf8``\ [20]_  |
+=========================+=======================+=======================+=======================+=======================+=======================+=======================+=======================+=======================+
|    Long ASCII string    |         1.00          |         0.48          |       **0.23**        |         0.49          |         0.66          |         1.32          |         0.60          |         1.13          |
+-------------------------+-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+
|   Long Unicode string   |         1.00          |         0.62          |         0.64          |         0.63          |         0.80          |         0.62          |         0.98          |       **0.55**        |
+-------------------------+-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+
|         overall         |         1.00          |         0.57          |       **0.51**        |         0.58          |         0.76          |         0.84          |         0.86          |         0.74          |
+-------------------------+-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+

.. [1] ``rapidjson.dumps()``
.. [2] ``rapidjson.Encoder()``
.. [3] ``rapidjson.dumps(number_mode=NM_NATIVE)``
.. [4] ``rapidjson.Encoder(number_mode=NM_NATIVE)``
.. [5] `ujson 1.35 <https://pypi.org/pypi/ujson/1.35>`__
.. [6] `simplejson 3.13.2 <https://pypi.org/pypi/simplejson/3.13.2>`__
.. [7] Python 3.6.5 standard library ``json``
.. [8] `yajl 0.3.5 <https://pypi.org/pypi/yajl/0.3.5>`__
.. [9] ``rapidjson.loads()``
.. [10] ``rapidjson.Decoder()``
.. [11] ``rapidjson.loads(number_mode=NM_NATIVE)``
.. [12] ``rapidjson.Decoder(number_mode=NM_NATIVE)``
.. [13] ``rapidjson.dumps(ensure_ascii=True)``
.. [14] ``rapidjson.dumps(ensure_ascii=False)``
.. [15] ``ujson.dumps(ensure_ascii=True)``
.. [16] ``ujson.dumps(ensure_ascii=False)``
.. [17] ``simplejson.dumps(ensure_ascii=True)``
.. [18] ``simplejson.dumps(ensure_ascii=False)``
.. [19] ``stdlib json.dumps(ensure_ascii=True)``
.. [20] ``stdlib json.dumps(ensure_ascii=False)``


DIY
---

To run these tests yourself, clone the repo and run:

.. code-block:: bash

   $ tox -e py36 -- -m benchmark --compare-other-engines

Without the option ``--compare-other-engines`` it will focus only on ``RapidJSON``.  This
is particularly handy coupled with the `compare past runs`__ functionality of
``pytest-benchmark``:

.. code-block:: bash

   $ tox -e py36 -- -m benchmark --benchmark-autosave
   # hack, hack, hack!
   $ tox -e py36 -- -m benchmark --benchmark-compare=0001

   ----------------------- benchmark 'deserialize': 18 tests ------------------------
   Name (time in us)                                                            Min…
   ----------------------------------------------------------------------------------
   test_loads[rapidjson-256 Trues array] (NOW)                         5.2320 (1.0)…
   test_loads[rapidjson-256 Trues array] (0001)                        5.4180 (1.04)…
   …

To reproduce the tables above, use the option ``--benchmark-json`` so that the the results
are written in the specified filename the run the ``benchmark-tables.py`` script giving
that filename as the only argument:

.. code-block:: bash

   $ tox -e py36 -- -m benchmark --compare-other-engines --benchmark-json=comparison.json
   $ python3 benchmark-tables.py comparison.json


__ http://pytest-benchmark.readthedocs.org/en/latest/comparing.html
