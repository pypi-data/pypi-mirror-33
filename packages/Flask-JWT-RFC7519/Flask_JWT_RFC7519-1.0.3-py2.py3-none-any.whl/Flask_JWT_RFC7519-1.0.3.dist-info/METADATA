Metadata-Version: 2.1
Name: Flask-JWT-RFC7519
Version: 1.0.3
Summary: FLASK JWT implementing the RFC7519 proposed standard
Home-page: UNKNOWN
Author: Magnus Hartvig Groenbech
Author-email: groenbech96@gmail.com
License: MIT
Keywords: flask,jwt,json web token
Platform: any
Classifier: Development Status :: 5 - Production/Stable
Classifier: Environment :: Web Environment
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.4
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
Classifier: Topic :: Internet :: WWW/HTTP :: Dynamic Content
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Description-Content-Type: text/markdown
Requires-Dist: Werkzeug (>=0.14)
Requires-Dist: Flask
Requires-Dist: PyJWT (>=1.6.0)
Requires-Dist: cryptography

# Flask-JWT-RFC7519
[![Build Status](https://travis-ci.com/Groenbech96/flask-jwt-rfc7519.svg?token=DE2K5YMdyk9RyqU7uyEo&branch=master)](https://travis-ci.com/Groenbech96/flask-jwt-rfc7519)

### This Repository is built on [flask-jwt-extended](https://github.com/vimalloc/flask-jwt-extended). All credit for the framework goes to the owner of the flask-jwt-extended repository.

This implementation changes the jwt payload to follow the proposed standard of RFC7519. This includes sub, aud and iss claims.

Differences between [flask-jwt-extended](https://github.com/vimalloc/flask-jwt-extended) and this repo:

Added two config options. You can specify what who the ISS is and who the AUD is.

```current_app.config['JWT_ISS_CLAIM'] (string)``` 
```current_app.config['JWT_AUD_CLAIM'] (list of strings)```

The SUB is handled by the `current_app.config['JWT_SUB_CLAIM']` already in the flask-jwt-extended

To verify the AUD and/or ISS claim use respectively:

```@jwt.aud_claim_verification_loader```
```@jwt.iss_claim_verification_loader```

They will provide the value from key-value pair in the config dict. 
To handle incorrect aud or iss use the 

```@jwt.aud_claim_verification_failed_loader```
```@jwt.iss_claim_verification_failed_loader```

The user_claims_loader is removed and replaced with additional_claims_loader.



