Metadata-Version: 2.1
Name: naz
Version: 0.0.0.1
Summary: Naz is an SMPP client.
Home-page: https://github.com/komuw/naz
Author: komuW
Author-email: komuw05@gmail.com
License: MIT
Keywords: naz,smpp
Platform: UNKNOWN
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Topic :: Software Development :: Build Tools
Classifier: Topic :: Internet :: WWW/HTTP
Classifier: Topic :: Security
Classifier: Topic :: System :: Installation/Setup
Classifier: Topic :: System :: Networking
Classifier: Topic :: System :: Systems Administration
Classifier: Topic :: Utilities
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3.6
Provides-Extra: dev
Provides-Extra: test
Requires-Dist: uvloop (==0.10.1)
Provides-Extra: dev
Requires-Dist: coverage; extra == 'dev'
Requires-Dist: pypandoc; extra == 'dev'
Requires-Dist: twine; extra == 'dev'
Requires-Dist: wheel; extra == 'dev'
Provides-Extra: test
Requires-Dist: flake8 (==3.5.0); extra == 'test'
Requires-Dist: mock; extra == 'test'
Requires-Dist: pylint (==1.8.2); extra == 'test'
Requires-Dist: pycodestyle (==2.3.1); extra == 'test'

naz
---

`Codacy
Badge <https://www.codacy.com/app/komuw/naz?utm_source=github.com&utm_medium=referral&utm_content=komuw/naz&utm_campaign=Badge_Grade>`__
`CircleCI <https://circleci.com/gh/komuw/naz>`__
`codecov <https://codecov.io/gh/komuw/naz>`__

| naz is an SMPP client.
| It’s name is derived from Kenyan hip hop artiste, Nazizi.

   SMPP is a protocol designed for the transfer of short message data
   between External Short Messaging Entities(ESMEs), Routing
   Entities(REs) and Short Message Service Center(SMSC). -
   https://en.wikipedia.org/wiki/Short_Message_Peer-to-Peer

naz currently only supports the SMPP version 3.4.

| naz is in active development and it’s API may change in backward
  incompatible ways.
| https://pypi.python.org/pypi/naz

Installation
------------

.. code:: shell

   pip install naz

Usage
-----

.. code:: python

   import naz

CLI
---

| naz also ships with a commandline interface(called ``naz``.
| run:

.. code:: shell

   naz ....

To see help:

.. code:: shell

   naz --help                 

## Features
-----------

-  
-  Well written(if I have to say so myself):

   -  `Good test coverage <https://codecov.io/gh/komuw/naz>`__
   -  `Passing continous
      integration <https://circleci.com/gh/komuw/naz>`__
   -  `High grade statically analyzed
      code <https://www.codacy.com/app/komuw/naz/dashboard>`__

Development setup
-----------------

-  fork this repo.
-  you need to have python3 installed, this project is python3 only.
-  cd naz
-  sudo apt-get install pandoc
-  open an issue on this repo. In your issue, outline what it is you
   want to add and why.
-  install pre-requiste software:

.. code:: shell

   apt-get -y install pandoc && pip install -e .[dev,test]

-  make the changes you want on your fork.
-  your changes should have backward compatibility in mind unless it is
   impossible to do so.
-  add your name and contact(optional) to CONTRIBUTORS.md
-  add tests
-  format your code using
   `autopep8 <https://pypi.python.org/pypi/autopep8>`__:

.. code:: shell

   autopep8 --experimental --in-place -r -aaaaaaaaaaa .

-  run `flake8 <https://pypi.python.org/pypi/flake8>`__ on the code and
   fix any issues:

.. code:: shell

   flake8 .

-  run `pylint <https://pypi.python.org/pypi/pylint>`__ on the code and
   fix any issues:

.. code:: shell

   pylint --enable=E --disable=W,R,C naz/

-  run tests and make sure everything is passing:

.. code:: shell

   make test

-  open a pull request on this repo.
   NB: I make no commitment of accepting your pull requests.

## TODO
-------


