== Dragon/CoCO emulator written in Python

DragonPy is a Open source (GPL v3 or later) emulator for the 30 years old homecomputer {{{Dragon 32}}} and {{{Tandy TRS-80 Color Computer}}} (CoCo)...

The [[https://github.com/6809/MC6809|MC6809]] project is used to emulate the 6809 CPU.

| {{https://travis-ci.org/jedie/DragonPy.svg?branch=master|Build Status on travis-ci.org}} | [[https://travis-ci.org/jedie/DragonPy/|travis-ci.org/jedie/DragonPy]] |
| {{https://coveralls.io/repos/jedie/DragonPy/badge.svg|Coverage Status on coveralls.io}} | [[https://coveralls.io/r/jedie/DragonPy|coveralls.io/r/jedie/DragonPy]] |
| {{https://requires.io/github/jedie/DragonPy/requirements.svg?branch=master|Requirements Status on requires.io}} | [[https://requires.io/github/jedie/DragonPy/requirements/|requires.io/github/jedie/DragonPy/requirements/]] |


Dragon 32 with CPython 3 under Linux:

{{https://raw.githubusercontent.com/jedie/jedie.github.io/master/screenshots/DragonPy/20150820_DragonPy_Dragon32_CPython3_Linux_01.png|screenshot Dragon 32}}


Tandy TRS-80 Color Computer 2b with CPython 2 under Windows:

{{https://raw.githubusercontent.com/jedie/jedie.github.io/master/screenshots/DragonPy/20150820_DragonPy_CoCo2b_CPython2_Win_01.png|screenshot CoCo under Windows}}


DragonPy is written in Python.
It's platform independent and runs with Python and PyPy under Linux/Windows/OSX/...
It's tested with Python 2.7.x and 3.4, PyPy2 and PyPy3.

DragonPy will not be a second XRoar written in Python.
This project is primarily to lean and understand.

Future goals are:
* Implement a integrated development environment for BASIC programs

A full featured Dragon / CoCo emulator is [[http://www.6809.org.uk/dragon/xroar.shtml|XRoar]].

=== Current state
The Dragon 32 / 64 and CoCo ROMs works in Text mode.
Also the "single board computer" ROMs sbc09, Simple6809 and Multicomp6809 works well.

There is a rudimentary BASIC editor with save/load BASIC programm listings direct into RAM.

Looks like this:

{{https://raw.githubusercontent.com/jedie/jedie.github.io/master/screenshots/DragonPy/20140820_DragonPy_BASIC_Editor_01.png|old screenshot BASIC Editor}}
(older version of the editor)

==== Vectrex

The [[https://en.wikipedia.org/wiki/Vectrex|Vectrex (Wikipedia)]] is a vector display-based video game console.
The Hardware are //only// the 6809 CPU, a 6522 Versatile Interface Adapter and the AY-3-8912 sound chip.

Current state is completely not usable. The 6522 is only a dummy implementation.
It makes only sense to display some trace lines, e.g.:
{{{
(DragonPy_env)~/DragonPy_env$ bin/python src/dragonpy/DragonPy_CLI.py --verbosity 5 --machine=Vectrex run --trace --max_ops 1
}}}


=== BASIC Editor

Use "BASIC editor / open" in the main menu to open the editor.

You can load/save ASCII .bas files from you local drive or just type a BASIC listing ;)
With "inject into DragonPy" you send the current listing from the Editor to the Emulator and with "load from DragonPy" back from emulator to editor.
Note: The is currently no "warning" that un-saved content will be "overwritten" and there is no "auto-backup" ;)

The "renumbering" tool can be found in the editor window under "tools"

You can also run the BASIC Editor without the Emulator:

{{{
(DragonPy_env)~/DragonPy_env$ bin/python src/dragonpy/DragonPy_CLI.py editor
}}}

A rudimentary BASIC source code highlighting is available and looks like this:

{{https://raw.githubusercontent.com/jedie/jedie.github.io/master/screenshots/DragonPy/20140826_DragonPy_BASIC_Editor_01.png|screenshot BASIC Editor}}

Special feature: The Line number that are used in GOTO, SOGUB etc. are extra marked on the left side.


== installation

IMPORTANT: The **PyPi package** name is **DragonPyEmulator** and [[https://github.com/jpanganiban/dragonpy/issues/3|not only "DragonPy"]]!!!

=== by foot

e.g.:
{{{
# Create virtualenv:
.../$ python3 -Im venv DragonPy

# activate created virtualenv:
.../$ cd DragonPy
.../DragonPy$ source bin/activate

# update pip before install:
(DragonPy) .../DragonPy$ pip install -U pip
...

# Install DragonPy:
(DragonPy) .../DragonPy$ pip install DragonPyEmulator
Collecting DragonPyEmulator
...
Installing collected packages: click, six, dragonlib, pygments, MC6809, DragonPyEmulator
Successfully installed DragonPyEmulator-0.5.3 MC6809-0.5.0 click-6.7 dragonlib-0.1.7 pygments-2.2.0 six-1.11.0

# start Emulator
(DragonPy) .../DragonPy$ DragonPy
}}}

=== Linux

The is a virtualenv bootstrap file, created with [[https://github.com/jedie/bootstrap_env|bootstrap_env]], for easy installation.

Get the bootstrap file:
{{{
/home/FooBar$ wget https://raw.githubusercontent.com/jedie/DragonPy/master/boot_dragonpy.py
}}}


There are tree types of installation:
|=option           |= desciption
| **pypi**         | use [[http://www.python.org/pypi/|Python Package Index]] (for all normal user!)
| **git_readonly** | use {{{git}}} to get the sourcecode (for developer without write access)
| **dev**          | use {{{git}}} with write access

e.g.:
{{{
/home/FooBar$ python3 boot_dragonpy.py ~/DragonPy_env --install_type git_readonly
}}}
This creates a virtualenv in **{{{~/DragonPy_env}}}** and used {{{git}}} to checkout the needed repositories.

In this case (using --install_type=**git_readonly**) the git repository are in: **.../DragonPy_env/src/**
So you can easy update them e.g.:
{{{
/home/FooBar$ cd ~/DragonPy_env/src/dragonpy
/home/FooBar/DragonPy_env/src/dragonpy$ git pull
}}}

==== start DragonPy

The is a simple "starter GUI", just call the cli without arguments:

{{{~/DragonPy_env/bin/DragonPy}}}

Or call it in a activated environment, e.g.:
{{{
/home/FooBar$ cd DragonPy_env
/home/FooBar/DragonPy_env$ source bin/activate
(DragonPy_env)~/DragonPy_env$ DragonPy
}}}

It is possible to start machines directly:
{{{
(DragonPy_env)~/DragonPy_env$ DragonPy --machine=Dragon32 run
}}}

more info:
{{{
(DragonPy_env)~/DragonPy_env$ DragonPy --help
}}}


=== Windows

There are several ways to install the project under windows.

The following is hopeful the easiest one:

* Install Python 3, e.g.: https://www.python.org/downloads/
* Download the {{{DragonPy}}} git snapshot from Github: [[https://github.com/jedie/DragonPy/archive/master.zip|master.zip]]
* Extract the Archive somewhere
* Maybe, adjust paths in {{{boot_dragonpy.cmd}}}
* Run {{{boot_dragonpy.cmd}}}

The default {{{boot_dragonpy.cmd}}} will install via {{{Python Package Index}}} (PyPi) into {{{%APPDATA%\DragonPy_env}}}

==== start DragonPy

The is a simple "starter GUI", just call the cli without arguments:

{{{%APPDATA%\DragonPy_env\Scripts\DragonPy.exe}}}

It looks like this:

{{https://raw.githubusercontent.com/jedie/jedie.github.io/master/screenshots/DragonPy/20150821_DragonPy_starterGUI.png|starter GUI}}


== ROMs

All needed ROM files, will be downloaded automatically.

The files will be downloaded from:

| Dragon 32 + 64 | http://archive.worldofdragon.org/archive/index.php?dir=Roms/Dragon/
| CoCo 2b        | http://mess.oldos.net/
| Multicomp      | http://searle.hostei.com/grant/Multicomp/
| Simple6809     | http://searle.hostei.com/grant/6809/Simple6809.html

sbc09 and vectrex ROMs are included.

All ROM files and download will be checked by SHA1 value, before use.


== unittests ==

=== run unittests ===

You can run tests with PyPy, Python 2 and Python 3:

{{{
(DragonPy_env)~/DragonPy_env/src/dragonpy$ python -m unittest discover
}}}
or:
{{{
(DragonPy_env)~/DragonPy_env/src/dragonpy$ ./setup.py test
}}}


=== create coverage report ===

install [[https://pypi.org/project/coverage|coverage]] for python 2:
{{{
~$ sudo pip2 install coverage
}}}

{{{
...path/to/env/src/dragonpy$ coverage2 run --source=dragonpy setup.py test
...path/to/env/src/dragonpy$ coverage2 coverage2 html
# e.g.:
...path/to/env/src/dragonpy$ firefox htmlcov/index.html
}}}


== more screenshots

"sbc09" ROM in Tkinter window:

{{https://raw.githubusercontent.com/jedie/jedie.github.io/master/screenshots/DragonPy/DragonPy_sbc09_01.png|screenshot sbc09}}


"Simple6809" ROM in Tkinter window:

{{https://raw.githubusercontent.com/jedie/jedie.github.io/master/screenshots/DragonPy/Simple6809_TK_04.PNG|screenshot simple6809}}


=== Dragon Keyboard

The keyboard mapping is stored into [[https://github.com/jedie/DragonPy/blob/master/dragonpy/Dragon32/keyboard_map.py|dragonpy/Dragon32/keyboard_map.py]].

Some notes:
* "CLEAR" is mapped to "Home" / "Pos 1" key
* "BREAK" is mapped to "Escape" button
* "LEFT" is mapped to left cursor key and to normal backspace, too.

A "auto shift" mode is implemented. So normal lowercase letters would be automaticly converted to uppercase letters.

==== paste clipboard

It is possible to paste the content of the clipboard as user input in the machine.
Just copy (Ctrl-C) the follow content:
{{{
10 CLS
20 FOR I = 0 TO 255:
30 POKE 1024+(I*2),I
40 NEXT I
50 I$ = INKEY$:IF I$="" THEN 50
}}}
Focus the DragonPy window and use Ctrl-V to paste the content.

Looks like:

{{https://raw.githubusercontent.com/jedie/jedie.github.io/master/screenshots/DragonPy/20140805_DragonPy_Dragon32_Listing.png}}


Then just **RUN** and then it looks like this:

{{https://raw.githubusercontent.com/jedie/jedie.github.io/master/screenshots/DragonPy/20140805_DragonPy_Dragon32_CharMap.png}}

=== DragonPy schematic

{{{
+------------------+                         +---------------------+
|                  |                         |                     |
| +-------------+  |                         |       6809 CPU      |
| |             |  |                         |       +     ^       |
| |     GUI     |  |                         |       |     |       |
| |             |  | Display RAM callback    |    +--v-----+--+    |
| |  .--------------------------------------------+   Memory  |    |
| |  |          |  |                         |    +--+-----^--+    |
| |  |          |  |                         |       |     |       |
| |  |          |  |                         | +-----v-----+-----+ |
| |  |          |  |                         | |    Periphery    | |
| |  |          |  |     Keyboard queue      | |   MC6883 SAM    | |
| |  |          +--------------------------------->MC6821 PIA    | |
| |  |          |  |                         | |                 | |
| +--+-----^----+  |                         | |                 | |
|    |     |       |                         | +-----------------+ |
|    |     |       |                         |                     |
| +--v-----+----+  |                         |                     |
| |             |  |                         |                     |
| |   Display   |  |                         |                     |
| |             |  |                         |                     |
| +-------------+  |                         |                     |
+------------------+                         +---------------------+

}}}

=== performance

The current implementation is not really optimized.

With CPython there is round about 490.000 CPU cycles/sec. in console version.
This is half as fast as the real Hardware.

With PyPy round about 6.900.000 - 8.000.000 CPU cycles/sec.
In other words with PyPy it's ~8 times faster as the real Hardware.

e.g. The Dragon 32 6809 machine with a 14.31818 MHz crystal runs with:
0,895MHz (14,31818Mhz/16=0,895MHz) in other words: 895.000 CPU-cycles/sec.


== TODO:

# implement more Dragon 32 periphery

missing 6809 unittests after coverage run:

 * MUL
 * BVS


== PyDragon32

Some Python/BASIC tools/scripts around Dragon32/64 / CoCo homecomputer.

All script are copyleft 2013-2014 by Jens Diemer and license unter GNU GPL v3 or above, see LICENSE for more details.

=== Python scripts:

* PyDC - Convert dragon 32 Cassetts WAV files into plain text:
** https://github.com/jedie/DragonPy/tree/master/PyDC
* Filter Xroar traces:
** https://github.com/jedie/DragonPy/tree/master/misc

=== BASIC programms:

* Simple memory HEX viewer:
** https://github.com/jedie/DragonPy/tree/master/BASIC/HexViewer

* Test CC Registers:
** https://github.com/jedie/DragonPy/tree/master/BASIC/TestCC_Registers

==== Input/Output Tests

[[https://github.com/jedie/DragonPy/tree/master/BASIC/InputOutput/keyboard.bas|/BASIC/InputOutput/keyboard.bas]]
Display memory Locations $0152 - $0159 (Keyboard matrix state table)

Example screenshow with the "Y" key is pressed down. You see that this is saved in $0153:

{{https://raw.githubusercontent.com/jedie/jedie.github.io/master/screenshots/DragonPy/keyboard01.png|KeyBoard Screenshot 01}}

Example with "U" is hold down:

{{https://raw.githubusercontent.com/jedie/jedie.github.io/master/screenshots/DragonPy/keyboard02.png|KeyBoard Screenshot 02}}



== Links

 * Grant Searle's Multicomp FPGA project:
 ** Homepage: http://searle.hostei.com/grant/Multicomp/
 ** own [[https://github.com/jedie/DragonPy/tree/master/dragonpy/Multicomp6809#readme|dragonpy/Multicomp6809/README]]
 * Lennart Benschop 6809 Single Board Computer:
 ** Homepage: http://lennartb.home.xs4all.nl/m6809.html
 ** own [[https://github.com/jedie/DragonPy/tree/master/dragonpy/sbc09#readme|dragonpy/sbc09/README]]
 * Grant Searle's Simple 6809 design:
 ** Homepage: http://searle.hostei.com/grant/6809/Simple6809.html
 ** own [[https://github.com/jedie/DragonPy/tree/master/dragonpy/Simple6809#readme|dragonpy/Simple6809/README]]

Some links:

 * http://www.burgins.com/m6809.html
 * http://www.maddes.net/m6809pm/ - Programming Manual for the 6809 microprocessor from Motorola Inc. (now Freescale)
 * http://www.6809.org.uk/dragon/hardware.shtml
 * http://dragondata.worldofdragon.org/Publications/inside-dragon.htm
 * http://koti.mbnet.fi/~atjs/mc6809/ - 6809 Emulation Page

Source codes:
 * https://github.com/naughton/mc6809/blob/master/mc6809.ts
 * https://github.com/maly/6809js/blob/master/6809.js
 * http://mamedev.org/source/src/mess/drivers/dragon.c.html
 * http://mamedev.org/source/src/mess/machine/dragon.c.html
 * http://mamedev.org/source/src/emu/cpu/m6809/m6809.c.html
 * https://github.com/kjetilhoem/hatchling-32/blob/master/hatchling-32/src/no/k/m6809/InstructionSet.scala

Dragon 32 resources:

 * Forum: http://archive.worldofdragon.org/phpBB3/index.php
 * Wiki: http://archive.worldofdragon.org/index.php?title=Main_Page


== Credits

Some code based on:

**ApplePy**

An Apple ][ emulator in Python
 * Author: James Tauber
 * https://github.com/jtauber/applepy
 * License: MIT 


**XRoar**
A really cool Dragon / CoCo emulator
 * Author: Ciaran Anscomb
 * http://www.6809.org.uk/xroar/
 * License: GNU GPL v2


=== included Python modules:

**python-pager**
Page output and find dimensions of console.
 * Author: Anatoly Techtonik
 * License: Public Domain
 * Homepage: https://bitbucket.org/techtonik/python-pager/
 * Stored here: [[https://github.com/jedie/DragonPy/blob/master/dragonpy/utils/pager.py|/dragonpy/utils/pager.py]]

**srecutils.py**
Motorola S-Record utilities
 * Author: Gabriel Tremblay
 * License: GNU GPL v2 
 * Homepage: https://github.com/gabtremblay/pysrec
 * Stored here: [[https://github.com/jedie/DragonPy/blob/master/dragonpy/utils/srecord_utils.py|/dragonpy/utils/srecord_utils.py]]


=== requirements

**dragonlib**
Dragon/CoCO Python Library
 * Author: Jens Diemer
 * https://pypi.org/project/DragonLib/
 * https://github.com/6809/dragonlib
 * License: GNU GPL v3

**MC6809**
Implementation of the MC6809 CPU in Python
 * Author: Jens Diemer
 * https://pypi.org/project/MC6809
 * https://github.com/6809/MC6809
 * License: GNU GPL v3

**pygments**
generic syntax highlighter
 * Author: Georg Brandl
 * https://pypi.org/project/Pygments
 * http://pygments.org/
 * License: BSD License


== History

* [[https://github.com/jedie/DragonPy/compare/v0.6.0...master|*dev*]]:
* [[https://github.com/jedie/DragonPy/compare/v0.5.3...v0.6.0|19.06.2018 - v0.6.0]]:
** Update to new MC6809 API
** reimplementing Simple6809, contributed by [[https://github.com/ctodobom|Claudemir Todo Bom]]
** TODO: Fix speedlimit
** Fix {{{No module named 'nose'}}} on normal PyPi installation
* [[https://github.com/jedie/DragonPy/compare/v0.5.2...v0.5.3|24.08.2015 - v0.5.3]]:
** Bugfix for "freeze" after "speed limit" was activated
* [[https://github.com/jedie/DragonPy/compare/v0.5.1...v0.5.2|20.08.2015 - v0.5.2]]:
** Add run 'MC6809 benchmark' button to 'starter GUI'
** bugfix 'file not found' in 'starter GUI'
** change the GUI a little bit
* [[https://github.com/jedie/DragonPy/compare/v0.5.0...v0.5.1|19.08.2015 - v0.5.1]]:
** Add a "starter GUI"
** Add work-a-round for tkinter usage with virtualenv under windows, see: [[https://github.com/pypa/virtualenv/issues/93|virtualenv issues #93]]
** bugfix e.g.: keyboard input in "sbc09" emulation
** use nose to run unittests
* [[https://github.com/jedie/DragonPy/compare/v0.4.0...v0.5.0|18.08.2015 - v0.5.0]]:
** ROM files will be downloaded on-the-fly ({{{.sh}}} scripts are removed. So it's easier to use under Windows)
* [[https://github.com/jedie/DragonPy/compare/v0.3.2...v0.4.0|26.05.2015 - v0.4.0]]:
** The MC6809 code is out sourced to: https://github.com/6809/MC6809
* [[https://github.com/jedie/DragonPy/compare/v0.3.1...v0.3.2|15.12.2014 - v0.3.2]]:
** Use [[http://pygments.org/|Pygments]] syntax highlighter in BASIC editor
* [[https://github.com/jedie/DragonPy/compare/v0.3.0...v0.3.1|08.10.2014 - v0.3.1]]:
** Release as v0.3.1
** 30.09.2014 - Enhance the BASIC editor
** 29.09.2014 - Merge [[https://github.com/jedie/PyDragon32|PyDragon32]] project
* [[https://github.com/jedie/DragonPy/compare/v0.2.0...v0.3.0|25.09.2014 - v0.3.0]]:
** [[https://github.com/jedie/DragonPy/commit/f396551df730b509498d1b884cdda8f7075737c4|Change Display Queue to a simple Callback]]
** Reimplement [[https://github.com/jedie/DragonPy/commit/f3bfbdb2ae9906d8e051436173225c3fa8de1373|Multicomp 6809]] and [[https://github.com/jedie/DragonPy/commit/61c26911379d2b7ea6d07a8b479ab14c5d5a7154|SBC09]]
** Many code refactoring and cleanup
* [[https://github.com/jedie/DragonPy/compare/v0.1.0...v0.2.0|14.09.2014 - v0.2.0]]:
** Add a speedlimit, config dialog and IRQ: [[http://archive.worldofdragon.org/phpBB3/viewtopic.php?f=5&t=4308&p=11780#p11780|Forum post 11780]]
* [[https://github.com/jedie/DragonPy/compare/8fe24e5...v0.1.0|05.09.2014 - v0.1.0]]:
** Implement pause/resume, hard-/soft-reset 6809 in GUI and improve a little the GUI/Editor stuff
** see also: [[http://archive.worldofdragon.org/phpBB3/viewtopic.php?f=5&t=4308&p=11719#p11719|Forum post 11719]].
* 27.08.2014 - Run CoCo with Extended Color Basic v1.1, bugfix transfer BASIC Listing with [[https://github.com/jedie/DragonPy/compare/8fe24e5...697d39e|8fe24e5...697d39e]] see: [[http://archive.worldofdragon.org/phpBB3/viewtopic.php?f=5&t=4308&start=90#p11696|Forum post 11696]].
* 20.08.2014 - rudimenary BASIC IDE works with [[https://github.com/jedie/DragonPy/compare/7e0f16630...ce12148|7e0f16630...ce12148]], see also: [[http://archive.worldofdragon.org/phpBB3/viewtopic.php?f=8&t=4439#p11645|Forum post 11645]].
* 05.08.2014 - Start to support CoCo, too with [[https://github.com/jedie/DragonPy/commit/0df724b3ee9d87088b524c3623040a41e9772eb4|0df724b]], see also: [[http://archive.worldofdragon.org/phpBB3/viewtopic.php?f=5&t=4308&start=80#p11573|Forum post 11573]].
* 04.08.2014 - Use the origin Pixel-Font with Tkinter GUI, see: [[http://archive.worldofdragon.org/phpBB3/viewtopic.php?f=5&t=4909|Forum post 4909]] and [[http://archive.worldofdragon.org/phpBB3/viewtopic.php?f=5&t=4308&start=80#p11570|Forum post 11570]].
* 27.07.2014 - Copyrigth info from Dragon 64 ROM is alive with [[https://github.com/jedie/DragonPy/commit/543275b1b90824b64b67dcd003cc5ab54296fc15|543275b]], see: [[http://archive.worldofdragon.org/phpBB3/viewtopic.php?f=5&t=4308&start=80#p11524|Forum post 11524]].
* 29.06.2014 - First "HELLO WORLD" works, see: [[http://archive.worldofdragon.org/phpBB3/viewtopic.php?f=5&t=4308&start=70#p11283|Forum post 11283]].
* 27.10.2013 - "sbc09" ROM works wuite well almist, see: [[http://archive.worldofdragon.org/phpBB3/viewtopic.php?f=5&t=4308&start=60#p9752|Forum post 9752]].
* 16.10.2013 - See copyright info from "Simple6809" ROM with [[https://github.com/jedie/DragonPy/tree/25a97b66d8567ba7c3a5b646e4a807b816a0e376|25a97b6]] see also: [[http://archive.worldofdragon.org/phpBB3/viewtopic.php?f=5&t=4308&start=50#p9654|Forum post 9654]].
* 10.09.2013 - Start to implement the 6809 CPU with [[https://github.com/jedie/DragonPy/commit/591d2ed2b6f1a5f913c14e56e1e37f5870510b0d|591d2ed]]
* 28.08.2013 - Fork "Apple ][ Emulator" written in Python: https://github.com/jtauber/applepy to https://github.com/jedie/DragonPy

== Links:

| Forum               | [[http://forum.pylucid.org/]]
| IRC                 | [[http://www.pylucid.org/permalink/304/irc-channel|#pylucid on freenode.net]]
| Jabber              | pylucid@conference.jabber.org
| PyPi                | [[https://pypi.org/project/DragonPyEmulator/]]
| Github              | [[https://github.com/jedie/DragonPy]]

== donation

* Send [[http://www.bitcoin.org/|Bitcoins]] to [[https://blockexplorer.com/address/1823RZ5Md1Q2X5aSXRC5LRPcYdveCiVX6F|1823RZ5Md1Q2X5aSXRC5LRPcYdveCiVX6F]]
