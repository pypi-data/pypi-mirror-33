# coding: utf-8

"""
    ChannelEngine Merchant API

    ChannelEngine API for merchants  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OrderFilter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'statuses': 'list[str]',
        'merchant_order_nos': 'list[str]',
        'exclude_marketplace_fulfilled_orders_and_lines': 'bool',
        'fulfillment_type': 'str',
        'page': 'int'
    }

    attribute_map = {
        'statuses': 'Statuses',
        'merchant_order_nos': 'MerchantOrderNos',
        'exclude_marketplace_fulfilled_orders_and_lines': 'ExcludeMarketplaceFulfilledOrdersAndLines',
        'fulfillment_type': 'FulfillmentType',
        'page': 'Page'
    }

    def __init__(self, statuses=None, merchant_order_nos=None, exclude_marketplace_fulfilled_orders_and_lines=None, fulfillment_type=None, page=None):  # noqa: E501
        """OrderFilter - a model defined in Swagger"""  # noqa: E501

        self._statuses = None
        self._merchant_order_nos = None
        self._exclude_marketplace_fulfilled_orders_and_lines = None
        self._fulfillment_type = None
        self._page = None
        self.discriminator = None

        if statuses is not None:
            self.statuses = statuses
        if merchant_order_nos is not None:
            self.merchant_order_nos = merchant_order_nos
        if exclude_marketplace_fulfilled_orders_and_lines is not None:
            self.exclude_marketplace_fulfilled_orders_and_lines = exclude_marketplace_fulfilled_orders_and_lines
        if fulfillment_type is not None:
            self.fulfillment_type = fulfillment_type
        if page is not None:
            self.page = page

    @property
    def statuses(self):
        """Gets the statuses of this OrderFilter.  # noqa: E501

        Order status(es) to filter on  # noqa: E501

        :return: The statuses of this OrderFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._statuses

    @statuses.setter
    def statuses(self, statuses):
        """Sets the statuses of this OrderFilter.

        Order status(es) to filter on  # noqa: E501

        :param statuses: The statuses of this OrderFilter.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["IN_PROGRESS", "SHIPPED", "IN_BACKORDER", "CANCELED", "MANCO", "IN_COMBI", "CLOSED", "NEW", "RETURNED", "REQUIRES_CORRECTION"]  # noqa: E501
        if not set(statuses).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `statuses` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(statuses) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._statuses = statuses

    @property
    def merchant_order_nos(self):
        """Gets the merchant_order_nos of this OrderFilter.  # noqa: E501

        Filter on unique order reference used by the merchant  # noqa: E501

        :return: The merchant_order_nos of this OrderFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._merchant_order_nos

    @merchant_order_nos.setter
    def merchant_order_nos(self, merchant_order_nos):
        """Sets the merchant_order_nos of this OrderFilter.

        Filter on unique order reference used by the merchant  # noqa: E501

        :param merchant_order_nos: The merchant_order_nos of this OrderFilter.  # noqa: E501
        :type: list[str]
        """

        self._merchant_order_nos = merchant_order_nos

    @property
    def exclude_marketplace_fulfilled_orders_and_lines(self):
        """Gets the exclude_marketplace_fulfilled_orders_and_lines of this OrderFilter.  # noqa: E501

        Exclude order (lines) fulfilled by the marketplace (amazon:FBA, bol:LVB, etc.)  # noqa: E501

        :return: The exclude_marketplace_fulfilled_orders_and_lines of this OrderFilter.  # noqa: E501
        :rtype: bool
        """
        return self._exclude_marketplace_fulfilled_orders_and_lines

    @exclude_marketplace_fulfilled_orders_and_lines.setter
    def exclude_marketplace_fulfilled_orders_and_lines(self, exclude_marketplace_fulfilled_orders_and_lines):
        """Sets the exclude_marketplace_fulfilled_orders_and_lines of this OrderFilter.

        Exclude order (lines) fulfilled by the marketplace (amazon:FBA, bol:LVB, etc.)  # noqa: E501

        :param exclude_marketplace_fulfilled_orders_and_lines: The exclude_marketplace_fulfilled_orders_and_lines of this OrderFilter.  # noqa: E501
        :type: bool
        """

        self._exclude_marketplace_fulfilled_orders_and_lines = exclude_marketplace_fulfilled_orders_and_lines

    @property
    def fulfillment_type(self):
        """Gets the fulfillment_type of this OrderFilter.  # noqa: E501

        Filter orders on fulfillment type. This will include all orders lines, even if they are partially fulfilled by the marketplace.  To exclude orders and lines that are fulfilled by the marketplace from the response, set ExcludeMarketplaceFulfilledOrdersAndLines to true.  # noqa: E501

        :return: The fulfillment_type of this OrderFilter.  # noqa: E501
        :rtype: str
        """
        return self._fulfillment_type

    @fulfillment_type.setter
    def fulfillment_type(self, fulfillment_type):
        """Sets the fulfillment_type of this OrderFilter.

        Filter orders on fulfillment type. This will include all orders lines, even if they are partially fulfilled by the marketplace.  To exclude orders and lines that are fulfilled by the marketplace from the response, set ExcludeMarketplaceFulfilledOrdersAndLines to true.  # noqa: E501

        :param fulfillment_type: The fulfillment_type of this OrderFilter.  # noqa: E501
        :type: str
        """
        allowed_values = ["ALL", "ONLY_MERCHANT", "ONLY_CHANNEL", "MIXED"]  # noqa: E501
        if fulfillment_type not in allowed_values:
            raise ValueError(
                "Invalid value for `fulfillment_type` ({0}), must be one of {1}"  # noqa: E501
                .format(fulfillment_type, allowed_values)
            )

        self._fulfillment_type = fulfillment_type

    @property
    def page(self):
        """Gets the page of this OrderFilter.  # noqa: E501

        The page to filter on. Starts at 1.  # noqa: E501

        :return: The page of this OrderFilter.  # noqa: E501
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this OrderFilter.

        The page to filter on. Starts at 1.  # noqa: E501

        :param page: The page of this OrderFilter.  # noqa: E501
        :type: int
        """

        self._page = page

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderFilter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
