{"version":3,"sources":["models/tickers/log_ticker.ts"],"names":[],"mappings":"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","file":"log_ticker.js","sourcesContent":["import {TickSpec} from \"./ticker\"\nimport {AdaptiveTicker} from \"./adaptive_ticker\"\nimport {range} from \"core/util/array\"\n\nexport namespace LogTicker {\n  export interface Attrs extends AdaptiveTicker.Attrs {}\n\n  export interface Props extends AdaptiveTicker.Props {}\n}\n\nexport interface LogTicker extends LogTicker.Attrs {}\n\nexport class LogTicker extends AdaptiveTicker {\n\n  properties: LogTicker.Props\n\n  constructor(attrs?: Partial<LogTicker.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = \"LogTicker\"\n\n    this.override({\n      mantissas: [1, 5],\n    })\n  }\n\n  get_ticks_no_defaults(data_low: number, data_high: number, _cross_loc: any, desired_n_ticks: number): TickSpec<number> {\n    const num_minor_ticks = this.num_minor_ticks\n    const minor_ticks = []\n\n    const base = this.base\n\n    const log_low = Math.log(data_low) / Math.log(base)\n    const log_high = Math.log(data_high) / Math.log(base)\n    const log_interval = log_high - log_low\n\n    let ticks: number[]\n\n    if (!isFinite(log_interval)) {\n      ticks = []\n    } else if (log_interval < 2) { // treat as linear ticker\n      const interval = this.get_interval(data_low, data_high, desired_n_ticks)\n      const start_factor = Math.floor(data_low / interval)\n      const end_factor   = Math.ceil(data_high / interval)\n\n      ticks = range(start_factor, end_factor + 1)\n        .filter((factor) => factor != 0)\n        .map((factor) => factor*interval)\n        .filter((tick) => data_low <= tick && tick <= data_high)\n\n      if (num_minor_ticks > 0 && ticks.length > 0) {\n        const minor_interval = interval / num_minor_ticks\n        const minor_offsets = range(0, num_minor_ticks).map((i) => i*minor_interval)\n        for (const x of minor_offsets.slice(1)) {\n          minor_ticks.push(ticks[0] - x)\n        }\n        for (const tick of ticks) {\n          for (const x of minor_offsets) {\n            minor_ticks.push(tick + x)\n          }\n        }\n      }\n    } else {\n      const startlog = Math.ceil(log_low * 0.999999)\n      const endlog = Math.floor(log_high * 1.000001)\n      const interval = Math.ceil((endlog - startlog) / 9.0)\n\n      ticks = range(startlog, endlog + 1, interval)\n        .map((i) => Math.pow(base, i))\n        .filter((tick) => data_low <= tick && tick <= data_high)\n\n      if (num_minor_ticks > 0 && ticks.length > 0) {\n        const minor_interval = Math.pow(base, interval) / num_minor_ticks\n        const minor_offsets = range(1, num_minor_ticks+1).map((i) => i*minor_interval)\n        for (const x of minor_offsets) {\n          minor_ticks.push(ticks[0] / x)\n        }\n        minor_ticks.push(ticks[0])\n        for (const tick of ticks) {\n          for (const x of minor_offsets) {\n            minor_ticks.push(tick * x)\n          }\n        }\n      }\n    }\n\n    return {\n      major: ticks,\n      minor: minor_ticks,\n    }\n  }\n}\n\nLogTicker.initClass()\n"]}