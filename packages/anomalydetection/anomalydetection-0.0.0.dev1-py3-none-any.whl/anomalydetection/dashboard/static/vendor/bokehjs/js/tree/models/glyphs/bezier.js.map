{"version":3,"sources":["models/glyphs/bezier.ts"],"names":[],"mappings":"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","file":"bezier.js","sourcesContent":["import {NumberSpec} from \"core/vectorization\"\nimport {LineMixinVector} from \"core/property_mixins\"\nimport {Line} from \"core/visuals\"\nimport {Arrayable} from \"core/types\"\nimport {IBBox} from \"core/util/bbox\"\nimport {SpatialIndex} from \"core/util/spatial\"\nimport {Context2d} from \"core/util/canvas\"\nimport {Glyph, GlyphView, GlyphData} from \"./glyph\"\nimport {generic_line_legend} from \"./utils\"\n\n// algorithm adapted from http://stackoverflow.com/a/14429749/3406693\nfunction _cbb(x0: number, y0: number,\n              x1: number, y1: number,\n              x2: number, y2: number,\n              x3: number, y3: number): [number, number, number, number] {\n  const tvalues: number[] = []\n  const bounds: [number[], number[]] = [[], []]\n\n  for (let i = 0; i <= 2; i++) {\n    let a, b, c\n    if (i === 0) {\n      b = ((6 * x0) - (12 * x1)) + (6 * x2)\n      a = (((-3 * x0) + (9 * x1)) - (9 * x2)) + (3 * x3)\n      c = (3 * x1) - (3 * x0)\n    } else {\n      b = ((6 * y0) - (12 * y1)) + (6 * y2)\n      a = (((-3 * y0) + (9 * y1)) - (9 * y2)) + (3 * y3)\n      c = (3 * y1) - (3 * y0)\n    }\n\n    if (Math.abs(a) < 1e-12) { // Numerical robustness\n      if (Math.abs(b) < 1e-12) // Numerical robustness\n        continue\n      const t = -c / b\n      if (0 < t && t < 1)\n        tvalues.push(t)\n      continue\n    }\n\n    const b2ac = (b * b) - (4 * c * a)\n    const sqrtb2ac = Math.sqrt(b2ac)\n\n    if (b2ac < 0)\n      continue\n\n    const t1 = (-b + sqrtb2ac) / (2 * a)\n    if (0 < t1 && t1 < 1)\n      tvalues.push(t1)\n\n    const t2 = (-b - sqrtb2ac) / (2 * a)\n    if (0 < t2 && t2 < 1)\n      tvalues.push(t2)\n  }\n\n  let j = tvalues.length\n  const jlen = j\n  while (j--) {\n    const t = tvalues[j]\n    const mt = 1 - t\n    const x = (mt * mt * mt * x0) + (3 * mt * mt * t * x1) + (3 * mt * t * t * x2) + (t * t * t * x3)\n    bounds[0][j] = x\n    const y = (mt * mt * mt * y0) + (3 * mt * mt * t * y1) + (3 * mt * t * t * y2) + (t * t * t * y3)\n    bounds[1][j] = y\n  }\n\n  bounds[0][jlen] = x0\n  bounds[1][jlen] = y0\n  bounds[0][jlen + 1] = x3\n  bounds[1][jlen + 1] = y3\n\n  return [\n    Math.min(...bounds[0]),\n    Math.max(...bounds[1]),\n    Math.max(...bounds[0]),\n    Math.min(...bounds[1]),\n  ]\n}\n\nexport interface BezierData extends GlyphData {\n  _x0: Arrayable<number>\n  _y0: Arrayable<number>\n  _x1: Arrayable<number>\n  _y1: Arrayable<number>\n  _cx0: Arrayable<number>\n  _cy0: Arrayable<number>\n  _cx1: Arrayable<number>\n  _cy1: Arrayable<number>\n\n  sx0: Arrayable<number>\n  sy0: Arrayable<number>\n  sx1: Arrayable<number>\n  sy1: Arrayable<number>\n  scx0: Arrayable<number>\n  scy0: Arrayable<number>\n  scx1: Arrayable<number>\n  scy1: Arrayable<number>\n}\n\nexport interface BezierView extends BezierData {}\n\nexport class BezierView extends GlyphView {\n  model: Bezier\n  visuals: Bezier.Visuals\n\n  protected _index_data(): SpatialIndex {\n    const points = []\n    for (let i = 0, end = this._x0.length; i < end; i++) {\n      if (isNaN(this._x0[i] + this._x1[i] + this._y0[i] + this._y1[i] + this._cx0[i] + this._cy0[i] + this._cx1[i] + this._cy1[i]))\n        continue\n\n      const [x0, y0, x1, y1] = _cbb(this._x0[i],  this._y0[i],  this._x1[i],  this._y1[i],\n                                    this._cx0[i], this._cy0[i], this._cx1[i], this._cy1[i])\n      points.push({minX: x0, minY: y0, maxX: x1, maxY: y1, i})\n    }\n\n    return new SpatialIndex(points)\n  }\n\n  protected _render(ctx: Context2d, indices: number[],\n                    {sx0, sy0, sx1, sy1, scx0, scy0, scx1, scy1}: BezierData): void {\n    if (this.visuals.line.doit) {\n      for (const i of indices) {\n        if (isNaN(sx0[i] + sy0[i] + sx1[i] + sy1[i] + scx0[i] + scy0[i] + scx1[i] + scy1[i]))\n          continue\n\n        ctx.beginPath()\n        ctx.moveTo(sx0[i], sy0[i])\n        ctx.bezierCurveTo(scx0[i], scy0[i], scx1[i], scy1[i], sx1[i], sy1[i])\n\n        this.visuals.line.set_vectorize(ctx, i)\n        ctx.stroke()\n      }\n    }\n  }\n\n  draw_legend_for_index(ctx: Context2d, bbox: IBBox, index: number): void {\n    generic_line_legend(this.visuals, ctx, bbox, index)\n  }\n\n  scenterx(): number {\n    throw new Error(\"not implemented\")\n  }\n\n  scentery(): number {\n    throw new Error(\"not implemented\")\n  }\n}\n\nexport namespace Bezier {\n  export interface Mixins extends LineMixinVector {}\n\n  export interface Attrs extends Glyph.Attrs, Mixins {\n    x0: NumberSpec\n    y0: NumberSpec\n    x1: NumberSpec\n    y1: NumberSpec\n    cx0: NumberSpec\n    cy0: NumberSpec\n    cx1: NumberSpec\n    cy1: NumberSpec\n  }\n\n  export interface Props extends Glyph.Props {}\n\n  export interface Visuals extends Glyph.Visuals {\n    line: Line\n  }\n}\n\nexport interface Bezier extends Bezier.Attrs {}\n\nexport class Bezier extends Glyph {\n\n  properties: Bezier.Props\n\n  constructor(attrs?: Partial<Bezier.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = 'Bezier'\n    this.prototype.default_view = BezierView\n\n    this.coords([['x0', 'y0'], ['x1', 'y1'], ['cx0', 'cy0'], ['cx1', 'cy1']])\n    this.mixins(['line'])\n  }\n}\nBezier.initClass()\n"]}