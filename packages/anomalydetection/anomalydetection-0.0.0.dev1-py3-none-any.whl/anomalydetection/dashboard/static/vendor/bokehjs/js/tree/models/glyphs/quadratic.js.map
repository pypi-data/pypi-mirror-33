{"version":3,"sources":["models/glyphs/quadratic.ts"],"names":[],"mappings":"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","file":"quadratic.js","sourcesContent":["import {NumberSpec} from \"core/vectorization\"\nimport {LineMixinVector} from \"core/property_mixins\"\nimport {Line} from \"core/visuals\"\nimport {Arrayable} from \"core/types\"\nimport {IBBox} from \"core/util/bbox\"\nimport {SpatialIndex} from \"core/util/spatial\"\nimport {Context2d} from \"core/util/canvas\"\nimport {Glyph, GlyphView, GlyphData} from \"./glyph\"\nimport {generic_line_legend} from \"./utils\"\n\n// Formula from: http://pomax.nihongoresources.com/pages/bezier/\n//\n// if segment is quadratic bezier do:\n//   for both directions do:\n//     if control between start and end, compute linear bounding box\n//     otherwise, compute\n//       bound = u(1-t)^2 + 2v(1-t)t + wt^2\n//         (with t = ((u-v) / (u-2v+w)), with {u = start, v = control, w = end})\n//       if control precedes start, min = bound, otherwise max = bound\n\nfunction _qbb(u: number, v: number, w: number): [number, number] {\n  if (v == (u + w)/2)\n    return [u, w]\n  else {\n    const t = (u - v) / ((u - (2*v)) + w)\n    const bd = (u*Math.pow((1 - t), 2)) + (2*v*(1 - t)*t) + (w*Math.pow(t, 2))\n    return [Math.min(u, w, bd), Math.max(u, w, bd)]\n  }\n}\n\nexport interface QuadraticData extends GlyphData {\n  _x0: Arrayable<number>\n  _y0: Arrayable<number>\n  _x1: Arrayable<number>\n  _y1: Arrayable<number>\n  _cx: Arrayable<number>\n  _cy: Arrayable<number>\n\n  sx0: Arrayable<number>\n  sy0: Arrayable<number>\n  sx1: Arrayable<number>\n  sy1: Arrayable<number>\n  scx: Arrayable<number>\n  scy: Arrayable<number>\n}\n\nexport interface QuadraticView extends QuadraticData {}\n\nexport class QuadraticView extends GlyphView {\n  model: Quadratic\n  visuals: Quadratic.Visuals\n\n  protected _index_data(): SpatialIndex {\n    const points = []\n\n    for (let i = 0, end = this._x0.length; i < end; i++) {\n      if (isNaN(this._x0[i] + this._x1[i] + this._y0[i] + this._y1[i] + this._cx[i] + this._cy[i]))\n        continue\n\n      const [x0, x1] = _qbb(this._x0[i], this._cx[i], this._x1[i])\n      const [y0, y1] = _qbb(this._y0[i], this._cy[i], this._y1[i])\n\n      points.push({minX: x0, minY: y0, maxX: x1, maxY: y1, i})\n    }\n\n    return new SpatialIndex(points)\n  }\n\n  protected _render(ctx: Context2d, indices: number[], {sx0, sy0, sx1, sy1, scx, scy}: QuadraticData): void {\n    if (this.visuals.line.doit) {\n      for (const i of indices) {\n        if (isNaN(sx0[i] + sy0[i] + sx1[i] + sy1[i] + scx[i] + scy[i]))\n          continue\n\n        ctx.beginPath()\n        ctx.moveTo(sx0[i], sy0[i])\n        ctx.quadraticCurveTo(scx[i], scy[i], sx1[i], sy1[i])\n\n        this.visuals.line.set_vectorize(ctx, i)\n        ctx.stroke()\n      }\n    }\n  }\n\n  draw_legend_for_index(ctx: Context2d, bbox: IBBox, index: number): void {\n    generic_line_legend(this.visuals, ctx, bbox, index)\n  }\n\n  scenterx(): number {\n    throw new Error(\"not implemented\")\n  }\n\n  scentery(): number {\n    throw new Error(\"not implemented\")\n  }\n}\n\nexport namespace Quadratic {\n  export interface Mixins extends LineMixinVector {}\n\n  export interface Attrs extends Glyph.Attrs, Mixins {\n    x0: NumberSpec\n    y0: NumberSpec\n    x1: NumberSpec\n    y1: NumberSpec\n    cx: NumberSpec\n    cy: NumberSpec\n  }\n\n  export interface Props extends Glyph.Props {}\n\n  export interface Visuals extends Glyph.Visuals {\n    line: Line\n  }\n}\n\nexport interface Quadratic extends Quadratic.Attrs {}\n\nexport class Quadratic extends Glyph {\n\n  properties: Quadratic.Props\n\n  constructor(attrs?: Partial<Quadratic.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = 'Quadratic'\n    this.prototype.default_view = QuadraticView\n\n    this.coords([['x0', 'y0'], ['x1', 'y1'], ['cx', 'cy']])\n    this.mixins(['line'])\n  }\n}\nQuadratic.initClass()\n"]}