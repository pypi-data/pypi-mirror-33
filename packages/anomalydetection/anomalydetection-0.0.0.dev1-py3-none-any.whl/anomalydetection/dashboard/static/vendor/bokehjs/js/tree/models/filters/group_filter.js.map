{"version":3,"sources":["models/filters/group_filter.ts"],"names":[],"mappings":";;;AAAA,mCAA+B;AAC/B,mCAAoC;AACpC,wCAAmC;AACnC,yCAAqC;AAcrC;IAAiC,uCAAM;IAIrC,qBAAY,KAAkC;QAA9C,YACE,kBAAM,KAAK,CAAC,SACb;QAWD,aAAO,GAAoB,IAAI,CAAA;;IAX/B,CAAC;IAEM,qBAAS,GAAhB;QACE,IAAI,CAAC,SAAS,CAAC,IAAI,GAAG,aAAa,CAAA;QAEnC,IAAI,CAAC,MAAM,CAAC;YACV,WAAW,EAAE,CAAE,CAAC,CAAC,MAAM,CAAG;YAC1B,KAAK,EAAQ,CAAE,CAAC,CAAC,MAAM,CAAG;SAC3B,CAAC,CAAA;IACJ,CAAC;IAID,qCAAe,GAAf,UAAgB,MAA0B;QAA1C,iBAYC;QAXC,IAAM,MAAM,GAAG,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;QAClD,IAAI,MAAM,IAAI,IAAI,EAAE;YAClB,gBAAM,CAAC,IAAI,CAAC,uDAAuD,CAAC,CAAA;YACpE,OAAO,IAAI,CAAA;SACZ;aAAM;YACL,IAAI,CAAC,OAAO,GAAG,aAAK,CAAC,CAAC,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,UAAC,CAAC,IAAK,OAAA,MAAM,CAAC,CAAC,CAAC,KAAK,KAAI,CAAC,KAAK,EAAxB,CAAwB,CAAC,CAAA;YACzF,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;gBAC7B,gBAAM,CAAC,IAAI,CAAC,0BAAwB,IAAI,CAAC,KAAK,8CAAyC,IAAI,CAAC,WAAW,MAAG,CAAC,CAAA;aAC5G;YACD,OAAO,IAAI,CAAC,OAAO,CAAA;SACpB;IACH,CAAC;IACH,kBAAC;AAAD,CAhCA,AAgCC,CAhCgC,eAAM,GAgCtC;AAhCY,kCAAW;AAiCxB,WAAW,CAAC,SAAS,EAAE,CAAA","file":"group_filter.js","sourcesContent":["import {Filter} from \"./filter\"\nimport * as p from \"core/properties\"\nimport {logger} from \"core/logging\"\nimport {range} from \"core/util/array\"\nimport {ColumnarDataSource} from \"../sources/columnar_data_source\"\n\nexport namespace GroupFilter {\n  export interface Attrs extends Filter.Attrs {\n    column_name: string\n    group: string\n  }\n\n  export interface Props extends Filter.Props {}\n}\n\nexport interface GroupFilter extends GroupFilter.Attrs {}\n\nexport class GroupFilter extends Filter {\n\n  properties: GroupFilter.Props\n\n  constructor(attrs?: Partial<GroupFilter.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = 'GroupFilter'\n\n    this.define({\n      column_name: [ p.String  ],\n      group:       [ p.String  ],\n    })\n  }\n\n  indices: number[] | null = null\n\n  compute_indices(source: ColumnarDataSource): number[] | null {\n    const column = source.get_column(this.column_name)\n    if (column == null) {\n      logger.warn(\"group filter: groupby column not found in data source\")\n      return null\n    } else {\n      this.indices = range(0, source.get_length() || 0).filter((i) => column[i] === this.group)\n      if (this.indices.length === 0) {\n        logger.warn(`group filter: group '${this.group}' did not match any values in column '${this.column_name}'`)\n      }\n      return this.indices\n    }\n  }\n}\nGroupFilter.initClass()\n"]}