{"version":3,"sources":["models/selections/selection.ts"],"names":[],"mappings":"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","file":"selection.js","sourcesContent":["import {Model} from \"../../model\"\nimport * as p from \"core/properties\"\nimport {union, intersection} from \"core/util/array\"\nimport {merge} from \"core/util/object\"\nimport {Glyph, GlyphView} from \"../glyphs/glyph\"\n\nexport namespace Selection {\n  export interface Attrs extends Model.Attrs {\n    indices: number[]\n    final: boolean\n    line_indices: number[]\n    selected_glyphs: Glyph[]\n    get_view: () => GlyphView | null\n    multiline_indices: {[key: string]: number[]}\n  }\n\n  export interface Props extends Model.Props {\n    indices: p.Property<number[]>\n    final: p.Property<boolean>\n    line_indices: p.Property<number[]>\n    selected_glyphs: p.Property<Glyph[]>\n    get_view: p.Property<() => GlyphView | null>\n    multiline_indices: p.Property<{[key: string]: number[]}>\n  }\n}\n\nexport interface Selection extends Selection.Attrs {}\n\nexport class Selection extends Model {\n\n  properties: Selection.Props\n\n  constructor(attrs?: Partial<Selection.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = \"Selection\";\n\n    this.define({\n      indices:           [ p.Array,   [] ],\n      line_indices:      [ p.Array,   [] ],\n      multiline_indices: [ p.Any,     {} ],\n    });\n\n    this.internal({\n      final:             [ p.Boolean     ],\n      selected_glyphs:   [ p.Array,   [] ],\n      get_view:          [ p.Any         ],\n      image_indices:     [ p.Array,   [] ], // Used internally to support hover tool for now. Python API TBD\n    });\n  }\n\n  [key: string]: any\n\n  initialize(): void {\n    super.initialize()\n\n    this['0d'] = {'glyph': null, 'indices': [], 'flag': false,\n                  'get_view': () => null}\n    this['2d'] = {'indices': {}}\n    this['1d'] = {'indices': this.indices}\n\n    this.get_view = () => null\n\n    this.connect(this.properties.indices.change, () =>\n      this['1d']['indices'] = this.indices)\n    this.connect(this.properties.line_indices.change, () => {\n      this['0d']['indices'] = this.line_indices\n      if(this.line_indices.length == 0)\n        this['0d'].flag = false\n      else\n        this['0d'].flag = true\n      })\n    this.connect(this.properties.selected_glyphs.change, () =>\n      this['0d'].glyph = this.selected_glyph)\n    this.connect(this.properties.get_view.change, () =>\n      this['0d'].get_view = this.get_view)\n    this.connect(this.properties.multiline_indices.change, ()=>\n      this['2d'].indices = this.multiline_indices)\n  }\n\n  get selected_glyph(): Glyph | null {\n    if(this.selected_glyphs.length > 0)\n      return this.selected_glyphs[0]\n    else\n      return null\n  }\n\n  add_to_selected_glyphs(glyph: Glyph): void {\n    this.selected_glyphs.push(glyph)\n  }\n\n  update(selection: Selection, final: boolean, append: boolean): void {\n    this.final = final\n    if (append)\n      this.update_through_union(selection)\n    else {\n      this.indices = selection.indices\n      this.line_indices = selection.line_indices\n      this.selected_glyphs = selection.selected_glyphs\n      this.get_view = selection.get_view\n      this.multiline_indices = selection.multiline_indices\n      this.image_indices = selection.image_indices\n    }\n  }\n\n  clear (): void {\n    this.final = true\n    this.indices = []\n    this.line_indices = []\n    this.multiline_indices = {}\n    this.get_view = () => null\n    this.selected_glyphs = []\n  }\n\n  is_empty (): boolean {\n    return this.indices.length == 0 && this.line_indices.length == 0 && this.image_indices.length == 0\n  }\n\n  update_through_union(other: Selection): void {\n    this.indices = union(other.indices, this.indices)\n    this.selected_glyphs = union(other.selected_glyphs, this.selected_glyphs)\n    this.line_indices = union(other.line_indices, this.line_indices)\n    if(!this.get_view())\n      this.get_view = other.get_view\n    this.multiline_indices = merge(other.multiline_indices, this.multiline_indices)\n  }\n\n  update_through_intersection(other: Selection): void {\n    this.indices = intersection(other.indices, this.indices)\n    // TODO: think through and fix any logic below\n    this.selected_glyphs = union(other.selected_glyphs, this.selected_glyphs)\n    this.line_indices = union(other.line_indices, this.line_indices)\n    if(!this.get_view())\n      this.get_view = other.get_view\n    this.multiline_indices = merge(other.multiline_indices, this.multiline_indices)\n  }\n}\nSelection.initClass()\n"]}