{"version":3,"sources":["core/vectorization.ts"],"names":[],"mappings":";;AACA,yCAAwC;AA2BxC,iBAA2B,GAA8B;IACvD,OAAO,gBAAQ,CAAC,GAAG,CAAC,IAAI,OAAO,IAAK,GAAW,CAAA;AACjD,CAAC;AAFD,0BAEC;AAED,iBAA2B,GAAkB;IAC3C,OAAO,gBAAQ,CAAC,GAAG,CAAC,IAAI,OAAO,IAAK,GAAW,CAAA;AACjD,CAAC;AAFD,0BAEC","file":"vectorization.js","sourcesContent":["import {Color} from \"./types\"\nimport {isObject} from \"core/util/types\"\nimport {SpatialUnits, AngleUnits} from \"./enums\"\n\nexport interface Value<T> {\n  value: T\n}\n\nexport interface Field {\n  field: string\n}\n\nexport type Scalar<T> = T | null | Value<T>\n\nexport type Vectorized<T> = T | null | Value<T> | Field\n\nexport type AngleSpec = Vectorized<number> & { units?: AngleUnits }\n\nexport type ColorSpec = Vectorized<Color>\n\nexport type DistanceSpec = Vectorized<number> & { units?: SpatialUnits }\n\nexport type FontSizeSpec = Vectorized<string>\n\nexport type NumberSpec = Vectorized<number>\n\nexport type StringSpec = Vectorized<string>\n\nexport function isValue<T>(obj: Scalar<T> | Vectorized<T>): obj is Value<T> {\n  return isObject(obj) && \"value\" in (obj as any)\n}\n\nexport function isField<T>(obj: Vectorized<T>): obj is Field {\n  return isObject(obj) && \"field\" in (obj as any)\n}\n"]}