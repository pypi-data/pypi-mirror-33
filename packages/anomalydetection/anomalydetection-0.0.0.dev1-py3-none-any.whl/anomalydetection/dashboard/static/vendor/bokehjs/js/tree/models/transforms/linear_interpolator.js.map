{"version":3,"sources":["models/transforms/linear_interpolator.ts"],"names":[],"mappings":";;;AAAA,yCAA6C;AAC7C,+CAA2C;AAU3C;IAAwC,8CAAY;IAIlD,4BAAY,KAAyC;eACnD,kBAAM,KAAK,CAAC;IACd,CAAC;IAEM,4BAAS,GAAhB;QACE,IAAI,CAAC,SAAS,CAAC,IAAI,GAAG,oBAAoB,CAAA;IAC5C,CAAC;IAED,oCAAO,GAAP,UAAQ,CAAS;QACf,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;QAEhB,IAAI,IAAI,CAAC,IAAI,EAAE;YACb,IAAI,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,GAAC,CAAC,CAAC;gBACtE,OAAO,GAAG,CAAA;SACb;aAAM;YACL,IAAI,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;gBACvB,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAA;YAC1B,IAAI,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,GAAC,CAAC,CAAC;gBAC7C,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,GAAC,CAAC,CAAC,CAAA;SACjD;QAED,IAAI,CAAC,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YACxB,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAA;QAE1B,IAAM,GAAG,GAAG,qBAAa,CAAC,IAAI,CAAC,SAAS,EAAE,UAAA,GAAG,IAAI,OAAA,GAAG,GAAG,CAAC,EAAP,CAAO,CAAC,CAAA;QAEzD,IAAM,EAAE,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAA;QAC9B,IAAM,EAAE,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,GAAC,CAAC,CAAC,CAAA;QAChC,IAAM,EAAE,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAA;QAC9B,IAAM,EAAE,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,GAAC,CAAC,CAAC,CAAA;QAEhC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,GAAC,EAAE,CAAC,GAAG,CAAC,EAAE,GAAC,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,GAAC,EAAE,CAAC,CAAC,CAAA;IAC5C,CAAC;IACH,yBAAC;AAAD,CArCA,AAqCC,CArCuC,2BAAY,GAqCnD;AArCY,gDAAkB;AAsC/B,kBAAkB,CAAC,SAAS,EAAE,CAAA","file":"linear_interpolator.js","sourcesContent":["import {findLastIndex} from \"core/util/array\"\nimport {Interpolator} from \"./interpolator\"\n\nexport namespace LinearInterpolator {\n  export interface Attrs extends Interpolator.Attrs {}\n\n  export interface Props extends Interpolator.Props {}\n}\n\nexport interface LinearInterpolator extends LinearInterpolator.Attrs {}\n\nexport class LinearInterpolator extends Interpolator {\n\n  properties: LinearInterpolator.Props\n\n  constructor(attrs?: Partial<LinearInterpolator.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = \"LinearInterpolator\"\n  }\n\n  compute(x: number): number {\n    this.sort(false)\n\n    if (this.clip) {\n      if (x < this._x_sorted[0] || x > this._x_sorted[this._x_sorted.length-1])\n        return NaN\n    } else {\n      if (x < this._x_sorted[0])\n        return this._y_sorted[0]\n      if (x > this._x_sorted[this._x_sorted.length-1])\n        return this._y_sorted[this._y_sorted.length-1]\n    }\n\n    if (x == this._x_sorted[0])\n      return this._y_sorted[0]\n\n    const ind = findLastIndex(this._x_sorted, num => num < x)\n\n    const x1 = this._x_sorted[ind]\n    const x2 = this._x_sorted[ind+1]\n    const y1 = this._y_sorted[ind]\n    const y2 = this._y_sorted[ind+1]\n\n    return y1 + (((x-x1) / (x2-x1)) * (y2-y1))\n  }\n}\nLinearInterpolator.initClass()\n"]}