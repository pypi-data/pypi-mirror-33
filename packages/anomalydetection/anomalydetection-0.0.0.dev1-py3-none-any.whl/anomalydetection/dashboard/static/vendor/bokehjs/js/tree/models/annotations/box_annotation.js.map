{"version":3,"sources":["models/annotations/box_annotation.ts"],"names":[],"mappings":"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","file":"box_annotation.js","sourcesContent":["import {Annotation, AnnotationView} from \"./annotation\"\nimport {Scale} from \"../scales/scale\"\nimport {Signal0} from \"core/signaling\"\nimport {LineMixinScalar, FillMixinScalar} from \"core/property_mixins\"\nimport {Line, Fill} from \"core/visuals\"\nimport {SpatialUnits, RenderMode} from \"core/enums\"\nimport {Color} from \"core/types\"\nimport {show, hide} from \"core/dom\"\nimport * as p from \"core/properties\"\nimport {ViewTransform} from \"core/layout/layout_canvas\"\n\nexport class BoxAnnotationView extends AnnotationView {\n  model: BoxAnnotation\n  visuals: BoxAnnotation.Visuals\n\n  initialize(options: any): void {\n    super.initialize(options)\n    this.plot_view.canvas_overlays.appendChild(this.el)\n    this.el.classList.add(\"bk-shading\")\n    hide(this.el)\n  }\n\n  connect_signals(): void {\n    super.connect_signals()\n    // need to respond to either normal BB change events or silent\n    // \"data only updates\" that tools might want to use\n    if (this.model.render_mode == 'css') {\n      // dispatch CSS update immediately\n      this.connect(this.model.change, () => this.render())\n      this.connect(this.model.data_update, () => this.render())\n    } else {\n      this.connect(this.model.change, () => this.plot_view.request_render())\n      this.connect(this.model.data_update, () => this.plot_view.request_render())\n    }\n  }\n\n  render(): void {\n    if (!this.model.visible && this.model.render_mode == 'css')\n      hide(this.el)\n\n    if (!this.model.visible)\n      return\n\n    // don't render if *all* position are null\n    if (this.model.left == null && this.model.right == null && this.model.top == null && this.model.bottom == null) {\n      hide(this.el)\n      return\n    }\n\n    const {frame} = this.plot_model\n    const xscale = frame.xscales[this.model.x_range_name]\n    const yscale = frame.yscales[this.model.y_range_name]\n\n    const _calc_dim = (dim: number | null, dim_units: SpatialUnits, scale: Scale, view: ViewTransform, frame_extrema: number): number => {\n      let sdim\n      if (dim != null) {\n        if (this.model.screen)\n          sdim = dim\n        else {\n          if (dim_units == 'data')\n            sdim = scale.compute(dim)\n          else\n            sdim = view.compute(dim)\n        }\n      } else\n        sdim = frame_extrema\n      return sdim\n    }\n\n    const sleft   = _calc_dim(this.model.left,   this.model.left_units,   xscale, frame.xview, frame._left.value)\n    const sright  = _calc_dim(this.model.right,  this.model.right_units,  xscale, frame.xview, frame._right.value)\n    const stop    = _calc_dim(this.model.top,    this.model.top_units,    yscale, frame.yview, frame._top.value)\n    const sbottom = _calc_dim(this.model.bottom, this.model.bottom_units, yscale, frame.yview, frame._bottom.value)\n\n    const draw = this.model.render_mode == 'css' ? this._css_box.bind(this) : this._canvas_box.bind(this)\n    draw(sleft, sright, sbottom, stop)\n  }\n\n  protected _css_box(sleft: number, sright: number, sbottom: number, stop: number): void {\n    const sw = Math.abs(sright - sleft)\n    const sh = Math.abs(sbottom - stop)\n\n    this.el.style.left = `${sleft}px`\n    this.el.style.width = `${sw}px`\n    this.el.style.top = `${stop}px`\n    this.el.style.height = `${sh}px`\n    this.el.style.borderWidth = `${this.model.properties.line_width.value()}px`\n    this.el.style.borderColor = this.model.properties.line_color.value()\n    this.el.style.backgroundColor = this.model.properties.fill_color.value()\n    this.el.style.opacity = this.model.properties.fill_alpha.value()\n\n    // try our best to honor line dashing in some way, if we can\n    const ld = this.model.properties.line_dash.value().length < 2 ? \"solid\" : \"dashed\"\n    this.el.style.borderStyle = ld\n\n    show(this.el)\n  }\n\n  protected _canvas_box(sleft: number, sright: number, sbottom: number, stop: number): void {\n    const {ctx} = this.plot_view.canvas_view\n    ctx.save()\n\n    ctx.beginPath()\n    ctx.rect(sleft, stop, sright-sleft, sbottom-stop)\n\n    this.visuals.fill.set_value(ctx)\n    ctx.fill()\n\n    this.visuals.line.set_value(ctx)\n    ctx.stroke()\n\n    ctx.restore()\n  }\n}\n\nexport namespace BoxAnnotation {\n  export interface Mixins extends LineMixinScalar, FillMixinScalar {}\n\n  export interface Attrs extends Annotation.Attrs, Mixins {\n    render_mode: RenderMode\n    x_range_name: string\n    y_range_name: string\n    top: number | null\n    top_units: SpatialUnits\n    bottom: number | null\n    bottom_units: SpatialUnits\n    left: number | null\n    left_units: SpatialUnits\n    right: number | null\n    right_units: SpatialUnits\n    screen: boolean\n  }\n\n  export interface Props extends Annotation.Props {\n    render_mode: p.Property<RenderMode>\n    x_range_name: p.Property<string>\n    y_range_name: p.Property<string>\n    top: p.Property<number | null>\n    top_units: p.Property<SpatialUnits>\n    bottom: p.Property<number | null>\n    bottom_units: p.Property<SpatialUnits>\n    left: p.Property<number | null>\n    left_units: p.Property<SpatialUnits>\n    right: p.Property<number | null>\n    right_units: p.Property<SpatialUnits>\n\n    line_color: p.Property<Color>\n    line_width: p.Property<number>\n    line_dash:  p.Property<number[]>\n    fill_color: p.Property<Color>\n    fill_alpha: p.Property<number>\n  }\n\n  export type Visuals = Annotation.Visuals & {line: Line, fill: Fill}\n}\n\nexport interface BoxAnnotation extends BoxAnnotation.Attrs {}\n\nexport class BoxAnnotation extends Annotation {\n\n  properties: BoxAnnotation.Props\n\n  constructor(attrs?: Partial<BoxAnnotation.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = 'BoxAnnotation'\n    this.prototype.default_view = BoxAnnotationView\n\n    this.mixins(['line', 'fill'])\n\n    this.define({\n      render_mode:  [ p.RenderMode,   'canvas'  ],\n      x_range_name: [ p.String,       'default' ],\n      y_range_name: [ p.String,       'default' ],\n      top:          [ p.Number,       null      ],\n      top_units:    [ p.SpatialUnits, 'data'    ],\n      bottom:       [ p.Number,       null      ],\n      bottom_units: [ p.SpatialUnits, 'data'    ],\n      left:         [ p.Number,       null      ],\n      left_units:   [ p.SpatialUnits, 'data'    ],\n      right:        [ p.Number,       null      ],\n      right_units:  [ p.SpatialUnits, 'data'    ],\n    })\n\n    this.internal({\n      screen: [ p.Boolean, false ],\n    })\n\n    this.override({\n      fill_color: '#fff9ba',\n      fill_alpha: 0.4,\n      line_color: '#cccccc',\n      line_alpha: 0.3,\n    })\n  }\n\n  data_update: Signal0<this>\n\n  initialize(): void {\n    super.initialize()\n    this.data_update = new Signal0(this, \"data_update\")\n  }\n\n  update({left, right, top, bottom}: {left: number | null, right: number | null, top: number | null, bottom: number | null}): void {\n    this.setv({left, right, top, bottom, screen: true}, {silent: true})\n    this.data_update.emit()\n  }\n}\nBoxAnnotation.initClass()\n"]}