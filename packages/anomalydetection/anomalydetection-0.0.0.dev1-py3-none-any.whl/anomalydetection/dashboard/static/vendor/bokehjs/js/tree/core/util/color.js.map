{"version":3,"sources":["core/util/color.ts"],"names":[],"mappings":"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","file":"color.js","sourcesContent":["import {svg_colors, is_svg_color} from \"./svg_colors\"\nimport {includes} from \"./array\"\n\nfunction _component2hex(v: number | string): string {\n  const h = Number(v).toString(16)\n  return h.length == 1 ? `0${h}` : h\n}\n\nexport function color2hex(color: string): string {\n  color = color + ''\n  if (color.indexOf('#') == 0)\n    return color\n  else if (is_svg_color(color))\n    return svg_colors[color]\n  else if (color.indexOf('rgb') == 0) {\n    const rgb = color.replace(/^rgba?\\(|\\s+|\\)$/g,'').split(',')\n    let hex = rgb.slice(0, 3).map(_component2hex).join('')\n    if (rgb.length == 4)\n      hex += _component2hex(Math.floor(parseFloat(rgb[3]) * 255))\n    return `#${hex.slice(0, 8)}`  // can also be rgba\n  } else\n    return color\n}\n\nexport type RGBA = [number, number, number, number]\n\nexport function color2rgba(color: string, alpha: number = 1.0): RGBA {\n  if (!color)  // NaN, null, '', etc.\n    return [0, 0, 0, 0]  // transparent\n  // Convert to hex and then to clean version of 6 or 8 chars\n  let hex = color2hex(color)\n  hex = hex.replace(/ |#/g, '')\n  if (hex.length <= 4) {\n    hex = hex.replace(/(.)/g, '$1$1')\n  }\n  // Convert pairs to numbers\n  const rgba = hex.match(/../g)!.map((i) => parseInt(i, 16)/255)\n  // Ensure correct length, add alpha if necessary\n  while (rgba.length < 3)\n    rgba.push(0)\n  if (rgba.length < 4)\n    rgba.push(alpha)\n  return rgba.slice(0, 4) as RGBA\n}\n\nexport function valid_rgb(value: string): boolean {\n  let params: {start: string, len: number, alpha: boolean}\n  switch (value.substring(0, 4)) {\n    case \"rgba\": {\n      params = {start: \"rgba(\", len: 4, alpha: true}\n      break\n    }\n    case \"rgb(\": {\n      params = {start: \"rgb(\", len: 3, alpha: false}\n      break\n    }\n    default:\n      return false\n  }\n\n  // if '.' and then ',' found, we know decimals are used on rgb\n  if (new RegExp(\".*?(\\\\.).*(,)\").test(value))\n    throw new Error(`color expects integers for rgb in rgb/rgba tuple, received ${value}`)\n\n  // extract the numerical values from inside parens\n  const contents = value.replace(params.start, \"\").replace(\")\", \"\").split(',').map(parseFloat)\n\n  // check length of array based on rgb/rgba\n  if (contents.length != params.len)\n    throw new Error(`color expects rgba ${params.len}-tuple, received ${value}`)\n\n  // check for valid numerical values for rgba\n  if (params.alpha && !(0 <= contents[3] && contents[3] <= 1))\n    throw new Error(\"color expects rgba 4-tuple to have alpha value between 0 and 1\")\n\n  if (includes(contents.slice(0, 3).map((rgb) => 0 <= rgb && rgb <= 255), false))\n    throw new Error(\"color expects rgb to have value between 0 and 255\")\n\n  return true\n}\n"]}