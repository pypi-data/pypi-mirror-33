{"version":3,"sources":["models/tools/gestures/lasso_select_tool.ts"],"names":[],"mappings":"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","file":"lasso_select_tool.js","sourcesContent":["import {SelectTool, SelectToolView} from \"./select_tool\"\nimport {PolyAnnotation} from \"../../annotations/poly_annotation\"\nimport {PolyGeometry} from \"core/geometry\"\nimport {GestureEvent, KeyEvent} from \"core/ui_events\"\nimport {Keys} from \"core/dom\"\nimport * as p from \"core/properties\"\nimport {extend} from \"core/util/object\"\n\nexport class LassoSelectToolView extends SelectToolView {\n  model: LassoSelectTool\n\n  protected data: {sx: number[], sy: number[]} | null\n\n  initialize(options: any): void {\n    super.initialize(options)\n    this.data = null\n  }\n\n  connect_signals(): void {\n    super.connect_signals()\n    this.connect(this.model.properties.active.change, () => this._active_change())\n  }\n\n  _active_change(): void {\n    if (!this.model.active)\n      this._clear_overlay()\n  }\n\n  _keyup(ev: KeyEvent): void {\n    if (ev.keyCode == Keys.Enter)\n      this._clear_overlay()\n  }\n\n  _pan_start(ev: GestureEvent): void {\n    const {sx, sy} = ev\n    this.data = {sx: [sx], sy: [sy]}\n  }\n\n  _pan(ev: GestureEvent): void {\n    const {sx: _sx, sy: _sy} = ev\n    const [sx, sy] = this.plot_model.frame.bbox.clip(_sx, _sy)\n\n    this.data!.sx.push(sx)\n    this.data!.sy.push(sy)\n\n    const overlay = this.model.overlay\n    overlay.update({xs: this.data!.sx, ys: this.data!.sy})\n\n    if (this.model.select_every_mousemove) {\n      const append = ev.shiftKey\n      this._do_select(this.data!.sx, this.data!.sy, false, append)\n    }\n  }\n\n  _pan_end(ev: GestureEvent): void {\n    this._clear_overlay()\n    const append = ev.shiftKey\n    this._do_select(this.data!.sx, this.data!.sy, true, append)\n    this.plot_view.push_state('lasso_select', {selection: this.plot_view.get_selection()})\n  }\n\n  _clear_overlay(): void {\n    this.model.overlay.update({xs: [], ys: []})\n  }\n\n  _do_select(sx: number[], sy: number[], final: boolean, append: boolean): void {\n    const geometry: PolyGeometry = {\n      type: 'poly',\n      sx: sx,\n      sy: sy,\n    }\n    this._select(geometry, final, append)\n  }\n\n  _emit_callback(geometry: PolyGeometry): void {\n    const r = this.computed_renderers[0]\n    const frame = this.plot_model.frame\n\n    const xscale = frame.xscales[r.x_range_name]\n    const yscale = frame.yscales[r.y_range_name]\n\n    const x = xscale.v_invert(geometry.sx)\n    const y = yscale.v_invert(geometry.sy)\n    const g = extend({x, y}, geometry)\n\n    this.model.callback.execute(this.model, {geometry: g})\n  }\n}\n\nconst DEFAULT_POLY_OVERLAY = () => {\n  return new PolyAnnotation({\n    level: \"overlay\",\n    xs_units: \"screen\",\n    ys_units: \"screen\",\n    fill_color: {value: \"lightgrey\"},\n    fill_alpha: {value: 0.5},\n    line_color: {value: \"black\"},\n    line_alpha: {value: 1.0},\n    line_width: {value: 2},\n    line_dash: {value: [4, 4]},\n  })\n}\n\nexport namespace LassoSelectTool {\n  export interface Attrs extends SelectTool.Attrs {\n    select_every_mousemove: boolean\n    callback: any // XXX\n    overlay: PolyAnnotation\n  }\n\n  export interface Props extends SelectTool.Props {}\n}\n\nexport interface LassoSelectTool extends LassoSelectTool.Attrs {}\n\nexport class LassoSelectTool extends SelectTool {\n\n  properties: LassoSelectTool.Props\n\n  constructor(attrs?: Partial<LassoSelectTool.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = \"LassoSelectTool\"\n\n    this.prototype.default_view = LassoSelectToolView\n\n    this.define({\n      select_every_mousemove: [ p.Bool,    true                  ],\n      callback:               [ p.Instance                       ],\n      overlay:                [ p.Instance, DEFAULT_POLY_OVERLAY ],\n    })\n  }\n\n  tool_name = \"Lasso Select\"\n  icon = \"bk-tool-icon-lasso-select\"\n  event_type = \"pan\" as \"pan\"\n  default_order = 12\n}\n\nLassoSelectTool.initClass()\n"]}