{"version":3,"sources":["core/util/canvas.ts"],"names":[],"mappings":"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","file":"canvas.js","sourcesContent":["import {OutputBackend} from \"../enums\"\n\nexport type Context2d = {\n  setLineDashOffset(offset: number): void\n  getLineDashOffset(): number\n  setImageSmoothingEnabled(value: boolean): void\n  getImageSmoothingEnabled(): boolean\n  measureText(text: string): TextMetrics & {ascent: number}\n} & CanvasRenderingContext2D\n\nfunction fixup_line_dash(ctx: any): void {\n  if (!ctx.setLineDash) {\n    ctx.setLineDash = (dash: any): void => {\n      ctx.mozDash = dash\n      ctx.webkitLineDash = dash\n    }\n  }\n  if (!ctx.getLineDash) {\n    ctx.getLineDash = (): any => {\n      return ctx.mozDash\n    }\n  }\n}\n\nfunction fixup_line_dash_offset(ctx: any): void {\n  ctx.setLineDashOffset = (offset: number): void => {\n    ctx.lineDashOffset = offset\n    ctx.mozDashOffset = offset\n    ctx.webkitLineDashOffset = offset\n  }\n  ctx.getLineDashOffset = (): number => {\n    return ctx.mozDashOffset\n  }\n}\n\nfunction fixup_image_smoothing(ctx: any): void {\n  ctx.setImageSmoothingEnabled = (value: boolean): void => {\n    ctx.imageSmoothingEnabled = value\n    ctx.mozImageSmoothingEnabled = value\n    ctx.oImageSmoothingEnabled = value\n    ctx.webkitImageSmoothingEnabled = value\n    ctx.msImageSmoothingEnabled = value\n  }\n  ctx.getImageSmoothingEnabled = (): boolean => {\n    const val = ctx.imageSmoothingEnabled\n    return val != null ? val : true\n  }\n}\n\nfunction fixup_measure_text(ctx: any): void {\n  if (ctx.measureText && ctx.html5MeasureText == null) {\n    ctx.html5MeasureText = ctx.measureText\n\n    ctx.measureText = (text: string) => {\n      const textMetrics = ctx.html5MeasureText(text)\n      // fake it til you make it\n      textMetrics.ascent = ctx.html5MeasureText(\"m\").width * 1.6\n      return textMetrics\n    }\n  }\n}\n\nfunction fixup_ellipse(ctx: any): void {\n  // implementing the ctx.ellipse function with bezier curves\n  // we don't implement the startAngle, endAngle and anticlockwise arguments.\n  function ellipse_bezier(x: number, y: number,\n                          radiusX: number, radiusY: number,\n                          rotation: number, _startAngle: number, _endAngle: number, anticlockwise: boolean = false) {\n    const c = 0.551784 // see http://www.tinaja.com/glib/ellipse4.pdf\n\n    ctx.translate(x, y)\n    ctx.rotate(rotation)\n\n    let rx = radiusX\n    let ry = radiusY\n    if (anticlockwise) {\n      rx = -radiusX\n      ry = -radiusY\n    }\n\n    ctx.moveTo(-rx, 0) // start point of first curve\n    ctx.bezierCurveTo(-rx,  ry * c, -rx * c,  ry, 0,  ry)\n    ctx.bezierCurveTo( rx * c,  ry,  rx,  ry * c,  rx, 0)\n    ctx.bezierCurveTo( rx, -ry * c,  rx * c, -ry, 0, -ry)\n    ctx.bezierCurveTo(-rx * c, -ry, -rx, -ry * c, -rx, 0)\n\n    ctx.rotate(-rotation)\n    ctx.translate(-x, -y)\n  }\n\n  if (!ctx.ellipse)\n    ctx.ellipse = ellipse_bezier\n}\n\nexport function fixup_ctx(ctx: any): void {\n  fixup_line_dash(ctx)\n  fixup_line_dash_offset(ctx)\n  fixup_image_smoothing(ctx)\n  fixup_measure_text(ctx)\n  fixup_ellipse(ctx)\n}\n\nexport function get_scale_ratio(ctx: any, hidpi: boolean, backend: OutputBackend): number {\n  if (backend == \"svg\")\n    return 1\n  else if (hidpi) {\n    const devicePixelRatio = window.devicePixelRatio || 1\n    const backingStoreRatio = ctx.webkitBackingStorePixelRatio ||\n                              ctx.mozBackingStorePixelRatio    ||\n                              ctx.msBackingStorePixelRatio     ||\n                              ctx.oBackingStorePixelRatio      ||\n                              ctx.backingStorePixelRatio       || 1\n    return devicePixelRatio / backingStoreRatio\n  } else\n    return 1\n}\n"]}