{"version":3,"sources":["models/tools/edit/point_draw_tool.ts"],"names":[],"mappings":"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","file":"point_draw_tool.js","sourcesContent":["import {Keys} from \"core/dom\"\nimport {GestureEvent, TapEvent, KeyEvent} from \"core/ui_events\"\nimport * as p from \"core/properties\"\nimport {GlyphRenderer} from \"../../renderers/glyph_renderer\"\nimport {EditTool, EditToolView, HasXYGlyph} from \"./edit_tool\"\n\nexport class PointDrawToolView extends EditToolView {\n  model: PointDrawTool\n\n  _tap(ev: TapEvent): void {\n    const append = ev.shiftKey\n    const renderers = this._select_event(ev, append, this.model.renderers);\n    if (renderers.length || !this.model.add) {\n      return\n    }\n\n    const renderer = this.model.renderers[0];\n    const point = this._map_drag(ev.sx, ev.sy, renderer);\n    if (point == null) {\n      return;\n    }\n    // Type once dataspecs are typed\n    const glyph: any = renderer.glyph\n    const ds = renderer.data_source;\n    const [xkey, ykey] = [glyph.x.field, glyph.y.field];\n    const [x, y] = point;\n\n    if (xkey) ds.get_array(xkey).push(x)\n    if (ykey) ds.get_array(ykey).push(y)\n\n    this._pad_empty_columns(ds, [xkey, ykey]);\n\n    ds.change.emit();\n    ds.properties.data.change.emit();\n  }\n\n  _keyup(ev: KeyEvent): void {\n    if (!this.model.active || !this._mouse_in_frame) { return; }\n    for (const renderer of this.model.renderers) {\n      if (ev.keyCode === Keys.Backspace) {\n        this._delete_selected(renderer);\n      } else if (ev.keyCode == Keys.Esc) {\n        // Type once selection_manager is typed\n        const cds = renderer.data_source;\n        cds.selection_manager.clear();\n      }\n    }\n  }\n\n  _pan_start(ev: GestureEvent): void {\n    if (!this.model.drag) { return; }\n    this._select_event(ev, true, this.model.renderers);\n    this._basepoint = [ev.sx, ev.sy];\n  }\n\n  _pan(ev: GestureEvent): void {\n    if (!this.model.drag || this._basepoint == null) {\n      return;\n    }\n    this._drag_points(ev, this.model.renderers);\n  }\n\n  _pan_end(ev: GestureEvent): void {\n    if (!this.model.drag) { return; }\n    this._pan(ev);\n    for (const renderer of this.model.renderers) {\n      renderer.data_source.selected.indices = []\n\n      // This is only needed to call @_tell_document_about_change()\n      renderer.data_source.data = renderer.data_source.data\n\n      renderer.data_source.properties.data.change.emit()\n    }\n    this._basepoint = null;\n  }\n}\n\nexport namespace PointDrawTool {\n  export interface Attrs extends EditTool.Attrs {\n    add: boolean\n    drag: boolean\n    renderers: (GlyphRenderer & HasXYGlyph)[]\n  }\n\n  export interface Props extends EditTool.Props {}\n}\n\nexport interface PointDrawTool extends PointDrawTool.Attrs {}\n\nexport class PointDrawTool extends EditTool {\n\n  properties: PointDrawTool.Props\n\n  renderers: (GlyphRenderer & HasXYGlyph)[]\n\n  constructor(attrs?: Partial<PointDrawTool.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = \"PointDrawTool\"\n    this.prototype.default_view = PointDrawToolView\n\n    this.define({\n      add:  [ p.Bool, true ],\n      drag: [ p.Bool, true ],\n    })\n  }\n\n  tool_name = \"Point Draw Tool\"\n  icon = \"bk-tool-icon-point-draw\"\n  event_type = [\"tap\" as \"tap\", \"pan\" as \"pan\", \"move\" as \"move\"]\n  default_order = 2\n}\nPointDrawTool.initClass()\n"]}