{"version":3,"sources":["models/glyphs/circle.ts"],"names":[],"mappings":"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","file":"circle.js","sourcesContent":["import {XYGlyph, XYGlyphView, XYGlyphData} from \"./xy_glyph\"\nimport {PointGeometry, SpanGeometry, RectGeometry, PolyGeometry} from \"core/geometry\"\nimport {DistanceSpec, AngleSpec} from \"core/vectorization\"\nimport {LineMixinVector, FillMixinVector} from \"core/property_mixins\"\nimport {Line, Fill} from \"core/visuals\"\nimport {Arrayable} from \"core/types\"\nimport * as hittest from \"core/hittest\"\nimport * as p from \"core/properties\"\nimport {IBBox} from \"core/util/bbox\"\nimport {range} from \"core/util/array\"\nimport {map} from \"core/util/arrayable\"\nimport {Context2d} from \"core/util/canvas\"\nimport {Selection} from \"../selections/selection\"\n\nexport interface CircleData extends XYGlyphData {\n  _angle: Arrayable<number>\n  _size: Arrayable<number>\n  _radius?: Arrayable<number>\n\n  sradius: Arrayable<number>\n\n  max_size: number\n  max_radius: number\n}\n\nexport interface CircleView extends CircleData {}\n\nexport class CircleView extends XYGlyphView {\n  model: Circle\n  visuals: Circle.Visuals\n\n  protected _map_data(): void {\n    // XXX: Order is important here: size is always present (at least\n    // a default), but radius is only present if a user specifies it.\n    if (this._radius != null) {\n      if (this.model.properties.radius.spec.units == \"data\") {\n        const rd = this.model.properties.radius_dimension.spec.value\n        switch (rd) {\n          case \"x\": {\n            this.sradius = this.sdist(this.renderer.xscale, this._x, this._radius)\n            break\n          }\n          case \"y\": {\n            this.sradius = this.sdist(this.renderer.yscale, this._y, this._radius)\n            break\n          }\n        }\n      } else {\n        this.sradius = this._radius\n        this.max_size = 2*this.max_radius\n      }\n    } else\n      this.sradius = map(this._size, (s) => s/2)\n  }\n\n  protected _mask_data(): number[] {\n    const [hr, vr] = this.renderer.plot_view.frame.bbox.ranges\n\n    let x0: number, y0: number\n    let x1: number, y1: number\n    if (this._radius != null && this.model.properties.radius.units == \"data\") {\n      const sx0 = hr.start\n      const sx1 = hr.end\n      ;[x0, x1] = this.renderer.xscale.r_invert(sx0, sx1)\n      x0 -= this.max_radius\n      x1 += this.max_radius\n\n      const sy0 = vr.start\n      const sy1 = vr.end\n      ;[y0, y1] = this.renderer.yscale.r_invert(sy0, sy1)\n      y0 -= this.max_radius\n      y1 += this.max_radius\n    } else {\n      const sx0 = hr.start - this.max_size\n      const sx1 = hr.end + this.max_size\n      ;[x0, x1] = this.renderer.xscale.r_invert(sx0, sx1)\n\n      const sy0 = vr.start - this.max_size\n      const sy1 = vr.end + this.max_size\n      ;[y0, y1] = this.renderer.yscale.r_invert(sy0, sy1)\n    }\n\n    const bbox = hittest.validate_bbox_coords([x0, x1], [y0, y1])\n    return this.index.indices(bbox)\n  }\n\n  protected _render(ctx: Context2d, indices: number[], {sx, sy, sradius}: CircleData): void {\n    for (const i of indices) {\n      if (isNaN(sx[i] + sy[i] + sradius[i]))\n        continue\n\n      ctx.beginPath()\n      ctx.arc(sx[i], sy[i], sradius[i], 0, 2*Math.PI, false)\n\n      if (this.visuals.fill.doit) {\n        this.visuals.fill.set_vectorize(ctx, i)\n        ctx.fill()\n      }\n\n      if (this.visuals.line.doit) {\n        this.visuals.line.set_vectorize(ctx, i)\n        ctx.stroke()\n      }\n    }\n  }\n\n  protected _hit_point(geometry: PointGeometry): Selection {\n    let dist, r2, sx0, sx1, sy0, sy1, x0, x1, y0, y1\n    const {sx, sy} = geometry\n    const x = this.renderer.xscale.invert(sx)\n    const y = this.renderer.yscale.invert(sy)\n\n    // check radius first\n    if ((this._radius != null) && (this.model.properties.radius.units == \"data\")) {\n      x0 = x - this.max_radius\n      x1 = x + this.max_radius\n\n      y0 = y - this.max_radius\n      y1 = y + this.max_radius\n\n    } else {\n      sx0 = sx - this.max_size\n      sx1 = sx + this.max_size\n      ;[x0, x1] = this.renderer.xscale.r_invert(sx0, sx1)\n      ;[x0, x1] = [Math.min(x0, x1), Math.max(x0, x1)]\n\n      sy0 = sy - this.max_size\n      sy1 = sy + this.max_size\n      ;[y0, y1] = this.renderer.yscale.r_invert(sy0, sy1)\n      ;[y0, y1] = [Math.min(y0, y1), Math.max(y0, y1)]\n    }\n\n    const bbox = hittest.validate_bbox_coords([x0, x1], [y0, y1])\n    const candidates = this.index.indices(bbox)\n\n    const hits: [number, number][] = []\n    if ((this._radius != null) && (this.model.properties.radius.units == \"data\")) {\n      for (const i of candidates) {\n        r2 = Math.pow(this.sradius[i], 2)\n        ;[sx0, sx1] = this.renderer.xscale.r_compute(x, this._x[i])\n        ;[sy0, sy1] = this.renderer.yscale.r_compute(y, this._y[i])\n        dist = Math.pow(sx0-sx1, 2) + Math.pow(sy0-sy1, 2)\n        if (dist <= r2) {\n          hits.push([i, dist])\n        }\n      }\n    } else {\n      for (const i of candidates) {\n        r2 = Math.pow(this.sradius[i], 2)\n        dist = Math.pow(this.sx[i]-sx, 2) + Math.pow(this.sy[i]-sy, 2)\n        if (dist <= r2) {\n          hits.push([i, dist])\n        }\n      }\n    }\n\n    return hittest.create_hit_test_result_from_hits(hits)\n  }\n\n  protected _hit_span(geometry: SpanGeometry): Selection {\n      let ms, x0, x1, y0, y1\n      const {sx, sy} = geometry\n      const {minX, minY, maxX, maxY} = this.bounds()\n      const result = hittest.create_empty_hit_test_result()\n\n      if (geometry.direction == 'h') {\n        // use circle bounds instead of current pointer y coordinates\n        let sx0, sx1\n        y0 = minY\n        y1 = maxY\n        if (this._radius != null && this.model.properties.radius.units == \"data\") {\n          sx0 = sx - this.max_radius\n          sx1 = sx + this.max_radius\n          ;[x0, x1] = this.renderer.xscale.r_invert(sx0, sx1)\n        } else {\n          ms = this.max_size/2\n          sx0 = sx - ms\n          sx1 = sx + ms\n          ;[x0, x1] = this.renderer.xscale.r_invert(sx0, sx1)\n        }\n      } else {\n        // use circle bounds instead of current pointer x coordinates\n        let sy0, sy1\n        x0 = minX\n        x1 = maxX\n        if (this._radius != null && this.model.properties.radius.units == \"data\") {\n          sy0 = sy - this.max_radius\n          sy1 = sy + this.max_radius\n          ;[y0, y1] = this.renderer.yscale.r_invert(sy0, sy1)\n        } else {\n          ms = this.max_size/2\n          sy0 = sy - ms\n          sy1 = sy + ms\n          ;[y0, y1] = this.renderer.yscale.r_invert(sy0, sy1)\n        }\n      }\n\n      const bbox = hittest.validate_bbox_coords([x0, x1], [y0, y1])\n      const hits = this.index.indices(bbox)\n\n      result.indices = hits\n      return result\n    }\n\n  protected _hit_rect(geometry: RectGeometry): Selection {\n    const {sx0, sx1, sy0, sy1} = geometry\n    const [x0, x1] = this.renderer.xscale.r_invert(sx0, sx1)\n    const [y0, y1] = this.renderer.yscale.r_invert(sy0, sy1)\n    const bbox = hittest.validate_bbox_coords([x0, x1], [y0, y1])\n    const result = hittest.create_empty_hit_test_result()\n    result.indices = this.index.indices(bbox)\n    return result\n  }\n\n  protected _hit_poly(geometry: PolyGeometry): Selection {\n    const {sx, sy} = geometry\n\n    // TODO (bev) use spatial index to pare candidate list\n    const candidates = range(0, this.sx.length)\n\n    const hits = []\n    for (let i = 0, end = candidates.length; i < end; i++) {\n      const idx = candidates[i]\n      if (hittest.point_in_poly(this.sx[i], this.sy[i], sx, sy)) {\n        hits.push(idx)\n      }\n    }\n\n    const result = hittest.create_empty_hit_test_result()\n    result.indices = hits\n    return result\n  }\n\n  // circle does not inherit from marker (since it also accepts radius) so we\n  // must supply a draw_legend for it  here\n  draw_legend_for_index(ctx: Context2d, {x0, y0, x1, y1}: IBBox, index: number): void {\n    // using objects like this seems a little wonky, since the keys are coerced to\n    // stings, but it works\n    const len = index + 1\n\n    const sx: number[] = new Array(len)\n    sx[index] = (x0 + x1)/2\n    const sy: number[] = new Array(len)\n    sy[index] = (y0 + y1)/2\n\n    const sradius: number[] = new Array(len)\n    sradius[index] = Math.min(Math.abs(x1 - x0), Math.abs(y1 - y0))*0.2\n\n    this._render(ctx, [index], {sx, sy, sradius} as any) // XXX\n  }\n}\n\nexport namespace Circle {\n  export interface Mixins extends LineMixinVector, FillMixinVector {}\n\n  export interface Attrs extends XYGlyph.Attrs, Mixins {\n    angle: AngleSpec\n    size: DistanceSpec\n    radius: DistanceSpec | null\n    radius_dimension: \"x\" | \"y\"\n  }\n\n  export interface Props extends XYGlyph.Props {\n    angle: p.AngleSpec\n    size: p.DistanceSpec\n    radius: p.DistanceSpec\n    radius_dimension: p.Property<\"x\" | \"y\">\n  }\n\n  export interface Visuals extends XYGlyph.Visuals {\n    line: Line\n    fill: Fill\n  }\n}\n\nexport interface Circle extends Circle.Attrs {}\n\nexport class Circle extends XYGlyph {\n\n  properties: Circle.Props\n\n  constructor(attrs?: Partial<Circle.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = 'Circle'\n    this.prototype.default_view = CircleView\n\n    this.mixins(['line', 'fill'])\n    this.define({\n      angle:            [ p.AngleSpec,    0                             ],\n      size:             [ p.DistanceSpec, { units: \"screen\", value: 4 } ],\n      radius:           [ p.DistanceSpec, null                          ],\n      radius_dimension: [ p.String,       'x'                           ],\n    })\n  }\n\n  initialize(): void {\n    super.initialize()\n    this.properties.radius.optional = true\n  }\n}\nCircle.initClass()\n"]}