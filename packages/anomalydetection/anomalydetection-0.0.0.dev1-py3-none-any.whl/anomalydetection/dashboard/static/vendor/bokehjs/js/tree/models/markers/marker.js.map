{"version":3,"sources":["models/markers/marker.ts"],"names":[],"mappings":"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","file":"marker.js","sourcesContent":["import {XYGlyph, XYGlyphView, XYGlyphData} from \"../glyphs/xy_glyph\"\nimport {PointGeometry, SpanGeometry, RectGeometry, PolyGeometry} from \"core/geometry\"\nimport {DistanceSpec, AngleSpec} from \"core/vectorization\"\nimport {LineMixinVector, FillMixinVector} from \"core/property_mixins\"\nimport {Line, Fill} from \"core/visuals\"\nimport {Arrayable} from \"core/types\"\nimport * as hittest from \"core/hittest\"\nimport * as p from \"core/properties\"\nimport {IBBox} from \"core/util/bbox\"\nimport {range} from \"core/util/array\"\nimport {Context2d} from \"core/util/canvas\"\nimport {Selection} from \"../selections/selection\"\n\nexport type RenderOne = (ctx: Context2d, i: number, r: number, line: Line, fill: Fill) => void\n\nexport interface MarkerData extends XYGlyphData {\n  _size: Arrayable<number>\n  _angle: Arrayable<number>\n\n  max_size: number\n}\n\nexport interface MarkerView extends MarkerData {}\n\nexport abstract class MarkerView extends XYGlyphView {\n  model: Marker\n  visuals: Marker.Visuals\n\n  protected _render_one: RenderOne\n\n  protected _render(ctx: Context2d, indices: number[], {sx, sy, _size, _angle}: MarkerData): void {\n    for (const i of indices) {\n      if (isNaN(sx[i] + sy[i] + _size[i] + _angle[i]))\n        continue\n\n      const r = _size[i]/2\n\n      ctx.beginPath()\n      ctx.translate(sx[i], sy[i])\n\n      if (_angle[i])\n        ctx.rotate(_angle[i])\n\n      this._render_one(ctx, i, r, this.visuals.line, this.visuals.fill)\n\n      if (_angle[i])\n        ctx.rotate(-_angle[i])\n\n      ctx.translate(-sx[i], -sy[i])\n    }\n  }\n\n  protected _mask_data(): number[] {\n    // dilate the inner screen region by max_size and map back to data space for use in\n    // spatial query\n    const hr = this.renderer.plot_view.frame.bbox.h_range\n    const sx0 = hr.start - this.max_size\n    const sx1 = hr.end + this.max_size\n    const [x0, x1] = this.renderer.xscale.r_invert(sx0, sx1)\n\n    const vr = this.renderer.plot_view.frame.bbox.v_range\n    const sy0 = vr.start - this.max_size\n    const sy1 = vr.end + this.max_size\n    const [y0, y1] = this.renderer.yscale.r_invert(sy0, sy1)\n\n    const bbox = hittest.validate_bbox_coords([x0, x1], [y0, y1])\n    return this.index.indices(bbox)\n  }\n\n  protected _hit_point(geometry: PointGeometry): Selection {\n    const {sx, sy} = geometry\n\n    const sx0 = sx - this.max_size\n    const sx1 = sx + this.max_size\n    const [x0, x1] = this.renderer.xscale.r_invert(sx0, sx1)\n\n    const sy0 = sy - this.max_size\n    const sy1 = sy + this.max_size\n    const [y0, y1] = this.renderer.yscale.r_invert(sy0, sy1)\n\n    const bbox = hittest.validate_bbox_coords([x0, x1], [y0, y1])\n    const candidates = this.index.indices(bbox)\n\n    const hits: [number, number][] = []\n    for (const i of candidates) {\n      const s2 = this._size[i]/2\n      const dist = Math.abs(this.sx[i] - sx) + Math.abs(this.sy[i] - sy)\n      if (Math.abs(this.sx[i] - sx) <= s2 && Math.abs(this.sy[i] - sy) <= s2) {\n        hits.push([i, dist])\n      }\n    }\n    return hittest.create_hit_test_result_from_hits(hits)\n  }\n\n  protected _hit_span(geometry: SpanGeometry): Selection {\n    const {sx, sy} = geometry\n    const {minX, minY, maxX, maxY} = this.bounds()\n    const result = hittest.create_empty_hit_test_result()\n\n    let x0: number, x1: number\n    let y0: number, y1: number\n    if (geometry.direction == 'h') {\n      y0 = minY\n      y1 = maxY\n      const ms = this.max_size/2\n      const sx0 = sx - ms\n      const sx1 = sx + ms\n      ;[x0, x1] = this.renderer.xscale.r_invert(sx0, sx1)\n    } else {\n      x0 = minX\n      x1 = maxX\n      const ms = this.max_size/2\n      const sy0 = sy - ms\n      const sy1 = sy + ms\n      ;[y0, y1] = this.renderer.yscale.r_invert(sy0, sy1)\n    }\n\n    const bbox = hittest.validate_bbox_coords([x0, x1], [y0, y1])\n    const hits = this.index.indices(bbox)\n\n    result.indices = hits\n    return result\n  }\n\n  protected _hit_rect(geometry: RectGeometry): Selection {\n    const {sx0, sx1, sy0, sy1} = geometry\n    const [x0, x1] = this.renderer.xscale.r_invert(sx0, sx1)\n    const [y0, y1] = this.renderer.yscale.r_invert(sy0, sy1)\n    const bbox = hittest.validate_bbox_coords([x0, x1], [y0, y1])\n    const result = hittest.create_empty_hit_test_result()\n    result.indices = this.index.indices(bbox)\n    return result\n  }\n\n  protected _hit_poly(geometry: PolyGeometry): Selection {\n    const {sx, sy} = geometry\n\n    // TODO (bev) use spatial index to pare candidate list\n    const candidates = range(0, this.sx.length)\n\n    const hits = []\n    for (let i = 0, end = candidates.length; i < end; i++) {\n      const idx = candidates[i]\n      if (hittest.point_in_poly(this.sx[i], this.sy[i], sx, sy))\n        hits.push(idx)\n    }\n    const result = hittest.create_empty_hit_test_result()\n    result.indices = hits\n    return result\n  }\n\n  draw_legend_for_index(ctx: Context2d, {x0, x1, y0, y1}: IBBox, index: number): void {\n    // using objects like this seems a little wonky, since the keys are coerced to\n    // stings, but it works\n    const len = index + 1\n\n    const sx: number[] = new Array(len)\n    sx[index] = (x0 + x1)/2\n    const sy: number[] = new Array(len)\n    sy[index] = (y0 + y1)/2\n\n    const size: number[] = new Array(len)\n    size[index] = Math.min(Math.abs(x1 - x0), Math.abs(y1 - y0))*0.4\n    const angle: number[] = new Array(len)\n    angle[index] = this._angle[index]\n\n    this._render(ctx, [index], {sx, sy, _size: size, _angle: angle} as any) // XXX\n  }\n}\n\nexport namespace Marker {\n  export interface Mixins extends LineMixinVector, FillMixinVector {}\n\n  export interface Attrs extends XYGlyph.Attrs, Mixins {\n    size: DistanceSpec\n    angle: AngleSpec\n  }\n\n  export interface Props extends XYGlyph.Props {}\n\n  export interface Visuals extends XYGlyph.Visuals {\n    line: Line\n    fill: Fill\n  }\n}\n\nexport interface Marker extends Marker.Attrs {}\n\nexport abstract class Marker extends XYGlyph {\n\n  properties: Marker.Props\n\n  constructor(attrs?: Partial<Marker.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.mixins(['line', 'fill'])\n    this.define({\n      size:  [ p.DistanceSpec, { units: \"screen\", value: 4 } ],\n      angle: [ p.AngleSpec,    0                             ],\n    })\n  }\n}\nMarker.initClass()\n"]}