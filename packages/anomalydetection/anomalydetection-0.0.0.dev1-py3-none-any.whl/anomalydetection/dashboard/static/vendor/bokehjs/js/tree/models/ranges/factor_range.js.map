{"version":3,"sources":["models/ranges/factor_range.ts"],"names":[],"mappings":"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","file":"factor_range.js","sourcesContent":["import {Range} from \"./range\"\nimport {PaddingUnits} from \"core/enums\"\nimport * as p from \"core/properties\"\nimport {Arrayable} from \"core/types\"\nimport {map} from \"core/util/arrayable\"\nimport {all, sum} from \"core/util/array\"\nimport {isArray, isNumber, isString} from \"core/util/types\"\n\nexport type L1Factor = string\nexport type L2Factor = [string, string]\nexport type L3Factor = [string, string, string]\n\nexport type Factor = L1Factor | L2Factor | L3Factor\n\nexport type L1OffsetFactor = [string, number]\nexport type L2OffsetFactor = [string, string, number]\nexport type L3OffsetFactor = [string, string, string, number]\n\nexport type OffsetFactor = L1OffsetFactor | L2OffsetFactor | L3OffsetFactor\n\nexport type L1Mapping = {[key: string]: {value: number}}\nexport type L2Mapping = {[key: string]: {value: number, mapping: L1Mapping}}\nexport type L3Mapping = {[key: string]: {value: number, mapping: L2Mapping}}\n\nexport function map_one_level(factors: L1Factor[], padding: number, offset: number = 0): [L1Mapping, number] {\n  const mapping: {[key: string]: {value: number}} = {}\n\n  for (let i = 0; i < factors.length; i++) {\n    const factor = factors[i]\n    if (factor in mapping)\n      throw new Error(`duplicate factor or subfactor: ${factor}`)\n    else\n      mapping[factor] = {value: 0.5 + i*(1 + padding) + offset}\n  }\n\n  return [mapping, (factors.length - 1)*padding]\n}\n\nexport function map_two_levels(factors: L2Factor[],\n                               outer_pad: number, factor_pad: number,\n                               offset: number = 0): [L2Mapping, string[], number] {\n  const mapping: L2Mapping = {}\n\n  const tops: {[key: string]: string[]} = {}\n  const tops_order: string[] = []\n  for (const [f0, f1] of factors) {\n    if (!(f0 in tops)) {\n      tops[f0] = []\n      tops_order.push(f0)\n    }\n    tops[f0].push(f1)\n  }\n\n  let suboffset = offset\n  let total_subpad = 0\n  for (const f0 of tops_order) {\n    const n = tops[f0].length\n    const [submap, subpad] = map_one_level(tops[f0], factor_pad, suboffset)\n    total_subpad += subpad\n    const subtot = sum(tops[f0].map((f1) => submap[f1].value))\n    mapping[f0] = {value: subtot/n, mapping: submap}\n    suboffset += n + outer_pad + subpad\n  }\n\n  return [mapping, tops_order, (tops_order.length-1)*outer_pad + total_subpad]\n}\n\nexport function map_three_levels(factors: L3Factor[],\n                                 outer_pad: number, inner_pad: number, factor_pad: number,\n                                 offset: number = 0): [L3Mapping, string[], [string, string][], number] {\n  const mapping: L3Mapping = {}\n\n  const tops: {[key: string]: [string, string][]} = {}\n  const tops_order: string[] = []\n  for (const [f0, f1, f2] of factors) {\n    if (!(f0 in tops)) {\n      tops[f0] = []\n      tops_order.push(f0)\n    }\n    tops[f0].push([f1, f2])\n  }\n\n  const mids_order: [string, string][] = []\n\n  let suboffset = offset\n  let total_subpad = 0\n  for (const f0 of tops_order) {\n    const n = tops[f0].length\n    const [submap, submids_order, subpad] = map_two_levels(tops[f0], inner_pad, factor_pad, suboffset)\n    for (const f1 of submids_order)\n      mids_order.push([f0, f1])\n    total_subpad += subpad\n    const subtot = sum(tops[f0].map(([f1,]) => submap[f1].value))\n    mapping[f0] = {value: subtot/n, mapping: submap}\n    suboffset += n + outer_pad + subpad\n  }\n\n  return [mapping, tops_order, mids_order, (tops_order.length-1)*outer_pad + total_subpad]\n}\n\nexport namespace FactorRange {\n  export interface Attrs extends Range.Attrs {\n    factors: Factor[]\n    factor_padding: number\n    subgroup_padding: number\n    group_padding: number\n    range_padding: number\n    range_padding_units: PaddingUnits\n    start: number\n    end: number\n\n    levels: number\n    mids: [string, string][] | undefined\n    tops: string[] | undefined\n    tops_groups: string[]\n  }\n\n  export interface Props extends Range.Props {\n    factors: p.Property<Factor[]>\n    factor_padding: p.Property<number>\n    subgroup_padding: p.Property<number>\n    group_padding: p.Property<number>\n    range_padding: p.Property<number>\n    range_padding_units: p.Property<PaddingUnits>\n    start: p.Property<number>\n    end: p.Property<number>\n  }\n}\n\nexport interface FactorRange extends FactorRange.Attrs {}\n\nexport class FactorRange extends Range {\n\n  properties: FactorRange.Props\n\n  constructor(attrs?: Partial<FactorRange.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = \"FactorRange\"\n\n    this.define({\n      factors:             [ p.Array,        []        ],\n      factor_padding:      [ p.Number,       0         ],\n      subgroup_padding:    [ p.Number,       0.8       ],\n      group_padding:       [ p.Number,       1.4       ],\n      range_padding:       [ p.Number,       0         ],\n      range_padding_units: [ p.PaddingUnits, \"percent\" ],\n      start:               [ p.Number                  ],\n      end:                 [ p.Number                  ],\n    })\n\n    this.internal({\n      levels:      [ p.Number ], // how many levels of\n      mids:        [ p.Array  ], // mid level factors (if 3 total levels)\n      tops:        [ p.Array  ], // top level factors (whether 2 or 3 total levels)\n      tops_groups: [ p.Array  ], // ordered list of full factors for each top level factor in tops\n    })\n  }\n\n  protected _mapping: L1Mapping | L2Mapping | L3Mapping\n\n  get min(): number {\n    return this.start\n  }\n\n  get max(): number {\n    return this.end\n  }\n\n  initialize(): void {\n    super.initialize()\n    this._init()\n  }\n\n  connect_signals(): void {\n    super.connect_signals()\n    this.connect(this.properties.factors.change, () => this.reset())\n    this.connect(this.properties.factor_padding.change, () => this.reset())\n    this.connect(this.properties.group_padding.change, () => this.reset())\n    this.connect(this.properties.subgroup_padding.change, () => this.reset())\n    this.connect(this.properties.range_padding.change, () => this.reset())\n    this.connect(this.properties.range_padding_units.change, () => this.reset())\n  }\n\n  reset(): void {\n    this._init()\n    this.change.emit()\n  }\n\n  protected _lookup(x: any): number {\n    if (x.length == 1) {\n      const m = this._mapping as L1Mapping\n      if (!m.hasOwnProperty(x[0])) {\n        return NaN\n      }\n      return m[x[0]].value\n    } else if (x.length == 2) {\n      const m = this._mapping as L2Mapping\n      if (!m.hasOwnProperty(x[0]) || !m[x[0]].mapping.hasOwnProperty(x[1])) {\n        return NaN\n      }\n      return m[x[0]].mapping[x[1]].value\n    } else if (x.length == 3) {\n      const m = this._mapping as L3Mapping\n      if (!m.hasOwnProperty(x[0]) || !m[x[0]].mapping.hasOwnProperty(x[1]) || !m[x[0]].mapping[x[1]].mapping.hasOwnProperty(x[2]))  {\n        return NaN\n      }\n      return m[x[0]].mapping[x[1]].mapping[x[2]].value\n    } else\n      throw new Error(\"unreachable code\")\n  }\n\n  // convert a string factor into a synthetic coordinate\n  synthetic(x: number | Factor | OffsetFactor): number {\n    if (isNumber(x))\n      return x\n\n    if (isString(x))\n      return this._lookup([x])\n\n    let offset = 0\n    const off = x[x.length-1]\n    if (isNumber(off)) {\n      offset = off\n      x = x.slice(0, -1) as Factor\n    }\n\n    return this._lookup(x) + offset\n  }\n\n  // convert an array of string factors into synthetic coordinates\n  v_synthetic(xs: Arrayable<number | Factor | OffsetFactor>): Arrayable<number> {\n    return map(xs, (x) => this.synthetic(x))\n  }\n\n  protected _init(): void {\n    let levels: number\n    let inside_padding: number\n    if (all(this.factors as any, isString)) {\n      levels = 1;\n      [this._mapping, inside_padding] = map_one_level(this.factors as string[], this.factor_padding)\n    } else if (all(this.factors as any, (x) => isArray(x) && x.length == 2 && isString(x[0]) && isString(x[1]))) {\n      levels = 2;\n      [this._mapping, this.tops, inside_padding] = map_two_levels(this.factors as [string, string][], this.group_padding, this.factor_padding)\n    } else if (all(this.factors as any, (x) => isArray(x) && x.length == 3  && isString(x[0]) && isString(x[1]) && isString(x[2]))) {\n      levels = 3;\n      [this._mapping, this.tops, this.mids, inside_padding] = map_three_levels(this.factors as [string, string, string][], this.group_padding, this.subgroup_padding, this.factor_padding)\n    } else\n      throw new Error(\"???\")\n\n    let start = 0\n    let end = this.factors.length + inside_padding\n\n    if (this.range_padding_units == \"percent\") {\n      const half_span = (end - start) * this.range_padding / 2\n      start -= half_span\n      end += half_span\n    } else {\n      start -= this.range_padding\n      end += this.range_padding\n    }\n\n    this.setv({start: start, end: end, levels: levels}, {silent: true})\n\n    if (this.bounds == \"auto\")\n      this.setv({bounds: [start, end]}, {silent: true})\n  }\n}\n\nFactorRange.initClass()\n"]}