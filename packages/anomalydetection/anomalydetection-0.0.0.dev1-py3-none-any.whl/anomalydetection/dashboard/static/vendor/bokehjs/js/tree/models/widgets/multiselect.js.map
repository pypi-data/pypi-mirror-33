{"version":3,"sources":["models/widgets/multiselect.ts"],"names":[],"mappings":"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","file":"multiselect.js","sourcesContent":["import {empty, label, select, option} from \"core/dom\"\nimport {isString} from \"core/util/types\"\nimport * as p from \"core/properties\"\n\nimport {InputWidget, InputWidgetView} from \"./input_widget\"\n\nexport class MultiSelectView extends InputWidgetView {\n  model: MultiSelect\n\n  protected selectEl: HTMLSelectElement\n\n  initialize(options: any): void {\n    super.initialize(options)\n    this.render()\n  }\n\n  connect_signals(): void {\n    super.connect_signals()\n    this.connect(this.model.properties.value.change, () => this.render_selection())\n    this.connect(this.model.properties.options.change, () => this.render())\n    this.connect(this.model.properties.name.change, () => this.render())\n    this.connect(this.model.properties.title.change, () => this.render())\n    this.connect(this.model.properties.size.change, () => this.render())\n    this.connect(this.model.properties.disabled.change, () => this.render())\n  }\n\n  render(): void {\n    super.render()\n    empty(this.el)\n\n    const labelEl = label({for: this.model.id}, this.model.title)\n    this.el.appendChild(labelEl)\n\n    const options = this.model.options.map((opt) => {\n      let value, _label\n      if (isString(opt))\n        value = _label  = opt\n      else\n        [value, _label] = opt\n\n      const selected = value in this.model.value\n      return option({selected: selected, value: value}, _label)\n    })\n\n    this.selectEl = select({\n      multiple: true,\n      class: \"bk-widget-form-input\",\n      id: this.model.id,\n      name: this.model.name,\n      size: this.model.size,\n      disabled: this.model.disabled}, options)\n    this.selectEl.addEventListener(\"change\", () => this.change_input())\n    this.el.appendChild(this.selectEl)\n    this.render_selection()\n  }\n\n  render_selection(): void {\n    const values: {[key: string]: boolean} = {}\n    for (const x of this.model.value)\n      values[x] = true\n\n    for (const el of Array.from(this.el.querySelectorAll('option'))) {\n      if (values[el.value])\n        el.selected = true\n    }\n\n    // Note that some browser implementations might not reduce\n    // the number of visible options for size <= 3.\n    this.selectEl.size = this.model.size\n  }\n\n  change_input(): void {\n    const is_focused = this.el.querySelector('select:focus') != null\n\n    const values = []\n    for (const el of Array.from(this.el.querySelectorAll('option'))) {\n      if (el.selected)\n        values.push(el.value)\n    }\n\n    this.model.value = values\n    super.change_input()\n    // Restore focus back to the <select> afterwards,\n    // so that even if python on_change callback is invoked,\n    // focus remains on <select> and one can seamlessly scroll\n    // up/down.\n    if (is_focused)\n      this.selectEl.focus()\n  }\n}\n\nexport namespace MultiSelect {\n  export interface Attrs extends InputWidget.Attrs {\n    value: string[]\n    options: string[]\n    size: number\n  }\n\n  export interface Props extends InputWidget.Props {\n    value: p.Property<string[]>\n    options: p.Property<string[]>\n    size: p.Property<number>\n  }\n}\n\nexport interface MultiSelect extends MultiSelect.Attrs {}\n\nexport class MultiSelect extends InputWidget {\n\n  properties: MultiSelect.Props\n\n  constructor(attrs?: Partial<MultiSelect.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = \"MultiSelect\"\n    this.prototype.default_view = MultiSelectView\n\n    this.define({\n      value:   [ p.Array, [] ],\n      options: [ p.Array, [] ],\n      size:    [ p.Number, 4 ], // 4 is the HTML default\n    })\n  }\n}\n\nMultiSelect.initClass()\n"]}