{"version":3,"sources":["models/formatters/numeral_tick_formatter.ts"],"names":[],"mappings":";;;AAAA,+BAAgC;AAEhC,mDAA8C;AAG9C,mCAAoC;AAcpC;IAA0C,gDAAa;IAIrD,8BAAY,KAA2C;eACrD,kBAAM,KAAK,CAAC;IACd,CAAC;IAEM,8BAAS,GAAhB;QACE,IAAI,CAAC,SAAS,CAAC,IAAI,GAAG,sBAAsB,CAAA;QAE5C,IAAI,CAAC,MAAM,CAAC;YACV,gDAAgD;YAChD,MAAM,EAAI,CAAE,CAAC,CAAC,MAAM,EAAE,KAAK,CAAI;YAC/B,QAAQ,EAAE,CAAE,CAAC,CAAC,MAAM,EAAE,IAAI,CAAK;YAC/B,QAAQ,EAAE,CAAE,CAAC,CAAC,MAAM,EAAE,OAAO,CAAE;SAChC,CAAC,CAAA;IACJ,CAAC;IAED,sBAAY,8CAAY;aAAxB;YACE,QAAQ,IAAI,CAAC,QAAQ,EAAE;gBACrB,KAAK,OAAO,CAAC;gBACb,KAAK,SAAS;oBACZ,OAAO,IAAI,CAAC,KAAK,CAAA;gBACnB,KAAK,OAAO,CAAC;gBACb,KAAK,WAAW;oBACd,OAAO,IAAI,CAAC,KAAK,CAAA;gBACnB,KAAK,MAAM,CAAC;gBACZ,KAAK,SAAS;oBACZ,OAAO,IAAI,CAAC,IAAI,CAAA;aACnB;QACH,CAAC;;;OAAA;IAED,uCAAQ,GAAR,UAAS,KAAe,EAAE,KAAW;QAC7B,IAAA,SAAuC,EAAtC,kBAAM,EAAE,sBAAQ,EAAE,8BAAY,CAAQ;QAC7C,OAAO,KAAK,CAAC,GAAG,CAAC,UAAC,IAAI,IAAK,OAAA,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,YAAY,CAAC,EAAnD,CAAmD,CAAC,CAAA;IACjF,CAAC;IACH,2BAAC;AAAD,CArCA,AAqCC,CArCyC,8BAAa,GAqCtD;AArCY,oDAAoB;AAsCjC,oBAAoB,CAAC,SAAS,EAAE,CAAA","file":"numeral_tick_formatter.js","sourcesContent":["import * as Numbro from \"numbro\"\n\nimport {TickFormatter} from \"./tick_formatter\"\nimport {Axis} from \"../axes/axis\"\nimport {RoundingFunction} from \"core/enums\"\nimport * as p from \"core/properties\"\n\nexport namespace NumeralTickFormatter {\n  export interface Attrs extends TickFormatter.Attrs {\n    format: string\n    language: string\n    rounding: RoundingFunction\n  }\n\n  export interface Props extends TickFormatter.Props {}\n}\n\nexport interface NumeralTickFormatter extends NumeralTickFormatter.Attrs {}\n\nexport class NumeralTickFormatter extends TickFormatter {\n\n  properties: NumeralTickFormatter.Props\n\n  constructor(attrs?: Partial<NumeralTickFormatter.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = 'NumeralTickFormatter'\n\n    this.define({\n      // TODO (bev) all of these could be tightened up\n      format:   [ p.String, '0,0'   ],\n      language: [ p.String, 'en'    ],\n      rounding: [ p.String, 'round' ],\n    })\n  }\n\n  private get _rounding_fn(): (v: number) => number {\n    switch (this.rounding) {\n      case \"round\":\n      case \"nearest\":\n        return Math.round\n      case \"floor\":\n      case \"rounddown\":\n        return Math.floor\n      case \"ceil\":\n      case \"roundup\":\n        return Math.ceil\n    }\n  }\n\n  doFormat(ticks: number[], _axis: Axis): string[] {\n    const {format, language, _rounding_fn} = this\n    return ticks.map((tick) => Numbro.format(tick, format, language, _rounding_fn))\n  }\n}\nNumeralTickFormatter.initClass()\n"]}