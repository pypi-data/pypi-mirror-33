{"version":3,"sources":["models/filters/boolean_filter.ts"],"names":[],"mappings":";;;AAAA,mCAA+B;AAC/B,mCAAoC;AACpC,wCAAmC;AACnC,yCAA0C;AAC1C,yCAAyC;AAazC;IAAmC,yCAAM;IAIvC,uBAAY,KAAoC;eAC9C,kBAAM,KAAK,CAAC;IACd,CAAC;IAEM,uBAAS,GAAhB;QACE,IAAI,CAAC,SAAS,CAAC,IAAI,GAAG,eAAe,CAAA;QAErC,IAAI,CAAC,MAAM,CAAC;YACV,QAAQ,EAAE,CAAE,CAAC,CAAC,KAAK,EAAE,IAAI,CAAE;SAC5B,CAAC,CAAA;IACJ,CAAC;IAED,uCAAe,GAAf,UAAgB,MAA0B;QACxC,IAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAA;QAC9B,IAAI,QAAQ,IAAI,IAAI,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;YAC3C,IAAI,WAAG,CAAC,QAAQ,EAAE,iBAAS,CAAC,EAAE;gBAC5B,IAAI,QAAQ,CAAC,MAAM,KAAK,MAAM,CAAC,UAAU,EAAE,EAAE;oBAC3C,gBAAM,CAAC,IAAI,CAAC,mBAAiB,IAAI,CAAC,EAAE,mDAAgD,CAAC,CAAA;iBACtF;gBACD,OAAO,aAAK,CAAC,CAAC,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,UAAC,CAAC,IAAK,OAAA,QAAQ,CAAC,CAAC,CAAC,KAAK,IAAI,EAApB,CAAoB,CAAC,CAAA;aACrE;iBAAM;gBACL,gBAAM,CAAC,IAAI,CAAC,mBAAiB,IAAI,CAAC,EAAE,uEAAoE,CAAC,CAAA;gBACzG,OAAO,IAAI,CAAA;aACZ;SACF;aAAM;YACL,IAAI,QAAQ,IAAI,IAAI,IAAI,QAAQ,CAAC,MAAM,IAAI,CAAC;gBAC1C,gBAAM,CAAC,IAAI,CAAC,mBAAiB,IAAI,CAAC,EAAE,oDAAiD,CAAC,CAAA;;gBAEtF,gBAAM,CAAC,IAAI,CAAC,mBAAiB,IAAI,CAAC,EAAE,uDAAoD,CAAC,CAAA;YAC3F,OAAO,IAAI,CAAA;SACZ;IACH,CAAC;IACH,oBAAC;AAAD,CApCA,AAoCC,CApCkC,eAAM,GAoCxC;AApCY,sCAAa;AAqC1B,aAAa,CAAC,SAAS,EAAE,CAAA","file":"boolean_filter.js","sourcesContent":["import {Filter} from \"./filter\"\nimport * as p from \"core/properties\"\nimport {logger} from \"core/logging\"\nimport {range, all} from \"core/util/array\"\nimport {isBoolean} from \"core/util/types\"\nimport {ColumnarDataSource} from \"../sources/columnar_data_source\"\n\nexport namespace BooleanFilter {\n  export interface Attrs extends Filter.Attrs {\n    booleans: boolean[] | null\n  }\n\n  export interface Props extends Filter.Props {}\n}\n\nexport interface BooleanFilter extends BooleanFilter.Attrs {}\n\nexport class BooleanFilter extends Filter {\n\n  properties: BooleanFilter.Props\n\n  constructor(attrs?: Partial<BooleanFilter.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = 'BooleanFilter'\n\n    this.define({\n      booleans: [ p.Array, null ],\n    })\n  }\n\n  compute_indices(source: ColumnarDataSource): number[] | null {\n    const booleans = this.booleans\n    if (booleans != null && booleans.length > 0) {\n      if (all(booleans, isBoolean)) {\n        if (booleans.length !== source.get_length()) {\n          logger.warn(`BooleanFilter ${this.id}: length of booleans doesn't match data source`)\n        }\n        return range(0, booleans.length).filter((i) => booleans[i] === true)\n      } else {\n        logger.warn(`BooleanFilter ${this.id}: booleans should be array of booleans, defaulting to no filtering`)\n        return null\n      }\n    } else {\n      if (booleans != null && booleans.length == 0)\n        logger.warn(`BooleanFilter ${this.id}: booleans is empty, defaulting to no filtering`)\n      else\n        logger.warn(`BooleanFilter ${this.id}: booleans was not set, defaulting to no filtering`)\n      return null\n    }\n  }\n}\nBooleanFilter.initClass()\n"]}