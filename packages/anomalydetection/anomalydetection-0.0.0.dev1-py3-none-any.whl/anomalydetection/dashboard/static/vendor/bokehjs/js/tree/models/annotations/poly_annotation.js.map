{"version":3,"sources":["models/annotations/poly_annotation.ts"],"names":[],"mappings":"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","file":"poly_annotation.js","sourcesContent":["import {Annotation, AnnotationView} from \"./annotation\"\nimport {LineMixinScalar, FillMixinScalar} from \"core/property_mixins\"\nimport {Line, Fill} from \"core/visuals\"\nimport {SpatialUnits} from \"core/enums\"\nimport {Signal0} from \"core/signaling\"\nimport * as p from \"core/properties\"\n\nexport class PolyAnnotationView extends AnnotationView {\n  model: PolyAnnotation\n  visuals: PolyAnnotation.Visuals\n\n  connect_signals(): void {\n    super.connect_signals()\n    // need to respond to either normal BB change events or silent\n    // \"data only updates\" that tools might want to use\n    this.connect(this.model.change, () => this.plot_view.request_render())\n    this.connect(this.model.data_update, () => this.plot_view.request_render())\n  }\n\n  render(): void {\n    if (!this.model.visible)\n      return\n\n    const {xs, ys} = this.model\n\n    if (xs.length != ys.length)\n      return\n\n    if (xs.length < 3 || ys.length < 3)\n      return\n\n    const {frame} = this.plot_view\n    const {ctx} = this.plot_view.canvas_view\n\n    for (let i = 0, end = xs.length; i < end; i++) {\n      let sx: number\n      if (this.model.xs_units == 'screen')\n        sx = this.model.screen ? xs[i] : frame.xview.compute(xs[i])\n      else\n        throw new Error(\"not implemented\")\n\n      let sy: number\n      if (this.model.ys_units == 'screen')\n        sy = this.model.screen ? ys[i] : frame.yview.compute(ys[i])\n      else\n        throw new Error(\"not implemented\")\n\n      if (i == 0) {\n        ctx.beginPath()\n        ctx.moveTo(sx, sy)\n      } else {\n        ctx.lineTo(sx, sy)\n      }\n    }\n\n    ctx.closePath()\n\n    if (this.visuals.line.doit) {\n      this.visuals.line.set_value(ctx)\n      ctx.stroke()\n    }\n\n    if (this.visuals.fill.doit) {\n      this.visuals.fill.set_value(ctx)\n      ctx.fill()\n    }\n  }\n}\n\nexport namespace PolyAnnotation {\n  export interface Mixins extends LineMixinScalar, FillMixinScalar {}\n\n  export interface Attrs extends Annotation.Attrs, Mixins {\n    xs: number[]\n    xs_units: SpatialUnits\n    ys: number[]\n    ys_units: SpatialUnits\n    x_range_name: string\n    y_range_name: string\n    screen: boolean\n  }\n\n  export interface Props extends Annotation.Props {}\n\n  export type Visuals = Annotation.Visuals & {line: Line, fill: Fill}\n}\n\nexport interface PolyAnnotation extends PolyAnnotation.Attrs {}\n\nexport class PolyAnnotation extends Annotation {\n\n  properties: PolyAnnotation.Props\n\n  data_update: Signal0<this>\n\n  constructor(attrs?: Partial<PolyAnnotation.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = \"PolyAnnotation\"\n    this.prototype.default_view = PolyAnnotationView\n\n    this.mixins(['line', 'fill'])\n\n    this.define({\n      xs:           [ p.Array,        []        ],\n      xs_units:     [ p.SpatialUnits, 'data'    ],\n      ys:           [ p.Array,        []        ],\n      ys_units:     [ p.SpatialUnits, 'data'    ],\n      x_range_name: [ p.String,       'default' ],\n      y_range_name: [ p.String,       'default' ],\n    })\n\n    this.internal({\n      screen: [ p.Boolean, false ],\n    })\n\n    this.override({\n      fill_color: \"#fff9ba\",\n      fill_alpha: 0.4,\n      line_color: \"#cccccc\",\n      line_alpha: 0.3,\n    })\n  }\n\n  initialize(): void {\n    super.initialize()\n    this.data_update = new Signal0(this, \"data_update\")\n  }\n\n  update({xs, ys}: {xs: number[], ys: number[]}): void {\n    this.setv({xs, ys, screen: true}, {silent: true})\n    this.data_update.emit()\n  }\n}\nPolyAnnotation.initClass()\n"]}