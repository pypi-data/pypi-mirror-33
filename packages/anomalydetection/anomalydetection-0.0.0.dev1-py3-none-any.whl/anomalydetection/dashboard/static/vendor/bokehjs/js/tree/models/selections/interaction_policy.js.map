{"version":3,"sources":["models/selections/interaction_policy.ts"],"names":[],"mappings":"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","file":"interaction_policy.js","sourcesContent":["import {Model} from \"../../model\"\nimport {Geometry} from \"core/geometry\"\nimport {HitTestResult} from \"core/hittest\"\nimport {GlyphRendererView} from \"../renderers/glyph_renderer\"\nimport {ColumnarDataSource} from \"../sources/columnar_data_source\"\nimport {Selection} from \"../selections/selection\"\n\nexport abstract class SelectionPolicy extends Model {\n\n  abstract hit_test(geometry: Geometry, renderer_views: GlyphRendererView[]): HitTestResult\n\n  do_selection(hit_test_result: HitTestResult, source: ColumnarDataSource, final: boolean, append: boolean): boolean {\n    if (hit_test_result === null) {\n      return false\n    } else {\n      source.selected.update(hit_test_result, final, append)\n\n      //new selection created in order for python-side change detection machinery\n      //to detect change in the source's selected property.\n      const selected = new Selection()\n      selected.update(source.selected, final, false)\n      source.selected = selected\n\n      source._select.emit()\n      return !source.selected.is_empty()\n    }\n  }\n}\n\nSelectionPolicy.prototype.type = \"SelectionPolicy\"\n\nexport class IntersectRenderers extends SelectionPolicy {\n\n  hit_test(geometry: Geometry, renderer_views: GlyphRendererView[]): HitTestResult {\n    const hit_test_result_renderers = []\n    for (const r of renderer_views) {\n      const result = r.hit_test(geometry)\n      if (result !== null)\n        hit_test_result_renderers.push(result)\n    }\n    if (hit_test_result_renderers.length > 0) {\n      const hit_test_result = hit_test_result_renderers[0]\n      for (const hit_test_result_other of hit_test_result_renderers) {\n        hit_test_result.update_through_intersection(hit_test_result_other)\n      }\n      return hit_test_result\n    } else {\n      return null\n    }\n  }\n}\n\nIntersectRenderers.prototype.type = \"IntersectRenderers\"\n\nexport class UnionRenderers extends SelectionPolicy {\n\n  hit_test(geometry: Geometry, renderer_views: GlyphRendererView[]): HitTestResult {\n    const hit_test_result_renderers = []\n    for (const r of renderer_views) {\n      const result = r.hit_test(geometry)\n      if (result !== null)\n        hit_test_result_renderers.push(result)\n    }\n    if (hit_test_result_renderers.length > 0) {\n      const hit_test_result = hit_test_result_renderers[0]\n      for (const hit_test_result_other of hit_test_result_renderers) {\n        hit_test_result.update_through_union(hit_test_result_other)\n      }\n      return hit_test_result\n    } else {\n      return null\n    }\n  }\n}\n\nUnionRenderers.prototype.type = \"UnionRenderers\"\n"]}