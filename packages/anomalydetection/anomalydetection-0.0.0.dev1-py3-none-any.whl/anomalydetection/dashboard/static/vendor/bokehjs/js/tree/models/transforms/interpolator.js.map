{"version":3,"sources":["models/transforms/interpolator.ts"],"names":[],"mappings":";;;AAAA,yCAAqC;AAErC,mCAAoC;AAEpC,yCAAwC;AACxC,yCAAiD;AAejD;IAA2C,wCAAS;IAIlD,sBAAY,KAAmC;QAA/C,YACE,kBAAM,KAAK,CAAC,SACb;QAeS,mBAAa,GAAG,IAAI,CAAA;;IAf9B,CAAC;IAEM,sBAAS,GAAhB;QACE,IAAI,CAAC,SAAS,CAAC,IAAI,GAAG,cAAc,CAAA;QAEpC,IAAI,CAAC,MAAM,CAAC;YACV,CAAC,EAAK,CAAE,CAAC,CAAC,GAAG,CAAS;YACtB,CAAC,EAAK,CAAE,CAAC,CAAC,GAAG,CAAS;YACtB,IAAI,EAAE,CAAE,CAAC,CAAC,GAAG,CAAS;YACtB,IAAI,EAAE,CAAE,CAAC,CAAC,IAAI,EAAE,IAAI,CAAE;SACvB,CAAC,CAAA;IACJ,CAAC;IAMD,sCAAe,GAAf;QAAA,iBAGC;QAFC,iBAAM,eAAe,WAAE,CAAA;QACvB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,cAAM,OAAA,KAAI,CAAC,aAAa,GAAG,IAAI,EAAzB,CAAyB,CAAC,CAAA;IAC5D,CAAC;IAED,gCAAS,GAAT,UAAU,EAAqB;QAC7B,IAAM,MAAM,GAAG,IAAI,YAAY,CAAC,EAAE,CAAC,MAAM,CAAC,CAAA;QAC1C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAClC,IAAM,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAA;YACf,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAA;SAC5B;QACD,OAAO,MAAM,CAAA;IACf,CAAC;IAED,2BAAI,GAAJ,UAAK,UAA2B;QAA3B,2BAAA,EAAA,kBAA2B;QAC9B,IAAI,CAAC,IAAI,CAAC,aAAa;YACrB,OAAM;QAER,IAAI,GAAsB,CAAA;QAC1B,IAAI,GAAsB,CAAA;QAC1B,IAAI,gBAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,gBAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,EAAE;YAC7D,IAAM,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAA;YACxC,IAAI,CAAC,gBAAQ,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC,CAAC;gBACjC,MAAM,IAAI,KAAK,CAAC,0FAA0F,CAAC,CAAA;YAC7G,IAAI,CAAC,gBAAQ,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC,CAAC;gBACjC,MAAM,IAAI,KAAK,CAAC,0FAA0F,CAAC,CAAA;YAE7G,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAE,CAAA;YACnC,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAE,CAAA;SACpC;aAAM,IAAI,eAAO,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,eAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE;YAC7C,GAAG,GAAG,IAAI,CAAC,CAAC,CAAA;YACZ,GAAG,GAAG,IAAI,CAAC,CAAC,CAAA;SACb;aAAM;YACL,MAAM,IAAI,KAAK,CAAC,oEAAoE,CAAC,CAAA;SACtF;QAED,IAAI,GAAG,CAAC,MAAM,KAAK,GAAG,CAAC,MAAM;YAC3B,MAAM,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAA;QAExD,IAAI,GAAG,CAAC,MAAM,GAAG,CAAC;YAChB,MAAM,IAAI,KAAK,CAAC,kEAAkE,CAAC,CAAA;QAErF,iDAAiD;QACjD,2EAA2E;QAC3E,IAAM,IAAI,GAA6B,EAAE,CAAA;QACzC,KAAK,IAAM,CAAC,IAAI,GAAG,EAAE;YACnB,IAAI,CAAC,IAAI,CAAC,EAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,EAAC,CAAC,CAAA;SAClC;QAED,IAAI,UAAU;YACZ,IAAI,CAAC,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAArC,CAAqC,CAAC,CAAA;;YAE1D,IAAI,CAAC,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAArC,CAAqC,CAAC,CAAA;QAE5D,IAAI,CAAC,SAAS,GAAG,EAAE,CAAA;QACnB,IAAI,CAAC,SAAS,GAAG,EAAE,CAAA;QACnB,KAAqB,UAAI,EAAJ,aAAI,EAAJ,kBAAI,EAAJ,IAAI;YAAd,IAAA,eAAM,EAAL,QAAC,EAAE,QAAC;YACd,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;YACtB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;SACvB;QAED,IAAI,CAAC,aAAa,GAAG,KAAK,CAAA;IAC5B,CAAC;IACH,mBAAC;AAAD,CAtFA,AAsFC,CAtF0C,qBAAS,GAsFnD;AAtFqB,oCAAY;AAuFlC,YAAY,CAAC,SAAS,EAAE,CAAA","file":"interpolator.js","sourcesContent":["import {Transform} from \"./transform\"\nimport {ColumnarDataSource} from \"../sources/columnar_data_source\"\nimport * as p from \"core/properties\"\nimport {Arrayable} from \"core/types\"\nimport {includes} from \"core/util/array\"\nimport {isString, isArray} from \"core/util/types\"\n\nexport namespace Interpolator {\n  export interface Attrs extends Transform.Attrs {\n    x: string | number[]\n    y: string | number[]\n    data: ColumnarDataSource | null\n    clip: boolean\n  }\n\n  export interface Props extends Transform.Props {}\n}\n\nexport interface Interpolator extends Interpolator.Attrs {}\n\nexport abstract class Interpolator extends Transform {\n\n  properties: Interpolator.Props\n\n  constructor(attrs?: Partial<Interpolator.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = \"Interpolator\"\n\n    this.define({\n      x:    [ p.Any        ],\n      y:    [ p.Any        ],\n      data: [ p.Any        ],\n      clip: [ p.Bool, true ],\n    })\n  }\n\n  protected _x_sorted: number[]\n  protected _y_sorted: number[]\n  protected _sorted_dirty = true\n\n  connect_signals(): void {\n    super.connect_signals()\n    this.connect(this.change, () => this._sorted_dirty = true)\n  }\n\n  v_compute(xs: Arrayable<number>): Arrayable<number> {\n    const result = new Float64Array(xs.length)\n    for (let i = 0; i < xs.length; i++) {\n      const x = xs[i]\n      result[i] = this.compute(x)\n    }\n    return result\n  }\n\n  sort(descending: boolean = false): void {\n    if (!this._sorted_dirty)\n      return\n\n    let tsx: Arrayable<number>\n    let tsy: Arrayable<number>\n    if (isString(this.x) && isString(this.y) && this.data != null) {\n      const column_names = this.data.columns()\n      if (!includes(column_names, this.x))\n        throw new Error(\"The x parameter does not correspond to a valid column name defined in the data parameter\")\n      if (!includes(column_names, this.y))\n        throw new Error(\"The y parameter does not correspond to a valid column name defined in the data parameter\")\n\n      tsx = this.data.get_column(this.x)!\n      tsy = this.data.get_column(this.y)!\n    } else if (isArray(this.x) && isArray(this.y)) {\n      tsx = this.x\n      tsy = this.y\n    } else {\n      throw new Error(\"parameters 'x' and 'y' must be both either string fields or arrays\")\n    }\n\n    if (tsx.length !== tsy.length)\n      throw new Error(\"The length for x and y do not match\")\n\n    if (tsx.length < 2)\n      throw new Error(\"x and y must have at least two elements to support interpolation\")\n\n    // The following sorting code is referenced from:\n    // http://stackoverflow.com/questions/11499268/sort-two-arrays-the-same-way\n    const list: {x: number, y: number}[] = []\n    for (const j in tsx) {\n      list.push({x: tsx[j], y: tsy[j]})\n    }\n\n    if (descending)\n      list.sort((a, b) => a.x > b.x ? -1 : (a.x == b.x ? 0 : 1))\n    else\n      list.sort((a, b) => a.x < b.x ? -1 : (a.x == b.x ? 0 : 1))\n\n    this._x_sorted = []\n    this._y_sorted = []\n    for (const {x, y} of list) {\n      this._x_sorted.push(x)\n      this._y_sorted.push(y)\n    }\n\n    this._sorted_dirty = false\n  }\n}\nInterpolator.initClass()\n"]}