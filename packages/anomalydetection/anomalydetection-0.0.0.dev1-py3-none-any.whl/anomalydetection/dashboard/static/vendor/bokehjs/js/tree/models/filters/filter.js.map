{"version":3,"sources":["models/filters/filter.ts"],"names":[],"mappings":";;;AAAA,qCAAiC;AAEjC,mCAAoC;AACpC,yCAA+D;AAC/D,yCAAqC;AACrC,wCAAmC;AAYnC;IAA4B,kCAAK;IAI/B,gBAAY,KAA6B;eACvC,kBAAM,KAAK,CAAC;IACd,CAAC;IAEM,gBAAS,GAAhB;QACE,IAAI,CAAC,SAAS,CAAC,IAAI,GAAG,QAAQ,CAAA;QAE9B,IAAI,CAAC,MAAM,CAAC;YACV,MAAM,EAAE,CAAE,CAAC,CAAC,KAAK,EAAE,IAAI,CAAE;SAC1B,CAAC,CAAA;IACJ,CAAC;IAED,gCAAe,GAAf,UAAgB,OAAmB;QACjC,IAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAA;QAC1B,IAAI,MAAM,IAAI,IAAI,IAAI,MAAM,CAAC,MAAM,IAAI,CAAC,EAAE;YACxC,IAAI,iBAAS,CAAC,MAAM,EAAE,iBAAS,CAAC,EAAE;gBAChC,OAAO,aAAK,CAAC,CAAC,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,UAAC,CAAC,IAAK,OAAA,MAAM,CAAC,CAAC,CAAC,KAAK,IAAI,EAAlB,CAAkB,CAAC,CAAA;aACjE;YACD,IAAI,iBAAS,CAAC,MAAM,EAAE,iBAAS,CAAC,EAAE;gBAChC,OAAO,MAAM,CAAA;aACd;YACD,gBAAM,CAAC,IAAI,CAAC,YAAU,IAAI,CAAC,EAAE,kGAA+F,CAAC,CAAA;YAC7H,OAAO,IAAI,CAAA;SACZ;aAAM;YACL,gBAAM,CAAC,IAAI,CAAC,YAAU,IAAI,CAAC,EAAE,oEAAiE,CAAC,CAAA;YAC/F,OAAO,IAAI,CAAA;SACZ;IACH,CAAC;IACH,aAAC;AAAD,CAhCA,AAgCC,CAhC2B,aAAK,GAgChC;AAhCY,wBAAM;AAiCnB,MAAM,CAAC,SAAS,EAAE,CAAA","file":"filter.js","sourcesContent":["import {Model} from \"../../model\"\nimport {DataSource} from \"../sources/data_source\"\nimport * as p from \"core/properties\"\nimport {isBoolean, isInteger, isArrayOf} from \"core/util/types\"\nimport {range} from \"core/util/array\"\nimport {logger} from \"core/logging\"\n\nexport namespace Filter {\n  export interface Attrs extends Model.Attrs {\n    filter: boolean[] | number[] | null\n  }\n\n  export interface Props extends Model.Props {}\n}\n\nexport interface Filter extends Filter.Attrs {}\n\nexport class Filter extends Model {\n\n  properties: Filter.Props\n\n  constructor(attrs?: Partial<Filter.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = 'Filter'\n\n    this.define({\n      filter: [ p.Array, null ],\n    })\n  }\n\n  compute_indices(_source: DataSource): number[] | null {\n    const filter = this.filter\n    if (filter != null && filter.length >= 0) {\n      if (isArrayOf(filter, isBoolean)) {\n        return range(0, filter.length).filter((i) => filter[i] === true)\n      }\n      if (isArrayOf(filter, isInteger)) {\n        return filter\n      }\n      logger.warn(`Filter ${this.id}: filter should either be array of only booleans or only integers, defaulting to no filtering`)\n      return null\n    } else {\n      logger.warn(`Filter ${this.id}: filter was not set to be an array, defaulting to no filtering`)\n      return null\n    }\n  }\n}\nFilter.initClass()\n"]}