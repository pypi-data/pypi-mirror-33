{"version":3,"sources":["models/glyphs/webgl/line.ts"],"names":[],"mappings":"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","file":"line.js","sourcesContent":["import {Program, VertexBuffer, IndexBuffer, Texture2D} from \"gloo2\"\nimport {BaseGLGlyph, Transform} from \"./base\"\nimport {vertex_shader} from \"./line.vert\"\nimport {fragment_shader} from \"./line.frag\"\nimport {LineView} from \"../line\"\nimport {color2rgba} from \"core/util/color\"\n\nclass DashAtlas {\n\n  protected _atlas: {[key: string]: [number, number]} = {}\n  protected _index = 0\n  protected _width = 256\n  protected _height = 256\n\n  tex: Texture2D\n\n  constructor(gl: WebGLRenderingContext) {\n    // Init texture\n    this.tex = new Texture2D(gl)\n    this.tex.set_wrapping(gl.REPEAT, gl.REPEAT)\n    this.tex.set_interpolation(gl.NEAREST, gl.NEAREST)\n    this.tex.set_size([this._height, this._width], gl.RGBA)\n    this.tex.set_data([0, 0], [this._height, this._width], new Uint8Array(this._height * this._width * 4))\n    // Init with solid line (index 0 is reserved for this)\n    this.get_atlas_data([1])\n  }\n\n  get_atlas_data(pattern: number[]): [number, number] {\n    const key = pattern.join('-')\n    const findex_period = this._atlas[key]\n    if (findex_period === undefined) {\n      const [data, period] = this.make_pattern(pattern)\n      this.tex.set_data([this._index, 0], [1, this._width], new Uint8Array(data.map((x) => x+10)))\n      this._atlas[key] = [this._index / this._height, period]\n      this._index += 1\n    }\n    return this._atlas[key]\n  }\n\n  make_pattern(pattern: number[]): [Float32Array, number] {\n    // A pattern is defined as on/off sequence of segments\n    // It must be a multiple of 2\n    if (pattern.length > 1 && pattern.length % 2) {\n      pattern = pattern.concat(pattern)\n    }\n    // Period is sum of elements\n    let period = 0\n    for (const v of pattern) {\n       period += v\n    }\n    // Find all start and end of on-segment only\n    const C: number[] = []; let c = 0\n    for (let i = 0, end = pattern.length+2; i < end; i += 2) {\n      const a = Math.max(0.0001, pattern[i % pattern.length])\n      const b = Math.max(0.0001, pattern[(i+1) % pattern.length])\n      C.push(c, c + a)\n      c += a + b\n    }\n    // Build pattern\n    const n = this._width\n    const Z = new Float32Array(n * 4)\n    for (let i = 0, end = n; i < end; i++) {\n      let dash_end, dash_start, dash_type\n      const x = (period * i) / (n-1)\n      // get index at min - index = np.argmin(abs(C-(x)))\n      let index = 0; let val_at_index = 1e16\n      for (let j = 0, endj = C.length; j < endj; j++) {\n        const val = Math.abs(C[j]-x)\n        if (val < val_at_index) {\n           index = j; val_at_index = val\n         }\n      }\n      if ((index % 2) === 0) {\n        dash_type = (x <= C[index]) ? +1 : 0\n        dash_start = C[index]; dash_end = C[index+1]\n      } else {\n        dash_type = (x > C[index]) ? -1 : 0\n        dash_start = C[index-1]; dash_end = C[index]\n      }\n      Z[(i*4)+0] = C[index]\n      Z[(i*4)+1] = dash_type\n      Z[(i*4)+2] = dash_start\n      Z[(i*4)+3] = dash_end\n    }\n    return [Z, period]\n  }\n}\n\nconst joins: {[key: string]: number} = {miter: 0, round: 1, bevel: 2}\n\nconst caps: {[key: string]: number} = {\n  '': 0, 'none': 0, '.': 0,\n  'round': 1, ')': 1, '(': 1, 'o': 1,\n  'triangle in': 2, '<': 2,\n  'triangle out': 3, '>': 3,\n  'square': 4, '[': 4, ']': 4, '=': 4,\n  'butt': 5, '|': 5,\n}\n\nexport class LineGLGlyph extends BaseGLGlyph {\n  readonly glyph: LineView\n\n  protected prog: Program\n  protected index_buffer: IndexBuffer\n  protected vbo_position: VertexBuffer\n  protected vbo_tangents: VertexBuffer\n  protected vbo_segment: VertexBuffer\n  protected vbo_angles: VertexBuffer\n  protected vbo_texcoord: VertexBuffer\n\n  private dash_atlas: DashAtlas\n\n  protected _scale_aspect: number\n\n  protected I_triangles: Float32Array\n\n  protected V_position: Float32Array\n  protected V_angles: Float32Array\n  protected V_tangents: Float32Array\n  protected V_texcoord: Float32Array\n  protected V_segment: Float32Array\n\n  protected tangents: Float32Array\n\n  protected _baked_offset: [number, number]\n\n  protected cumsum: number\n\n  protected init(): void {\n    const {gl} = this\n    this._scale_aspect = 0;  // keep track, so we know when we need to update segment data\n\n    const vert = vertex_shader\n    const frag = fragment_shader\n\n    // The program\n    this.prog = new Program(gl)\n    this.prog.set_shaders(vert, frag)\n    this.index_buffer = new IndexBuffer(gl)\n    // Buffers\n    this.vbo_position = new VertexBuffer(gl)\n    this.vbo_tangents = new VertexBuffer(gl)\n    this.vbo_segment = new VertexBuffer(gl)\n    this.vbo_angles = new VertexBuffer(gl)\n    this.vbo_texcoord = new VertexBuffer(gl)\n    // Dash atlas\n    this.dash_atlas = new DashAtlas(gl)\n  }\n\n  draw(indices: number[], mainGlyph: LineView, trans: Transform): void {\n    const mainGlGlyph = mainGlyph.glglyph!\n\n    if (mainGlGlyph.data_changed) {\n      if (!(isFinite(trans.dx) && isFinite(trans.dy))) {\n        return;  // not sure why, but it happens on init sometimes (#4367)\n      }\n      mainGlGlyph._baked_offset = [trans.dx, trans.dy];  // float32 precision workaround; used in _bake() and below\n      mainGlGlyph._set_data()\n      mainGlGlyph.data_changed = false\n    }\n\n    if (this.visuals_changed) {\n      this._set_visuals()\n      this.visuals_changed = false\n    }\n\n    // Decompose x-y scale into scalar scale and aspect-vector.\n    let {sx, sy} = trans\n    const scale_length = Math.sqrt(sx*sx + sy*sy)\n    sx /= scale_length\n    sy /= scale_length\n\n    // Do we need to re-calculate segment data and cumsum?\n    if (Math.abs(this._scale_aspect - sy/sx) > Math.abs(1e-3 * this._scale_aspect)) {\n      mainGlGlyph._update_scale(sx, sy)\n      this._scale_aspect = sy / sx\n    }\n\n    // Select buffers from main glyph\n    // (which may be this glyph but maybe not if this is a (non)selection glyph)\n    this.prog.set_attribute('a_position', 'vec2', mainGlGlyph.vbo_position)\n    this.prog.set_attribute('a_tangents', 'vec4', mainGlGlyph.vbo_tangents)\n    this.prog.set_attribute('a_segment', 'vec2', mainGlGlyph.vbo_segment)\n    this.prog.set_attribute('a_angles', 'vec2', mainGlGlyph.vbo_angles)\n    this.prog.set_attribute('a_texcoord', 'vec2', mainGlGlyph.vbo_texcoord)\n    //\n    this.prog.set_uniform('u_length', 'float', [mainGlGlyph.cumsum])\n    this.prog.set_texture('u_dash_atlas', this.dash_atlas.tex)\n\n    // Handle transformation to device coordinates\n    const baked_offset = mainGlGlyph._baked_offset\n    this.prog.set_uniform('u_pixel_ratio', 'float', [trans.pixel_ratio])\n    this.prog.set_uniform('u_canvas_size', 'vec2', [trans.width, trans.height])\n    this.prog.set_uniform('u_offset', 'vec2', [trans.dx - baked_offset[0], trans.dy - baked_offset[1]])\n    this.prog.set_uniform('u_scale_aspect', 'vec2', [sx, sy])\n    this.prog.set_uniform('u_scale_length', 'float', [scale_length])\n\n    this.I_triangles = mainGlGlyph.I_triangles\n    if (this.I_triangles.length < 65535) {\n      // Data is small enough to draw in one pass\n      this.index_buffer.set_size(this.I_triangles.length*2)\n      this.index_buffer.set_data(0, new Uint16Array(this.I_triangles))\n      this.prog.draw(this.gl.TRIANGLES, this.index_buffer)\n      // @prog.draw(@gl.LINE_STRIP, @index_buffer)  # Use this to draw the line skeleton\n    } else {\n      // Work around the limit that the indexbuffer must be uint16. We draw in chunks.\n      // First collect indices in chunks\n      indices = Array.from(this.I_triangles)\n      const nvertices = this.I_triangles.length\n      const chunksize = 64008;  // 65536 max. 64008 is divisible by 12\n      const chunks: number[][] = []\n      for (let i = 0, end = Math.ceil(nvertices/chunksize); i < end; i++) {\n         chunks.push([])\n      }\n      for (let i = 0, end = indices.length; i < end; i++) {\n        const uint16_index = indices[i] % chunksize\n        const chunk = Math.floor(indices[i] / chunksize)\n        chunks[chunk].push(uint16_index)\n      }\n      // Then draw each chunk\n      for (let chunk = 0, end = chunks.length; chunk < end; chunk++) {\n        const these_indices = new Uint16Array(chunks[chunk])\n        const offset = chunk * chunksize * 4\n        if (these_indices.length === 0) {\n          continue\n        }\n        this.prog.set_attribute('a_position', 'vec2', mainGlGlyph.vbo_position, 0, offset * 2)\n        this.prog.set_attribute('a_tangents', 'vec4', mainGlGlyph.vbo_tangents, 0, offset * 4)\n        this.prog.set_attribute('a_segment', 'vec2', mainGlGlyph.vbo_segment, 0, offset * 2)\n        this.prog.set_attribute('a_angles', 'vec2', mainGlGlyph.vbo_angles, 0, offset * 2)\n        this.prog.set_attribute('a_texcoord', 'vec2', mainGlGlyph.vbo_texcoord, 0, offset * 2)\n        // The actual drawing\n        this.index_buffer.set_size(these_indices.length*2)\n        this.index_buffer.set_data(0, these_indices)\n        this.prog.draw(this.gl.TRIANGLES, this.index_buffer)\n      }\n    }\n  }\n\n  protected _set_data(): void {\n    this._bake()\n\n    this.vbo_position.set_size(this.V_position.length*4)\n    this.vbo_position.set_data(0, this.V_position)\n\n    this.vbo_tangents.set_size(this.V_tangents.length*4)\n    this.vbo_tangents.set_data(0, this.V_tangents)\n\n    this.vbo_angles.set_size(this.V_angles.length*4)\n    this.vbo_angles.set_data(0, this.V_angles)\n\n    this.vbo_texcoord.set_size(this.V_texcoord.length*4)\n    this.vbo_texcoord.set_data(0, this.V_texcoord)\n  }\n\n  protected _set_visuals(): void {\n    const color = color2rgba(this.glyph.visuals.line.line_color.value(), this.glyph.visuals.line.line_alpha.value())\n    const cap = caps[this.glyph.visuals.line.line_cap.value()]\n    const join = joins[this.glyph.visuals.line.line_join.value()]\n\n    this.prog.set_uniform('u_color', 'vec4', color)\n    this.prog.set_uniform('u_linewidth', 'float', [this.glyph.visuals.line.line_width.value()])\n    this.prog.set_uniform('u_antialias', 'float', [0.9]);  // Smaller aa-region to obtain crisper images\n\n    this.prog.set_uniform('u_linecaps', 'vec2', [cap, cap])\n    this.prog.set_uniform('u_linejoin', 'float', [join])\n    this.prog.set_uniform('u_miter_limit', 'float', [10.0]);  // 10 should be a good value\n    // https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-miterlimit\n\n    const dash_pattern = this.glyph.visuals.line.line_dash.value()\n    let dash_index = 0; let dash_period = 1\n    if (dash_pattern.length) {\n      [dash_index, dash_period] = this.dash_atlas.get_atlas_data(dash_pattern)\n    }\n    this.prog.set_uniform('u_dash_index', 'float', [dash_index]);  // 0 means solid line\n    this.prog.set_uniform('u_dash_phase', 'float', [this.glyph.visuals.line.line_dash_offset.value()])\n    this.prog.set_uniform('u_dash_period', 'float', [dash_period])\n    this.prog.set_uniform('u_dash_caps', 'vec2', [cap, cap])\n    this.prog.set_uniform('u_closed', 'float', [0]);  // We dont do closed lines\n  }\n\n  protected _bake(): void {\n    // This is what you get if you port 50 lines of numpy code to JS.\n    // V_segment is handled in another method, because it depends on the aspect\n    // ratio of the scale (The original paper/code assumed isotropic scaling).\n    //\n    // Buffer dtype from the Python implementation:\n    //\n    // self.vtype = np.dtype( [('a_position', 'f4', 2),\n    //                         ('a_segment',  'f4', 2),\n    //                         ('a_angles',   'f4', 2),\n    //                         ('a_tangents', 'f4', 4),\n    //                         ('a_texcoord', 'f4', 2) ])\n\n    // Init array of implicit shape nx2\n    let I, T, V_angles2, V_position2, V_tangents2, V_texcoord2, Vp, Vt\n    const n = this.nvertices\n    const _x = new Float64Array(this.glyph._x)\n    const _y = new Float64Array(this.glyph._y)\n\n    // Init vertex data\n    const V_position = (Vp = new Float32Array(n*2))\n    //V_segment = new Float32Array(n*2)  # Done later\n    const V_angles = new Float32Array(n*2)\n    const V_tangents = (Vt = new Float32Array(n*4));  // mind the 4!\n\n    // Position\n    for (let i = 0, end = n; i < end; i++) {\n      V_position[(i*2)+0] = _x[i] + this._baked_offset[0]\n      V_position[(i*2)+1] = _y[i] + this._baked_offset[1]\n    }\n\n    // Tangents & norms (need tangents to calculate segments based on scale)\n    this.tangents = (T = new Float32Array((n*2)-2))\n    for (let i = 0, end = n-1; i < end; i++) {\n      T[(i*2)+0] = Vp[((i+1)*2)+0] - Vp[(i*2)+0]\n      T[(i*2)+1] = Vp[((i+1)*2)+1] - Vp[(i*2)+1]\n    }\n\n    for (let i = 0, end = n-1; i < end; i++) {\n      // V['a_tangents'][+1:, :2] = T\n      V_tangents[((i+1)*4)+0] = T[(i*2)+0]\n      V_tangents[((i+1)*4)+1] = T[(i*2)+1]\n      // V['a_tangents'][:-1, 2:] = T\n      V_tangents[(i*4)+2] = T[(i*2)+0]\n      V_tangents[(i*4)+3] = T[(i*2)+1]\n    }\n\n    // V['a_tangents'][0  , :2] = T[0]\n    V_tangents[(0*4)+0] = T[0]\n    V_tangents[(0*4)+1] = T[1]\n    // V['a_tangents'][ -1, 2:] = T[-1]\n    V_tangents[((n-1)*4)+2] = T[((n-2)*2)+0]\n    V_tangents[((n-1)*4)+3] = T[((n-2)*2)+1]\n\n    // Angles\n    const A = new Float32Array(n)\n    for (let i = 0, end = n; i < end; i++) {\n      A[i] = Math.atan2((Vt[(i*4)+0]*Vt[(i*4)+3]) - (Vt[(i*4)+1]*Vt[(i*4)+2]),\n                        (Vt[(i*4)+0]*Vt[(i*4)+2]) + (Vt[(i*4)+1]*Vt[(i*4)+3]))\n    }\n    for (let i = 0, end = n-1; i < end; i++) {\n      V_angles[(i*2)+0] = A[i]\n      V_angles[(i*2)+1] = A[i+1]\n    }\n\n    // Step 1: A -- B -- C  =>  A -- B, B' -- C\n\n    // Repeat our array 4 times\n    const m = (4 * n) - 4\n    this.V_position = (V_position2 = new Float32Array(m*2))\n    this.V_angles = (V_angles2 = new Float32Array(m*2))\n    this.V_tangents = (V_tangents2 = new Float32Array(m*4));  // mind the 4!\n    this.V_texcoord = (V_texcoord2 = new Float32Array(m*2))\n    const o = 2\n    //\n    // Arg, we really need an ndarray thing in JS :/\n    for (let i = 0, end = n; i < end; i++) {  // all nodes on the line\n       for (let j = 0; j < 4; j++) {  // the four quad vertices\n        for (let k = 0; k < 2; k++) {  // xy\n          V_position2[((((i*4)+j)-o)*2)+k] = V_position[(i*2)+k]\n          V_angles2[(((i*4)+j)*2)+k] = V_angles[(i*2)+k]\n        }  // no offset\n        for (let k = 0; k < 4; k++) {\n          V_tangents2[((((i*4)+j)-o)*4)+k] = V_tangents[(i*4)+k]\n        }\n      }\n    }\n\n    for (let i = 0, end = n; i < end; i++) {\n      V_texcoord2[(((i*4)+0)*2)+0] = -1\n      V_texcoord2[(((i*4)+1)*2)+0] = -1\n      V_texcoord2[(((i*4)+2)*2)+0] = +1\n      V_texcoord2[(((i*4)+3)*2)+0] = +1\n      //\n      V_texcoord2[(((i*4)+0)*2)+1] = -1\n      V_texcoord2[(((i*4)+1)*2)+1] = +1\n      V_texcoord2[(((i*4)+2)*2)+1] = -1\n      V_texcoord2[(((i*4)+3)*2)+1] = +1\n    }\n\n    // Indices\n    //I = np.resize( np.array([0,1,2,1,2,3], dtype=np.uint32), (n-1)*(2*3))\n    //I += np.repeat( 4*np.arange(n-1), 6)\n    const ni = (n-1) * 6\n    this.I_triangles = (I = new Uint32Array(ni))\n    // Order of indices is such that drawing as line_strip reveals the line skeleton\n    // Might have implications on culling, if we ever turn that on.\n    // Order in paper was: 0 1 2 1 2 3\n    for (let i = 0, end = n; i < end; i++) {\n      I[(i*6)+0] = 0 + (4*i)\n      I[(i*6)+1] = 1 + (4*i)\n      I[(i*6)+2] = 3 + (4*i)\n      I[(i*6)+3] = 2 + (4*i)\n      I[(i*6)+4] = 0 + (4*i)\n      I[(i*6)+5] = 3 + (4*i)\n    }\n  }\n\n  protected _update_scale(sx: number, sy: number): void {\n    // Update segment data and cumsum so the length along the line has the\n    // scale aspect ratio in it. In the vertex shader we multiply with the\n    // \"isotropic part\" of the scale.\n\n    let V_segment2\n    const n = this.nvertices\n    const m = (4 * n) - 4\n    // Prepare arrays\n    const T = this.tangents\n    const N = new Float32Array(n-1)\n    const V_segment = new Float32Array(n*2);  // Elements are initialized with 0\n    this.V_segment = (V_segment2 = new Float32Array(m*2))\n    // Calculate vector lengths - with scale aspect ratio taken into account\n    for (let i = 0, end = n-1; i < end; i++) {\n      N[i] = Math.sqrt(Math.pow(T[(i*2)+0] * sx, 2) + Math.pow(T[(i*2)+1] * sy, 2))\n    }\n    // Calculate Segments\n    let cumsum = 0\n    for (let i = 0, end = n-1; i < end; i++) {\n      cumsum += N[i]\n      V_segment[((i+1)*2)+0] = cumsum\n      V_segment[(i*2)+1] = cumsum\n    }\n    // Upscale (same loop as in _bake())\n    for (let i = 0, end = n; i < end; i++) {\n      for (let j = 0; j < 4; j++) {\n        for (let k = 0; k < 2; k++) {\n          V_segment2[(((i*4)+j)*2)+k] = V_segment[(i*2)+k]\n        }\n      }\n    }\n    // Update\n    this.cumsum = cumsum;  // L[-1] in Nico's code\n    this.vbo_segment.set_size(this.V_segment.length*4)\n    this.vbo_segment.set_data(0, this.V_segment)\n  }\n}\n"]}