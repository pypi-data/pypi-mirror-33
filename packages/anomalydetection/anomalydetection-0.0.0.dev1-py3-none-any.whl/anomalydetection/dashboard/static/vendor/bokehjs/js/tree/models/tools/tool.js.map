{"version":3,"sources":["models/tools/tool.ts"],"names":[],"mappings":"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","file":"tool.js","sourcesContent":["import * as p from \"core/properties\"\nimport {View} from \"core/view\"\nimport {Dimensions} from \"core/enums\"\nimport {min, max} from \"core/util/array\"\nimport {Model} from \"../../model\"\nimport {Renderer} from \"../renderers/renderer\"\nimport {CartesianFrame} from \"../canvas/cartesian_frame\"\nimport {PlotCanvas, PlotCanvasView} from \"../plots/plot_canvas\"\nimport {EventType, GestureEvent, ScrollEvent, TapEvent, MoveEvent, KeyEvent} from \"core/ui_events\"\n\nexport abstract class ToolView extends View {\n  model: Tool\n\n  plot_view: PlotCanvasView\n\n  initialize(options: any): void {\n    super.initialize(options)\n    this.plot_view = options.plot_view\n  }\n\n  get plot_model(): PlotCanvas {\n    return this.plot_view.model\n  }\n\n  connect_signals(): void {\n    super.connect_signals()\n    this.connect(this.model.properties.active.change, () => {\n      if (this.model.active)\n        this.activate()\n      else\n        this.deactivate()\n    })\n  }\n\n  // activate is triggered by toolbar ui actions\n  activate(): void {}\n\n  // deactivate is triggered by toolbar ui actions\n  deactivate(): void {}\n\n  _pan_start?(e: GestureEvent): void\n  _pan?(e: GestureEvent): void\n  _pan_end?(e: GestureEvent): void\n  _pinch_start?(e: GestureEvent): void\n  _pinch?(e: GestureEvent): void\n  _pinch_end?(e: GestureEvent): void\n  _rotate_start?(e: GestureEvent): void\n  _rotate?(e: GestureEvent): void\n  _rotate_end?(e: GestureEvent): void\n\n  _tap?(e: TapEvent): void\n  _doubletap?(e: TapEvent): void\n  _press?(e: TapEvent): void\n\n  _move_enter?(e: MoveEvent): void\n  _move?(e: MoveEvent): void\n  _move_exit?(e: MoveEvent): void\n\n  _scroll?(e: ScrollEvent): void\n\n  _keydown?(e: KeyEvent): void\n  _keyup?(e: KeyEvent): void\n}\n\nexport namespace Tool {\n  export interface Attrs extends Model.Attrs {\n    active: boolean\n  }\n\n  export interface Props extends Model.Props {\n    active: p.Property<boolean>\n  }\n}\n\nexport interface Tool extends Tool.Attrs {}\n\nexport abstract class Tool extends Model {\n\n  properties: Tool.Props\n\n  constructor(attrs?: Partial<Tool.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = \"Tool\"\n\n    this.internal({\n      active: [ p.Boolean, false ],\n    })\n  }\n\n  readonly event_type?: EventType | EventType[]\n\n  get synthetic_renderers(): Renderer[] {\n    return []\n  }\n\n  // utility function to return a tool name, modified\n  // by the active dimenions. Used by tools that have dimensions\n  protected _get_dim_tooltip(name: string, dims: Dimensions): string {\n    switch (dims) {\n      case \"width\":  return `${name} (x-axis)`\n      case \"height\": return `${name} (y-axis)`\n      case \"both\":   return name\n    }\n  }\n\n  // utility function to get limits along both dimensions, given\n  // optional dimensional constraints\n  _get_dim_limits([sx0, sy0]: [number, number], [sx1, sy1]: [number, number],\n      frame: CartesianFrame, dims: Dimensions): [[number, number], [number, number]] {\n\n    const hr = frame.bbox.h_range\n    let sxlim: [number, number]\n    if (dims == 'width' || dims == 'both') {\n      sxlim = [min([sx0, sx1]),           max([sx0, sx1])]\n      sxlim = [max([sxlim[0], hr.start]), min([sxlim[1], hr.end])]\n    } else\n      sxlim = [hr.start, hr.end]\n\n    const vr = frame.bbox.v_range\n    let sylim: [number, number]\n    if (dims == 'height' || dims == 'both') {\n      sylim = [min([sy0, sy1]),           max([sy0, sy1])]\n      sylim = [max([sylim[0], vr.start]), min([sylim[1], vr.end])]\n    } else\n      sylim = [vr.start, vr.end]\n\n    return [sxlim, sylim]\n  }\n}\n\nTool.initClass()\n"]}