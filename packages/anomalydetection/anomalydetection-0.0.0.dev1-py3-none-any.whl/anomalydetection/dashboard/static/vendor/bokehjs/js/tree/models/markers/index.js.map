{"version":3,"sources":["models/markers/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import {RenderOne, Marker, MarkerView} from \"./marker\"\nimport {Class} from \"core/class\"\nimport {Line, Fill} from \"core/visuals\"\nimport {Context2d} from \"core/util/canvas\"\n\nconst SQ3 = Math.sqrt(3)\n\nfunction _one_x(ctx: Context2d, r: number): void {\n  ctx.moveTo(-r,  r)\n  ctx.lineTo( r, -r)\n  ctx.moveTo(-r, -r)\n  ctx.lineTo( r,  r)\n}\n\nfunction _one_cross(ctx: Context2d, r: number): void {\n  ctx.moveTo( 0,  r)\n  ctx.lineTo( 0, -r)\n  ctx.moveTo(-r,  0)\n  ctx.lineTo( r,  0)\n}\n\nfunction _one_diamond(ctx: Context2d, r: number): void {\n  ctx.moveTo(0, r)\n  ctx.lineTo(r/1.5, 0)\n  ctx.lineTo(0, -r)\n  ctx.lineTo(-r/1.5, 0)\n  ctx.closePath()\n}\n\nfunction _one_hex(ctx: Context2d, r: number): void {\n  const r2 = r/2\n  const h = SQ3*r2\n\n  ctx.moveTo( r,   0)\n  ctx.lineTo( r2, -h)\n  ctx.lineTo(-r2, -h)\n  ctx.lineTo(-r,   0)\n  ctx.lineTo(-r2,  h)\n  ctx.lineTo( r2,  h)\n  ctx.closePath()\n}\n\nfunction _one_tri(ctx: Context2d, r: number): void {\n  const h = r*SQ3\n  const a = h/3\n\n  ctx.moveTo(-r, a)\n  ctx.lineTo(r, a)\n  ctx.lineTo(0, a-h)\n  ctx.closePath()\n}\n\nfunction asterisk(ctx: Context2d, i: number, r: number, line: Line, _fill: Fill): void {\n  const r2 = r*0.65\n\n  _one_cross(ctx, r)\n  _one_x(ctx, r2)\n\n  if (line.doit) {\n    line.set_vectorize(ctx, i)\n    ctx.stroke()\n  }\n\n}\n\nfunction circle_cross(ctx: Context2d, i: number, r: number, line: Line, fill: Fill): void {\n  ctx.arc(0, 0, r, 0, 2*Math.PI, false)\n\n  if (fill.doit) {\n    fill.set_vectorize(ctx, i)\n    ctx.fill()\n  }\n\n  if (line.doit) {\n    line.set_vectorize(ctx, i)\n    _one_cross(ctx, r)\n    ctx.stroke()\n  }\n\n}\n\nfunction circle_x(ctx: Context2d, i: number, r: number, line: Line, fill: Fill): void {\n  ctx.arc(0, 0, r, 0, 2*Math.PI, false)\n\n  if (fill.doit) {\n    fill.set_vectorize(ctx, i)\n    ctx.fill()\n  }\n\n  if (line.doit) {\n    line.set_vectorize(ctx, i)\n    _one_x(ctx, r)\n    ctx.stroke()\n  }\n\n}\n\nfunction cross(ctx: Context2d, i: number, r: number, line: Line, _fill: Fill): void {\n  _one_cross(ctx, r)\n\n  if (line.doit) {\n    line.set_vectorize(ctx, i)\n    ctx.stroke()\n  }\n\n}\n\nfunction diamond(ctx: Context2d, i: number, r: number, line: Line, fill: Fill): void {\n  _one_diamond(ctx, r)\n\n  if (fill.doit) {\n    fill.set_vectorize(ctx, i)\n    ctx.fill()\n  }\n\n  if (line.doit) {\n    line.set_vectorize(ctx, i)\n    ctx.stroke()\n  }\n\n}\n\nfunction diamond_cross(ctx: Context2d, i: number, r: number, line: Line, fill: Fill): void {\n  _one_diamond(ctx, r)\n\n  if (fill.doit) {\n    fill.set_vectorize(ctx, i)\n    ctx.fill()\n  }\n\n  if (line.doit) {\n    line.set_vectorize(ctx, i)\n    _one_cross(ctx, r)\n    ctx.stroke()\n  }\n\n}\n\nfunction hex(ctx: Context2d, i: number, r: number, line: Line, fill: Fill): void {\n  _one_hex(ctx, r)\n\n  if (fill.doit) {\n    fill.set_vectorize(ctx, i)\n    ctx.fill()\n  }\n\n  if (line.doit) {\n    line.set_vectorize(ctx, i)\n    ctx.stroke()\n  }\n\n}\n\nfunction inverted_triangle(ctx: Context2d, i: number, r: number, line: Line, fill: Fill): void {\n  ctx.rotate(Math.PI)\n  _one_tri(ctx, r)\n  ctx.rotate(-Math.PI)\n\n  if (fill.doit) {\n    fill.set_vectorize(ctx, i)\n    ctx.fill()\n  }\n\n  if (line.doit) {\n    line.set_vectorize(ctx, i)\n    ctx.stroke()\n  }\n\n}\n\nfunction square(ctx: Context2d, i: number, r: number, line: Line, fill: Fill): void {\n  const size = 2*r\n  ctx.rect(-r, -r, size, size)\n\n  if (fill.doit) {\n    fill.set_vectorize(ctx, i)\n    ctx.fill()\n  }\n\n  if (line.doit) {\n    line.set_vectorize(ctx, i)\n    ctx.stroke()\n  }\n\n}\n\nfunction square_cross(ctx: Context2d, i: number, r: number, line: Line, fill: Fill): void {\n  const size = 2*r\n  ctx.rect(-r, -r, size, size)\n\n  if (fill.doit) {\n    fill.set_vectorize(ctx, i)\n    ctx.fill()\n  }\n\n  if (line.doit) {\n    line.set_vectorize(ctx, i)\n    _one_cross(ctx, r)\n    ctx.stroke()\n  }\n\n}\n\nfunction square_x(ctx: Context2d, i: number, r: number, line: Line, fill: Fill): void {\n  const size = 2*r\n  ctx.rect(-r, -r, size, size)\n\n  if (fill.doit) {\n    fill.set_vectorize(ctx, i)\n    ctx.fill()\n  }\n\n  if (line.doit) {\n    line.set_vectorize(ctx, i)\n    _one_x(ctx, r)\n    ctx.stroke()\n  }\n\n}\n\nfunction triangle(ctx: Context2d, i: number, r: number, line: Line, fill: Fill): void {\n  _one_tri(ctx, r)\n\n  if (fill.doit) {\n    fill.set_vectorize(ctx, i)\n    ctx.fill()\n  }\n\n  if (line.doit) {\n    line.set_vectorize(ctx, i)\n    ctx.stroke()\n  }\n\n}\n\nfunction x(ctx: Context2d, i: number, r: number, line: Line, _fill: Fill): void {\n  _one_x(ctx, r)\n\n  if (line.doit) {\n    line.set_vectorize(ctx, i)\n    ctx.stroke()\n  }\n}\n\nfunction _mk_model(type: string, f: RenderOne): Class<Marker> {\n  const view = class extends MarkerView {\n    static initClass(): void {\n      this.prototype._render_one = f\n    }\n  }\n  view.initClass()\n\n  const model = class extends Marker {\n    static initClass(): void {\n      this.prototype.default_view = view\n      this.prototype.type = type\n    }\n  }\n  model.initClass()\n\n  return model\n}\n\n// markers are final, so no need to export views\nexport const Asterisk         = _mk_model('Asterisk',         asterisk)\nexport const CircleCross      = _mk_model('CircleCross',      circle_cross)\nexport const CircleX          = _mk_model('CircleX',          circle_x)\nexport const Cross            = _mk_model('Cross',            cross)\nexport const Diamond          = _mk_model('Diamond',          diamond)\nexport const DiamondCross     = _mk_model('DiamondCross',     diamond_cross)\nexport const Hex              = _mk_model('Hex',              hex)\nexport const InvertedTriangle = _mk_model('InvertedTriangle', inverted_triangle)\nexport const Square           = _mk_model('Square',           square)\nexport const SquareCross      = _mk_model('SquareCross',      square_cross)\nexport const SquareX          = _mk_model('SquareX',          square_x)\nexport const Triangle         = _mk_model('Triangle',         triangle)\nexport const X                = _mk_model('X',                x)\n"]}