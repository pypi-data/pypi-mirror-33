{"version":3,"sources":["models/glyphs/box.ts"],"names":[],"mappings":"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","file":"box.js","sourcesContent":["import {LineMixinVector, FillMixinVector} from \"core/property_mixins\"\nimport {Arrayable} from \"core/types\"\nimport {Line, Fill} from \"core/visuals\"\nimport {IBBox} from \"core/util/bbox\"\nimport {SpatialIndex} from \"core/util/spatial\"\nimport {Context2d} from \"core/util/canvas\"\nimport {Glyph, GlyphView, GlyphData} from \"./glyph\"\nimport {generic_area_legend} from \"./utils\"\nimport {PointGeometry, SpanGeometry, RectGeometry} from \"core/geometry\"\nimport * as hittest from \"core/hittest\"\nimport {Selection} from \"../selections/selection\"\n\nexport interface BoxData extends GlyphData {\n  _right: Arrayable<number>\n  _bottom: Arrayable<number>\n  _left: Arrayable<number>\n  _top: Arrayable<number>\n\n  sright: Arrayable<number>\n  sbottom: Arrayable<number>\n  sleft: Arrayable<number>\n  stop: Arrayable<number>\n}\n\nexport interface BoxView extends BoxData {}\n\nexport abstract class BoxView extends GlyphView {\n  model: Box\n  visuals: Box.Visuals\n\n  protected abstract _lrtb(i: number): [number, number, number, number]\n\n  protected _index_box(len: number): SpatialIndex {\n    const points = []\n\n    for (let i = 0; i < len; i++) {\n      const [l, r, t, b] = this._lrtb(i)\n      if (isNaN(l + r + t + b) || !isFinite(l + r + t + b))\n        continue\n      points.push({minX: l, minY: b, maxX: r, maxY: t, i})\n    }\n\n    return new SpatialIndex(points)\n  }\n\n  protected _render(ctx: Context2d, indices: number[],\n                    {sleft, sright, stop, sbottom}: BoxData): void {\n    for (const i of indices) {\n      if (isNaN(sleft[i] + stop[i] + sright[i] + sbottom[i]))\n        continue\n\n      if (this.visuals.fill.doit) {\n        this.visuals.fill.set_vectorize(ctx, i)\n        ctx.fillRect(sleft[i], stop[i], sright[i] - sleft[i], sbottom[i] - stop[i])\n      }\n\n      if (this.visuals.line.doit) {\n        ctx.beginPath()\n        ctx.rect(sleft[i], stop[i], sright[i] - sleft[i], sbottom[i] - stop[i])\n        this.visuals.line.set_vectorize(ctx, i)\n        ctx.stroke()\n      }\n    }\n  }\n\n  protected _hit_rect(geometry: RectGeometry): Selection {\n    return this._hit_rect_against_index(geometry)\n  }\n\n  protected _hit_point(geometry: PointGeometry): Selection {\n    const {sx, sy} = geometry\n    const x = this.renderer.xscale.invert(sx)\n    const y = this.renderer.yscale.invert(sy)\n\n    const hits = this.index.indices({minX: x, minY: y, maxX: x, maxY: y})\n\n    const result = hittest.create_empty_hit_test_result()\n    result.indices = hits\n    return result\n  }\n\n  protected _hit_span(geometry: SpanGeometry): Selection {\n    const {sx, sy} = geometry\n\n    let hits: number[]\n    if (geometry.direction == 'v') {\n      const y = this.renderer.yscale.invert(sy)\n      const hr = this.renderer.plot_view.frame.bbox.h_range\n      const [minX, maxX] = this.renderer.xscale.r_invert(hr.start, hr.end)\n      hits = this.index.indices({minX, minY: y, maxX, maxY: y})\n    } else {\n      const x = this.renderer.xscale.invert(sx)\n      const vr = this.renderer.plot_view.frame.bbox.v_range\n      const [minY, maxY] = this.renderer.yscale.r_invert(vr.start, vr.end)\n      hits = this.index.indices({minX: x, minY, maxX: x, maxY})\n    }\n\n    const result = hittest.create_empty_hit_test_result()\n    result.indices = hits\n    return result\n  }\n\n  draw_legend_for_index(ctx: Context2d, bbox: IBBox, index: number): void {\n    generic_area_legend(this.visuals, ctx, bbox, index)\n  }\n}\n\nexport namespace Box {\n  export interface Mixins extends LineMixinVector, FillMixinVector {}\n\n  export interface Attrs extends Glyph.Attrs, Mixins {}\n\n  export interface Props extends Glyph.Props {}\n\n  export interface Visuals extends Glyph.Visuals {\n    line: Line\n    fill: Fill\n  }\n}\n\nexport interface Box extends Box.Attrs {}\n\nexport abstract class Box extends Glyph {\n\n  properties: Box.Props\n\n  constructor(attrs?: Partial<Box.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = \"Box\"\n\n    this.mixins(['line', 'fill'])\n  }\n}\nBox.initClass()\n"]}