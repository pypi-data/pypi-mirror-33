{"version":3,"sources":["models/annotations/arrow.ts"],"names":[],"mappings":"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","file":"arrow.js","sourcesContent":["import {Annotation, AnnotationView} from \"./annotation\"\nimport {ArrowHead, OpenHead} from \"./arrow_head\"\nimport {ColumnarDataSource} from \"../sources/columnar_data_source\"\nimport {ColumnDataSource} from \"../sources/column_data_source\"\nimport {NumberSpec} from \"core/vectorization\"\nimport {LineMixinVector} from \"core/property_mixins\"\nimport {Line} from \"core/visuals\"\nimport {SpatialUnits} from \"core/enums\"\nimport {Arrayable} from \"core/types\"\nimport * as p from \"core/properties\"\nimport {atan2} from \"core/util/math\"\nimport {Context2d} from \"core/util/canvas\"\n\nexport type Coords = [Arrayable<number>, Arrayable<number>]\n\nexport class ArrowView extends AnnotationView {\n  model: Arrow\n  visuals: Arrow.Visuals\n\n  protected _x_start: Arrayable<number>\n  protected _y_start: Arrayable<number>\n  protected _x_end: Arrayable<number>\n  protected _y_end: Arrayable<number>\n\n  initialize(options: any): void {\n    super.initialize(options)\n    if (this.model.source == null)\n      this.model.source = new ColumnDataSource()\n    this.set_data(this.model.source)\n  }\n\n  connect_signals(): void {\n    super.connect_signals()\n    this.connect(this.model.change, () => this.plot_view.request_render())\n    this.connect(this.model.source.streaming, () => this.set_data(this.model.source))\n    this.connect(this.model.source.patching, () => this.set_data(this.model.source))\n    this.connect(this.model.source.change, () => this.set_data(this.model.source))\n  }\n\n  set_data(source: ColumnarDataSource): void {\n    super.set_data(source)\n    this.visuals.warm_cache(source)\n    this.plot_view.request_render()\n  }\n\n  protected _map_data(): [Coords, Coords] {\n    const {frame} = this.plot_view\n\n    let sx_start, sy_start\n    if (this.model.start_units == 'data') {\n      sx_start = frame.xscales[this.model.x_range_name].v_compute(this._x_start)\n      sy_start = frame.yscales[this.model.y_range_name].v_compute(this._y_start)\n    } else {\n      sx_start = frame.xview.v_compute(this._x_start)\n      sy_start = frame.yview.v_compute(this._y_start)\n    }\n\n    let sx_end, sy_end\n    if (this.model.end_units == 'data') {\n      sx_end = frame.xscales[this.model.x_range_name].v_compute(this._x_end)\n      sy_end = frame.yscales[this.model.y_range_name].v_compute(this._y_end)\n    } else {\n      sx_end = frame.xview.v_compute(this._x_end)\n      sy_end = frame.yview.v_compute(this._y_end)\n    }\n\n    return [[sx_start, sy_start], [sx_end, sy_end]]\n  }\n\n  render(): void {\n    if (!this.model.visible)\n      return\n\n    const {ctx} = this.plot_view.canvas_view\n    ctx.save()\n\n    // Order in this function is important. First we draw all the arrow heads.\n    const [start, end] = this._map_data()\n\n    if (this.model.end != null)\n      this._arrow_head(ctx, \"render\", this.model.end, start, end)\n    if (this.model.start != null)\n      this._arrow_head(ctx, \"render\", this.model.start, end, start)\n\n    // Next we call .clip on all the arrow heads, inside an initial canvas sized\n    // rect, to create an \"inverted\" clip region for the arrow heads\n    ctx.beginPath()\n    const {x, y, width, height} = this.plot_model.canvas.bbox.rect\n    ctx.rect(x, y, width, height)\n    if (this.model.end != null)\n      this._arrow_head(ctx, \"clip\", this.model.end, start, end)\n    if (this.model.start != null)\n      this._arrow_head(ctx, \"clip\", this.model.start, end, start)\n    ctx.closePath()\n    ctx.clip()\n\n    // Finally we draw the arrow body, with the clipping regions set up. This prevents\n    // \"fat\" arrows from overlapping the arrow head in a bad way.\n    this._arrow_body(ctx, start, end)\n\n    ctx.restore()\n  }\n\n  protected _arrow_head(ctx: Context2d, action: \"render\" | \"clip\", head: ArrowHead, start: Coords, end: Coords): void {\n    for (let i = 0, _end = this._x_start.length; i < _end; i++) {\n      // arrow head runs orthogonal to arrow body\n      const angle = Math.PI/2 + atan2([start[0][i], start[1][i]], [end[0][i], end[1][i]])\n\n      ctx.save()\n\n      ctx.translate(end[0][i], end[1][i])\n      ctx.rotate(angle)\n\n      if (action == \"render\")\n        head.render(ctx, i)\n      else if (action == \"clip\")\n        head.clip(ctx, i)\n\n      ctx.restore()\n    }\n  }\n\n  protected _arrow_body(ctx: Context2d, start: Coords, end: Coords): void {\n    if (!this.visuals.line.doit)\n      return\n\n    for (let i = 0, n = this._x_start.length; i < n; i++) {\n      this.visuals.line.set_vectorize(ctx, i)\n\n      ctx.beginPath()\n      ctx.moveTo(start[0][i], start[1][i])\n      ctx.lineTo(end[0][i], end[1][i])\n      ctx.stroke()\n    }\n  }\n}\n\nexport namespace Arrow {\n  export interface Mixins extends LineMixinVector {}\n\n  export interface Attrs extends Annotation.Attrs, Mixins {\n    x_start: NumberSpec\n    y_start: NumberSpec\n    start_units: SpatialUnits\n    start: ArrowHead | null\n    x_end: NumberSpec\n    y_end: NumberSpec\n    end_units: SpatialUnits\n    end: ArrowHead | null\n    source: ColumnarDataSource\n    x_range_name: string\n    y_range_name: string\n  }\n\n  export interface Props extends Annotation.Props {\n    x_start: p.NumberSpec\n    y_start: p.NumberSpec\n    start_units: p.Property<SpatialUnits>\n    start: p.Property<ArrowHead | null>\n    x_end: p.NumberSpec\n    y_end: p.NumberSpec\n    end_units: p.Property<SpatialUnits>\n    end: p.Property<ArrowHead | null>\n    source: p.Property<ColumnarDataSource>\n    x_range_name: p.Property<string>\n    y_range_name: p.Property<string>\n  }\n\n  export type Visuals = Annotation.Visuals & {line: Line}\n}\n\nexport interface Arrow extends Arrow.Attrs {}\n\nexport class Arrow extends Annotation {\n\n  properties: Arrow.Props\n\n  constructor(attrs?: Partial<Arrow.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = 'Arrow'\n    this.prototype.default_view = ArrowView\n\n    this.mixins(['line'])\n\n    this.define({\n      x_start:      [ p.NumberSpec,                         ],\n      y_start:      [ p.NumberSpec,                         ],\n      start_units:  [ p.String,      'data'                 ],\n      start:        [ p.Instance,    null                   ],\n      x_end:        [ p.NumberSpec,                         ],\n      y_end:        [ p.NumberSpec,                         ],\n      end_units:    [ p.String,      'data'                 ],\n      end:          [ p.Instance,    () => new OpenHead({}) ],\n      source:       [ p.Instance                            ],\n      x_range_name: [ p.String,      'default'              ],\n      y_range_name: [ p.String,      'default'              ],\n    })\n  }\n}\nArrow.initClass()\n"]}