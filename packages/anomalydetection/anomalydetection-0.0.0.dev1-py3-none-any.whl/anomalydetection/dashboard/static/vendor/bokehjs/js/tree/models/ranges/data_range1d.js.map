{"version":3,"sources":["models/ranges/data_range1d.ts"],"names":[],"mappings":"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","file":"data_range1d.js","sourcesContent":["import {DataRange} from \"./data_range\"\nimport {Renderer} from \"../renderers/renderer\"\nimport {GlyphRenderer} from \"../renderers/glyph_renderer\"\nimport {PaddingUnits, StartEnd} from \"core/enums\"\nimport {logger} from \"core/logging\"\nimport * as p from \"core/properties\"\nimport * as bbox from \"core/util/bbox\"\nimport {Rect} from \"core/util/spatial\"\nimport {includes} from \"core/util/array\"\n\nexport type Dim = 0 | 1\nexport type Bounds = {[key: string]: Rect}\n\nexport namespace DataRange1d {\n  export interface Attrs extends DataRange.Attrs {\n    start: number\n    end: number\n    range_padding: number\n    range_padding_units: PaddingUnits\n    flipped: boolean\n    follow: StartEnd\n    follow_interval: number\n    default_span: number\n\n    scale_hint: \"log\" | \"auto\"\n  }\n\n  export interface Props extends DataRange.Props {}\n}\n\nexport interface DataRange1d extends DataRange1d.Attrs {}\n\nexport class DataRange1d extends DataRange {\n\n  properties: DataRange1d.Props\n\n  constructor(attrs?: Partial<DataRange1d.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = \"DataRange1d\"\n\n    this.define({\n      start:               [ p.Number                  ],\n      end:                 [ p.Number                  ],\n      range_padding:       [ p.Number,       0.1       ],\n      range_padding_units: [ p.PaddingUnits, \"percent\" ],\n      flipped:             [ p.Bool,         false     ],\n      follow:              [ p.StartEnd,               ],\n      follow_interval:     [ p.Number                  ],\n      default_span:        [ p.Number,       2         ],\n    })\n\n    this.internal({\n      scale_hint: [ p.String, 'auto' ],\n    })\n  }\n\n  protected _initial_start: number\n  protected _initial_end: number\n  protected _initial_range_padding: number\n  protected _initial_range_padding_units: PaddingUnits\n  protected _initial_follow: StartEnd\n  protected _initial_follow_interval: number\n  protected _initial_default_span: number\n\n  protected _plot_bounds: Bounds = {}\n\n  have_updated_interactively: boolean = false\n\n  initialize(): void {\n    super.initialize()\n\n    this._initial_start = this.start\n    this._initial_end = this.end\n    this._initial_range_padding = this.range_padding\n    this._initial_range_padding_units = this.range_padding_units\n    this._initial_follow = this.follow\n    this._initial_follow_interval = this.follow_interval\n    this._initial_default_span = this.default_span\n  }\n\n  get min(): number {\n    return Math.min(this.start, this.end)\n  }\n\n  get max(): number {\n    return Math.max(this.start, this.end)\n  }\n\n  computed_renderers(): Renderer[] {\n    // TODO (bev) check that renderers actually configured with this range\n    const names = this.names\n    let renderers = this.renderers\n\n    if (renderers.length == 0) {\n      for (const plot of this.plots) {\n        const rs = plot.renderers.filter((r) => r instanceof GlyphRenderer)\n        renderers = renderers.concat(rs)\n      }\n    }\n\n    if (names.length > 0)\n      renderers = renderers.filter((r) => includes(names, r.name))\n\n    logger.debug(`computed ${renderers.length} renderers for DataRange1d ${this.id}`)\n    for (const r of renderers) {\n      logger.trace(` - ${r.type} ${r.id}`)\n    }\n\n    return renderers\n  }\n\n  protected _compute_plot_bounds(renderers: Renderer[], bounds: Bounds): Rect {\n    let result = bbox.empty()\n\n    for (const r of renderers) {\n      if (bounds[r.id] != null)\n        result = bbox.union(result, bounds[r.id])\n    }\n\n    return result\n  }\n\n   adjust_bounds_for_aspect(bounds: Rect, ratio: number): Rect {\n    const result = bbox.empty()\n\n    let width = bounds.maxX - bounds.minX\n    if (width <= 0) { width = 1.0 }\n\n    let height = bounds.maxY - bounds.minY\n    if (height <= 0) { height = 1.0 }\n\n    const xcenter = 0.5*(bounds.maxX + bounds.minX)\n    const ycenter = 0.5*(bounds.maxY + bounds.minY)\n\n    if (width < ratio*height) {\n      width = ratio*height\n    } else {\n      height = width/ratio\n    }\n\n    result.maxX = xcenter+0.5*width\n    result.minX = xcenter-0.5*width\n    result.maxY = ycenter+0.5*height\n    result.minY = ycenter-0.5*height\n\n    return result\n  }\n\n  protected _compute_min_max(plot_bounds: Bounds, dimension: Dim): [number, number] {\n    let overall = bbox.empty()\n    for (const k in plot_bounds) {\n      const v = plot_bounds[k]\n      overall = bbox.union(overall, v)\n    }\n\n    let min, max: number\n    if (dimension == 0)\n      [min, max] = [overall.minX, overall.maxX]\n    else\n      [min, max] = [overall.minY, overall.maxY]\n\n    return [min, max]\n  }\n\n  protected _compute_range(min: number, max: number): [number, number] {\n    const range_padding = this.range_padding // XXX: ? 0\n\n    let start, end: number\n    if (this.scale_hint == \"log\") {\n      if (isNaN(min) || !isFinite(min) || min <= 0) {\n        if (isNaN(max) || !isFinite(max) || max <= 0)\n          min = 0.1\n        else\n          min = max / 100\n        logger.warn(`could not determine minimum data value for log axis, DataRange1d using value ${min}`)\n      }\n      if (isNaN(max) || !isFinite(max) || max <= 0) {\n        if (isNaN(min) || !isFinite(min) || min <= 0)\n          max = 10\n        else\n          max = min * 100\n        logger.warn(`could not determine maximum data value for log axis, DataRange1d using value ${max}`)\n      }\n\n      let center, span: number\n      if (max == min) {\n        span = this.default_span + 0.001\n        center = Math.log(min) / Math.log(10)\n      } else {\n        let log_min, log_max: number\n        if (this.range_padding_units == \"percent\") {\n          log_min = Math.log(min) / Math.log(10)\n          log_max = Math.log(max) / Math.log(10)\n          span = (log_max - log_min)*(1 + range_padding)\n        } else {\n          log_min = Math.log(min - range_padding) / Math.log(10)\n          log_max = Math.log(max + range_padding) / Math.log(10)\n          span = log_max - log_min\n        }\n        center = (log_min + log_max) / 2.0\n      }\n      start = Math.pow(10, center - span / 2.0)\n      end   = Math.pow(10, center + span / 2.0)\n    } else {\n      let span: number\n      if (max == min)\n        span = this.default_span\n      else {\n        if (this.range_padding_units == \"percent\")\n          span = (max - min)*(1 + range_padding)\n        else\n          span = (max - min) + 2*range_padding\n      }\n      const center = (max + min) / 2.0\n      start = center - span / 2.0\n      end   = center + span / 2.0\n    }\n\n    let follow_sign = +1\n    if (this.flipped) {\n      [start, end] = [end, start]\n      follow_sign = -1\n    }\n\n    const follow_interval = this.follow_interval\n    if (follow_interval != null && Math.abs(start - end) > follow_interval) {\n      if (this.follow == 'start')\n        end = start + follow_sign*follow_interval\n      else if (this.follow == 'end')\n        start = end - follow_sign*follow_interval\n    }\n\n    return [start, end]\n  }\n\n  update(bounds: Bounds, dimension: Dim, bounds_id: string, ratio?: number): void {\n    if (this.have_updated_interactively)\n      return\n\n    const renderers = this.computed_renderers()\n\n    // update the raw data bounds for all renderers we care about\n    let total_bounds = this._compute_plot_bounds(renderers, bounds)\n\n    if (ratio != null)\n      total_bounds = this.adjust_bounds_for_aspect(total_bounds, ratio)\n\n    this._plot_bounds[bounds_id] = total_bounds\n\n    // compute the min/mix for our specified dimension\n    const [min, max] = this._compute_min_max(this._plot_bounds, dimension)\n\n    // derive start, end from bounds and data range config\n    let [start, end] = this._compute_range(min, max)\n\n    if (this._initial_start != null) {\n      if (this.scale_hint == \"log\") {\n        if (this._initial_start > 0)\n          start = this._initial_start\n      } else\n        start = this._initial_start\n    }\n    if (this._initial_end != null) {\n      if (this.scale_hint == \"log\") {\n        if (this._initial_end > 0)\n          end = this._initial_end\n      } else\n        end = this._initial_end\n    }\n\n    // only trigger updates when there are changes\n    const [_start, _end] = [this.start, this.end]\n    if (start != _start || end != _end) {\n      const new_range: {start?: number, end?: number} = {}\n      if (start != _start)\n        new_range.start = start\n      if (end != _end)\n        new_range.end = end\n      this.setv(new_range)\n    }\n\n    if (this.bounds == 'auto')\n      this.setv({bounds: [start, end]}, {silent: true})\n\n    this.change.emit()\n  }\n\n  reset(): void {\n    this.have_updated_interactively = false\n    // change events silenced as PlotCanvasView.update_dataranges triggers property callbacks\n    this.setv({\n      range_padding: this._initial_range_padding,\n      range_padding_units: this._initial_range_padding_units,\n      follow: this._initial_follow,\n      follow_interval: this._initial_follow_interval,\n      default_span: this._initial_default_span,\n    }, {silent: true})\n    this.change.emit()\n  }\n}\n\nDataRange1d.initClass()\n"]}