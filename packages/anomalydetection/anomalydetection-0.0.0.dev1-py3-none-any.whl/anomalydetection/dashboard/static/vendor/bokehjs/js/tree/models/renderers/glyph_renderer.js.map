{"version":3,"sources":["models/renderers/glyph_renderer.ts"],"names":[],"mappings":"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","file":"glyph_renderer.js","sourcesContent":["import {Renderer, RendererView} from \"./renderer\"\nimport {LineView} from \"../glyphs/line\"\nimport {Glyph, GlyphView} from \"../glyphs/glyph\"\nimport {ColumnarDataSource} from \"../sources/columnar_data_source\"\nimport {Scale} from \"../scales/scale\"\nimport {CDSView} from \"../sources/cds_view\"\nimport {Color} from \"core/types\"\nimport {logger} from \"core/logging\"\nimport * as p from \"core/properties\"\nimport {indexOf} from \"core/util/arrayable\"\nimport {difference, includes, range} from \"core/util/array\"\nimport {extend, clone} from \"core/util/object\"\nimport * as hittest from \"core/hittest\"\nimport {Geometry} from \"core/geometry\"\nimport {SelectionManager} from \"core/selection_manager\"\nimport {Context2d} from \"core/util/canvas\"\nimport {FactorRange} from '../ranges/factor_range'\n\ntype Defaults = {\n  fill: {fill_alpha?: number, fill_color?: Color}\n  line: {line_alpha?: number, line_color?: Color}\n}\n\nconst selection_defaults: Defaults = {\n  fill: {},\n  line: {},\n}\n\nconst decimated_defaults: Defaults = {\n  fill: {fill_alpha: 0.3, fill_color: \"grey\"},\n  line: {line_alpha: 0.3, line_color: \"grey\"},\n}\n\nconst nonselection_defaults: Defaults = {\n  fill: {fill_alpha: 0.2},\n  line: {},\n}\n\nexport class GlyphRendererView extends RendererView {\n  model: GlyphRenderer\n\n  glyph: GlyphView\n  selection_glyph: GlyphView\n  nonselection_glyph: GlyphView\n  hover_glyph?: GlyphView\n  muted_glyph?: GlyphView\n  decimated_glyph: GlyphView\n\n  xscale: Scale\n  yscale: Scale\n\n  protected all_indices: number[]\n  protected decimated: number[]\n\n  set_data_timestamp: number\n  protected last_dtrender: number\n\n  initialize(options: any): void {\n    super.initialize(options)\n\n    const base_glyph = this.model.glyph\n    const has_fill = includes(base_glyph.mixins, \"fill\")\n    const has_line = includes(base_glyph.mixins, \"line\")\n    const glyph_attrs = clone(base_glyph.attributes)\n    delete glyph_attrs.id\n\n    function mk_glyph(defaults: Defaults): typeof base_glyph {\n      const attrs = clone(glyph_attrs)\n      if (has_fill) extend(attrs, defaults.fill)\n      if (has_line) extend(attrs, defaults.line)\n      return new (base_glyph.constructor as any)(attrs)\n    }\n\n    this.glyph = this.build_glyph_view(base_glyph)\n\n    let {selection_glyph} = this.model\n    if (selection_glyph == null)\n      selection_glyph = mk_glyph({fill: {}, line: {}})\n    else if (selection_glyph === \"auto\")\n      selection_glyph = mk_glyph(selection_defaults)\n    this.selection_glyph = this.build_glyph_view(selection_glyph)\n\n    let {nonselection_glyph} = this.model\n    if ((nonselection_glyph == null))\n      nonselection_glyph = mk_glyph({fill: {}, line: {}})\n    else if (nonselection_glyph === \"auto\")\n      nonselection_glyph = mk_glyph(nonselection_defaults)\n    this.nonselection_glyph = this.build_glyph_view(nonselection_glyph)\n\n    const {hover_glyph} = this.model\n    if (hover_glyph != null)\n      this.hover_glyph = this.build_glyph_view(hover_glyph)\n\n    const {muted_glyph} = this.model\n    if (muted_glyph != null)\n      this.muted_glyph = this.build_glyph_view(muted_glyph)\n\n    const decimated_glyph = mk_glyph(decimated_defaults)\n    this.decimated_glyph = this.build_glyph_view(decimated_glyph)\n\n    this.xscale = this.plot_view.frame.xscales[this.model.x_range_name]\n    this.yscale = this.plot_view.frame.yscales[this.model.y_range_name]\n\n    this.set_data(false)\n\n    if (this.model.data_source.setup != null)\n      this.model.data_source.setup()\n  }\n\n  build_glyph_view<T extends Glyph>(model: T): GlyphView {\n    return new model.default_view({model, renderer: this, plot_view: this.plot_view, parent: this}) as GlyphView // XXX\n  }\n\n  connect_signals(): void {\n    super.connect_signals()\n\n    this.connect(this.model.change, () => this.request_render())\n    this.connect(this.model.glyph.change, () => this.set_data())\n    this.connect(this.model.data_source.change, () => this.set_data())\n    this.connect(this.model.data_source.streaming, () => this.set_data())\n    this.connect(this.model.data_source.patching, (indices: number[] /* XXX: WHY? */) => this.set_data(true, indices))\n    this.connect(this.model.data_source._select, () => this.request_render())\n    if (this.hover_glyph != null)\n      this.connect(this.model.data_source.inspect, () => this.request_render())\n    this.connect(this.model.properties.view.change, () => this.set_data())\n    this.connect(this.model.view.change, () => this.set_data())\n\n    const {x_ranges, y_ranges} = this.plot_model.frame\n\n    for (const name in x_ranges) {\n      const rng = x_ranges[name]\n      if (rng instanceof FactorRange)\n        this.connect(rng.change, () => this.set_data())\n    }\n\n    for (const name in y_ranges) {\n      const rng = y_ranges[name]\n      if (rng instanceof FactorRange)\n        this.connect(rng.change, () => this.set_data())\n    }\n\n    this.connect(this.model.glyph.transformchange, () => this.set_data())\n  }\n\n  have_selection_glyphs(): boolean {\n    return this.selection_glyph != null && this.nonselection_glyph != null\n  }\n\n  // in case of partial updates like patching, the list of indices that actually\n  // changed may be passed as the \"indices\" parameter to afford any optional optimizations\n  set_data(request_render: boolean = true, indices: number[] | null = null): void {\n    const t0 = Date.now()\n    const source = this.model.data_source\n\n    this.all_indices = this.model.view.indices\n\n    // TODO (bev) this is a bit clunky, need to make sure glyphs use the correct ranges when they call\n    // mapping functions on the base Renderer class\n    this.glyph.model.setv({x_range_name: this.model.x_range_name,\n                           y_range_name: this.model.y_range_name}, {silent: true})\n    this.glyph.set_data(source, this.all_indices, indices)\n\n    this.glyph.set_visuals(source)\n    this.decimated_glyph.set_visuals(source)\n    if (this.have_selection_glyphs()) {\n      this.selection_glyph.set_visuals(source)\n      this.nonselection_glyph.set_visuals(source)\n    }\n\n    if (this.hover_glyph != null)\n      this.hover_glyph.set_visuals(source)\n\n    if (this.muted_glyph != null)\n      this.muted_glyph.set_visuals(source)\n\n    const {lod_factor} = this.plot_model.plot\n    this.decimated = []\n    for (let i = 0, end = Math.floor(this.all_indices.length/lod_factor); i < end; i++) {\n      this.decimated.push(i*lod_factor)\n    }\n\n    const dt = Date.now() - t0\n    logger.debug(`${this.glyph.model.type} GlyphRenderer (${this.model.id}): set_data finished in ${dt}ms`)\n\n    this.set_data_timestamp = Date.now()\n\n    if (request_render)\n      this.request_render()\n  }\n\n  render(): void {\n    if (!this.model.visible)\n      return\n\n    const t0 = Date.now()\n\n    const glsupport = this.glyph.glglyph\n\n    this.glyph.map_data()\n    const dtmap = Date.now() - t0\n\n    const tmask = Date.now()\n    // all_indices is in full data space, indices is converted to subset space\n    // either by mask_data (that uses the spatial index) or manually\n    let indices = this.glyph.mask_data(this.all_indices)\n    if (indices.length === this.all_indices.length) {\n      indices = range(0, this.all_indices.length)\n    }\n    const dtmask = Date.now() - tmask\n\n    const {ctx} = this.plot_view.canvas_view\n    ctx.save()\n\n    // selected is in full set space\n    const {selected} = this.model.data_source\n    let selected_full_indices: number[]\n    if (!selected || selected.is_empty()) {\n      selected_full_indices = []\n    } else {\n      if (this.glyph instanceof LineView && selected.selected_glyph === this.glyph.model) {\n        selected_full_indices = this.model.view.convert_indices_from_subset(indices)\n      } else {\n        selected_full_indices = selected.indices\n      }\n    }\n\n    // inspected is in full set space\n    const {inspected} = this.model.data_source\n    let inspected_full_indices: number[]\n    if (!inspected || (inspected.length === 0)) {\n      inspected_full_indices = []\n    } else {\n      if (inspected['0d'].glyph) {\n        inspected_full_indices = this.model.view.convert_indices_from_subset(indices)\n      } else if (inspected['1d'].indices.length > 0) {\n        inspected_full_indices = inspected['1d'].indices\n      } else {\n        inspected_full_indices = ((() => {\n          const result = []\n          for (const i of Object.keys(inspected[\"2d\"].indices)) {\n            result.push(parseInt(i))\n          }\n          return result\n        })())\n      }\n    }\n\n    // inspected is transformed to subset space\n    const inspected_subset_indices: number[] = ((() => {\n      const result = []\n      for (const i of indices) {\n        if (includes(inspected_full_indices, this.all_indices[i]))\n          result.push(i)\n      }\n      return result\n    })())\n\n    const {lod_threshold} = this.plot_model.plot\n    let glyph: GlyphView\n    let nonselection_glyph: GlyphView\n    let selection_glyph: GlyphView\n    if ((this.model.document != null ? this.model.document.interactive_duration() > 0 : false)\n        && !glsupport && lod_threshold != null && this.all_indices.length > lod_threshold) {\n      // Render decimated during interaction if too many elements and not using GL\n      indices = this.decimated\n      glyph = this.decimated_glyph\n      nonselection_glyph = this.decimated_glyph\n      selection_glyph = this.selection_glyph\n    } else {\n      glyph = this.model.muted && this.muted_glyph != null ? this.muted_glyph : this.glyph\n      nonselection_glyph = this.nonselection_glyph\n      selection_glyph = this.selection_glyph\n    }\n\n    if (this.hover_glyph != null && inspected_subset_indices.length)\n      indices = difference(indices, inspected_subset_indices)\n\n    // Render with no selection\n    let dtselect: number | null = null\n    let trender: number\n    if (!(selected_full_indices.length && this.have_selection_glyphs())) {\n      trender = Date.now()\n      if (this.glyph instanceof LineView) {\n        if (this.hover_glyph && inspected_subset_indices.length)\n          this.hover_glyph.render(ctx, this.model.view.convert_indices_from_subset(inspected_subset_indices), this.glyph)\n        else\n          glyph.render(ctx, this.all_indices, this.glyph)\n      } else {\n        glyph.render(ctx, indices, this.glyph)\n        if (this.hover_glyph && inspected_subset_indices.length)\n          this.hover_glyph.render(ctx, inspected_subset_indices, this.glyph)\n      }\n    // Render with selection\n    } else {\n      // reset the selection mask\n      const tselect = Date.now()\n      const selected_mask: {[key: number]: boolean} = {}\n      for (const i of selected_full_indices) {\n        selected_mask[i] = true\n      }\n\n      // intersect/different selection with render mask\n      const selected_subset_indices: number[] = new Array()\n      const nonselected_subset_indices: number[] = new Array()\n\n      // now, selected is changed to subset space, except for Line glyph\n      if (this.glyph instanceof LineView) {\n        for (const i of this.all_indices) {\n          if (selected_mask[i] != null)\n            selected_subset_indices.push(i)\n          else\n            nonselected_subset_indices.push(i)\n        }\n      } else {\n        for (const i of indices) {\n          if (selected_mask[this.all_indices[i]] != null)\n            selected_subset_indices.push(i)\n          else\n            nonselected_subset_indices.push(i)\n        }\n      }\n      dtselect = Date.now() - tselect\n\n      trender = Date.now()\n      nonselection_glyph.render(ctx, nonselected_subset_indices, this.glyph)\n      selection_glyph.render(ctx, selected_subset_indices, this.glyph)\n      if (this.hover_glyph != null) {\n        if (this.glyph instanceof LineView)\n          this.hover_glyph.render(ctx, this.model.view.convert_indices_from_subset(inspected_subset_indices), this.glyph)\n        else\n          this.hover_glyph.render(ctx, inspected_subset_indices, this.glyph)\n      }\n    }\n    const dtrender = Date.now() - trender\n\n    this.last_dtrender = dtrender\n\n    const dttot = Date.now() - t0\n    logger.debug(`${this.glyph.model.type} GlyphRenderer (${this.model.id}): render finished in ${dttot}ms`)\n    logger.trace(` - map_data finished in       : ${dtmap}ms`)\n    logger.trace(` - mask_data finished in      : ${dtmask}ms`)\n    if (dtselect != null) {\n      logger.trace(` - selection mask finished in : ${dtselect}ms`)\n    }\n    logger.trace(` - glyph renders finished in  : ${dtrender}ms`)\n\n    return ctx.restore()\n  }\n\n  draw_legend(ctx: Context2d, x0: number, x1: number, y0: number, y1: number, field: string | null, label: string): void {\n    const index = this.model.get_reference_point(field, label)\n    this.glyph.draw_legend_for_index(ctx, {x0, x1, y0, y1}, index)\n  }\n\n  hit_test(geometry: Geometry): hittest.HitTestResult {\n    if (!this.model.visible)\n      return null\n\n    const hit_test_result = this.glyph.hit_test(geometry)\n\n    // glyphs that don't have hit-testing implemented will return null\n    if (hit_test_result == null)\n      return null\n\n    return this.model.view.convert_selection_from_subset(hit_test_result)\n  }\n}\n\nexport namespace GlyphRenderer {\n  export interface Attrs extends Renderer.Attrs {\n    x_range_name: string\n    y_range_name: string\n    data_source: ColumnarDataSource\n    view: CDSView\n    glyph: Glyph\n    hover_glyph: Glyph\n    nonselection_glyph: Glyph | \"auto\"\n    selection_glyph: Glyph | \"auto\"\n    muted_glyph: Glyph\n    muted: boolean\n  }\n\n  export interface Props extends Renderer.Props {\n    view: p.Property<CDSView>\n  }\n}\n\nexport interface GlyphRenderer extends GlyphRenderer.Attrs {}\n\nexport class GlyphRenderer extends Renderer {\n\n  properties: GlyphRenderer.Props\n\n  constructor(attrs?: Partial<GlyphRenderer.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = 'GlyphRenderer'\n    this.prototype.default_view = GlyphRendererView\n\n    this.define({\n      x_range_name:       [ p.String,  'default' ],\n      y_range_name:       [ p.String,  'default' ],\n      data_source:        [ p.Instance           ],\n      view:               [ p.Instance, () => new CDSView() ],\n      glyph:              [ p.Instance           ],\n      hover_glyph:        [ p.Instance           ],\n      nonselection_glyph: [ p.Any,      'auto'   ], // Instance or \"auto\"\n      selection_glyph:    [ p.Any,      'auto'   ], // Instance or \"auto\"\n      muted_glyph:        [ p.Instance           ],\n      muted:              [ p.Bool,     false    ],\n    })\n\n    this.override({\n      level: 'glyph',\n    })\n  }\n\n  initialize(): void {\n    super.initialize()\n\n    if (this.view.source == null) {\n      this.view.source = this.data_source\n      this.view.compute_indices()\n    }\n  }\n\n  get_reference_point(field: string | null, value: any): number {\n    let index = 0\n    if (field != null) {\n      const data = this.data_source.get_column(field)\n      if (data != null) {\n        const i = indexOf(data, value)\n        if (i != -1)\n          index = i\n      }\n    }\n    return index\n  }\n\n  get_selection_manager(): SelectionManager {\n    return this.data_source.selection_manager\n  }\n}\nGlyphRenderer.initClass()\n"]}