{"version":3,"sources":["models/glyphs/multi_line.ts"],"names":[],"mappings":"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","file":"multi_line.js","sourcesContent":["import {IBBox} from \"core/util/bbox\"\nimport {SpatialIndex} from \"core/util/spatial\"\nimport {PointGeometry, SpanGeometry} from \"core/geometry\"\nimport {NumberSpec} from \"core/vectorization\"\nimport {LineMixinVector} from \"core/property_mixins\"\nimport {Line} from \"core/visuals\"\nimport {Arrayable} from \"core/types\"\nimport * as hittest from \"core/hittest\"\nimport {keys} from \"core/util/object\"\nimport {min, max} from \"core/util/array\"\nimport {isStrictNaN} from \"core/util/types\"\nimport {Context2d} from \"core/util/canvas\"\nimport {Glyph, GlyphView, GlyphData} from \"./glyph\"\nimport {generic_line_legend} from \"./utils\"\nimport {Selection} from \"../selections/selection\"\n\nexport interface MultiLineData extends GlyphData {\n  _xs: Arrayable<Arrayable<number>>\n  _ys: Arrayable<Arrayable<number>>\n\n  sxs: Arrayable<Arrayable<number>>\n  sys: Arrayable<Arrayable<number>>\n}\n\nexport interface MultiLineView extends MultiLineData {}\n\nexport class MultiLineView extends GlyphView {\n  model: MultiLine\n  visuals: MultiLine.Visuals\n\n  protected _index_data(): SpatialIndex {\n    const points = []\n    for (let i = 0, end = this._xs.length; i < end; i++) {\n      if (this._xs[i] == null || this._xs[i].length === 0)\n        continue\n\n      const _xsi = this._xs[i]\n      const xs: number[] = []\n      for (let j = 0, n = _xsi.length; j < n; j++) {\n        const x = _xsi[j]\n        if (!isStrictNaN(x))\n          xs.push(x)\n      }\n\n      const _ysi = this._ys[i]\n      const ys: number[] = []\n      for (let j = 0, n = _ysi.length; j < n; j++) {\n        const y = _ysi[j]\n        if (!isStrictNaN(y))\n          ys.push(y)\n      }\n\n      const [minX, maxX] = [min(xs), max(xs)]\n      const [minY, maxY] = [min(ys), max(ys)]\n\n      points.push({minX, minY, maxX, maxY, i})\n    }\n\n    return new SpatialIndex(points)\n  }\n\n  protected _render(ctx: Context2d, indices: number[], {sxs, sys}: MultiLineData): void {\n    for (const i of indices) {\n      const [sx, sy] = [sxs[i], sys[i]]\n\n      this.visuals.line.set_vectorize(ctx, i)\n      for (let j = 0, end = sx.length; j < end; j++) {\n        if (j == 0) {\n          ctx.beginPath()\n          ctx.moveTo(sx[j], sy[j])\n          continue\n        } else if (isNaN(sx[j]) || isNaN(sy[j])) {\n          ctx.stroke()\n          ctx.beginPath()\n          continue\n        } else\n          ctx.lineTo(sx[j], sy[j])\n      }\n      ctx.stroke()\n    }\n  }\n\n  protected _hit_point(geometry: PointGeometry): Selection {\n    const result = hittest.create_empty_hit_test_result()\n    const point = {x: geometry.sx, y: geometry.sy}\n    let shortest = 9999\n\n    const hits: {[key: string]: number[]} = {}\n    for (let i = 0, end = this.sxs.length; i < end; i++) {\n      const threshold = Math.max(2, this.visuals.line.cache_select('line_width', i) / 2)\n      let points = null\n      for (let j = 0, endj = this.sxs[i].length-1; j < endj; j++) {\n        const p0 = {x: this.sxs[i][j],   y: this.sys[i][j]  }\n        const p1 = {x: this.sxs[i][j+1], y: this.sys[i][j+1]}\n        const dist = hittest.dist_to_segment(point, p0, p1)\n        if (dist < threshold && dist < shortest) {\n          shortest = dist\n          points = [j]\n        }\n      }\n      if (points)\n        hits[i] = points\n    }\n\n    result.indices = keys(hits).map((x) => parseInt(x, 10))\n    result.multiline_indices = hits\n\n    return result\n  }\n\n  protected _hit_span(geometry: SpanGeometry): Selection {\n    const {sx, sy} = geometry\n    const result = hittest.create_empty_hit_test_result()\n\n    let val: number\n    let values: Arrayable<Arrayable<number>>\n    if (geometry.direction === 'v') {\n      val = this.renderer.yscale.invert(sy)\n      values = this._ys\n    } else {\n      val = this.renderer.xscale.invert(sx)\n      values = this._xs\n    }\n\n    const hits: {[key: string]: number[]} = {}\n    for (let i = 0, end = values.length; i < end; i++) {\n      const points = []\n      for (let j = 0, endj = values[i].length-1; j < endj; j++) {\n        if (values[i][j] <= val && val <= values[i][j+1])\n          points.push(j)\n      }\n      if (points.length > 0)\n        hits[i] = points\n    }\n\n    result.indices = keys(hits).map((x) => parseInt(x, 10))\n    result.multiline_indices = hits\n\n    return result\n  }\n\n  get_interpolation_hit(i: number, point_i: number, geometry: PointGeometry | SpanGeometry): [number, number] {\n    const {sx, sy} = geometry\n    const x2 = this._xs[i][point_i]\n    const y2 = this._ys[i][point_i]\n    const x3 = this._xs[i][point_i+1]\n    const y3 = this._ys[i][point_i+1]\n\n    let x0: number, x1: number\n    let y0: number, y1: number\n    if (geometry.type == 'point') {\n      ;[y0, y1] = this.renderer.yscale.r_invert(sy-1, sy+1)\n      ;[x0, x1] = this.renderer.xscale.r_invert(sx-1, sx+1)\n    } else {\n      if (geometry.direction == 'v') {\n        ;[y0, y1] = this.renderer.yscale.r_invert(sy, sy)\n        ;[x0, x1] = [x2, x3]\n      } else {\n        ;[x0, x1] = this.renderer.xscale.r_invert(sx, sx)\n        ;[y0, y1] = [y2, y3]\n      }\n    }\n\n    const {x, y} = hittest.check_2_segments_intersect(x0, y0, x1, y1, x2, y2, x3, y3)\n    return [x!, y!] // XXX: null is not handled at use sites\n  }\n\n  draw_legend_for_index(ctx: Context2d, bbox: IBBox, index: number): void {\n    generic_line_legend(this.visuals, ctx, bbox, index)\n  }\n\n  scenterx(): number {\n    throw new Error(\"not implemented\")\n  }\n\n  scentery(): number {\n    throw new Error(\"not implemented\")\n  }\n}\n\nexport namespace MultiLine {\n  export interface Mixins extends LineMixinVector {}\n\n  export interface Attrs extends Glyph.Attrs, Mixins {\n    xs: NumberSpec\n    ys: NumberSpec\n  }\n\n  export interface Props extends Glyph.Props {}\n\n  export interface Visuals extends Glyph.Visuals {\n    line: Line\n  }\n}\n\nexport interface MultiLine extends MultiLine.Attrs {}\n\nexport class MultiLine extends Glyph {\n\n  properties: MultiLine.Props\n\n  constructor(attrs?: Partial<MultiLine.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = 'MultiLine'\n    this.prototype.default_view = MultiLineView\n\n    this.coords([['xs', 'ys']])\n    this.mixins(['line'])\n  }\n}\nMultiLine.initClass()\n"]}