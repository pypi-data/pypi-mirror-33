{"version":3,"sources":["models/widgets/markup.ts"],"names":[],"mappings":";;;AAAA,mCAAoC;AACpC,gCAAmC;AACnC,2CAAuC;AAEvC,mCAA2C;AAE3C;IAAgC,sCAAU;IAA1C;;IAyBA,CAAC;IApBC,+BAAU,GAAV,UAAW,OAAY;QACrB,iBAAM,UAAU,YAAC,OAAO,CAAC,CAAA;QACzB,IAAI,CAAC,MAAM,EAAE,CAAA;IACf,CAAC;IAED,oCAAe,GAAf;QAAA,iBAGC;QAFC,iBAAM,eAAe,WAAE,CAAA;QACvB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,cAAM,OAAA,KAAI,CAAC,MAAM,EAAE,EAAb,CAAa,CAAC,CAAA;IACtD,CAAC;IAED,2BAAM,GAAN;QACE,iBAAM,MAAM,WAAE,CAAA;QACd,WAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;QACd,IAAM,KAAK,GAAG,eAAM,CAAC;YACnB,KAAK,EAAK,IAAI,CAAC,KAAK,CAAC,KAAK,OAAI;YAC9B,MAAM,EAAK,IAAI,CAAC,KAAK,CAAC,MAAM,OAAI;SACjC,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAA;QACpB,IAAI,CAAC,QAAQ,GAAG,SAAG,CAAC,EAAC,KAAK,EAAE,KAAK,EAAC,CAAC,CAAA;QACnC,IAAI,CAAC,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;IACpC,CAAC;IACH,iBAAC;AAAD,CAzBA,AAyBC,CAzB+B,mBAAU,GAyBzC;AAzBY,gCAAU;AAsCvB;IAA4B,kCAAM;IAIhC,gBAAY,KAA6B;eACvC,kBAAM,KAAK,CAAC;IACd,CAAC;IAEM,gBAAS,GAAhB;QACE,IAAI,CAAC,SAAS,CAAC,IAAI,GAAG,QAAQ,CAAA;QAE9B,IAAI,CAAC,MAAM,CAAC;YACV,IAAI,EAAG,CAAE,CAAC,CAAC,MAAM,EAAE,EAAE,CAAE;YACvB,KAAK,EAAE,CAAE,CAAC,CAAC,GAAG,EAAK,EAAE,CAAE;SACxB,CAAC,CAAA;IACJ,CAAC;IACH,aAAC;AAAD,CAhBA,AAgBC,CAhB2B,eAAM,GAgBjC;AAhBY,wBAAM;AAkBnB,MAAM,CAAC,SAAS,EAAE,CAAA","file":"markup.js","sourcesContent":["import * as p from \"core/properties\"\nimport {empty, div} from \"core/dom\"\nimport {extend} from \"core/util/object\"\n\nimport {Widget, WidgetView} from \"./widget\"\n\nexport class MarkupView extends WidgetView {\n  model: Markup\n\n  protected markupEl: HTMLElement\n\n  initialize(options: any): void {\n    super.initialize(options)\n    this.render()\n  }\n\n  connect_signals(): void {\n    super.connect_signals()\n    this.connect(this.model.change, () => this.render())\n  }\n\n  render(): void {\n    super.render()\n    empty(this.el)\n    const style = extend({\n      width: `${this.model.width}px`,\n      height: `${this.model.height}px`,\n    }, this.model.style)\n    this.markupEl = div({style: style})\n    this.el.appendChild(this.markupEl)\n  }\n}\n\nexport namespace Markup {\n  export interface Attrs extends Widget.Attrs {\n    text: string\n    style: {[key: string]: string}\n  }\n\n  export interface Props extends Widget.Props {}\n}\n\nexport interface Markup extends Markup.Attrs {}\n\nexport class Markup extends Widget {\n\n  properties: Markup.Props\n\n  constructor(attrs?: Partial<Markup.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = \"Markup\"\n\n    this.define({\n      text:  [ p.String, '' ],\n      style: [ p.Any,    {} ],\n    })\n  }\n}\n\nMarkup.initClass()\n"]}