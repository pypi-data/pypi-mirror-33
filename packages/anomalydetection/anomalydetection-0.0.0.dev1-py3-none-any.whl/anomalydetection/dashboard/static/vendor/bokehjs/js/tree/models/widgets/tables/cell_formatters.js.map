{"version":3,"sources":["models/widgets/tables/cell_formatters.ts"],"names":[],"mappings":"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","file":"cell_formatters.js","sourcesContent":["import * as Numbro from \"numbro\"\nimport compile_template = require(\"underscore.template\")\nimport tz = require(\"timezone\")\n\nimport * as p from \"core/properties\"\nimport {span, i} from \"core/dom\"\nimport {Color} from \"core/types\"\nimport {FontStyle, TextAlign, RoundingFunction} from \"core/enums\"\nimport {extend} from \"core/util/object\"\nimport {isString} from \"core/util/types\"\nimport {Model} from \"../../../model\"\n\nexport namespace CellFormatter {\n  export interface Attrs extends Model.Attrs {}\n\n  export interface Props extends Model.Props {}\n}\n\nexport interface CellFormatter extends CellFormatter.Attrs {}\n\nexport abstract class CellFormatter extends Model {\n\n  properties: CellFormatter.Props\n\n  doFormat(_row: any, _cell: any, value: any, _columnDef: any, _dataContext: any): string {\n    if (value == null)\n      return \"\"\n    else\n      return (value + \"\").replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\")\n  }\n}\n\nexport namespace StringFormatter {\n  export interface Attrs extends CellFormatter.Attrs {\n    font_style: FontStyle\n    text_align: TextAlign\n    text_color: Color\n  }\n\n  export interface Props extends CellFormatter.Props {}\n}\n\nexport interface StringFormatter extends StringFormatter.Attrs {}\n\nexport class StringFormatter extends CellFormatter {\n\n  properties: StringFormatter.Props\n\n  static initClass(): void {\n    this.prototype.type = 'StringFormatter'\n\n    this.define({\n      font_style: [ p.FontStyle, \"normal\" ],\n      text_align: [ p.TextAlign, \"left\"   ],\n      text_color: [ p.Color ],\n    })\n  }\n\n  doFormat(_row: any, _cell: any, value: any, _columnDef: any, _dataContext: any): string {\n    const {font_style, text_align, text_color} = this\n\n    const text = span({}, value == null ? \"\" : `${value}`)\n    switch (font_style) {\n      case \"bold\":\n        text.style.fontWeight = \"bold\"\n        break\n      case \"italic\":\n        text.style.fontStyle = \"italic\"\n        break\n    }\n\n    if (text_align != null)\n      text.style.textAlign = text_align\n    if (text_color != null)\n      text.style.color = text_color\n\n    return text.outerHTML\n  }\n}\nStringFormatter.initClass()\n\nexport namespace NumberFormatter {\n  export interface Attrs extends StringFormatter.Attrs {\n    format: string\n    language: string\n    rounding: RoundingFunction\n  }\n\n  export interface Props extends StringFormatter.Props {}\n}\n\nexport interface NumberFormatter extends NumberFormatter.Attrs {}\n\nexport class NumberFormatter extends StringFormatter {\n\n  properties: NumberFormatter.Props\n\n  static initClass(): void {\n    this.prototype.type = 'NumberFormatter'\n\n    this.define({\n      format:     [ p.String, '0,0'       ], // TODO (bev)\n      language:   [ p.String, 'en'        ], // TODO (bev)\n      rounding:   [ p.String, 'round'     ], // TODO (bev)\n    })\n  }\n\n  doFormat(row: any, cell: any, value: any, columnDef: any, dataContext: any): string {\n    const {format, language} = this\n    const rounding = (() => { switch (this.rounding) {\n      case \"round\": case \"nearest\":   return Math.round\n      case \"floor\": case \"rounddown\": return Math.floor\n      case \"ceil\":  case \"roundup\":   return Math.ceil\n    } })()\n    value = Numbro.format(value, format, language, rounding)\n    return super.doFormat(row, cell, value, columnDef, dataContext)\n  }\n}\nNumberFormatter.initClass()\n\nexport namespace BooleanFormatter {\n  export interface Attrs extends CellFormatter.Attrs {\n    icon: string // XXX: enum\n  }\n\n  export interface Props extends CellFormatter.Props {}\n}\n\nexport interface BooleanFormatter extends BooleanFormatter.Attrs {}\n\nexport class BooleanFormatter extends CellFormatter {\n\n  properties: BooleanFormatter.Props\n\n  static initClass(): void {\n    this.prototype.type = 'BooleanFormatter'\n\n    this.define({\n      icon: [ p.String, 'check' ],\n    })\n  }\n\n  doFormat(_row: any, _cell: any, value: any, _columnDef: any, _dataContext: any): string {\n    return !!value ? i({class: this.icon}).outerHTML : \"\"\n  }\n}\nBooleanFormatter.initClass()\n\nexport namespace DateFormatter {\n  export interface Attrs extends CellFormatter.Attrs {\n    format: string // XXX: enum\n  }\n\n  export interface Props extends CellFormatter.Props {}\n}\n\nexport interface DateFormatter extends DateFormatter.Attrs {}\n\nexport class DateFormatter extends CellFormatter {\n\n  properties: DateFormatter.Props\n\n  static initClass(): void {\n    this.prototype.type = 'DateFormatter'\n\n    this.define({\n      format: [ p.String, 'ISO-8601' ],\n    })\n  }\n\n   getFormat(): string | undefined {\n    // using definitions provided here: https://api.jqueryui.com/datepicker/\n    // except not implementing TICKS\n    switch (this.format) {\n      case \"ATOM\":\n      case \"W3C\":\n      case \"RFC-3339\":\n      case \"ISO-8601\":\n        return \"%Y-%m-%d\"\n      case \"COOKIE\":\n        return \"%a, %d %b %Y\"\n      case \"RFC-850\":\n        return \"%A, %d-%b-%y\"\n      case \"RFC-1123\":\n      case \"RFC-2822\":\n        return \"%a, %e %b %Y\"\n      case \"RSS\":\n      case \"RFC-822\":\n      case \"RFC-1036\":\n        return \"%a, %e %b %y\"\n      case \"TIMESTAMP\":\n        return undefined\n      default:\n        return this.format\n    }\n  }\n\n  doFormat(row: any, cell: any, value: any, columnDef: any, dataContext: any): string {\n    value = isString(value) ? parseInt(value, 10) : value\n    const date = tz(value, this.getFormat())\n    return super.doFormat(row, cell, date, columnDef, dataContext)\n  }\n}\nDateFormatter.initClass()\n\nexport namespace HTMLTemplateFormatter {\n  export interface Attrs extends CellFormatter.Attrs {\n    template: string\n  }\n\n  export interface Props extends CellFormatter.Props {}\n}\n\nexport interface HTMLTemplateFormatter extends HTMLTemplateFormatter.Attrs {}\n\nexport class HTMLTemplateFormatter extends CellFormatter {\n\n  properties: HTMLTemplateFormatter.Props\n\n  static initClass(): void {\n    this.prototype.type = 'HTMLTemplateFormatter'\n\n    this.define({\n      template: [ p.String, '<%= value %>' ],\n    })\n  }\n\n  doFormat(_row: any, _cell: any, value: any, _columnDef: any, dataContext: any): string {\n    const {template} = this\n    if (value == null)\n      return \"\"\n    else {\n      const compiled_template = compile_template(template)\n      const context = extend({}, dataContext, {value})\n      return compiled_template(context)\n    }\n  }\n}\nHTMLTemplateFormatter.initClass()\n"]}