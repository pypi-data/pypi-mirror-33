{"version":3,"sources":["models/mappers/categorical_color_mapper.ts"],"names":[],"mappings":";;;AAAA,+CAA0C;AAG1C,mCAAoC;AAEpC,yCAAyC;AACzC,yCAAwC;AAExC,iBAAiB,CAAiB,EAAE,CAAiB;IACnD,IAAI,CAAC,CAAC,MAAM,IAAI,CAAC,CAAC,MAAM;QACtB,OAAO,KAAK,CAAA;IAEd,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;QAC5C,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACf,OAAO,KAAK,CAAA;KACf;IAED,OAAO,IAAI,CAAA;AACb,CAAC;AAcD;IAA4C,kDAAW;IAIrD,gCAAY,KAA6C;eACvD,kBAAM,KAAK,CAAC;IACd,CAAC;IAEM,gCAAS,GAAhB;QACE,IAAI,CAAC,SAAS,CAAC,IAAI,GAAG,wBAAwB,CAAA;QAE9C,IAAI,CAAC,MAAM,CAAC;YACV,OAAO,EAAE,CAAE,CAAC,CAAC,KAAK,CAAM;YACxB,KAAK,EAAI,CAAE,CAAC,CAAC,MAAM,EAAE,CAAC,CAAE;YACxB,GAAG,EAAM,CAAE,CAAC,CAAC,MAAM,CAAK;SACzB,CAAC,CAAA;IACJ,CAAC;IAES,2CAAU,GAApB,UAAwB,IAAuB,EAAE,MAAoB,EACjE,OAAqB,EAAE,EAA2B;YAA1B,wBAAS;gCAE1B,CAAC,EAAM,GAAG;YACjB,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAA;YAEf,IAAI,GAAG,SAAQ,CAAA;YACf,IAAI,gBAAQ,CAAC,CAAC,CAAC;gBACb,GAAG,GAAG,OAAK,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAA;iBAC1B;gBACH,IAAI,OAAK,KAAK,IAAI,IAAI,EAAE;oBACtB,IAAI,OAAK,GAAG,IAAI,IAAI;wBAClB,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,OAAK,KAAK,EAAE,OAAK,GAAG,CAAW,CAAA;;wBAE3C,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,OAAK,KAAK,CAAW,CAAA;iBACpC;qBAAM,IAAI,OAAK,GAAG,IAAI,IAAI;oBACzB,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,OAAK,GAAG,CAAW,CAAA;gBAEpC,IAAI,CAAC,CAAC,MAAM,IAAI,CAAC;oBACf,GAAG,GAAG,OAAK,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;;oBAEhC,GAAG,GAAG,iBAAS,CAAC,OAAK,OAAO,EAAE,UAAC,CAAC,IAAK,OAAA,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,EAAb,CAAa,CAAC,CAAA;aACtD;YAED,IAAI,KAAK,SAAG,CAAA;YACZ,IAAI,GAAG,GAAG,CAAC,IAAI,GAAG,IAAI,OAAO,CAAC,MAAM;gBAClC,KAAK,GAAG,SAAS,CAAA;;gBAEjB,KAAK,GAAG,OAAO,CAAC,GAAG,CAAC,CAAA;YAEtB,MAAM,CAAC,CAAC,CAAC,GAAG,KAAK,CAAA;QACnB,CAAC;;QA5BD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE;oBAAtC,CAAC,EAAM,GAAG;SA4BlB;IACH,CAAC;IACH,6BAAC;AAAD,CAnDA,AAmDC,CAnD2C,0BAAW,GAmDtD;AAnDY,wDAAsB;AAoDnC,sBAAsB,CAAC,SAAS,EAAE,CAAA","file":"categorical_color_mapper.js","sourcesContent":["import {ColorMapper} from \"./color_mapper\"\nimport {Factor} from \"../ranges/factor_range\"\n\nimport * as p from \"core/properties\"\nimport {Arrayable} from \"core/types\"\nimport {findIndex} from \"core/util/array\"\nimport {isString} from \"core/util/types\"\n\nfunction _equals(a: Arrayable<any>, b: Arrayable<any>): boolean {\n  if (a.length != b.length)\n    return false\n\n  for (let i = 0, end = a.length; i < end; i++) {\n    if (a[i] !== b[i])\n      return false\n  }\n\n  return true\n}\n\nexport namespace CategoricalColorMapper {\n  export interface Attrs extends ColorMapper.Attrs {\n    factors: string[]\n    start: number\n    end: number\n  }\n\n  export interface Props extends ColorMapper.Props {}\n}\n\nexport interface CategoricalColorMapper extends CategoricalColorMapper.Attrs {}\n\nexport class CategoricalColorMapper extends ColorMapper {\n\n  properties: CategoricalColorMapper.Props\n\n  constructor(attrs?: Partial<CategoricalColorMapper.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = \"CategoricalColorMapper\"\n\n    this.define({\n      factors: [ p.Array     ],\n      start:   [ p.Number, 0 ],\n      end:     [ p.Number    ],\n    })\n  }\n\n  protected _v_compute<T>(data: Arrayable<Factor>, values: Arrayable<T>,\n      palette: Arrayable<T>, {nan_color}: {nan_color: T}): void {\n\n    for (let i = 0, end = data.length; i < end; i++) {\n      let d = data[i]\n\n      let key: number\n      if (isString(d))\n        key = this.factors.indexOf(d)\n      else {\n        if (this.start != null) {\n          if (this.end != null)\n            d = d.slice(this.start, this.end) as Factor\n          else\n            d = d.slice(this.start) as Factor\n        } else if (this.end != null)\n          d = d.slice(0, this.end) as Factor\n\n        if (d.length == 1)\n          key = this.factors.indexOf(d[0])\n        else\n          key = findIndex(this.factors, (x) => _equals(x, d))\n      }\n\n      let color: T\n      if (key < 0 || key >= palette.length)\n        color = nan_color\n      else\n        color = palette[key]\n\n      values[i] = color\n    }\n  }\n}\nCategoricalColorMapper.initClass()\n"]}