{"version":3,"sources":["models/renderers/graph_renderer.ts"],"names":[],"mappings":"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","file":"graph_renderer.js","sourcesContent":["import {Renderer, RendererView} from \"./renderer\"\nimport {GlyphRenderer, GlyphRendererView} from \"./glyph_renderer\"\nimport {LayoutProvider} from \"../graphs/layout_provider\"\nimport {GraphHitTestPolicy, NodesOnly} from \"../graphs/graph_hit_test_policy\"\nimport {Scale} from \"../scales/scale\"\nimport * as p from \"core/properties\"\nimport {build_views} from \"core/build_views\"\nimport {SelectionManager} from \"core/selection_manager\"\n\nexport class GraphRendererView extends RendererView {\n  model: GraphRenderer\n\n  node_view: GlyphRendererView\n  edge_view: GlyphRendererView\n\n  xscale: Scale\n  yscale: Scale\n\n  protected _renderer_views: {[key: string]: GlyphRendererView}\n\n  initialize(options: any): void {\n    super.initialize(options)\n\n    this.xscale = this.plot_view.frame.xscales[\"default\"]\n    this.yscale = this.plot_view.frame.yscales[\"default\"]\n\n    this._renderer_views = {}\n    ;[this.node_view, this.edge_view] = build_views(this._renderer_views,\n      [this.model.node_renderer, this.model.edge_renderer], this.plot_view.view_options()) as [GlyphRendererView, GlyphRendererView]\n\n    this.set_data()\n  }\n\n  connect_signals(): void {\n    super.connect_signals()\n\n    this.connect(this.model.layout_provider.change, () => this.set_data())\n    this.connect(this.model.node_renderer.data_source._select, () => this.set_data())\n    this.connect(this.model.node_renderer.data_source.inspect, () => this.set_data())\n    this.connect(this.model.node_renderer.data_source.change, () => this.set_data())\n    this.connect(this.model.edge_renderer.data_source._select, () => this.set_data())\n    this.connect(this.model.edge_renderer.data_source.inspect, () => this.set_data())\n    this.connect(this.model.edge_renderer.data_source.change, () => this.set_data())\n\n    const {x_ranges, y_ranges} = this.plot_model.frame\n\n    for (const name in x_ranges) {\n      const rng = x_ranges[name]\n      this.connect(rng.change, () => this.set_data())\n    }\n\n    for (const name in y_ranges) {\n      const rng = y_ranges[name]\n      this.connect(rng.change, () => this.set_data())\n    }\n  }\n\n  set_data(request_render: boolean = true): void {\n    // TODO (bev) this is a bit clunky, need to make sure glyphs use the correct ranges when they call\n    // mapping functions on the base Renderer class\n    this.node_view.glyph.model.setv({x_range_name: this.model.x_range_name, y_range_name: this.model.y_range_name}, {silent: true})\n    this.edge_view.glyph.model.setv({x_range_name: this.model.x_range_name, y_range_name: this.model.y_range_name}, {silent: true})\n\n    // XXX\n    const node_glyph: any = this.node_view.glyph\n    ;[node_glyph._x, node_glyph._y] =\n      this.model.layout_provider.get_node_coordinates(this.model.node_renderer.data_source) as any\n\n    const edge_glyph: any = this.edge_view.glyph\n    ;[edge_glyph._xs, edge_glyph._ys] =\n      this.model.layout_provider.get_edge_coordinates(this.model.edge_renderer.data_source) as any\n\n    node_glyph.index_data()\n    edge_glyph.index_data()\n\n    if (request_render)\n      this.request_render()\n  }\n\n  render(): void {\n    this.edge_view.render()\n    this.node_view.render()\n  }\n}\n\nexport namespace GraphRenderer {\n  export interface Attrs extends Renderer.Attrs {\n    x_range_name: string\n    y_range_name: string\n    layout_provider: LayoutProvider\n    node_renderer: GlyphRenderer\n    edge_renderer: GlyphRenderer\n    selection_policy: GraphHitTestPolicy\n    inspection_policy: GraphHitTestPolicy\n  }\n\n  export interface Props extends Renderer.Props {}\n}\n\nexport interface GraphRenderer extends GraphRenderer.Attrs {}\n\nexport class GraphRenderer extends Renderer {\n\n  properties: GraphRenderer.Props\n\n  constructor(attrs?: Partial<GraphRenderer.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = 'GraphRenderer'\n    this.prototype.default_view = GraphRendererView\n\n    this.define({\n      x_range_name:       [ p.String,        'default'              ],\n      y_range_name:       [ p.String,        'default'              ],\n      layout_provider:    [ p.Instance                              ],\n      node_renderer:      [ p.Instance                              ],\n      edge_renderer:      [ p.Instance                              ],\n      selection_policy:   [ p.Instance,      () => new NodesOnly()  ],\n      inspection_policy:  [ p.Instance,      () => new NodesOnly()  ],\n    })\n\n    this.override({\n      level: 'glyph',\n    })\n  }\n\n  get_selection_manager(): SelectionManager {\n    return this.node_renderer.data_source.selection_manager\n  }\n}\nGraphRenderer.initClass()\n"]}