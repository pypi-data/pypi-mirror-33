{"version":3,"sources":["core/hittest.ts"],"names":[],"mappings":"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","file":"hittest.js","sourcesContent":["import {sortBy} from \"./util/array\"\nimport {Rect} from \"./util/spatial\"\nimport {Selection} from \"../models/selections/selection\"\n\nexport type HitTestResult = Selection | null\n\nexport function point_in_poly(x: number, y: number, px: number[], py: number[]): boolean {\n  let inside = false\n\n  let x1 = px[px.length-1]\n  let y1 = py[py.length-1]\n\n  for (let i = 0; i < px.length; i++) {\n    const x2 = px[i]\n    const y2 = py[i]\n    if ((y1 < y) != (y2 < y)) {\n      if (x1 + (y - y1) / (y2 - y1)*(x2 - x1) < x)\n        inside = !inside\n    }\n    x1 = x2\n    y1 = y2\n  }\n\n  return inside\n}\n\nexport function create_empty_hit_test_result(): Selection {\n  return new Selection()\n}\n\nexport function create_hit_test_result_from_hits(hits: [number, number][]): Selection {\n  const result = new Selection()\n  result.indices = sortBy(hits, ([_i, dist]) => dist).map(([i, _dist]) => i)\n  return result\n}\n\nexport function validate_bbox_coords([x0, x1]: [number, number], [y0, y1]: [number, number]): Rect {\n  // spatial index (flatbush) expects x0, y0 to be min, x1, y1 max\n  if (x0 > x1) [x0, x1] = [x1, x0]\n  if (y0 > y1) [y0, y1] = [y1, y0]\n  return {minX: x0, minY: y0, maxX: x1, maxY: y1}\n}\n\nfunction sqr(x: number): number {\n  return x * x\n}\n\nexport interface Point {\n  x: number\n  y: number\n}\n\nexport function dist_2_pts(p0: Point, p1: Point): number {\n  return sqr(p0.x - p1.x) + sqr(p0.y - p1.y)\n}\n\nexport function dist_to_segment_squared(p: Point, v: Point, w: Point): number {\n  const l2 = dist_2_pts(v, w)\n  if (l2 == 0)\n    return dist_2_pts(p, v)\n  const t = ((p.x - v.x) * (w.x - v.x) + (p.y - v.y) * (w.y - v.y)) / l2\n  if (t < 0)\n    return dist_2_pts(p, v)\n  if (t > 1)\n    return dist_2_pts(p, w)\n\n  const q = {x: v.x + t * (w.x - v.x), y: v.y + t * (w.y - v.y)}\n  return dist_2_pts(p, q)\n}\n\nexport function dist_to_segment(p: Point, v: Point, w: Point): number {\n  return Math.sqrt(dist_to_segment_squared(p, v, w))\n}\n\nexport function check_2_segments_intersect(\n  l0_x0: number, l0_y0: number, l0_x1: number, l0_y1: number,\n  l1_x0: number, l1_y0: number, l1_x1: number, l1_y1: number): {\n    hit: boolean,\n    x: number | null,\n    y: number | null,\n  } {\n  /*\n   *  Check if 2 segments (l0 and l1) intersect. Returns a structure with\n   *  the following attributes:\n   *   * hit (boolean): whether the 2 segments intersect\n   *   * x (float): x coordinate of the intersection point\n   *   * y (float): y coordinate of the intersection point\n   */\n  const den = ((l1_y1 - l1_y0) * (l0_x1 - l0_x0)) - ((l1_x1 - l1_x0) * (l0_y1 - l0_y0))\n\n  if (den == 0) {\n    return {hit: false, x: null, y: null}\n  } else {\n    let a = l0_y0 - l1_y0\n    let b = l0_x0 - l1_x0\n    const num1 = ((l1_x1 - l1_x0) * a) - ((l1_y1 - l1_y0) * b)\n    const num2 = ((l0_x1 - l0_x0) * a) - ((l0_y1 - l0_y0) * b)\n    a = num1 / den\n    b = num2 / den\n    const x = l0_x0 + (a * (l0_x1 - l0_x0))\n    const y = l0_y0 + (a * (l0_y1 - l0_y0))\n\n    return {\n      hit: (a > 0 && a < 1) && (b > 0 && b < 1),\n      x: x,\n      y: y,\n    }\n  }\n}\n"]}