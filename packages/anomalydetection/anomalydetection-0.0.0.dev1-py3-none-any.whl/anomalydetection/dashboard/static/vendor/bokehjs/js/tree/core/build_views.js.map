{"version":3,"sources":["core/build_views.ts"],"names":[],"mappings":";;AAGA,sCAAuC;AACvC,wCAAoC;AAIpC,qBAAgD,YAAyB,EAAE,MAAW,EAClF,OAAe,EAAE,GAA8D;IAA9D,oBAAA,EAAA,gBAAkC,KAAK,IAAK,OAAA,KAAK,CAAC,YAAY,EAAlB,CAAkB;IAEjF,IAAM,SAAS,GAAG,kBAAU,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,MAAM,CAAC,GAAG,CAAC,UAAC,KAAK,IAAK,OAAA,KAAK,CAAC,EAAE,EAAR,CAAQ,CAAC,CAAC,CAAA;IAExF,KAAuB,UAAS,EAAT,uBAAS,EAAT,uBAAS,EAAT,IAAS;QAA3B,IAAM,QAAQ,kBAAA;QACjB,YAAY,CAAC,QAAQ,CAAC,CAAC,MAAM,EAAE,CAAA;QAC/B,OAAO,YAAY,CAAC,QAAQ,CAAC,CAAA;KAC9B;IAED,IAAM,aAAa,GAAG,EAAE,CAAA;IACxB,IAAM,UAAU,GAAG,MAAM,CAAC,MAAM,CAAC,UAAC,KAAK,IAAK,OAAA,YAAY,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,IAAI,EAA9B,CAA8B,CAAC,CAAA;IAE3E,KAAoB,UAAU,EAAV,yBAAU,EAAV,wBAAU,EAAV,IAAU;QAAzB,IAAM,KAAK,mBAAA;QACd,IAAM,QAAQ,GAAG,GAAG,CAAC,KAAK,CAAC,CAAA;QAC3B,IAAM,YAAY,GAAG,eAAM,CAAC,EAAE,EAAE,OAAO,EAAE,EAAC,KAAK,EAAE,KAAK,EAAE,eAAe,EAAE,KAAK,EAAC,CAAC,CAAA;QAChF,IAAM,IAAI,GAAG,IAAI,QAAQ,CAAC,YAAY,CAAC,CAAA;QACvC,YAAY,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG,IAAI,CAAA;QAC7B,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;KACzB;IAED,KAAmB,UAAa,EAAb,+BAAa,EAAb,2BAAa,EAAb,IAAa;QAA3B,IAAM,IAAI,sBAAA;QACb,IAAI,CAAC,eAAe,EAAE,CAAA;KAAA;IAExB,OAAO,aAAa,CAAA;AACtB,CAAC;AAzBD,kCAyBC;AAED,sBAA6B,YAAyB;IACpD,KAAK,IAAM,EAAE,IAAI,YAAY,EAAE;QAC7B,YAAY,CAAC,EAAE,CAAC,CAAC,MAAM,EAAE,CAAA;QACzB,OAAO,YAAY,CAAC,EAAE,CAAC,CAAA;KACxB;AACH,CAAC;AALD,oCAKC","file":"build_views.js","sourcesContent":["import {HasProps} from \"./has_props\"\nimport {View} from \"./view\"\nimport {Class} from \"./class\"\nimport {difference} from \"./util/array\"\nimport {extend} from \"./util/object\"\n\nexport type ViewStorage = {[key: string]: View}\n\nexport function build_views<T extends HasProps>(view_storage: ViewStorage, models: T[],\n    options: object, cls: (model: T) => Class<View> = (model) => model.default_view): View[] {\n\n  const to_remove = difference(Object.keys(view_storage), models.map((model) => model.id))\n\n  for (const model_id of to_remove) {\n    view_storage[model_id].remove()\n    delete view_storage[model_id]\n  }\n\n  const created_views = []\n  const new_models = models.filter((model) => view_storage[model.id] == null)\n\n  for (const model of new_models) {\n    const view_cls = cls(model)\n    const view_options = extend({}, options, {model: model, connect_signals: false})\n    const view = new view_cls(view_options)\n    view_storage[model.id] = view\n    created_views.push(view)\n  }\n\n  for (const view of created_views)\n    view.connect_signals()\n\n  return created_views\n}\n\nexport function remove_views(view_storage: ViewStorage): void {\n  for (const id in view_storage) {\n    view_storage[id].remove()\n    delete view_storage[id]\n  }\n}\n"]}