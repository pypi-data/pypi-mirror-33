{"version":3,"sources":["models/mappers/log_color_mapper.ts"],"names":[],"mappings":";;;AAAA,qEAA+D;AAE/D,iDAA4C;AAE5C,uFAAuF;AACvF,+FAA+F;AAC/F,IAAM,KAAK,GAAG,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,UAAC,CAAS,IAAK,OAAA,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,EAAf,CAAe,CAAA;AAU9E;IAAoC,0CAAqB;IAIvD,wBAAY,KAAqC;eAC/C,kBAAM,KAAK,CAAC;IACd,CAAC;IAEM,wBAAS,GAAhB;QACE,IAAI,CAAC,SAAS,CAAC,IAAI,GAAG,gBAAgB,CAAA;IACxC,CAAC;IAES,mCAAU,GAApB,UAAwB,IAAuB,EAAE,MAAoB,EACjE,OAAqB,EAAE,MAAqD;QACvE,IAAA,4BAAS,EAAE,4BAAS,EAAE,8BAAU,CAAU;QAEjD,IAAM,CAAC,GAAG,OAAO,CAAC,MAAM,CAAA;QACxB,IAAM,GAAG,GAAG,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,eAAG,CAAC,IAAI,CAAC,CAAA;QACnD,IAAM,IAAI,GAAG,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,eAAG,CAAC,IAAI,CAAC,CAAA;QACtD,IAAM,KAAK,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAA,CAAE,0BAA0B;QACxE,IAAM,OAAO,GAAG,OAAO,CAAC,MAAM,GAAG,CAAC,CAAA;QAElC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;YAC/C,IAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAA;YAEjB,YAAY;YACZ,IAAI,KAAK,CAAC,CAAC,CAAC,EAAE;gBACZ,MAAM,CAAC,CAAC,CAAC,GAAG,SAAS,CAAA;gBACrB,SAAQ;aACT;YAED,IAAI,CAAC,GAAG,IAAI,EAAE;gBACZ,MAAM,CAAC,CAAC,CAAC,GAAG,UAAU,IAAI,IAAI,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAA;gBAC9D,SAAQ;aACT;YAED,wEAAwE;YACxE,wEAAwE;YACxE,UAAU;YACV,IAAI,CAAC,IAAI,IAAI,EAAE;gBACb,MAAM,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,OAAO,CAAC,CAAA;gBAC5B,SAAQ;aACT;YAED,IAAI,CAAC,GAAG,GAAG,EAAE;gBACX,MAAM,CAAC,CAAC,CAAC,GAAG,SAAS,IAAI,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAA;gBACtD,SAAQ;aACT;YAED,cAAc;YACd,IAAM,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,CAAA,CAAE,0BAA0B;YAC7D,IAAI,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,CAAA;YAEjC,wBAAwB;YACxB,IAAI,GAAG,GAAG,OAAO;gBACf,GAAG,GAAG,OAAO,CAAA;YAEf,MAAM,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC,CAAA;SACzB;IACH,CAAC;IACH,qBAAC;AAAD,CA5DA,AA4DC,CA5DmC,+CAAqB,GA4DxD;AA5DY,wCAAc;AA6D3B,cAAc,CAAC,SAAS,EAAE,CAAA","file":"log_color_mapper.js","sourcesContent":["import {ContinuousColorMapper} from \"./continuous_color_mapper\"\nimport {Arrayable} from \"core/types\"\nimport {min, max} from \"core/util/arrayable\"\n\n// Math.log1p() is not supported by any version of IE, so let's use a polyfill based on\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log1p.\nconst log1p = Math.log1p != null ? Math.log1p : (x: number) => Math.log(1 + x)\n\nexport namespace LogColorMapper {\n  export interface Attrs extends ContinuousColorMapper.Attrs {}\n\n  export interface Props extends ContinuousColorMapper.Props {}\n}\n\nexport interface LogColorMapper extends LogColorMapper.Attrs {}\n\nexport class LogColorMapper extends ContinuousColorMapper {\n\n  properties: LogColorMapper.Props\n\n  constructor(attrs?: Partial<LogColorMapper.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = \"LogColorMapper\"\n  }\n\n  protected _v_compute<T>(data: Arrayable<number>, values: Arrayable<T>,\n      palette: Arrayable<T>, colors: {nan_color: T, low_color?: T, high_color?: T}): void {\n    const {nan_color, low_color, high_color} = colors\n\n    const n = palette.length\n    const low = this.low != null ? this.low : min(data)\n    const high = this.high != null ? this.high : max(data)\n    const scale = n / (log1p(high) - log1p(low))  // subtract the low offset\n    const max_key = palette.length - 1\n\n    for (let i = 0, end = data.length; i < end; i++) {\n      const d = data[i]\n\n      // Check NaN\n      if (isNaN(d)) {\n        values[i] = nan_color\n        continue\n      }\n\n      if (d > high) {\n        values[i] = high_color != null ? high_color : palette[max_key]\n        continue\n      }\n\n      // This handles the edge case where d == high, since the code below maps\n      // values exactly equal to high to palette.length, which is greater than\n      // max_key\n      if (d == high) {\n        values[i] = palette[max_key]\n        continue\n      }\n\n      if (d < low) {\n        values[i] = low_color != null ? low_color : palette[0]\n        continue\n      }\n\n      // Get the key\n      const log = log1p(d) - log1p(low)  // subtract the low offset\n      let key = Math.floor(log * scale)\n\n      // Deal with upper bound\n      if (key > max_key)\n        key = max_key\n\n      values[i] = palette[key]\n    }\n  }\n}\nLogColorMapper.initClass()\n"]}