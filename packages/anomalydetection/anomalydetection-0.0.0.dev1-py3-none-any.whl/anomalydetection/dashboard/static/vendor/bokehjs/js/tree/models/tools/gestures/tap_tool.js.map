{"version":3,"sources":["models/tools/gestures/tap_tool.ts"],"names":[],"mappings":"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","file":"tap_tool.js","sourcesContent":["import {SelectTool, SelectToolView} from \"./select_tool\"\nimport * as p from \"core/properties\"\nimport {TapEvent} from \"core/ui_events\"\nimport {isFunction} from \"core/util/types\"\nimport {Geometry, PointGeometry} from \"core/geometry\"\nimport {DataSource} from \"../../sources/data_source\"\n\nexport class TapToolView extends SelectToolView {\n  model: TapTool\n\n  _tap(ev: TapEvent): void {\n    const {sx, sy} = ev\n    const geometry: PointGeometry = {\n      type: 'point',\n      sx: sx,\n      sy: sy,\n    }\n    const append = ev.shiftKey\n    this._select(geometry, true, append)\n  }\n\n  _select(geometry: PointGeometry, final: boolean, append: boolean): void {\n    const callback = this.model.callback\n\n    const cb_data: {\n      geometries: Geometry,\n      source: DataSource | null,\n    } = {\n      geometries: geometry,\n      source: null,\n    }\n\n    if (this.model.behavior == \"select\") {\n      const renderers_by_source = this._computed_renderers_by_data_source()\n\n      for (const id in renderers_by_source) {\n        const renderers = renderers_by_source[id]\n        const sm = renderers[0].get_selection_manager()\n        const r_views = renderers.map((r) => this.plot_view.renderer_views[r.id])\n        const did_hit = sm.select(r_views, geometry, final, append)\n\n        if (did_hit && callback != null) {\n          cb_data.source = sm.source\n          if (isFunction(callback))\n            callback(this, cb_data)\n          else\n            callback.execute(this, cb_data)\n        }\n      }\n\n      this._emit_selection_event(geometry)\n      this.plot_view.push_state('tap', {selection: this.plot_view.get_selection()})\n    } else {\n      for (const r of this.computed_renderers) {\n        const sm = r.get_selection_manager()\n        const did_hit = sm.inspect(this.plot_view.renderer_views[r.id], geometry)\n\n        if (did_hit && callback != null) {\n          cb_data.source = sm.source\n          if (isFunction(callback))\n            callback(this, cb_data)\n          else\n            callback.execute(this, cb_data)\n        }\n      }\n    }\n  }\n}\n\nexport namespace TapTool {\n  export interface Attrs extends SelectTool.Attrs {\n    behavior: \"select\" | \"inspect\"\n    callback: any // XXX\n  }\n\n  export interface Props extends SelectTool.Props {}\n}\n\nexport interface TapTool extends TapTool.Attrs {}\n\nexport class TapTool extends SelectTool {\n\n  properties: TapTool.Props\n\n  constructor(attrs?: Partial<TapTool.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = \"TapTool\"\n    this.prototype.default_view = TapToolView\n\n    this.define({\n      behavior: [ p.String, \"select\" ], // TODO: Enum(\"select\", \"inspect\")\n      callback: [ p.Any ], // TODO: p.Either(p.Instance(Callback), p.Function) ]\n    })\n  }\n\n  tool_name = \"Tap\"\n  icon = \"bk-tool-icon-tap-select\"\n  event_type = \"tap\" as \"tap\"\n  default_order = 10\n}\n\nTapTool.initClass()\n"]}