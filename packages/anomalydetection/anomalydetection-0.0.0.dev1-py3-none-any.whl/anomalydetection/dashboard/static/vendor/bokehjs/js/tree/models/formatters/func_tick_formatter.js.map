{"version":3,"sources":["models/formatters/func_tick_formatter.ts"],"names":[],"mappings":";;;AAAA,mDAA8C;AAE9C,mCAAoC;AACpC,2CAA6C;AAC7C,2CAA2C;AAc3C;IAAuC,6CAAa;IAIlD,2BAAY,KAAwC;eAClD,kBAAM,KAAK,CAAC;IACd,CAAC;IAEM,2BAAS,GAAhB;QACE,IAAI,CAAC,SAAS,CAAC,IAAI,GAAG,mBAAmB,CAAA;QAEzC,IAAI,CAAC,MAAM,CAAC;YACV,IAAI,EAAQ,CAAE,CAAC,CAAC,GAAG,EAAM,EAAE,CAAK;YAChC,IAAI,EAAQ,CAAE,CAAC,CAAC,MAAM,EAAG,EAAE,CAAK;YAChC,UAAU,EAAE,CAAE,CAAC,CAAC,OAAO,EAAE,KAAK,CAAE;SACjC,CAAC,CAAA;IACJ,CAAC;IAED,sBAAI,oCAAK;aAAT;YACE,OAAO,aAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QACxB,CAAC;;;OAAA;IAED,sBAAI,qCAAM;aAAV;YACE,OAAO,eAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QAC1B,CAAC;;;OAAA;IAES,sCAAU,GAApB;QACE,IAAM,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,mBAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAA;QAChE,YAAW,QAAQ,YAAR,QAAQ,WAAC,MAAM,EAAE,OAAO,EAAE,OAAO,SAAK,IAAI,CAAC,KAAK,GAAE,SAAS,EAAE,SAAS,EAAE,IAAI,OAAC;IAC1F,CAAC;IAED,oCAAQ,GAAR,UAAS,KAAe,EAAE,KAAW;QAArC,iBAIC;QAHC,IAAM,KAAK,GAAG,EAAE,CAAA;QAChB,IAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;QAC1C,OAAO,KAAK,CAAC,GAAG,CAAC,UAAC,IAAI,EAAE,KAAK,EAAE,KAAK,IAAK,OAAA,IAAI,gBAAC,IAAI,EAAE,KAAK,EAAE,KAAK,SAAK,KAAI,CAAC,MAAM,GAAE,OAAO,EAAE,EAAE,KAApD,CAAqD,CAAC,CAAA;IACjG,CAAC;IACH,wBAAC;AAAD,CApCA,AAoCC,CApCsC,8BAAa,GAoCnD;AApCY,8CAAiB;AAqC9B,iBAAiB,CAAC,SAAS,EAAE,CAAA","file":"func_tick_formatter.js","sourcesContent":["import {TickFormatter} from \"./tick_formatter\"\nimport {Axis} from \"../axes/axis\"\nimport * as p from \"core/properties\"\nimport {keys, values} from \"core/util/object\"\nimport {use_strict} from \"core/util/string\"\n\nexport namespace FuncTickFormatter {\n  export interface Attrs extends TickFormatter.Attrs {\n    args: {[key: string]: any}\n    code: string\n    use_strict: boolean\n  }\n\n  export interface Props extends TickFormatter.Props {}\n}\n\nexport interface FuncTickFormatter extends FuncTickFormatter.Attrs {}\n\nexport class FuncTickFormatter extends TickFormatter {\n\n  properties: FuncTickFormatter.Props\n\n  constructor(attrs?: Partial<FuncTickFormatter.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = 'FuncTickFormatter'\n\n    this.define({\n      args:       [ p.Any,     {}    ], // TODO (bev) better type\n      code:       [ p.String,  ''    ],\n      use_strict: [ p.Boolean, false ],\n    })\n  }\n\n  get names(): string[] {\n    return keys(this.args)\n  }\n\n  get values(): any[] {\n    return values(this.args)\n  }\n\n  protected _make_func(): Function {\n    const code = this.use_strict ? use_strict(this.code) : this.code\n    return new Function(\"tick\", \"index\", \"ticks\", ...this.names, \"require\", \"exports\", code)\n  }\n\n  doFormat(ticks: number[], _axis: Axis): string[] {\n    const cache = {}\n    const func = this._make_func().bind(cache)\n    return ticks.map((tick, index, ticks) => func(tick, index, ticks, ...this.values, require, {}))\n  }\n}\nFuncTickFormatter.initClass()\n"]}