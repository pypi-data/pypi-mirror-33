{"version":3,"sources":["models/glyphs/webgl/markers.ts"],"names":[],"mappings":"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","file":"markers.js","sourcesContent":["import {Program, VertexBuffer, IndexBuffer} from \"gloo2\"\nimport {BaseGLGlyph, Transform, attach_float, attach_color} from \"./base\"\nimport {vertex_shader} from \"./markers.vert\"\nimport {fragment_shader} from \"./markers.frag\"\nimport {MarkerView} from \"../../markers/marker\"\nimport {CircleView} from \"../circle\"\nimport {Class} from \"core/class\"\nimport {map} from \"core/util/arrayable\"\nimport {logger} from \"core/logging\"\n\n// Base class for markers. All markers share the same GLSL, except for one\n// function that defines the marker geometry.\nexport abstract class MarkerGLGlyph extends BaseGLGlyph {\n  readonly glyph: MarkerView | CircleView\n\n  protected abstract get _marker_code(): string\n\n  protected prog: Program\n  protected vbo_x: VertexBuffer\n  protected vbo_y: VertexBuffer\n  protected vbo_s: VertexBuffer\n  protected vbo_a: VertexBuffer\n  protected vbo_linewidth: VertexBuffer & {used?: boolean}\n  protected vbo_fg_color: VertexBuffer & {used?: boolean}\n  protected vbo_bg_color: VertexBuffer & {used?: boolean}\n  protected index_buffer: IndexBuffer\n\n  protected last_trans: Transform\n\n  protected _baked_offset: [number, number]\n\n  protected init(): void {\n    const {gl} = this\n\n    const vert = vertex_shader\n    const frag = fragment_shader(this._marker_code)\n\n    // The program\n    this.prog = new Program(gl)\n    this.prog.set_shaders(vert, frag)\n    // Real attributes\n    this.vbo_x = new VertexBuffer(gl)\n    this.prog.set_attribute('a_x', 'float', this.vbo_x)\n    this.vbo_y = new VertexBuffer(gl)\n    this.prog.set_attribute('a_y', 'float', this.vbo_y)\n    this.vbo_s = new VertexBuffer(gl)\n    this.prog.set_attribute('a_size', 'float', this.vbo_s)\n    this.vbo_a = new VertexBuffer(gl)\n    this.prog.set_attribute('a_angle', 'float', this.vbo_a)\n    // VBO's for attributes (they may not be used if value is singleton)\n    this.vbo_linewidth = new VertexBuffer(gl)\n    this.vbo_fg_color = new VertexBuffer(gl)\n    this.vbo_bg_color = new VertexBuffer(gl)\n    this.index_buffer = new IndexBuffer(gl)\n  }\n\n  draw(indices: number[], mainGlyph: MarkerView | CircleView, trans: Transform): void {\n    // The main glyph has the data, *this* glyph has the visuals.\n    const mainGlGlyph = mainGlyph.glglyph\n    const {nvertices} = mainGlGlyph\n\n    // Upload data if we must. Only happens for main glyph.\n    if (mainGlGlyph.data_changed) {\n      if (!(isFinite(trans.dx) && isFinite(trans.dy))) {\n        return;  // not sure why, but it happens on init sometimes (#4367)\n      }\n      mainGlGlyph._baked_offset = [trans.dx, trans.dy];  // float32 precision workaround; used in _set_data() and below\n      mainGlGlyph._set_data(nvertices)\n      mainGlGlyph.data_changed = false\n    } else if (this.glyph instanceof CircleView && this.glyph._radius != null &&\n               (this.last_trans == null || trans.sx != this.last_trans.sx || trans.sy != this.last_trans.sy)) {\n      // Keep screen radius up-to-date for circle glyph. Only happens when a radius is given\n      this.last_trans = trans\n      this.vbo_s.set_data(0, new Float32Array(map(this.glyph.sradius, (s) => s*2)))\n    }\n\n    // Update visuals if we must. Can happen for all glyphs.\n    if (this.visuals_changed) {\n      this._set_visuals(nvertices)\n      this.visuals_changed = false\n    }\n\n    // Handle transformation to device coordinates\n    // Note the baked-in offset to avoid float32 precision problems\n    const baked_offset = mainGlGlyph._baked_offset\n    this.prog.set_uniform('u_pixel_ratio', 'float', [trans.pixel_ratio])\n    this.prog.set_uniform('u_canvas_size', 'vec2', [trans.width, trans.height])\n    this.prog.set_uniform('u_offset', 'vec2', [trans.dx - baked_offset[0], trans.dy - baked_offset[1]])\n    this.prog.set_uniform('u_scale', 'vec2', [trans.sx, trans.sy])\n\n    // Select buffers from main glyph\n    // (which may be this glyph but maybe not if this is a (non)selection glyph)\n    this.prog.set_attribute('a_x', 'float', mainGlGlyph.vbo_x)\n    this.prog.set_attribute('a_y', 'float', mainGlGlyph.vbo_y)\n    this.prog.set_attribute('a_size', 'float', mainGlGlyph.vbo_s)\n    this.prog.set_attribute('a_angle', 'float', mainGlGlyph.vbo_a)\n\n    // Draw directly or using indices. Do not handle indices if they do not\n    // fit in a uint16; WebGL 1.0 does not support uint32.\n    if (indices.length == 0)\n      return\n    else if (indices.length === nvertices)\n      this.prog.draw(this.gl.POINTS, [0, nvertices])\n    else if (nvertices < 65535) {\n      // On IE the marker size is reduced to 1 px when using an index buffer\n      // A MS Edge dev on Twitter said on 24-04-2014: \"gl_PointSize > 1.0 works\n      // in DrawArrays; gl_PointSize > 1.0 in DrawElements is coming soon in the\n      // next renderer update.\n      const ua = window.navigator.userAgent\n      if ((ua.indexOf(\"MSIE \") + ua.indexOf(\"Trident/\") + ua.indexOf(\"Edge/\")) > 0) {\n         logger.warn('WebGL warning: IE is known to produce 1px sprites whith selections.')\n       }\n      this.index_buffer.set_size(indices.length*2)\n      this.index_buffer.set_data(0, new Uint16Array(indices))\n      this.prog.draw(this.gl.POINTS, this.index_buffer)\n    } else {\n      // Work around the limit that the indexbuffer must be uint16. We draw in chunks.\n      // First collect indices in chunks\n      const chunksize = 64000;  // 65536\n      const chunks: number[][] = []\n      for (let i = 0, end = Math.ceil(nvertices/chunksize); i < end; i++) {\n         chunks.push([])\n      }\n      for (let i = 0, end = indices.length; i < end; i++) {\n        const uint16_index = indices[i] % chunksize\n        const chunk = Math.floor(indices[i] / chunksize)\n        chunks[chunk].push(uint16_index)\n      }\n      // Then draw each chunk\n      for (let chunk = 0, end = chunks.length; chunk < end; chunk++) {\n        const these_indices = new Uint16Array(chunks[chunk])\n        const offset = chunk * chunksize * 4\n        if (these_indices.length === 0) {\n          continue\n        }\n        this.prog.set_attribute('a_x', 'float', mainGlGlyph.vbo_x, 0, offset)\n        this.prog.set_attribute('a_y', 'float', mainGlGlyph.vbo_y, 0, offset)\n        this.prog.set_attribute('a_size', 'float', mainGlGlyph.vbo_s, 0, offset)\n        this.prog.set_attribute('a_angle', 'float', mainGlGlyph.vbo_a, 0, offset)\n        if (this.vbo_linewidth.used) {\n          this.prog.set_attribute('a_linewidth', 'float', this.vbo_linewidth, 0, offset)\n        }\n        if (this.vbo_fg_color.used) {\n          this.prog.set_attribute('a_fg_color', 'vec4', this.vbo_fg_color, 0, offset * 4)\n        }\n        if (this.vbo_bg_color.used) {\n          this.prog.set_attribute('a_bg_color', 'vec4', this.vbo_bg_color, 0, offset * 4)\n        }\n        // The actual drawing\n        this.index_buffer.set_size(these_indices.length*2)\n        this.index_buffer.set_data(0, these_indices)\n        this.prog.draw(this.gl.POINTS, this.index_buffer)\n      }\n    }\n  }\n\n  protected _set_data(nvertices: number): void {\n    const n = nvertices * 4;  // in bytes\n    // Set buffer size\n    this.vbo_x.set_size(n)\n    this.vbo_y.set_size(n)\n    this.vbo_a.set_size(n)\n    this.vbo_s.set_size(n)\n    // Upload data for x and y, apply a baked-in offset for float32 precision (issue #3795)\n    // The exact value for the baked_offset does not matter, as long as it brings the data to less extreme values\n    const xx = new Float64Array(this.glyph._x)\n    const yy = new Float64Array(this.glyph._y)\n    for (let i = 0, end = nvertices; i < end; i++) {\n       xx[i] += this._baked_offset[0]\n       yy[i] += this._baked_offset[1]\n    }\n    this.vbo_x.set_data(0, new Float32Array(xx))\n    this.vbo_y.set_data(0, new Float32Array(yy))\n    // Angle if available; circle does not have angle. If we don't set data, angle is default 0 in glsl\n    if (this.glyph._angle != null) {\n      this.vbo_a.set_data(0, new Float32Array(this.glyph._angle))\n    }\n    // Radius is special; some markes allow radius in data-coords instead of screen coords\n    // @radius tells us that radius is in units, sradius is the pre-calculated screen radius\n    if (this.glyph instanceof CircleView && this.glyph._radius != null)\n      this.vbo_s.set_data(0, new Float32Array(map(this.glyph.sradius, (s) => s*2)))\n    else\n      this.vbo_s.set_data(0, new Float32Array(this.glyph._size))\n  }\n\n  protected _set_visuals(nvertices: number): void {\n    attach_float(this.prog, this.vbo_linewidth, 'a_linewidth', nvertices, this.glyph.visuals.line, 'line_width')\n    attach_color(this.prog, this.vbo_fg_color, 'a_fg_color', nvertices, this.glyph.visuals.line, 'line')\n    attach_color(this.prog, this.vbo_bg_color, 'a_bg_color', nvertices, this.glyph.visuals.fill, 'fill')\n    // Static value for antialias. Smaller aa-region to obtain crisper images\n    this.prog.set_uniform('u_antialias', 'float', [0.8])\n  }\n}\n\nfunction mk_marker(code: string): Class<MarkerGLGlyph> {\n  return class extends MarkerGLGlyph {\n    protected get _marker_code(): string {\n      return code\n    }\n  }\n}\n\nimport * as glsl from \"./markers.frag\"\n\nexport const CircleGLGlyph           = mk_marker(glsl.circle)\nexport const SquareGLGlyph           = mk_marker(glsl.square)\nexport const DiamondGLGlyph          = mk_marker(glsl.diamond)\nexport const TriangleGLGlyph         = mk_marker(glsl.triangle)\nexport const InvertedTriangleGLGlyph = mk_marker(glsl.invertedtriangle)\nexport const HexGLGlyph              = mk_marker(glsl.hex)\nexport const CrossGLGlyph            = mk_marker(glsl.cross)\nexport const CircleCrossGLGlyph      = mk_marker(glsl.circlecross)\nexport const SquareCrossGLGlyph      = mk_marker(glsl.squarecross)\nexport const DiamondCrossGLGlyph     = mk_marker(glsl.diamondcross)\nexport const XGLGlyph                = mk_marker(glsl.x)\nexport const CircleXGLGlyph          = mk_marker(glsl.circlex)\nexport const SquareXGLGlyph          = mk_marker(glsl.squarex)\nexport const AsteriskGLGlyph         = mk_marker(glsl.asterisk)\n"]}