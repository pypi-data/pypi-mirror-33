{"version":3,"sources":["core/property_mixins.ts"],"names":[],"mappings":"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","file":"property_mixins.js","sourcesContent":["import * as p from \"./properties\"\nimport {Color} from \"./types\"\nimport {extend} from \"./util/object\"\n\nimport {Scalar, NumberSpec, StringSpec, ColorSpec} from \"core/vectorization\"\nimport {LineJoin, LineCap, FontStyle, TextAlign, TextBaseline} from \"core/enums\"\n\nexport interface LineMixinScalar {\n  line_color: Scalar<Color>\n  line_width: Scalar<number>\n  line_alpha: Scalar<number>\n  line_join: Scalar<LineJoin>\n  line_cap: Scalar<LineCap>\n  line_dash: Scalar<number[]>\n  line_dash_offset: Scalar<number>\n}\n\nexport interface FillMixinScalar {\n  fill_color: Scalar<Color>\n  fill_alpha: Scalar<number>\n}\n\nexport interface TextMixinScalar {\n  text_font: Scalar<string>\n  text_font_size: Scalar<string>\n  text_font_style: Scalar<FontStyle>\n  text_color: Scalar<Color>\n  text_alpha: Scalar<number>\n  text_align: Scalar<TextAlign>\n  text_baseline: Scalar<TextBaseline>\n  text_line_height: Scalar<number>\n}\n\nexport interface LineMixinVector {\n  line_color: ColorSpec\n  line_width: NumberSpec\n  line_alpha: NumberSpec\n  line_join: Scalar<LineJoin>\n  line_cap: Scalar<LineCap>\n  line_dash: Scalar<number[]>\n  line_dash_offset: Scalar<number>\n}\n\nexport interface FillMixinVector {\n  fill_color: ColorSpec\n  fill_alpha: NumberSpec\n}\n\nexport interface TextMixinVector {\n  text_font: Scalar<string>\n  text_font_size: StringSpec\n  text_font_style: Scalar<FontStyle>\n  text_color: ColorSpec\n  text_alpha: NumberSpec\n  text_align: Scalar<TextAlign>\n  text_baseline: Scalar<TextBaseline>\n  text_line_height: Scalar<number>\n}\n\nfunction _gen_mixin(mixin: {[key: string]: any}, prefix: string) {\n  const result: {[key: string]: any} = {}\n  for (const name in mixin) {\n    const prop = mixin[name]\n    result[prefix + name] = prop\n  }\n  return result\n}\n\nconst _line_mixin = {\n  line_color:       [ p.ColorSpec,  'black'   ],\n  line_width:       [ p.NumberSpec, 1         ],\n  line_alpha:       [ p.NumberSpec, 1.0       ],\n  line_join:        [ p.LineJoin,   'miter'   ],\n  line_cap:         [ p.LineCap,    'butt'    ],\n  line_dash:        [ p.Array,      []        ],\n  line_dash_offset: [ p.Number,     0         ],\n}\n\nexport const line = (prefix: string = \"\") => _gen_mixin(_line_mixin, prefix)\n\nconst _fill_mixin = {\n  fill_color: [ p.ColorSpec,  'gray' ],\n  fill_alpha: [ p.NumberSpec, 1.0    ],\n}\n\nexport const fill = (prefix: string = \"\") => _gen_mixin(_fill_mixin, prefix)\n\nconst _text_mixin = {\n  text_font:        [ p.Font,         'helvetica' ],\n  text_font_size:   [ p.FontSizeSpec, '12pt'      ],\n  text_font_style:  [ p.FontStyle,    'normal'    ],\n  text_color:       [ p.ColorSpec,    '#444444'   ],\n  text_alpha:       [ p.NumberSpec,   1.0         ],\n  text_align:       [ p.TextAlign,    'left'      ],\n  text_baseline:    [ p.TextBaseline, 'bottom'    ],\n  text_line_height: [ p.Number,       1.2         ],\n}\n\nexport const text = (prefix: string = \"\") => _gen_mixin(_text_mixin, prefix)\n\nexport function create(configs: string[]) {\n  const result: {[key: string]: any} = {}\n\n  for (const config of configs) {\n    const [kind, prefix] = config.split(\":\")\n    let mixin: any\n    switch (kind) {\n      case \"line\": mixin = line; break\n      case \"fill\": mixin = fill; break\n      case \"text\": mixin = text; break\n      default:\n        throw new Error(`Unknown property mixin kind '${kind}'`)\n    }\n    extend(result, mixin(prefix))\n  }\n\n  return result\n}\n"]}