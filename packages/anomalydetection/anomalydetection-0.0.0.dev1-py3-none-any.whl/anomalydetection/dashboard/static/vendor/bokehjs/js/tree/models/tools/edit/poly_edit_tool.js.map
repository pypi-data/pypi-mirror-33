{"version":3,"sources":["models/tools/edit/poly_edit_tool.ts"],"names":[],"mappings":"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","file":"poly_edit_tool.js","sourcesContent":["import {Keys} from \"core/dom\"\nimport {GestureEvent, TapEvent, MoveEvent, KeyEvent} from \"core/ui_events\"\nimport * as p from \"core/properties\"\nimport {MultiLine} from \"../../glyphs/multi_line\"\nimport {Patches} from \"../../glyphs/patches\"\nimport {GlyphRenderer} from \"../../renderers/glyph_renderer\"\nimport {EditTool, EditToolView, HasXYGlyph} from \"./edit_tool\"\n\nexport interface HasPolyGlyph {\n  glyph: MultiLine | Patches\n}\n\nexport class PolyEditToolView extends EditToolView {\n  model: PolyEditTool\n  _selected_renderer: GlyphRenderer | null\n  _basepoint: [number, number] | null\n  _drawing: boolean = false\n\n  _doubletap(ev: TapEvent): void {\n    if (!this.model.active) { return; }\n    const point = this._map_drag(ev.sx, ev.sy, this.model.vertex_renderer);\n    if (point == null) { return; }\n    const [x, y] = point;\n\n    // Perform hit testing\n    const renderers = this._select_event(ev, false, this.model.renderers);\n    const vertex_selected = this._select_event(ev, false, [this.model.vertex_renderer]);\n    const point_ds = this.model.vertex_renderer.data_source;\n    // Type once dataspecs are typed\n    const point_glyph: any = this.model.vertex_renderer.glyph;\n    const [pxkey, pykey] = [point_glyph.x.field, point_glyph.y.field];\n    if (vertex_selected.length && this._selected_renderer != null) {\n      // Insert a new point after the selected vertex and enter draw mode\n      const index = point_ds.selected.indices[0];\n      if (this._drawing) {\n        point_ds.selected.indices = [];\n        if (pxkey) point_ds.data[pxkey][index] = x\n        if (pykey) point_ds.data[pykey][index] = y\n        this._drawing = false;\n        this._selected_renderer.data_source.properties.data.change.emit();\n      } else {\n        point_ds.selected.indices = [index+1];\n        if (pxkey) point_ds.get_array(pxkey).splice(index+1, 0, x)\n        if (pykey) point_ds.get_array(pykey).splice(index+1, 0, y)\n        this._drawing = true;\n      }\n      point_ds.change.emit();\n      this._selected_renderer.data_source.change.emit();\n      return;\n    } else if (!renderers.length) {\n      // If we did not hit an existing line, clear node CDS\n      if (pxkey) point_ds.data[pxkey] = []\n      if (pykey) point_ds.data[pykey] = []\n      this._selected_renderer = null;\n      this._drawing = false;\n      point_ds.change.emit();\n      return;\n    }\n\n    // Otherwise copy selected line array to vertex renderer CDS\n    // (Note: can only edit one at a time)\n    const renderer = renderers[0];\n    // Type once dataspecs are typed\n    const glyph: any = renderer.glyph;\n    const ds = renderer.data_source;\n    const index = ds.selected.indices[0];\n    const [xkey, ykey] = [glyph.xs.field, glyph.ys.field];\n    if (xkey) {\n      const xs = ds.data[xkey][index]\n      if (pxkey) point_ds.data[pxkey] = xs\n    } else\n      point_glyph.x = {value: glyph.xs.value};\n    if (ykey) {\n      const ys = ds.data[ykey][index]\n      if (pykey) point_ds.data[pykey] = ys\n    } else\n      point_glyph.y = {value: glyph.ys.value};\n    point_ds.selected.indices = [];\n    this._selected_renderer = renderer;\n    point_ds.change.emit();\n    point_ds.properties.data.change.emit();\n  }\n\n  _move(ev: MoveEvent): void {\n    if (this._drawing && this._selected_renderer != null) {\n      const renderer = this.model.vertex_renderer;\n      const point = this._map_drag(ev.sx, ev.sy, renderer);\n      if (point == null) { return; }\n      const [x, y] = point;\n      const ds = renderer.data_source;\n      const glyph: any = renderer.glyph;\n      const [xkey, ykey] = [glyph.x.field, glyph.y.field];\n      const index = ds.selected.indices[0];\n      if (xkey) ds.data[xkey][index] = x\n      if (ykey) ds.data[ykey][index] = y\n      ds.change.emit();\n      this._selected_renderer.data_source.change.emit();\n    }\n  }\n\n  _tap(ev: TapEvent): void {\n    const renderer = this.model.vertex_renderer;\n    const point = this._map_drag(ev.sx, ev.sy, renderer);\n    if (point == null) {\n      return;\n    } else if (this._drawing && this._selected_renderer) {\n      const [x, y] = point;\n      const ds = renderer.data_source;\n      // Type once dataspecs are typed\n      const glyph: any = renderer.glyph;\n      const [xkey, ykey] = [glyph.x.field, glyph.y.field];\n      const index = ds.selected.indices[0];\n      ds.selected.indices = [index+1];\n      if (xkey) {\n        const xs = ds.get_array(xkey)\n        const nx = xs[index];\n        xs[index] = x;\n        xs.splice(index+1, 0, nx)\n      }\n      if (ykey) {\n        const ys = ds.get_array(ykey);\n        const ny = ys[index];\n        ys[index] = y;\n        ys.splice(index+1, 0, ny)\n      }\n      ds.change.emit();\n      const selected_ds = this._selected_renderer.data_source;\n      selected_ds.change.emit();\n      selected_ds.properties.data.change.emit();\n      return;\n    }\n    const append = ev.shiftKey\n    this._select_event(ev, append, [renderer]);\n    this._select_event(ev, append, this.model.renderers);\n  }\n\n  _remove_vertex(emit: boolean = true): void {\n    if (!this._drawing || !this._selected_renderer) { return; }\n    const renderer = this.model.vertex_renderer;\n    const ds = renderer.data_source;\n    // Type once dataspecs are typed\n    const glyph: any = renderer.glyph;\n    const index = ds.selected.indices[0];\n    const [xkey, ykey] = [glyph.x.field, glyph.y.field];\n    if (xkey) ds.get_array(xkey).splice(index, 1)\n    if (ykey) ds.get_array(ykey).splice(index, 1)\n    if (emit) {\n      ds.change.emit();\n      ds.properties.data.change.emit();\n    }\n  }\n\n  _pan_start(ev: GestureEvent): void {\n    this._select_event(ev, true, [this.model.vertex_renderer]);\n    this._basepoint = [ev.sx, ev.sy];\n  }\n\n  _pan(ev: GestureEvent): void {\n    if (this._basepoint == null) { return; }\n    this._drag_points(ev, [this.model.vertex_renderer]);\n    if (this._selected_renderer) {\n      this._selected_renderer.data_source.change.emit();\n    }\n  }\n\n  _pan_end(_e: GestureEvent): void {\n    this.model.vertex_renderer.data_source.selected.indices = [];\n    if (this._selected_renderer) {\n      this._selected_renderer.data_source.properties.data.change.emit();\n    }\n    this._basepoint = null;\n  }\n\n  _keyup(ev: KeyEvent): void {\n    if (!this.model.active || !this._mouse_in_frame) { return; }\n    let renderers;\n    if (this._selected_renderer) {\n      renderers = [this.model.vertex_renderer]\n    } else {\n      renderers = this.model.renderers\n    }\n    for (const renderer of renderers) {\n      if (ev.keyCode === Keys.Backspace) {\n        this._delete_selected(renderer);\n      } else if (ev.keyCode == Keys.Esc) {\n        // Type once selection_manager is typed\n        if (this._drawing) {\n          this._remove_vertex();\n          this._drawing = false;\n        }\n        const cds = renderer.data_source;\n        cds.selection_manager.clear();\n      }\n    }\n  }\n\n  deactivate(): void {\n    if (!this._selected_renderer) {\n      return\n    } else if (this._drawing) {\n      this._remove_vertex(false);\n      this._drawing = false;\n    }\n    const renderer = this.model.vertex_renderer;\n    // Type once selection manager and dataspecs are typed\n    const ds = renderer.data_source;\n    const glyph: any = renderer.glyph;\n    const [xkey, ykey] = [glyph.x.field, glyph.y.field];\n    if (xkey) ds.data[xkey] = []\n    if (ykey) ds.data[ykey] = []\n    ds.selection_manager.clear();\n    ds.change.emit();\n    this._selected_renderer.data_source.change.emit();\n    ds.properties.data.change.emit();\n    this._selected_renderer.data_source.properties.data.change.emit();\n    this._selected_renderer = null;\n  }\n}\n\nexport namespace PolyEditTool {\n  export interface Attrs extends EditTool.Attrs {\n    vertex_renderer: (GlyphRenderer & HasXYGlyph)\n    renderers: (GlyphRenderer & HasPolyGlyph)[]\n  }\n\n  export interface Props extends EditTool.Props {}\n}\n\nexport interface PolyEditTool extends PolyEditTool.Attrs {}\n\nexport class PolyEditTool extends EditTool {\n\n  properties: PolyEditTool.Props\n\n  renderers: (GlyphRenderer & HasPolyGlyph)[]\n\n  constructor(attrs?: Partial<PolyEditTool.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = \"PolyEditTool\"\n    this.prototype.default_view = PolyEditToolView\n\n    this.define({\n      vertex_renderer: [ p.Instance ],\n    })\n  }\n\n  tool_name = \"Poly Edit Tool\"\n  icon = \"bk-tool-icon-poly-edit\"\n  event_type = [\"tap\" as \"tap\", \"pan\" as \"pan\", \"move\" as \"move\"]\n  default_order = 4\n}\nPolyEditTool.initClass()\n"]}