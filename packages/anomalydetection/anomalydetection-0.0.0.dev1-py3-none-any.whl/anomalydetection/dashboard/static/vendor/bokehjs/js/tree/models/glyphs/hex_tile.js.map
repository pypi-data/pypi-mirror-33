{"version":3,"sources":["models/glyphs/hex_tile.ts"],"names":[],"mappings":"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","file":"hex_tile.js","sourcesContent":["import {Glyph, GlyphView, GlyphData} from \"./glyph\"\n\nimport {PointGeometry, RectGeometry, SpanGeometry} from \"core/geometry\"\nimport * as hittest from \"core/hittest\"\nimport * as p from \"core/properties\"\nimport {LineMixinVector, FillMixinVector} from \"core/property_mixins\"\nimport {Arrayable} from \"core/types\"\nimport {IBBox} from \"core/util/bbox\"\nimport {Context2d} from \"core/util/canvas\"\nimport {SpatialIndex} from \"core/util/spatial\"\nimport {NumberSpec} from \"core/vectorization\"\nimport {Line, Fill} from \"core/visuals\"\n\nimport {generic_area_legend} from \"./utils\"\nimport {Selection} from \"../selections/selection\"\n\n\nexport interface HexTileData extends GlyphData {\n  _q: Arrayable<number>\n  _r: Arrayable<number>\n\n  _x: Arrayable<number>\n  _y: Arrayable<number>\n\n  _scale: Arrayable<number>\n\n  sx: Arrayable<number>\n  sy: Arrayable<number>\n\n  svx: number[]\n  svy: number[]\n\n  minX: number\n  maxX: number\n  minY: number\n  maxY: number\n\n  ssize: number\n}\n\nexport interface HexTileView extends HexTileData {}\n\nexport class HexTileView extends GlyphView {\n  model: HexTile\n  visuals: HexTile.Visuals\n\n  scenterx(i: number): number { return this.sx[i] }\n\n  scentery(i: number): number { return this.sy[i] }\n\n  protected _set_data(): void {\n    const n = this._q.length\n\n    const size = this.model.size\n    const aspect_scale = this.model.aspect_scale\n\n    this._x = new Float64Array(n)\n    this._y = new Float64Array(n)\n\n    if (this.model.orientation == \"pointytop\") {\n      for (let i = 0; i < n; i++) {\n        this._x[i] = size * Math.sqrt(3) * (this._q[i] + this._r[i]/2) / aspect_scale\n        this._y[i] = -size * 3/2 * this._r[i]\n      }\n    }\n    else {\n      for (let i = 0; i < n; i++) {\n        this._x[i] = size * 3/2 * this._q[i]\n        this._y[i] = -size * Math.sqrt(3) * (this._r[i] + this._q[i]/2) * aspect_scale\n      }\n    }\n\n  }\n\n\n  protected _index_data(): SpatialIndex {\n    let ysize = this.model.size\n    let xsize = Math.sqrt(3)*ysize/2\n\n    if (this.model.orientation == \"flattop\") {\n      [xsize, ysize] = [ysize, xsize]\n      ysize *= this.model.aspect_scale\n    }\n    else {\n      xsize /= this.model.aspect_scale\n    }\n\n    const points = []\n    for (let i = 0; i < this._x.length; i++) {\n      const x = this._x[i]\n      const y = this._y[i]\n      if (isNaN(x+y) || !isFinite(x+y))\n        continue\n      points.push({minX: x-xsize, minY: y-ysize, maxX: x+xsize, maxY: y+ysize, i})\n    }\n    return new SpatialIndex(points)\n  }\n\n  // overriding map_data instead of _map_data because the default automatic mappings\n  // for other glyphs (with cartesian coordinates) is not useful\n  map_data(): void {\n    [this.sx, this.sy] = this.map_to_screen(this._x, this._y);\n\n    [this.svx, this.svy] = this._get_unscaled_vertices()\n\n  }\n\n  protected _get_unscaled_vertices(): [number[], number[]] {\n    const size = this.model.size\n    const aspect_scale = this.model.aspect_scale\n\n    if (this.model.orientation == \"pointytop\") {\n      const rscale = this.renderer.yscale\n      const hscale = this.renderer.xscale\n\n      const r = Math.abs(rscale.compute(0) - rscale.compute(size))                               // assumes linear scale\n      const h = Math.sqrt(3)/2*Math.abs(hscale.compute(0) - hscale.compute(size)) / aspect_scale // assumes linear scale\n      const r2 = r/2.0\n\n      const svx = [0, -h,  -h,   0,  h,  h ]\n      const svy = [r,  r2, -r2, -r, -r2, r2]\n\n      return [svx, svy]\n    }\n\n    else {\n      const rscale = this.renderer.xscale\n      const hscale = this.renderer.yscale\n\n      const r = Math.abs(rscale.compute(0) - rscale.compute(size))                               // assumes linear scale\n      const h = Math.sqrt(3)/2*Math.abs(hscale.compute(0) - hscale.compute(size)) * aspect_scale // assumes linear scale\n      const r2 = r/2.0\n\n      const svx = [r,  r2, -r2, -r, -r2, r2]\n      const svy = [0, -h,  -h,   0,  h,  h ]\n\n      return [svx, svy]\n    }\n\n  }\n\n  protected _render(ctx: Context2d, indices: number[], {sx, sy, svx, svy, _scale}: HexTileData): void {\n    for (const i of indices) {\n      if (isNaN(sx[i] + sy[i] + _scale[i]))\n        continue;\n\n      ctx.translate(sx[i], sy[i])\n      ctx.beginPath();\n      for (let j = 0; j < 6; j++) {\n        ctx.lineTo(svx[j]*_scale[i], svy[j]*_scale[i])\n      }\n      ctx.closePath()\n      ctx.translate(-sx[i], -sy[i])\n\n      if (this.visuals.fill.doit) {\n        this.visuals.fill.set_vectorize(ctx, i);\n        ctx.fill();\n      }\n\n      if (this.visuals.line.doit) {\n        this.visuals.line.set_vectorize(ctx, i);\n        ctx.stroke();\n      }\n\n    }\n  }\n\n  protected _hit_point(geometry: PointGeometry): Selection {\n    const {sx, sy} = geometry\n    const x = this.renderer.xscale.invert(sx)\n    const y = this.renderer.yscale.invert(sy)\n\n    const candidates = this.index.indices({minX: x, minY: y, maxX: x, maxY: y})\n\n    const hits = []\n    for (const i of candidates) {\n\n      if (hittest.point_in_poly(sx-this.sx[i], sy-this.sy[i], this.svx, this.svy)) {\n        hits.push(i)\n      }\n    }\n\n    const result = hittest.create_empty_hit_test_result()\n    result.indices = hits\n\n    return result\n  }\n\n  protected _hit_span(geometry: SpanGeometry): Selection {\n    const {sx, sy} = geometry\n\n    let hits: number[]\n    if (geometry.direction == 'v') {\n      const y = this.renderer.yscale.invert(sy)\n      const hr = this.renderer.plot_view.frame.bbox.h_range\n      const [minX, maxX] = this.renderer.xscale.r_invert(hr.start, hr.end)\n      hits = this.index.indices({minX, minY: y, maxX, maxY: y})\n    } else {\n      const x = this.renderer.xscale.invert(sx)\n      const vr = this.renderer.plot_view.frame.bbox.v_range\n      const [minY, maxY] = this.renderer.yscale.r_invert(vr.start, vr.end)\n      hits = this.index.indices({minX: x, minY, maxX: x, maxY})\n    }\n\n    const result = hittest.create_empty_hit_test_result()\n    result.indices = hits\n    return result\n  }\n\n  protected _hit_rect(geometry: RectGeometry): Selection {\n    const {sx0, sx1, sy0, sy1} = geometry\n    const [x0, x1] = this.renderer.xscale.r_invert(sx0, sx1)\n    const [y0, y1] = this.renderer.yscale.r_invert(sy0, sy1)\n    const bbox = hittest.validate_bbox_coords([x0, x1], [y0, y1])\n    const result = hittest.create_empty_hit_test_result()\n    result.indices = this.index.indices(bbox)\n    return result\n  }\n\n  draw_legend_for_index(ctx: Context2d, bbox: IBBox, index: number): void {\n    generic_area_legend(this.visuals, ctx, bbox, index)\n  }\n\n}\n\nexport namespace HexTile {\n  export interface Mixins extends LineMixinVector, FillMixinVector {}\n\n  export interface Attrs extends Glyph.Attrs {\n    size: number\n    aspect_scale: number\n    scale: NumberSpec\n    orientation: \"pointytop\" | \"flattop\"\n  }\n\n  export interface Props extends Glyph.Props {\n    size: p.Number\n    aspect_scale: p.Number\n    scale: p.NumberSpec\n    orientation: p.Property<\"pointytop\" | \"flattop\">\n  }\n\n  export interface Visuals extends Glyph.Visuals {\n    line: Line\n    fill: Fill\n  }\n}\n\nexport interface HexTile extends HexTile.Attrs { }\n\nexport class HexTile extends Glyph {\n\n  properties: HexTile.Props\n\n  constructor(attrs?: Partial<HexTile.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = 'HexTile'\n    this.prototype.default_view = HexTileView\n\n    this.coords([['r', 'q']])\n    this.mixins(['line', 'fill'])\n    this.define({\n      size:         [ p.Number,     1.0         ],\n      aspect_scale: [ p.Number,     1.0         ],\n      scale:        [ p.NumberSpec, 1.0         ],\n      orientation:  [ p.String,     \"pointytop\" ],\n    })\n    this.override({ line_color: null })\n  }\n}\nHexTile.initClass()\n"]}