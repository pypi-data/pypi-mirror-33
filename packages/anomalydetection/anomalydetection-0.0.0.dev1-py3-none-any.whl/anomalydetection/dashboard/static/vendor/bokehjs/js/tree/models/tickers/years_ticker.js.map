{"version":3,"sources":["models/tickers/years_ticker.ts"],"names":[],"mappings":";;;AACA,+CAA0C;AAC1C,mEAA6D;AAC7D,+BAAwD;AAUxD;IAAiC,uCAAoB;IAInD,qBAAY,KAAkC;eAC5C,kBAAM,KAAK,CAAC;IACd,CAAC;IAEM,qBAAS,GAAhB;QACE,IAAI,CAAC,SAAS,CAAC,IAAI,GAAG,aAAa,CAAA;IACrC,CAAC;IAID,gCAAU,GAAV;QACE,iBAAM,UAAU,WAAE,CAAA;QAClB,IAAI,CAAC,QAAQ,GAAG,eAAQ,CAAA;QACxB,IAAI,CAAC,YAAY,GAAG,IAAI,0BAAW,CAAC,EAAC,eAAe,EAAE,CAAC,EAAC,CAAC,CAAA;IAC3D,CAAC;IAED,2CAAqB,GAArB,UAAsB,QAAgB,EAAE,SAAiB,EAAE,SAAc,EAAE,eAAuB;QAChG,IAAM,UAAU,GAAG,8BAAuB,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,cAAc,EAAE,CAAA;QAC/E,IAAM,QAAQ,GAAG,8BAAuB,CAAC,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,cAAc,EAAE,CAAA;QAE9E,IAAM,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,qBAAqB,CAAC,UAAU,EAAE,QAAQ,EAAE,SAAS,EAAE,eAAe,CAAC,CAAC,KAAK,CAAA;QAE7G,IAAM,SAAS,GAAG,KAAK,CAAC,GAAG,CAAC,UAAC,IAAI,IAAK,OAAA,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,EAApB,CAAoB,CAAC,CAAA;QAC3D,IAAM,cAAc,GAAG,SAAS,CAAC,MAAM,CAAC,UAAC,IAAI,IAAK,OAAA,QAAQ,IAAI,IAAI,IAAI,IAAI,IAAI,SAAS,EAArC,CAAqC,CAAC,CAAA;QAExF,OAAO;YACL,KAAK,EAAE,cAAc;YACrB,KAAK,EAAE,EAAE;SACV,CAAA;IACH,CAAC;IACH,kBAAC;AAAD,CAlCA,AAkCC,CAlCgC,6CAAoB,GAkCpD;AAlCY,kCAAW;AAoCxB,WAAW,CAAC,SAAS,EAAE,CAAA","file":"years_ticker.js","sourcesContent":["import {TickSpec} from \"./ticker\"\nimport {BasicTicker} from \"./basic_ticker\"\nimport {SingleIntervalTicker} from \"./single_interval_ticker\"\nimport {last_year_no_later_than, ONE_YEAR} from \"./util\"\n\nexport namespace YearsTicker {\n  export interface Attrs extends SingleIntervalTicker.Attrs {}\n\n  export interface Props extends SingleIntervalTicker.Props {}\n}\n\nexport interface YearsTicker extends YearsTicker.Attrs {}\n\nexport class YearsTicker extends SingleIntervalTicker {\n\n  properties: YearsTicker.Props\n\n  constructor(attrs?: Partial<YearsTicker.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = \"YearsTicker\"\n  }\n\n  protected basic_ticker: BasicTicker\n\n  initialize(): void {\n    super.initialize()\n    this.interval = ONE_YEAR\n    this.basic_ticker = new BasicTicker({num_minor_ticks: 0})\n  }\n\n  get_ticks_no_defaults(data_low: number, data_high: number, cross_loc: any, desired_n_ticks: number): TickSpec<number> {\n    const start_year = last_year_no_later_than(new Date(data_low)).getUTCFullYear()\n    const end_year = last_year_no_later_than(new Date(data_high)).getUTCFullYear()\n\n    const years = this.basic_ticker.get_ticks_no_defaults(start_year, end_year, cross_loc, desired_n_ticks).major\n\n    const all_ticks = years.map((year) => Date.UTC(year, 0, 1))\n    const ticks_in_range = all_ticks.filter((tick) => data_low <= tick && tick <= data_high)\n\n    return {\n      major: ticks_in_range,\n      minor: [],\n    }\n  }\n}\n\nYearsTicker.initClass()\n"]}