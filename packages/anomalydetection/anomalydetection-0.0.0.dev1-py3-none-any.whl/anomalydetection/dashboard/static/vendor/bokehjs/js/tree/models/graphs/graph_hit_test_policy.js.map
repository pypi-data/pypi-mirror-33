{"version":3,"sources":["models/graphs/graph_hit_test_policy.ts"],"names":[],"mappings":"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","file":"graph_hit_test_policy.js","sourcesContent":["import {Model} from \"../../model\"\nimport {indexOf} from \"core/util/arrayable\"\nimport {contains, uniq} from \"core/util/array\"\nimport {create_empty_hit_test_result, HitTestResult} from \"core/hittest\"\nimport {Geometry} from \"core/geometry\"\nimport {Selection} from \"../selections/selection\"\nimport {GraphRenderer, GraphRendererView} from \"../renderers/graph_renderer\"\nimport {ColumnarDataSource} from \"../sources/columnar_data_source\"\n\nexport namespace GraphHitTestPolicy {\n  export interface Attrs extends Model.Attrs {}\n\n  export interface Props extends Model.Props {}\n}\n\nexport interface GraphHitTestPolicy extends Model.Attrs {}\n\nexport abstract class GraphHitTestPolicy extends Model {\n\n  properties: GraphHitTestPolicy.Props\n\n  constructor(attrs?: Partial<GraphHitTestPolicy.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = \"GraphHitTestPolicy\"\n  }\n\n  abstract hit_test(geometry: Geometry, graph_view: GraphRendererView): HitTestResult\n\n  abstract do_selection(hit_test_result: HitTestResult, graph: GraphRenderer, final: boolean, append: boolean): boolean\n\n  abstract do_inspection(hit_test_result: HitTestResult, geometry: Geometry, graph_view: GraphRendererView, final: boolean, append: boolean): boolean\n\n  _hit_test_nodes(geometry: Geometry, graph_view: GraphRendererView): HitTestResult {\n    if(!graph_view.model.visible)\n      return null\n\n    const hit_test_result = graph_view.node_view.glyph.hit_test(geometry)\n\n    if(hit_test_result == null)\n      return null\n    else\n      return graph_view.node_view.model.view.convert_selection_from_subset(hit_test_result)\n  }\n\n  _hit_test_edges(geometry: Geometry, graph_view: GraphRendererView): HitTestResult {\n    if(!graph_view.model.visible)\n      return null\n\n    const hit_test_result = graph_view.edge_view.glyph.hit_test(geometry)\n\n    if(hit_test_result == null)\n      return null\n    else\n      return graph_view.edge_view.model.view.convert_selection_from_subset(hit_test_result)\n  }\n}\n\nexport namespace NodesOnly {\n  export interface Attrs extends GraphHitTestPolicy.Attrs {}\n\n  export interface Props extends GraphHitTestPolicy.Props {}\n}\n\nexport interface NodesOnly extends NodesOnly.Attrs {}\n\nexport class NodesOnly extends GraphHitTestPolicy {\n\n  properties: NodesOnly.Props\n\n  constructor(attrs?: Partial<NodesOnly.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = 'NodesOnly'\n  }\n\n  hit_test(geometry: Geometry, graph_view: GraphRendererView): HitTestResult {\n    return this._hit_test_nodes(geometry, graph_view)\n  }\n\n  do_selection(hit_test_result: HitTestResult, graph: GraphRenderer, final: boolean, append: boolean): boolean {\n    if(hit_test_result == null)\n      return false\n\n    const node_selection = graph.node_renderer.data_source.selected\n    node_selection.update(hit_test_result, final, append)\n    graph.node_renderer.data_source._select.emit()\n\n    return !node_selection.is_empty()\n  }\n\n  do_inspection(hit_test_result: HitTestResult, geometry: Geometry, graph_view: GraphRendererView, final: boolean, append: boolean): boolean {\n    if(hit_test_result == null)\n      return false\n\n    const node_inspection = graph_view.model.get_selection_manager().get_or_create_inspector(graph_view.node_view.model)\n    node_inspection.update(hit_test_result, final, append)\n\n    // silently set inspected attr to avoid triggering data_source.change event and rerender\n    graph_view.node_view.model.data_source.setv({inspected: node_inspection}, {silent: true})\n    graph_view.node_view.model.data_source.inspect.emit([graph_view.node_view, {geometry: geometry}])\n\n    return !node_inspection.is_empty()\n  }\n}\nNodesOnly.initClass()\n\nexport namespace NodesAndLinkedEdges {\n  export interface Attrs extends GraphHitTestPolicy.Attrs {}\n\n  export interface Props extends GraphHitTestPolicy.Props {}\n}\n\nexport interface NodesAndLinkedEdges extends NodesAndLinkedEdges.Attrs {}\n\nexport class NodesAndLinkedEdges extends GraphHitTestPolicy {\n\n  properties: NodesAndLinkedEdges.Props\n\n  constructor(attrs?: Partial<NodesAndLinkedEdges.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = 'NodesAndLinkedEdges'\n  }\n\n  hit_test(geometry: Geometry, graph_view: GraphRendererView): HitTestResult {\n    return this._hit_test_nodes(geometry, graph_view)\n  }\n\n  get_linked_edges(node_source: ColumnarDataSource, edge_source: ColumnarDataSource, mode: string): Selection {\n    let node_indices = []\n    if(mode == 'selection'){\n      node_indices = node_source.selected.indices.map((i: number) => node_source.data.index[i])\n    }else if (mode == 'inspection'){\n      node_indices = node_source.inspected.indices.map((i: number) => node_source.data.index[i])\n    }\n    const edge_indices = []\n    for(let i = 0; i < edge_source.data.start.length; i++){\n      if(contains(node_indices, edge_source.data.start[i]) || contains(node_indices, edge_source.data.end[i]))\n        edge_indices.push(i)\n    }\n\n    const linked_edges = create_empty_hit_test_result()\n    for (const i of edge_indices){\n      linked_edges.multiline_indices[i] = [0] //currently only supports 2-element multilines, so this is all of it\n    }\n    linked_edges.indices = edge_indices\n\n    return linked_edges\n  }\n\n  do_selection(hit_test_result: HitTestResult, graph: GraphRenderer, final: boolean, append: boolean): boolean {\n    if(hit_test_result == null)\n      return false\n\n    const node_selection = graph.node_renderer.data_source.selected\n    node_selection.update(hit_test_result, final, append)\n\n    const edge_selection = graph.edge_renderer.data_source.selected\n    const linked_edges_selection = this.get_linked_edges(graph.node_renderer.data_source, graph.edge_renderer.data_source, 'selection')\n    edge_selection.update(linked_edges_selection, final, append)\n\n    graph.node_renderer.data_source._select.emit()\n\n    return !node_selection.is_empty()\n  }\n\n  do_inspection(hit_test_result: HitTestResult, geometry: Geometry, graph_view: GraphRendererView, final: boolean, append: boolean): boolean {\n    if(hit_test_result == null)\n      return false\n\n    const node_inspection = graph_view.node_view.model.data_source.selection_manager.get_or_create_inspector(graph_view.node_view.model)\n    node_inspection.update(hit_test_result, final, append)\n    graph_view.node_view.model.data_source.setv({inspected: node_inspection}, {silent: true})\n\n    const edge_inspection = graph_view.edge_view.model.data_source.selection_manager.get_or_create_inspector(graph_view.edge_view.model)\n    const linked_edges = this.get_linked_edges(graph_view.node_view.model.data_source, graph_view.edge_view.model.data_source, 'inspection')\n    edge_inspection.update(linked_edges, final, append)\n\n    //silently set inspected attr to avoid triggering data_source.change event and rerender\n    graph_view.edge_view.model.data_source.setv({inspected: edge_inspection}, {silent: true})\n    graph_view.node_view.model.data_source.inspect.emit([graph_view.node_view, {geometry: geometry}])\n\n    return !node_inspection.is_empty()\n  }\n}\nNodesAndLinkedEdges.initClass()\n\nexport namespace EdgesAndLinkedNodes {\n  export interface Attrs extends GraphHitTestPolicy.Attrs {}\n\n  export interface Props extends GraphHitTestPolicy.Props {}\n}\n\nexport interface EdgesAndLinkedNodes extends EdgesAndLinkedNodes.Attrs {}\n\nexport class EdgesAndLinkedNodes extends GraphHitTestPolicy {\n\n  properties: EdgesAndLinkedNodes.Props\n\n  constructor(attrs?: Partial<EdgesAndLinkedNodes.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = 'EdgesAndLinkedNodes'\n  }\n\n  hit_test(geometry: Geometry, graph_view: GraphRendererView): HitTestResult {\n    return this._hit_test_edges(geometry, graph_view)\n  }\n\n  get_linked_nodes(node_source: ColumnarDataSource, edge_source: ColumnarDataSource, mode: string): Selection {\n    let edge_indices: number[] = []\n    if(mode == 'selection')\n      edge_indices = edge_source.selected.indices\n    else if (mode == 'inspection')\n      edge_indices = edge_source.inspected.indices\n    const nodes = []\n    for(const i of edge_indices){\n      nodes.push(edge_source.data.start[i])\n      nodes.push(edge_source.data.end[i])\n    }\n\n    const node_indices = uniq(nodes).map((i) => indexOf(node_source.data.index, i))\n    const linked_nodes = create_empty_hit_test_result()\n    linked_nodes.indices = node_indices\n    return linked_nodes\n  }\n\n  do_selection(hit_test_result: HitTestResult, graph: GraphRenderer, final: boolean, append: boolean): boolean {\n    if(hit_test_result == null)\n      return false\n\n    const edge_selection = graph.edge_renderer.data_source.selected\n    edge_selection.update(hit_test_result, final, append)\n\n    const node_selection = graph.node_renderer.data_source.selected\n    const linked_nodes = this.get_linked_nodes(graph.node_renderer.data_source, graph.edge_renderer.data_source, 'selection')\n    node_selection.update(linked_nodes, final, append)\n\n    graph.edge_renderer.data_source._select.emit()\n\n    return !edge_selection.is_empty()\n  }\n\n  do_inspection(hit_test_result: HitTestResult, geometry: Geometry, graph_view: GraphRendererView, final: boolean, append: boolean): boolean {\n    if(hit_test_result == null)\n      return false\n\n    const edge_inspection = graph_view.edge_view.model.data_source.selection_manager.get_or_create_inspector(graph_view.edge_view.model)\n    edge_inspection.update(hit_test_result, final, append)\n    graph_view.edge_view.model.data_source.setv({inspected: edge_inspection}, {silent: true})\n\n    const node_inspection = graph_view.node_view.model.data_source.selection_manager.get_or_create_inspector(graph_view.node_view.model)\n    const linked_nodes = this.get_linked_nodes(graph_view.node_view.model.data_source, graph_view.edge_view.model.data_source, 'inspection')\n    node_inspection.update(linked_nodes, final, append)\n\n    // silently set inspected attr to avoid triggering data_source.change event and rerender\n    graph_view.node_view.model.data_source.setv({inspected: node_inspection}, {silent: true})\n    graph_view.edge_view.model.data_source.inspect.emit([graph_view.edge_view, {geometry: geometry}])\n\n    return !edge_inspection.is_empty()\n  }\n}\nEdgesAndLinkedNodes.initClass()\n"]}