{"version":3,"sources":["models/tiles/mercator_tile_source.ts"],"names":[],"mappings":"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","file":"mercator_tile_source.js","sourcesContent":["import {TileSource} from \"./tile_source\"\nimport * as p from \"core/properties\"\nimport {range} from \"core/util/array\"\nimport {Extent, Bounds, meters_extent_to_geographic} from \"./tile_utils\"\n\nexport namespace MercatorTileSource {\n  export interface Attrs extends TileSource.Attrs {\n    snap_to_zoom: boolean\n    wrap_around: boolean\n  }\n\n  export interface Props extends TileSource.Props {}\n}\n\nexport interface MercatorTileSource extends MercatorTileSource.Attrs {}\n\nexport class MercatorTileSource extends TileSource {\n\n  properties: MercatorTileSource.Props\n\n  constructor(attrs?: Partial<MercatorTileSource.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = 'MercatorTileSource'\n\n    this.define({\n      snap_to_zoom: [ p.Bool, false ],\n      wrap_around:  [ p.Bool, true  ],\n    })\n\n    this.override({\n      x_origin_offset:    20037508.34,\n      y_origin_offset:    20037508.34,\n      initial_resolution: 156543.03392804097,\n    })\n  }\n\n  protected _resolutions: number[]\n\n  initialize(): void {\n    super.initialize()\n    this._resolutions = range(this.min_zoom, this.max_zoom+1).map((z) => this.get_resolution(z))\n  }\n\n  protected _computed_initial_resolution(): number {\n    if (this.initial_resolution != null)\n      return this.initial_resolution\n    else {\n      // TODO testing 2015-11-17, if this codepath is used it seems\n      // to use 100% cpu and wedge Chrome\n      return (2 * Math.PI * 6378137) / this.tile_size\n    }\n  }\n\n  is_valid_tile(x: number, y: number, z: number): boolean {\n    if (!this.wrap_around) {\n      if (x < 0 || x >= Math.pow(2, z))\n        return false\n    }\n\n    if (y < 0 || y >= Math.pow(2, z))\n      return false\n\n    return true\n  }\n\n  parent_by_tile_xyz(x: number, y: number, z: number): [number, number, number] {\n    const quadkey = this.tile_xyz_to_quadkey(x, y, z)\n    const parent_quadkey = quadkey.substring(0, quadkey.length - 1)\n    return this.quadkey_to_tile_xyz(parent_quadkey)\n  }\n\n  get_resolution(level: number): number {\n    return this._computed_initial_resolution() / Math.pow(2, level)\n  }\n\n  get_resolution_by_extent(extent: Extent, height: number, width: number): [number, number] {\n    const x_rs = (extent[2] - extent[0]) / width\n    const y_rs = (extent[3] - extent[1]) / height\n    return [x_rs, y_rs]\n  }\n\n  get_level_by_extent(extent: Extent, height: number, width: number): number {\n    const x_rs = (extent[2] - extent[0]) / width\n    const y_rs = (extent[3] - extent[1]) / height\n    const resolution = Math.max(x_rs, y_rs)\n\n    let i = 0\n    for (const r of this._resolutions) {\n      if (resolution > r) {\n        if (i == 0)\n          return 0\n        if (i > 0)\n          return i - 1\n      }\n      i += 1\n    }\n\n    // otherwise return the highest available resolution\n    return (i-1)\n  }\n\n  get_closest_level_by_extent(extent: Extent, height: number, width: number): number {\n    const x_rs = (extent[2] - extent[0]) / width\n    const y_rs = (extent[3] - extent[1]) / height\n    const resolution = Math.max(x_rs, y_rs)\n    const closest = this._resolutions.reduce(function(previous, current) {\n      if (Math.abs(current - resolution) < Math.abs(previous - resolution)) { return current; }\n      return previous\n    })\n    return this._resolutions.indexOf(closest)\n  }\n\n  snap_to_zoom_level(extent: Extent, height: number, width: number, level: number): Extent {\n    const [xmin, ymin, xmax, ymax] = extent\n    const desired_res = this._resolutions[level]\n    let desired_x_delta = width * desired_res\n    let desired_y_delta = height * desired_res\n    if (!this.snap_to_zoom) {\n      const xscale = (xmax-xmin)/desired_x_delta\n      const yscale = (ymax-ymin)/desired_y_delta\n      if (xscale > yscale) {\n        desired_x_delta = (xmax-xmin)\n        desired_y_delta = desired_y_delta*xscale\n      } else {\n        desired_x_delta = desired_x_delta*yscale\n        desired_y_delta = (ymax-ymin)\n      }\n    }\n    const x_adjust = (desired_x_delta - (xmax - xmin)) / 2\n    const y_adjust = (desired_y_delta - (ymax - ymin)) / 2\n\n    return [xmin - x_adjust, ymin - y_adjust, xmax + x_adjust, ymax + y_adjust]\n  }\n\n  tms_to_wmts(x: number, y: number, z: number): [number, number, number] {\n    'Note this works both ways'\n    return [x, Math.pow(2, z) - 1 - y, z]\n  }\n\n  wmts_to_tms(x: number, y: number, z: number): [number, number, number] {\n    'Note this works both ways'\n    return [x, Math.pow(2, z) - 1 - y, z]\n  }\n\n  pixels_to_meters(px: number, py: number, level: number): [number, number] {\n    const res = this.get_resolution(level)\n    const mx = (px * res) - this.x_origin_offset\n    const my = (py * res) - this.y_origin_offset\n    return [mx, my]\n  }\n\n  meters_to_pixels(mx: number, my: number, level: number): [number, number] {\n    const res = this.get_resolution(level)\n    const px = (mx + this.x_origin_offset) / res\n    const py = (my + this.y_origin_offset) / res\n    return [px, py]\n  }\n\n  pixels_to_tile(px: number, py: number): [number, number] {\n    let tx = Math.ceil(px / this.tile_size)\n    tx = tx === 0 ? tx : tx - 1\n    const ty = Math.max(Math.ceil(py / this.tile_size) - 1, 0)\n    return [tx, ty]\n  }\n\n  pixels_to_raster(px: number, py: number, level: number): [number, number] {\n    const mapSize = this.tile_size << level\n    return [px, mapSize - py]\n  }\n\n  meters_to_tile(mx: number, my: number, level: number): [number, number] {\n    const [px, py] = this.meters_to_pixels(mx, my, level)\n    return this.pixels_to_tile(px, py)\n  }\n\n  get_tile_meter_bounds(tx: number, ty: number, level: number): Bounds {\n    // expects tms styles coordinates (bottom-left origin)\n    const [xmin, ymin] = this.pixels_to_meters(tx * this.tile_size, ty * this.tile_size, level)\n    const [xmax, ymax] = this.pixels_to_meters((tx + 1) * this.tile_size, (ty + 1) * this.tile_size, level)\n    return [xmin, ymin, xmax, ymax]\n  }\n\n  get_tile_geographic_bounds(tx: number, ty: number, level: number): Bounds {\n    const bounds = this.get_tile_meter_bounds(tx, ty, level)\n    const [minLon, minLat, maxLon, maxLat] = meters_extent_to_geographic(bounds)\n    return [minLon, minLat, maxLon, maxLat]\n  }\n\n  get_tiles_by_extent(extent: Extent, level: number, tile_border: number = 1): [number, number, number, Bounds][] {\n    // unpack extent and convert to tile coordinates\n    const [xmin, ymin, xmax, ymax] = extent\n    let [txmin, tymin] = this.meters_to_tile(xmin, ymin, level)\n    let [txmax, tymax] = this.meters_to_tile(xmax, ymax, level)\n\n    // add tiles which border\n    txmin -= tile_border\n    tymin -= tile_border\n    txmax += tile_border\n    tymax += tile_border\n\n    const tiles: [number, number, number, Bounds][] = []\n    for (let ty = tymax; ty >= tymin; ty--) {\n      for (let tx = txmin; tx <= txmax; tx++) {\n        if (this.is_valid_tile(tx, ty, level))\n          tiles.push([tx, ty, level, this.get_tile_meter_bounds(tx, ty, level)])\n      }\n    }\n\n    this.sort_tiles_from_center(tiles, [txmin, tymin, txmax, tymax])\n    return tiles\n  }\n\n  quadkey_to_tile_xyz(quadKey: string): [number, number, number] {\n    /**\n     * Computes tile x, y and z values based on quadKey.\n     */\n    let tileX = 0\n    let tileY = 0\n    const tileZ = quadKey.length\n    for (let i = tileZ; i > 0; i--) {\n\n      const value = quadKey.charAt(tileZ - i)\n      const mask = 1 << (i - 1)\n\n      switch (value) {\n        case '0':\n          continue\n        case '1':\n          tileX |= mask\n          break\n        case '2':\n          tileY |= mask\n          break\n        case '3':\n          tileX |= mask\n          tileY |= mask\n          break\n        default:\n          throw new TypeError(`Invalid Quadkey: ${quadKey}`)\n      }\n    }\n\n    return [tileX, tileY, tileZ]\n  }\n\n  tile_xyz_to_quadkey(x: number, y: number, z: number): string {\n    /*\n     * Computes quadkey value based on tile x, y and z values.\n     */\n    let quadkey = \"\"\n    for (let i = z; i > 0; i--) {\n      const mask = 1 << (i - 1)\n      let digit = 0\n      if ((x & mask) !== 0) {\n        digit += 1\n      }\n      if ((y & mask) !== 0) {\n        digit += 2\n      }\n      quadkey += digit.toString()\n    }\n    return quadkey\n  }\n\n  children_by_tile_xyz(x: number, y: number, z: number): [number, number, number, Bounds][] {\n    const quadkey = this.tile_xyz_to_quadkey(x, y, z)\n    const child_tile_xyz: [number, number, number, Bounds][] = []\n\n    for (let i = 0; i <= 3; i++) {\n      const [x, y, z] = this.quadkey_to_tile_xyz(quadkey + i.toString())\n      const b = this.get_tile_meter_bounds(x, y, z)\n      child_tile_xyz.push([x, y, z, b])\n    }\n\n    return child_tile_xyz\n  }\n\n  get_closest_parent_by_tile_xyz(x: number, y: number, z: number): [number, number, number] {\n    const world_x = this.calculate_world_x_by_tile_xyz(x, y, z)\n    ;[x, y, z] = this.normalize_xyz(x, y, z)\n    let quadkey = this.tile_xyz_to_quadkey(x, y, z)\n    while (quadkey.length > 0) {\n      quadkey = quadkey.substring(0, quadkey.length - 1)\n      ;[x, y, z] = this.quadkey_to_tile_xyz(quadkey)\n      ;[x, y, z] = this.denormalize_xyz(x, y, z, world_x)\n      if (this.tile_xyz_to_key(x, y, z) in this.tiles)\n        return [x, y, z]\n    }\n    return [0, 0, 0]\n  }\n\n  normalize_xyz(x: number, y: number, z: number): [number, number, number] {\n    if (this.wrap_around) {\n      const tile_count = Math.pow(2, z)\n      return [((x % tile_count) + tile_count) % tile_count, y, z]\n    } else {\n      return [x, y, z]\n    }\n  }\n\n  denormalize_xyz(x: number, y: number, z: number, world_x: number): [number, number, number] {\n    return [x + (world_x * Math.pow(2, z)), y, z]\n  }\n\n  denormalize_meters(meters_x: number, meters_y: number, _level: number, world_x: number): [number, number] {\n    return [meters_x + (world_x * 2 * Math.PI * 6378137), meters_y]\n  }\n\n  calculate_world_x_by_tile_xyz(x: number, _y: number, z: number): number {\n    return Math.floor(x / Math.pow(2, z))\n  }\n}\nMercatorTileSource.initClass()\n"]}