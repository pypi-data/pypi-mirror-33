{"version":3,"sources":["models/glyphs/glyph.ts"],"names":[],"mappings":"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","file":"glyph.js","sourcesContent":["import * as hittest from \"core/hittest\"\nimport * as p from \"core/properties\"\nimport * as bbox from \"core/util/bbox\"\nimport {IBBox} from \"core/util/bbox\"\nimport * as proj from \"core/util/projections\"\nimport * as visuals from \"core/visuals\"\nimport {Geometry, RectGeometry} from \"core/geometry\"\nimport {Context2d} from \"core/util/canvas\"\nimport {View} from \"core/view\"\nimport {Model} from \"../../model\"\nimport {Anchor} from \"core/enums\"\nimport {logger} from \"core/logging\"\nimport {Arrayable} from \"core/types\"\nimport {map} from \"core/util/arrayable\"\nimport {extend} from \"core/util/object\"\nimport {isArray, isTypedArray} from \"core/util/types\"\nimport {SpatialIndex, Rect} from \"core/util/spatial\"\nimport {LineView} from \"./line\"\nimport {Scale} from \"../scales/scale\"\nimport {FactorRange} from \"../ranges/factor_range\"\nimport {Selection} from \"../selections/selection\"\nimport {GlyphRendererView} from \"../renderers/glyph_renderer\"\nimport {ColumnarDataSource} from \"../sources/columnar_data_source\"\n\nexport interface GlyphData {}\n\nexport interface GlyphView extends GlyphData {}\n\nexport abstract class GlyphView extends View {\n  model: Glyph\n  visuals: Glyph.Visuals\n\n  glglyph?: any\n\n  index: SpatialIndex\n  renderer: GlyphRendererView\n\n  protected _nohit_warned: {[key: string]: boolean} = {}\n\n  initialize(options: any): void {\n    super.initialize(options)\n\n    this._nohit_warned = {}\n    this.renderer = options.renderer\n    this.visuals = new visuals.Visuals(this.model)\n\n    // Init gl (this should really be done anytime renderer is set,\n    // and not done if it isn't ever set, but for now it only\n    // matters in the unit tests because we build a view without a\n    // renderer there)\n    const {gl} = this.renderer.plot_view\n\n    if (gl != null) {\n      let webgl_module = null\n      try {\n        webgl_module = require(\"./webgl/index\")\n      } catch (e) {\n        if (e.code === 'MODULE_NOT_FOUND') {\n          logger.warn('WebGL was requested and is supported, but bokeh-gl(.min).js is not available, falling back to 2D rendering.')\n        } else\n          throw e\n      }\n\n      if (webgl_module != null) {\n        const Cls = webgl_module[this.model.type + 'GLGlyph']\n        if (Cls != null)\n          this.glglyph = new Cls(gl.ctx, this)\n      }\n    }\n  }\n\n  set_visuals(source: ColumnarDataSource): void {\n    this.visuals.warm_cache(source)\n\n    if (this.glglyph != null)\n      this.glglyph.set_visuals_changed()\n  }\n\n  render(ctx: Context2d, indices: number[], data: any): void {\n    ctx.beginPath()\n\n    if (this.glglyph != null) {\n      if (this.glglyph.render(ctx, indices, data))\n        return\n    }\n\n    this._render(ctx, indices, data)\n  }\n\n  protected abstract _render(ctx: Context2d, indices: number[], data: any): void\n\n  has_finished(): boolean {\n    return true\n  }\n\n  notify_finished(): void {\n    this.renderer.notify_finished()\n  }\n\n  protected _bounds(bounds: Rect): Rect {\n    return bounds\n  }\n\n  bounds(): Rect {\n    return this._bounds(this.index.bbox)\n  }\n\n  log_bounds(): Rect {\n    const bb = bbox.empty()\n\n    const positive_x_bbs = this.index.search(bbox.positive_x())\n    for (const x of positive_x_bbs) {\n      if (x.minX < bb.minX)\n        bb.minX = x.minX\n      if (x.maxX > bb.maxX)\n        bb.maxX = x.maxX\n    }\n\n    const positive_y_bbs = this.index.search(bbox.positive_y())\n    for (const y of positive_y_bbs) {\n      if (y.minY < bb.minY)\n        bb.minY = y.minY\n      if (y.maxY > bb.maxY)\n        bb.maxY = y.maxY\n    }\n\n    return this._bounds(bb)\n  }\n\n  get_anchor_point(anchor: Anchor, i: number, [sx, sy]: [number, number]): {x: number, y: number} | null {\n    switch (anchor) {\n      case \"center\": return {x: this.scenterx(i, sx, sy), y: this.scentery(i, sx, sy)}\n      default:       return null\n    }\n  }\n\n  // glyphs that need more sophisticated \"snap to data\" behaviour (like\n  // snapping to a patch centroid, e.g, should override these\n  abstract scenterx(i: number, _sx: number, _sy: number): number\n\n  abstract scentery(i: number, _sx: number, _sy: number): number\n\n  sdist(scale: Scale, pts: Arrayable<number>, spans: Arrayable<number>,\n        pts_location: \"center\" | \"edge\" = \"edge\", dilate: boolean = false): Arrayable<number> {\n    let pt0: Arrayable<number>\n    let pt1: Arrayable<number>\n\n    const n = pts.length\n    if (pts_location == 'center') {\n      const halfspan = map(spans, (d) => d/2)\n      pt0 = new Float64Array(n)\n      for (let i = 0; i < n; i++) {\n        pt0[i] = pts[i] - halfspan[i]\n      }\n      pt1 = new Float64Array(n)\n      for (let i = 0; i < n; i++) {\n        pt1[i] = pts[i] + halfspan[i]\n      }\n    } else {\n      pt0 = pts\n      pt1 = new Float64Array(n)\n      for (let i = 0; i < n; i++) {\n        pt1[i] = pt0[i] + spans[i]\n      }\n    }\n\n    const spt0 = scale.v_compute(pt0)\n    const spt1 = scale.v_compute(pt1)\n\n    if (dilate)\n      return map(spt0, (_, i) => Math.ceil(Math.abs(spt1[i] - spt0[i])))\n    else\n      return map(spt0, (_, i) => Math.abs(spt1[i] - spt0[i]))\n  }\n\n  draw_legend_for_index(_ctx: Context2d, _bbox: IBBox, _index: number): void {}\n\n  hit_test(geometry: Geometry): hittest.HitTestResult {\n    let result = null\n\n    const func = `_hit_${geometry.type}`\n    if ((this as any)[func] != null) {\n      result = (this as any)[func](geometry)\n    } else if (this._nohit_warned[geometry.type] == null) {\n      logger.debug(`'${geometry.type}' selection not available for ${this.model.type}`)\n      this._nohit_warned[geometry.type] = true\n    }\n\n    return result\n  }\n\n  protected _hit_rect_against_index(geometry: RectGeometry): Selection {\n    const {sx0, sx1, sy0, sy1} = geometry\n    const [x0, x1] = this.renderer.xscale.r_invert(sx0, sx1)\n    const [y0, y1] = this.renderer.yscale.r_invert(sy0, sy1)\n    const bb = hittest.validate_bbox_coords([x0, x1], [y0, y1])\n    const result = hittest.create_empty_hit_test_result()\n    result.indices = this.index.indices(bb)\n    return result\n  }\n\n  set_data(source: ColumnarDataSource, indices: number[], indices_to_update: number[] | null): void {\n    let data = this.model.materialize_dataspecs(source)\n\n    this.visuals.set_all_indices(indices)\n    if (indices && !(this instanceof LineView)) {\n      const data_subset: {[key: string]: any} = {}\n      for (const k in data) {\n        const v = data[k]\n        if (k.charAt(0) === '_')\n          data_subset[k] = indices.map((i) => v[i])\n        else\n          data_subset[k] = v\n      }\n      data = data_subset\n    }\n\n    const self = this as any\n    extend(self, data)\n\n    if (this.renderer.plot_view.model.use_map) {\n      if (self._x != null)\n        [self._x, self._y] = proj.project_xy(self._x, self._y)\n\n      if (self._xs != null)\n        [self._xs, self._ys] = proj.project_xsys(self._xs, self._ys)\n    }\n\n    // if we have any coordinates that are categorical, convert them to\n    // synthetic coords here\n    if (this.renderer.plot_view.frame.x_ranges != null) {   // XXXX JUST TEMP FOR TESTS TO PASS\n      const xr = this.renderer.plot_view.frame.x_ranges[this.model.x_range_name]\n      const yr = this.renderer.plot_view.frame.y_ranges[this.model.y_range_name]\n\n      for (let [xname, yname] of this.model._coords) {\n        xname = `_${xname}`\n        yname = `_${yname}`\n\n        // TODO (bev) more robust detection of multi-glyph case\n        // hand multi glyph case\n        if (self._xs != null) {\n          if (xr instanceof FactorRange) {\n            self[xname] = map(self[xname], (arr: any) => xr.v_synthetic(arr))\n          }\n          if (yr instanceof FactorRange) {\n            self[yname] = map(self[yname], (arr: any) => yr.v_synthetic(arr))\n          }\n        }\n\n        // hand standard glyph case\n        else {\n          if (xr instanceof FactorRange) {\n            self[xname] = xr.v_synthetic(self[xname])\n          }\n          if (yr instanceof FactorRange) {\n            self[yname] = yr.v_synthetic(self[yname])\n          }\n        }\n\n      }\n    }\n\n    if (this.glglyph != null)\n      this.glglyph.set_data_changed(self._x.length)\n\n    this._set_data(indices_to_update)  //TODO doesn't take subset indices into account\n\n    this.index_data()\n  }\n\n  protected _set_data(_indices: number[] | null): void {}\n\n  protected abstract _index_data(): SpatialIndex\n\n  index_data(): void {\n    this.index = this._index_data()\n  }\n\n  mask_data(indices: number[]): number[] {\n    // WebGL can do the clipping much more efficiently\n    if (this.glglyph != null || this._mask_data == null)\n      return indices\n    else\n      return this._mask_data()\n  }\n\n  protected _mask_data?(): number[]\n\n  map_data(): void {\n    // TODO: if using gl, skip this (when is this called?)\n    // map all the coordinate fields\n    const self = this as any\n\n    for (let [xname, yname] of this.model._coords) {\n      const sxname = `s${xname}`\n      const syname = `s${yname}`\n      xname = `_${xname}`\n      yname = `_${yname}`\n\n      if (self[xname] != null && (isArray(self[xname][0]) || isTypedArray(self[xname][0]))) {\n        const n = self[xname].length\n\n        self[sxname] = new Array(n)\n        self[syname] = new Array(n)\n\n        for (let i = 0; i < n; i++) {\n          const [sx, sy] = this.map_to_screen(self[xname][i], self[yname][i])\n          self[sxname][i] = sx\n          self[syname][i] = sy\n        }\n      } else\n        [self[sxname], self[syname]] = this.map_to_screen(self[xname], self[yname])\n    }\n\n    this._map_data()\n  }\n\n  // This is where specs not included in coords are computed, e.g. radius.\n  protected _map_data(): void {}\n\n  map_to_screen(x: Arrayable<number>, y: Arrayable<number>): [Arrayable<number>, Arrayable<number>] {\n    return this.renderer.plot_view.map_to_screen(x, y, this.model.x_range_name, this.model.y_range_name)\n  }\n}\n\nexport namespace Glyph {\n  export interface Attrs extends Model.Attrs {\n    x_range_name: string\n    y_range_name: string\n  }\n\n  export interface Props extends Model.Props {}\n\n  export interface Visuals extends visuals.Visuals {}\n}\n\nexport interface Glyph extends Glyph.Attrs {}\n\nexport abstract class Glyph extends Model {\n\n  properties: Glyph.Props\n\n  /* prototype */ _coords: [string, string][]\n\n  constructor(attrs?: Partial<Glyph.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = 'Glyph'\n\n    this.prototype._coords = []\n\n    this.internal({\n      x_range_name: [ p.String, 'default' ],\n      y_range_name: [ p.String, 'default' ],\n    })\n  }\n\n  static coords(coords: [string, string][]): void {\n    const _coords = this.prototype._coords.concat(coords)\n    this.prototype._coords = _coords\n\n    const result: any = {}\n    for (const [x, y] of coords) {\n      result[x] = [ p.NumberSpec ]\n      result[y] = [ p.NumberSpec ]\n    }\n\n    this.define(result)\n  }\n}\nGlyph.initClass()\n"]}