{"version":3,"sources":["models/tickers/ticker.ts"],"names":[],"mappings":";;;AAAA,qCAAiC;AA4BjC;IAAwC,kCAAK;IAI3C,gBAAY,KAA6B;eACvC,kBAAM,KAAK,CAAC;IACd,CAAC;IAEM,gBAAS,GAAhB;QACE,IAAI,CAAC,SAAS,CAAC,IAAI,GAAG,QAAQ,CAAA;IAChC,CAAC;IAIH,aAAC;AAAD,CAdA,AAcC,CAduC,aAAK,GAc5C;AAdqB,wBAAM;AAgB5B,MAAM,CAAC,SAAS,EAAE,CAAA","file":"ticker.js","sourcesContent":["import {Model} from \"../../model\"\n\nexport type TickSpec<T> = {\n  major: T[]\n  minor: T[]\n}\n\n// The base class for all Ticker objects.  It needs to be subclassed before\n// being used.  The simplest subclass is SingleIntervalTicker.\n//\n// The main value of a Ticker is its get_ticks() method, which takes a min and\n// max value and (optionally) a desired number of ticks, and returns an array\n// of approximately that many ticks, evenly spaced, with nice round values,\n// within that range.\n//\n// Different Tickers are suited to different types of data or different\n// magnitudes.  To make it possible to select Tickers programmatically, they\n// also support some additional methods: get_interval(), get_min_interval(),\n// and get_max_interval().\n\nexport namespace Ticker{\n  export interface Attrs extends Model.Attrs {}\n\n  export interface Props extends Model.Props {}\n}\n\nexport interface Ticker<T> extends Ticker.Attrs {}\n\nexport abstract class Ticker<T> extends Model {\n\n  properties: Ticker.Props\n\n  constructor(attrs?: Partial<Ticker.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = \"Ticker\"\n  }\n\n  // Generates a nice series of ticks for a given range.\n  abstract get_ticks(data_low: number, data_high: number, range: any, cross_loc: any, unused: any): TickSpec<T>\n}\n\nTicker.initClass()\n"]}