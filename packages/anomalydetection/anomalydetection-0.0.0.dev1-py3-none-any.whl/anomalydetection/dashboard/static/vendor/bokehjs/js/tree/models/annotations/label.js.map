{"version":3,"sources":["models/annotations/label.ts"],"names":[],"mappings":"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","file":"label.js","sourcesContent":["import {TextAnnotation, TextAnnotationView} from \"./text_annotation\"\nimport {TextMixinScalar} from \"core/property_mixins\"\nimport {Color} from \"core/types\"\nimport {LineJoin, LineCap} from \"core/enums\"\nimport {SpatialUnits, AngleUnits} from \"core/enums\"\nimport {hide} from \"core/dom\"\nimport * as p from \"core/properties\"\n\nexport class LabelView extends TextAnnotationView {\n  model: Label\n  visuals: Label.Visuals\n\n  initialize(options: any): void {\n    super.initialize(options)\n    this.visuals.warm_cache()\n  }\n\n  protected _get_size(): number {\n    const {ctx} = this.plot_view.canvas_view\n    this.visuals.text.set_value(ctx)\n\n    if (this.model.panel!.is_horizontal) {\n      const height = ctx.measureText(this.model.text).ascent\n      return height\n    } else {\n      const {width} = ctx.measureText(this.model.text)\n      return width\n    }\n  }\n\n  render(): void {\n    if (!this.model.visible && this.model.render_mode == 'css')\n      hide(this.el)\n\n    if (!this.model.visible)\n      return\n\n    // Here because AngleSpec does units tranform and label doesn't support specs\n    let angle: number\n    switch (this.model.angle_units) {\n      case \"rad\": {\n        angle = -this.model.angle\n        break\n      }\n      case \"deg\": {\n        angle = (-this.model.angle*Math.PI)/180.0\n        break\n      }\n      default:\n        throw new Error(\"unreachable code\")\n    }\n\n    const panel = this.model.panel != null ? this.model.panel : this.plot_view.frame\n\n    const xscale = this.plot_view.frame.xscales[this.model.x_range_name]\n    const yscale = this.plot_view.frame.yscales[this.model.y_range_name]\n\n    let sx = this.model.x_units == \"data\" ? xscale.compute(this.model.x) : panel.xview.compute(this.model.x)\n    let sy = this.model.y_units == \"data\" ? yscale.compute(this.model.y) : panel.yview.compute(this.model.y)\n\n    sx += this.model.x_offset\n    sy -= this.model.y_offset\n\n    const draw = this.model.render_mode == 'canvas' ? this._canvas_text.bind(this) : this._css_text.bind(this)\n    draw(this.plot_view.canvas_view.ctx, this.model.text, sx, sy, angle)\n  }\n}\n\nexport namespace Label {\n  // line:border_\n  export interface BorderLine {\n    border_line_color: Color\n    border_line_width: number\n    border_line_alpha: number\n    border_line_join: LineJoin\n    border_line_cap: LineCap\n    border_line_dash: number[]\n    border_line_dash_offset: number\n  }\n\n  // fill:background_\n  export interface BackgorundFill {\n    background_fill_color: Color\n    background_fill_alpha: number\n  }\n\n  export interface Mixins extends TextMixinScalar, BorderLine, BackgorundFill {}\n\n  export interface Attrs extends TextAnnotation.Attrs, Mixins {\n    x: number\n    x_units: SpatialUnits\n    y: number\n    y_units: SpatialUnits\n    text: string\n    angle: number\n    angle_units: AngleUnits\n    x_offset: number\n    y_offset: number\n    x_range_name: string\n    y_range_name: string\n  }\n\n  export interface Props extends TextAnnotation.Props {}\n\n  export type Visuals = TextAnnotation.Visuals\n}\n\nexport interface Label extends Label.Attrs {}\n\nexport class Label extends TextAnnotation {\n\n  properties: Label.Props\n\n  constructor(attrs?: Partial<Label.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = 'Label'\n    this.prototype.default_view = LabelView\n\n    this.mixins(['text', 'line:border_', 'fill:background_'])\n\n    this.define({\n      x:            [ p.Number,                      ],\n      x_units:      [ p.SpatialUnits, 'data'         ],\n      y:            [ p.Number,                      ],\n      y_units:      [ p.SpatialUnits, 'data'         ],\n      text:         [ p.String,                      ],\n      angle:        [ p.Angle,       0               ],\n      angle_units:  [ p.AngleUnits,  'rad'           ],\n      x_offset:     [ p.Number,      0               ],\n      y_offset:     [ p.Number,      0               ],\n      x_range_name: [ p.String,      'default'       ],\n      y_range_name: [ p.String,      'default'       ],\n    })\n\n    this.override({\n      background_fill_color: null,\n      border_line_color: null,\n    })\n  }\n}\nLabel.initClass()\n"]}