{"version":3,"sources":["models/tools/edit/box_edit_tool.ts"],"names":[],"mappings":"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","file":"box_edit_tool.js","sourcesContent":["import {Keys} from \"core/dom\"\nimport {GestureEvent, TapEvent, KeyEvent, UIEvent, MoveEvent} from \"core/ui_events\"\nimport {Dimensions} from \"core/enums\"\nimport * as p from \"core/properties\"\nimport {Rect} from \"../../glyphs/rect\"\nimport {GlyphRenderer} from \"../../renderers/glyph_renderer\"\nimport {ColumnDataSource} from \"../../sources/column_data_source\"\nimport {EditTool, EditToolView} from \"./edit_tool\"\n\nexport interface HasRectCDS {\n  glyph: Rect\n  data_source: ColumnDataSource\n}\n\nexport class BoxEditToolView extends EditToolView {\n  model: BoxEditTool\n  _draw_basepoint: [number, number] | null\n\n  _tap(ev: TapEvent): void {\n    if ((this._draw_basepoint != null) || (this._basepoint != null)) { return; }\n    const append = ev.shiftKey\n    this._select_event(ev, append, this.model.renderers);\n  }\n\n  _keyup(ev: KeyEvent): void {\n    if (!this.model.active || !this._mouse_in_frame) { return; }\n    for (const renderer of this.model.renderers) {\n      if (ev.keyCode === Keys.Backspace) {\n        this._delete_selected(renderer);\n      } else if (ev.keyCode == Keys.Esc) {\n        // Type properly once selection_manager is typed\n        const cds = renderer.data_source;\n        cds.selection_manager.clear();\n      }\n    }\n  }\n\n  _set_extent([sx0, sx1]: [number, number], [sy0, sy1]: [number, number],\n              append: boolean, emit: boolean = false): void {\n    const renderer = this.model.renderers[0];\n    const frame = this.plot_model.frame;\n    // Type once dataspecs are typed\n    const glyph: any = renderer.glyph;\n    const ds = renderer.data_source;\n    const xscale = frame.xscales[renderer.x_range_name];\n    const yscale = frame.yscales[renderer.y_range_name];\n    const [x0, x1] = xscale.r_invert(sx0, sx1);\n    const [y0, y1] = yscale.r_invert(sy0, sy1);\n    const [x, y] = [(x0+x1)/2., (y0+y1)/2.];\n    const [w, h] = [x1-x0, y1-y0];\n    const [xkey, ykey] = [glyph.x.field, glyph.y.field];\n    const [wkey, hkey] = [glyph.width.field, glyph.height.field];\n    if (append) {\n      if (xkey) ds.get_array(xkey).push(x)\n      if (ykey) ds.get_array(ykey).push(y)\n      if (wkey) ds.get_array(wkey).push(w)\n      if (hkey) ds.get_array(hkey).push(h)\n      this._pad_empty_columns(ds, [xkey, ykey, wkey, hkey])\n    } else {\n      const index = ds.data[xkey].length - 1\n      if (xkey) ds.data[xkey][index] = x\n      if (ykey) ds.data[ykey][index] = y\n      if (wkey) ds.data[wkey][index] = w\n      if (hkey) ds.data[hkey][index] = h\n    }\n    ds.change.emit();\n    if (emit) {\n      ds.properties.data.change.emit();\n    }\n  }\n\n  _update_box(ev: UIEvent, append: boolean = false, emit: boolean = false): void {\n    if (this._draw_basepoint == null) { return; }\n    const curpoint: [number, number] = [ev.sx, ev.sy];\n    const frame = this.plot_model.frame;\n    const dims = this.model.dimensions;\n    const limits = this.model._get_dim_limits(this._draw_basepoint, curpoint, frame, dims);\n    if (limits != null) {\n      const [sxlim, sylim] = limits;\n      this._set_extent(sxlim, sylim, append, emit);\n    }\n  }\n\n  _doubletap(ev: TapEvent): void {\n    if (this._draw_basepoint != null) {\n      this._update_box(ev, false, true)\n      this._draw_basepoint = null;\n      for (const renderer of this.model.renderers) {\n        renderer.data_source.selected.indices = [];\n        renderer.data_source.properties.data.change.emit();\n      }\n    } else {\n      this._draw_basepoint = [ev.sx, ev.sy];\n      this._select_event(ev, true, this.model.renderers);\n      this._update_box(ev, true, false);\n    }\n  }\n\n  _move(ev: MoveEvent): void {\n    this._update_box(ev, false, false);\n  }\n\n  _pan_start(ev: GestureEvent): void {\n    if (ev.shiftKey) {\n      if (this._draw_basepoint != null) { return }\n      this._draw_basepoint = [ev.sx, ev.sy];\n      this._update_box(ev, true, false);\n    } else {\n      if (this._basepoint != null) { return }\n      this._select_event(ev, true, this.model.renderers);\n      this._basepoint = [ev.sx, ev.sy];\n    }\n  }\n\n  _pan(ev: GestureEvent, append: boolean = false, emit: boolean = false): void {\n    if (ev.shiftKey) {\n      if (this._draw_basepoint == null) { return; }\n      this._update_box(ev, append, emit)\n    } else {\n      if (this._basepoint == null) { return; }\n      this._drag_points(ev, this.model.renderers);\n    }\n  }\n\n  _pan_end(ev: GestureEvent): void {\n    this._pan(ev, false, true)\n    if (ev.shiftKey) {\n      this._draw_basepoint = null;\n    } else {\n      this._basepoint = null;\n    }\n    for (const renderer of this.model.renderers) {\n      renderer.data_source.selected.indices = [];\n      renderer.data_source.properties.data.change.emit();\n    }\n  }\n}\n\nexport namespace BoxEditTool {\n  export interface Attrs extends EditTool.Attrs {\n    dimensions: Dimensions\n    renderers: (GlyphRenderer & HasRectCDS)[]\n  }\n\n  export interface Props extends EditTool.Props {}\n}\n\nexport interface BoxEditTool extends BoxEditTool.Attrs {}\n\nexport class BoxEditTool extends EditTool {\n\n  properties: BoxEditTool.Props\n\n  renderers: (GlyphRenderer & HasRectCDS)[]\n\n  constructor(attrs?: Partial<BoxEditTool.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = \"BoxEditTool\"\n    this.prototype.default_view = BoxEditToolView\n\n    this.define({\n      dimensions: [ p.Dimensions, \"both\" ],\n    })\n  }\n\n  tool_name = \"Box Edit Tool\"\n  icon = \"bk-tool-icon-box-edit\"\n  event_type = [\"tap\" as \"tap\", \"pan\" as \"pan\", \"move\" as \"move\"]\n  default_order = 1\n}\nBoxEditTool.initClass()\n"]}