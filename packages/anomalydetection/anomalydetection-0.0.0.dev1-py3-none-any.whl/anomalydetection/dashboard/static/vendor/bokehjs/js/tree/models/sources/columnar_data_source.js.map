{"version":3,"sources":["models/sources/columnar_data_source.ts"],"names":[],"mappings":"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","file":"columnar_data_source.js","sourcesContent":["import {DataSource} from \"./data_source\"\nimport {Signal, Signal0} from \"core/signaling\"\nimport {logger} from \"core/logging\"\nimport {SelectionManager} from \"core/selection_manager\"\nimport * as p from \"core/properties\"\nimport {Arrayable} from \"core/types\"\nimport {isArray} from \"core/util/types\"\nimport {uniq, range} from \"core/util/array\"\nimport {keys, values} from \"core/util/object\"\nimport {Shape} from \"core/util/serialization\"\nimport {Selection} from \"../selections/selection\"\nimport {SelectionPolicy, UnionRenderers} from \"../selections/interaction_policy\"\n\n// Abstract baseclass for column based data sources, where the column\n// based data may be supplied directly or be computed from an attribute\n\nexport namespace ColumnarDataSource {\n  export interface Attrs extends DataSource.Attrs {\n    selection_policy: SelectionPolicy\n    selection_manager: SelectionManager\n    inspected: Selection\n    _shapes: {[key: string]: Shape | Shape[]}\n  }\n\n  export interface Props extends DataSource.Props {\n    data: p.Property<{[key: string]: Arrayable}> // XXX: this is hack!!!\n  }\n}\n\nexport interface ColumnarDataSource extends ColumnarDataSource.Attrs {}\n\nexport abstract class ColumnarDataSource extends DataSource {\n\n  properties: ColumnarDataSource.Props\n\n  data: {[key: string]: Arrayable}\n\n  get column_names(): string[] {\n    return keys(this.data)\n  }\n\n  get_array<T>(key: string): T[] {\n    let column = this.data[key]\n\n    if (column == null)\n      this.data[key] = column = []\n    else if (!isArray(column))\n      this.data[key] = column = Array.from(column)\n\n    return column as T[]\n  }\n\n  _select: Signal0<this>\n  inspect: Signal<any, this> // XXX: <[indices, tool, renderer-view, source, data], this>\n\n  streaming: Signal0<this>\n  patching: Signal<number[], this>\n\n  constructor(attrs?: Partial<ColumnarDataSource.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = 'ColumnarDataSource'\n\n    this.define({\n      selection_policy: [ p.Instance, () => new UnionRenderers() ],\n    })\n\n    this.internal({\n      selection_manager: [ p.Instance, (self: ColumnarDataSource) => new SelectionManager({source: self}) ],\n      inspected:         [ p.Instance, () => new Selection() ],\n      _shapes:           [ p.Any, {}],\n    })\n  }\n\n  initialize(): void {\n    super.initialize()\n\n    this._select = new Signal0(this, \"select\")\n    this.inspect = new Signal(this, \"inspect\") // XXX: <[indices, tool, renderer-view, source, data], this>\n\n    this.streaming = new Signal0(this, \"streaming\")\n    this.patching = new Signal(this, \"patching\")\n  }\n\n  get_column(colname: string): Arrayable | null {\n    const column = this.data[colname]\n    return column != null ? column : null\n  }\n\n  columns(): string[] {\n    // return the column names in this data source\n    return keys(this.data)\n  }\n\n  get_length(soft: boolean = true): number | null {\n    const lengths = uniq(values(this.data).map((v) => v.length))\n\n    switch (lengths.length) {\n      case 0: {\n        return null // XXX: don't guess, treat on case-by-case basis\n      }\n      case 1: {\n        return lengths[0]\n      }\n      default: {\n        const msg = \"data source has columns of inconsistent lengths\"\n        if (soft) {\n          logger.warn(msg)\n          return lengths.sort()[0]\n        } else\n          throw new Error(msg)\n      }\n    }\n  }\n\n  get_indices(): number[] {\n    const length = this.get_length()\n    return range(0, length != null ? length : 1)\n    //TODO: returns [0] when no data, should it?\n  }\n}\nColumnarDataSource.initClass()\n"]}