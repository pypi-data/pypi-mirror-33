{"version":3,"sources":["models/sources/data_source.ts"],"names":[],"mappings":";;;AAAA,qCAAiC;AACjC,mCAAoC;AACpC,yCAA0C;AAC1C,qDAAiD;AAgBjD;IAAyC,sCAAK;IAI5C,oBAAY,KAAiC;eAC3C,kBAAM,KAAK,CAAC;IACd,CAAC;IAEM,oBAAS,GAAhB;QACE,IAAI,CAAC,SAAS,CAAC,IAAI,GAAG,YAAY,CAAA;QAElC,IAAI,CAAC,MAAM,CAAC;YACV,QAAQ,EAAE,CAAE,CAAC,CAAC,QAAQ,EAAE,cAAM,OAAA,IAAI,qBAAS,EAAE,EAAf,CAAe,CAAE;YAC/C,QAAQ,EAAE,CAAE,CAAC,CAAC,GAAG,CAA8B;SAChD,CAAC,CAAA;IACJ,CAAC;IAED,oCAAe,GAAf;QAAA,iBAWC;QAVC,iBAAM,eAAe,WAAE,CAAA;QACvB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,MAAM,EAAE;YACrC,IAAA,yBAAQ,CAAQ;YACvB,IAAI,QAAQ,IAAI,IAAI,EAAE;gBACpB,IAAI,kBAAU,CAAC,QAAQ,CAAC;oBACtB,QAAQ,CAAC,KAAI,CAAC,CAAA;;oBAEd,QAAQ,CAAC,OAAO,CAAC,KAAI,CAAC,CAAA;aACzB;QACH,CAAC,CAAC,CAAA;IACJ,CAAC;IAGH,iBAAC;AAAD,CA/BA,AA+BC,CA/BwC,aAAK,GA+B7C;AA/BqB,gCAAU;AAgChC,UAAU,CAAC,SAAS,EAAE,CAAA","file":"data_source.js","sourcesContent":["import {Model} from \"../../model\"\nimport * as p from \"core/properties\"\nimport {isFunction} from \"core/util/types\"\nimport {Selection} from \"../selections/selection\"\n\nexport namespace DataSource {\n  export interface Attrs extends Model.Attrs {\n    selected: Selection\n    callback: any // XXX\n  }\n\n  export interface Props extends Model.Props {\n    selected: p.Property<Selection>\n    callback: p.Property<any> // XXX\n  }\n}\n\nexport interface DataSource extends DataSource.Attrs {}\n\nexport abstract class DataSource extends Model {\n\n  properties: DataSource.Props\n\n  constructor(attrs?: Partial<DataSource.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = \"DataSource\"\n\n    this.define({\n      selected: [ p.Instance, () => new Selection() ], // TODO (bev)\n      callback: [ p.Any                             ], // TODO: p.Either(p.Instance(Callback), p.Function) ]\n    })\n  }\n\n  connect_signals(): void {\n    super.connect_signals()\n    this.connect(this.properties.selected.change, () => {\n      const {callback} = this\n      if (callback != null) {\n        if (isFunction(callback))\n          callback(this)\n        else\n          callback.execute(this)\n      }\n    })\n  }\n\n  setup?(): void\n}\nDataSource.initClass()\n"]}