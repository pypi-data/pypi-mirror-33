{"version":3,"sources":["core/util/zoom.ts"],"names":[],"mappings":";;AACA,+BAA4B;AAK5B,oCAAoC;AAEpC,uBAA8B,KAAa,EAAE,MAAc,EAAE,MAAe;IACpE,IAAA,6BAAsC,EAArC,WAAG,EAAE,YAAI,CAA4B;IAC5C,IAAM,CAAC,GAAG,MAAM,IAAI,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,GAAG,CAAC,GAAG,GAAG,CAAA;IACtD,IAAM,EAAE,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,MAAM,CAAA;IACnC,IAAM,EAAE,GAAG,IAAI,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,MAAM,CAAA;IACrC,OAAO,CAAC,EAAE,EAAE,EAAE,CAAC,CAAA;AACjB,CAAC;AAND,sCAMC;AAED,kBAAyB,MAA8B,EAAE,EAA8B;QAA7B,YAAI,EAAE,YAAI;IAClE,IAAM,IAAI,GAA4B,EAAE,CAAA;IACxC,KAAK,IAAM,MAAI,IAAI,MAAM,EAAE;QACzB,IAAM,KAAK,GAAG,MAAM,CAAC,MAAI,CAAC,CAAA;QACpB,IAAA,+BAAyC,EAAxC,aAAK,EAAE,WAAG,CAA8B;QAC/C,IAAI,CAAC,MAAI,CAAC,GAAG,EAAC,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAC,CAAA;KACtC;IACD,OAAO,IAAI,CAAA;AACb,CAAC;AARD,4BAQC;AAED,qBAA4B,KAAqB,EAAE,MAAc,EAC7D,MAAsB,EAAE,MAAsB,EAAE,MAA+B;IAKjF;;;;;;;;;;;;;;;;OAgBG;IArBD,uBAAA,EAAA,aAAsB;IAAE,uBAAA,EAAA,aAAsB;IAuBhD,iEAAiE;IACjE,MAAM,GAAG,YAAK,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,CAAA;IAEjC,IAAM,OAAO,GAAG,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAA;IAC7B,IAAA,sFAA8F,EAA7F,WAAG,EAAE,WAAG,CAAqF;IACpG,IAAM,GAAG,GAAG,QAAQ,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAA;IAE/C,IAAM,OAAO,GAAG,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAA;IAC7B,IAAA,sFAA8F,EAA7F,WAAG,EAAE,WAAG,CAAqF;IACpG,IAAM,GAAG,GAAG,QAAQ,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAA;IAE/C,gFAAgF;IAChF,gFAAgF;IAChF,8BAA8B;IAC9B,OAAO;QACL,GAAG,EAAE,GAAG;QACR,GAAG,EAAE,GAAG;QACR,MAAM,EAAE,MAAM;KACf,CAAA;AACH,CAAC;AA3CD,kCA2CC","file":"zoom.js","sourcesContent":["import {IRange} from \"./bbox\"\nimport {clamp} from \"./math\"\n\nimport {CartesianFrame} from \"models/canvas/cartesian_frame\"\nimport {Scale} from \"models/scales/scale\"\n\n// Module for zoom-related functions\n\nexport function scale_highlow(range: IRange, factor: number, center?: number): [number, number] {\n  const [low, high] = [range.start, range.end]\n  const x = center != null ? center : (high + low) / 2.0\n  const x0 = low - (low - x) * factor\n  const x1 = high - (high - x) * factor\n  return [x0, x1]\n}\n\nexport function get_info(scales: {[key: string]: Scale}, [sxy0, sxy1]: [number, number]): {[key: string]: IRange} {\n  const info: {[key: string]: IRange} = {}\n  for (const name in scales) {\n    const scale = scales[name]\n    const [start, end] = scale.r_invert(sxy0, sxy1)\n    info[name] = {start: start, end: end}\n  }\n  return info\n}\n\nexport function scale_range(frame: CartesianFrame, factor: number,\n    h_axis: boolean = true, v_axis: boolean = true, center?: {x: number, y: number}): {\n      xrs: {[key: string]: IRange},\n      yrs: {[key: string]: IRange},\n      factor: number,\n    } {\n  /*\n   * Utility function for zoom tools to calculate/create the zoom_info object\n   * of the form required by ``PlotCanvasView.update_range``\n   *\n   * Parameters:\n   *   frame : CartesianFrame\n   *   factor : Number\n   *   h_axis : Boolean, optional\n   *     whether to zoom the horizontal axis (default = true)\n   *   v_axis : Boolean, optional\n   *     whether to zoom the horizontal axis (default = true)\n   *   center : object, optional\n   *     of form {'x': Number, 'y', Number}\n   *\n   * Returns:\n   *   object:\n   */\n\n  // clamp the  magnitude of factor, if it is > 1 bad things happen\n  factor = clamp(factor, -0.9, 0.9)\n\n  const hfactor = h_axis ? factor : 0\n  const [sx0, sx1] = scale_highlow(frame.bbox.h_range, hfactor, center != null ? center.x : undefined)\n  const xrs = get_info(frame.xscales, [sx0, sx1])\n\n  const vfactor = v_axis ? factor : 0\n  const [sy0, sy1] = scale_highlow(frame.bbox.v_range, vfactor, center != null ? center.y : undefined)\n  const yrs = get_info(frame.yscales, [sy0, sy1])\n\n  // OK this sucks we can't set factor independently in each direction. It is used\n  // for GMap plots, and GMap plots always preserve aspect, so effective the value\n  // of 'dimensions' is ignored.\n  return {\n    xrs: xrs,\n    yrs: yrs,\n    factor: factor,\n  }\n}\n"]}