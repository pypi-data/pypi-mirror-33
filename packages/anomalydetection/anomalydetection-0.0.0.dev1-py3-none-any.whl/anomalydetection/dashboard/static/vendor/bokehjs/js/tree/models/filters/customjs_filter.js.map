{"version":3,"sources":["models/filters/customjs_filter.ts"],"names":[],"mappings":";;;AAAA,mCAA+B;AAC/B,mCAAoC;AACpC,2CAA6C;AAE7C,2CAA2C;AAc3C;IAAoC,0CAAM;IAIxC,wBAAY,KAAqC;eAC/C,kBAAM,KAAK,CAAC;IACd,CAAC;IAEM,wBAAS,GAAhB;QACE,IAAI,CAAC,SAAS,CAAC,IAAI,GAAG,gBAAgB,CAAA;QAEtC,IAAI,CAAC,MAAM,CAAC;YACV,IAAI,EAAQ,CAAE,CAAC,CAAC,GAAG,EAAM,EAAE,CAAK;YAChC,IAAI,EAAQ,CAAE,CAAC,CAAC,MAAM,EAAG,EAAE,CAAK;YAChC,UAAU,EAAE,CAAE,CAAC,CAAC,OAAO,EAAE,KAAK,CAAE;SACjC,CAAC,CAAA;IACJ,CAAC;IAED,sBAAI,iCAAK;aAAT;YACE,OAAO,aAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QACxB,CAAC;;;OAAA;IAED,sBAAI,kCAAM;aAAV;YACE,OAAO,eAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QAC1B,CAAC;;;OAAA;IAED,sBAAI,gCAAI;aAAR;YACE,IAAM,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,mBAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAA;YAChE,YAAW,QAAQ,YAAR,QAAQ,kBAAI,IAAI,CAAC,KAAK,GAAE,QAAQ,EAAE,SAAS,EAAE,SAAS,EAAE,IAAI,OAAC;QAC1E,CAAC;;;OAAA;IAED,wCAAe,GAAf,UAAgB,MAAkB;QAChC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,OAAT,IAAI,EAAS,IAAI,CAAC,MAAM,SAAE,MAAM,EAAE,OAAO,EAAE,EAAE,GAAC,CAAA;QAC5D,OAAO,iBAAM,eAAe,YAAC,MAAM,CAAC,CAAA;IACtC,CAAC;IACH,qBAAC;AAAD,CAnCA,AAmCC,CAnCmC,eAAM,GAmCzC;AAnCY,wCAAc;AAoC3B,cAAc,CAAC,SAAS,EAAE,CAAA","file":"customjs_filter.js","sourcesContent":["import {Filter} from \"./filter\"\nimport * as p from \"core/properties\"\nimport {keys, values} from \"core/util/object\"\nimport {DataSource} from \"../sources/data_source\"\nimport {use_strict} from \"core/util/string\"\n\nexport namespace CustomJSFilter {\n  export interface Attrs extends Filter.Attrs {\n    args: {[key: string]: any}\n    code: string\n    use_strict: boolean\n  }\n\n  export interface Props extends Filter.Props {}\n}\n\nexport interface CustomJSFilter extends CustomJSFilter.Attrs {}\n\nexport class CustomJSFilter extends Filter {\n\n  properties: CustomJSFilter.Props\n\n  constructor(attrs?: Partial<CustomJSFilter.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = 'CustomJSFilter'\n\n    this.define({\n      args:       [ p.Any,     {}    ], // TODO (bev) better type\n      code:       [ p.String,  ''    ],\n      use_strict: [ p.Boolean, false ],\n    })\n  }\n\n  get names(): string[] {\n    return keys(this.args)\n  }\n\n  get values(): any[] {\n    return values(this.args)\n  }\n\n  get func(): Function {\n    const code = this.use_strict ? use_strict(this.code) : this.code\n    return new Function(...this.names, \"source\", \"require\", \"exports\", code)\n  }\n\n  compute_indices(source: DataSource): number[] | null {\n    this.filter = this.func(...this.values, source, require, {})\n    return super.compute_indices(source)\n  }\n}\nCustomJSFilter.initClass()\n"]}