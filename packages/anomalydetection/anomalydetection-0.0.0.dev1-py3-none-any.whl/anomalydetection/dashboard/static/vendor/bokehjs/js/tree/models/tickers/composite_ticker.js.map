{"version":3,"sources":["models/tickers/composite_ticker.ts"],"names":[],"mappings":";;;AACA,yDAAoD;AACpD,mCAAoC;AACpC,yCAAmD;AACnD,2CAAwC;AAexC;IAAqC,2CAAgB;IAInD,yBAAY,KAAsC;eAChD,kBAAM,KAAK,CAAC;IACd,CAAC;IAEM,yBAAS,GAAhB;QACE,IAAI,CAAC,SAAS,CAAC,IAAI,GAAG,iBAAiB,CAAA;QAEvC,IAAI,CAAC,MAAM,CAAC;YACV,OAAO,EAAE,CAAC,CAAC,CAAC,KAAK,EAAE,EAAE,CAAE;SACxB,CAAC,CAAA;IACJ,CAAC;IAOD,sBAAI,0CAAa;QALjB,4EAA4E;QAC5E,uDAAuD;QACvD,+CAA+C;QAC/C,oCAAoC;aAEpC;YACE,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,UAAC,MAAM,IAAK,OAAA,MAAM,CAAC,gBAAgB,EAAE,EAAzB,CAAyB,CAAC,CAAA;QAChE,CAAC;;;OAAA;IAED,sBAAI,0CAAa;aAAjB;YACE,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,UAAC,MAAM,IAAK,OAAA,MAAM,CAAC,gBAAgB,EAAE,EAAzB,CAAyB,CAAC,CAAA;QAChE,CAAC;;;OAAA;IAED,sBAAI,yCAAY;aAAhB;YACE,OAAO,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAA;QAC9B,CAAC;;;OAAA;IAED,sBAAI,yCAAY;aAAhB;YACE,OAAO,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAA;QAC9B,CAAC;;;OAAA;IAED,yCAAe,GAAf,UAAgB,QAAgB,EAAE,SAAiB,EAAE,eAAuB;QAC1E,IAAM,UAAU,GAAG,SAAS,GAAG,QAAQ,CAAA;QACvC,IAAM,cAAc,GAAG,IAAI,CAAC,kBAAkB,CAAC,QAAQ,EAAE,SAAS,EAAE,eAAe,CAAC,CAAA;QACpF,IAAM,WAAW,GAAG;YAClB,mBAAW,CAAC,IAAI,CAAC,aAAa,EAAE,cAAc,CAAC,GAAG,CAAC;YACnD,mBAAW,CAAC,IAAI,CAAC,aAAa,EAAE,cAAc,CAAC;SAChD,CAAA;QACD,IAAM,SAAS,GAAG;YAChB,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;YAClC,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;SACnC,CAAA;QACD,IAAM,MAAM,GAAG,SAAS,CAAC,GAAG,CAAC,UAAC,QAAQ;YACpC,OAAO,IAAI,CAAC,GAAG,CAAC,eAAe,GAAG,CAAC,UAAU,GAAG,QAAQ,CAAC,CAAC,CAAA;QAC5D,CAAC,CAAC,CAAA;QAEF,IAAI,WAAW,CAAA;QAEf,IAAI,gBAAO,CAAC,MAAM,CAAC,MAAM,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,KAAK,CAAC,CAAC,CAAC,EAAT,CAAS,CAAC,CAAC,EAAE;YAC5C,mFAAmF;YACnF,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAA;SAC9B;aAAM;YACL,IAAM,UAAU,GAAG,cAAM,CAAC,MAAM,CAAC,CAAA;YACjC,IAAM,eAAe,GAAG,WAAW,CAAC,UAAU,CAAC,CAAA;YAC/C,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,CAAA;SAC5C;QAED,OAAO,WAAW,CAAA;IACpB,CAAC;IAED,sCAAY,GAAZ,UAAa,QAAgB,EAAE,SAAiB,EAAE,eAAuB;QACvE,IAAM,WAAW,GAAG,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,SAAS,EAAE,eAAe,CAAC,CAAA;QAC9E,OAAO,WAAW,CAAC,YAAY,CAAC,QAAQ,EAAE,SAAS,EAAE,eAAe,CAAC,CAAA;IACvE,CAAC;IAED,+CAAqB,GAArB,UAAsB,QAAgB,EAAE,SAAiB,EAAE,SAAc,EAAE,eAAuB;QAChG,IAAM,WAAW,GAAG,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,SAAS,EAAE,eAAe,CAAC,CAAA;QAC9E,OAAO,WAAW,CAAC,qBAAqB,CAAC,QAAQ,EAAE,SAAS,EAAE,SAAS,EAAE,eAAe,CAAC,CAAA;IAC3F,CAAC;IACH,sBAAC;AAAD,CA3EA,AA2EC,CA3EoC,oCAAgB,GA2EpD;AA3EY,0CAAe;AA6E5B,eAAe,CAAC,SAAS,EAAE,CAAA","file":"composite_ticker.js","sourcesContent":["import {TickSpec} from \"./ticker\"\nimport {ContinuousTicker} from \"./continuous_ticker\"\nimport * as p from \"core/properties\"\nimport {argmin, sortedIndex} from \"core/util/array\"\nimport {isEmpty} from \"core/util/object\"\n\n// This Ticker takes a collection of Tickers and picks the one most appropriate\n// for a given range.\n\nexport namespace CompositeTicker {\n  export interface Attrs extends ContinuousTicker.Attrs {\n    tickers: ContinuousTicker[]\n  }\n\n  export interface Props extends ContinuousTicker.Props {}\n}\n\nexport interface CompositeTicker extends CompositeTicker.Attrs {}\n\nexport class CompositeTicker extends ContinuousTicker {\n\n  properties: CompositeTicker.Props\n\n  constructor(attrs?: Partial<CompositeTicker.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = \"CompositeTicker\"\n\n    this.define({\n      tickers: [p.Array, [] ],\n    })\n  }\n\n  // The tickers should be in order of increasing interval size; specifically,\n  // if S comes before T, then it should be the case that\n  // S.get_max_interval() < T.get_min_interval().\n  // FIXME Enforce this automatically.\n\n  get min_intervals(): number[] {\n    return this.tickers.map((ticker) => ticker.get_min_interval())\n  }\n\n  get max_intervals(): number[] {\n    return this.tickers.map((ticker) => ticker.get_max_interval())\n  }\n\n  get min_interval(): number {\n    return this.min_intervals[0]\n  }\n\n  get max_interval(): number {\n    return this.max_intervals[0]\n  }\n\n  get_best_ticker(data_low: number, data_high: number, desired_n_ticks: number): ContinuousTicker {\n    const data_range = data_high - data_low\n    const ideal_interval = this.get_ideal_interval(data_low, data_high, desired_n_ticks)\n    const ticker_ndxs = [\n      sortedIndex(this.min_intervals, ideal_interval) - 1,\n      sortedIndex(this.max_intervals, ideal_interval),\n    ]\n    const intervals = [\n      this.min_intervals[ticker_ndxs[0]],\n      this.max_intervals[ticker_ndxs[1]],\n    ]\n    const errors = intervals.map((interval) => {\n      return Math.abs(desired_n_ticks - (data_range / interval))\n    })\n\n    let best_ticker\n\n    if (isEmpty(errors.filter((e) => !isNaN(e)))) {\n      // this can happen if the data isn't loaded yet, we just default to the first scale\n      best_ticker = this.tickers[0]\n    } else {\n      const best_index = argmin(errors)\n      const best_ticker_ndx = ticker_ndxs[best_index]\n      best_ticker = this.tickers[best_ticker_ndx]\n    }\n\n    return best_ticker\n  }\n\n  get_interval(data_low: number, data_high: number, desired_n_ticks: number): number {\n    const best_ticker = this.get_best_ticker(data_low, data_high, desired_n_ticks)\n    return best_ticker.get_interval(data_low, data_high, desired_n_ticks)\n  }\n\n  get_ticks_no_defaults(data_low: number, data_high: number, cross_loc: any, desired_n_ticks: number): TickSpec<number> {\n    const best_ticker = this.get_best_ticker(data_low, data_high, desired_n_ticks)\n    return best_ticker.get_ticks_no_defaults(data_low, data_high, cross_loc, desired_n_ticks)\n  }\n}\n\nCompositeTicker.initClass()\n"]}