{"version":3,"sources":["models/annotations/legend.ts"],"names":[],"mappings":"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","file":"legend.js","sourcesContent":["import {Annotation, AnnotationView} from \"./annotation\"\nimport {LegendItem} from \"./legend_item\"\nimport {GlyphRendererView} from \"../renderers/glyph_renderer\"\nimport {Color} from \"core/types\"\nimport {Line, Fill, Text} from \"core/visuals\"\nimport {FontStyle, TextAlign, TextBaseline, LineJoin, LineCap} from \"core/enums\"\nimport {Orientation, LegendLocation, LegendClickPolicy} from \"core/enums\"\nimport * as p from \"core/properties\"\nimport {get_text_height} from \"core/util/text\"\nimport {BBox} from \"core/util/bbox\"\nimport {max, all} from \"core/util/array\"\nimport {values} from \"core/util/object\"\nimport {isString, isArray} from \"core/util/types\"\nimport {Context2d} from \"core/util/canvas\"\n\nexport type LegendBBox = {x: number, y: number, width: number, height: number}\n\nexport class LegendView extends AnnotationView {\n  model: Legend\n  visuals: Legend.Visuals\n\n  protected max_label_height: number\n  protected text_widths: {[key: string]: number}\n\n  get cursor(): string | null {\n    return this.model.click_policy == \"none\" ? null : \"pointer\"\n  }\n\n  get legend_padding(): number {\n    return this.visuals.border_line.line_color.value() != null ? this.model.padding : 0\n  }\n\n  connect_signals(): void {\n    super.connect_signals()\n    this.connect(this.model.properties.visible.change, () => this.plot_view.request_render())\n  }\n\n  compute_legend_bbox(): LegendBBox {\n    const legend_names = this.model.get_legend_names()\n\n    const {glyph_height, glyph_width} = this.model\n    const {label_height, label_width} = this.model\n\n    this.max_label_height = max(\n      [get_text_height(this.visuals.label_text.font_value()).height, label_height, glyph_height],\n    )\n\n    // this is to measure text properties\n    const { ctx } = this.plot_view.canvas_view\n    ctx.save()\n    this.visuals.label_text.set_value(ctx)\n    this.text_widths = {}\n    for (const name of legend_names) {\n      this.text_widths[name] = max([ctx.measureText(name).width, label_width])\n    }\n    ctx.restore()\n\n    const max_label_width = Math.max(max(values(this.text_widths)), 0)\n\n    const legend_margin = this.model.margin\n    const {legend_padding} = this\n    const legend_spacing = this.model.spacing\n    const {label_standoff} =  this.model\n\n    let legend_height: number, legend_width: number\n    if (this.model.orientation == \"vertical\") {\n      legend_height = legend_names.length*this.max_label_height + Math.max(legend_names.length - 1, 0)*legend_spacing + 2*legend_padding\n      legend_width = max_label_width + glyph_width + label_standoff + 2*legend_padding\n    } else {\n      legend_width = 2*legend_padding + Math.max(legend_names.length - 1, 0)*legend_spacing\n      for (const name in this.text_widths) {\n        const width = this.text_widths[name]\n        legend_width += max([width, label_width]) + glyph_width + label_standoff\n      }\n      legend_height = this.max_label_height + 2*legend_padding\n    }\n\n    const panel = this.model.panel != null ? this.model.panel : this.plot_view.frame\n    const [hr, vr] = panel.bbox.ranges\n\n    const {location} = this.model\n    let sx: number, sy: number\n    if (isString(location)) {\n      switch (location) {\n        case 'top_left':\n          sx = hr.start + legend_margin\n          sy = vr.start + legend_margin\n          break\n        case 'top_center':\n          sx = (hr.end + hr.start)/2 - legend_width/2\n          sy = vr.start + legend_margin\n          break\n        case 'top_right':\n          sx = hr.end - legend_margin - legend_width\n          sy = vr.start + legend_margin\n          break\n        case 'bottom_right':\n          sx = hr.end - legend_margin - legend_width\n          sy = vr.end - legend_margin - legend_height\n          break\n        case 'bottom_center':\n          sx = (hr.end + hr.start)/2 - legend_width/2\n          sy = vr.end - legend_margin - legend_height\n          break\n        case 'bottom_left':\n          sx = hr.start + legend_margin\n          sy = vr.end - legend_margin - legend_height\n          break\n        case 'center_left':\n          sx = hr.start + legend_margin\n          sy = (vr.end + vr.start)/2 - legend_height/2\n          break\n        case 'center':\n          sx = (hr.end + hr.start)/2 - legend_width/2\n          sy = (vr.end + vr.start)/2 - legend_height/2\n          break\n        case 'center_right':\n          sx = hr.end - legend_margin - legend_width\n          sy = (vr.end + vr.start)/2 - legend_height/2\n          break\n        default:\n          throw new Error(\"unreachable code\")\n      }\n    } else if (isArray(location) && location.length == 2) {\n      const [vx, vy] = location\n      sx = panel.xview.compute(vx)\n      sy = panel.yview.compute(vy) - legend_height\n    } else\n      throw new Error(\"unreachable code\")\n\n    return {x: sx, y: sy, width: legend_width, height: legend_height}\n  }\n\n  bbox(): BBox {\n    const {x, y, width, height} = this.compute_legend_bbox()\n    return new BBox({x, y, width, height})\n  }\n\n  on_hit(sx: number, sy: number): boolean {\n    let yoffset\n    const { glyph_width } = this.model\n    const { legend_padding } = this\n    const legend_spacing = this.model.spacing\n    const { label_standoff } = this.model\n\n    let xoffset = (yoffset = legend_padding)\n\n    const legend_bbox = this.compute_legend_bbox()\n    const vertical = this.model.orientation == \"vertical\"\n\n    for (const item of this.model.items) {\n      const labels = item.get_labels_list_from_label_prop()\n\n      for (const label of labels) {\n        const x1 = legend_bbox.x + xoffset\n        const y1 = legend_bbox.y + yoffset\n\n        let w: number, h: number\n        if (vertical)\n          [w, h] = [legend_bbox.width - 2*legend_padding, this.max_label_height]\n        else\n          [w, h] = [this.text_widths[label] + glyph_width + label_standoff, this.max_label_height]\n\n        const bbox = new BBox({x: x1, y: y1, width: w, height: h})\n\n        if (bbox.contains(sx, sy)) {\n          switch (this.model.click_policy) {\n            case \"hide\": {\n              for (const r of item.renderers)\n                r.visible = !r.visible\n              break\n            }\n            case \"mute\": {\n              for (const r of item.renderers)\n                r.muted = !r.muted\n              break\n            }\n          }\n          return true\n        }\n\n        if (vertical)\n          yoffset += this.max_label_height + legend_spacing\n        else\n          xoffset += this.text_widths[label] + glyph_width + label_standoff + legend_spacing\n      }\n    }\n\n    return false\n  }\n\n  render(): void {\n    if (!this.model.visible)\n      return\n\n    if (this.model.items.length == 0)\n      return\n\n    const {ctx} = this.plot_view.canvas_view\n    const bbox = this.compute_legend_bbox()\n\n    ctx.save()\n    this._draw_legend_box(ctx, bbox)\n    this._draw_legend_items(ctx, bbox)\n    ctx.restore()\n  }\n\n  protected _draw_legend_box(ctx: Context2d, bbox: LegendBBox): void {\n    ctx.beginPath()\n    ctx.rect(bbox.x, bbox.y, bbox.width, bbox.height)\n    this.visuals.background_fill.set_value(ctx)\n    ctx.fill()\n    if (this.visuals.border_line.doit) {\n      this.visuals.border_line.set_value(ctx)\n      ctx.stroke()\n    }\n  }\n\n  protected _draw_legend_items(ctx: Context2d, bbox: LegendBBox): void {\n    const {glyph_width, glyph_height} = this.model\n    const {legend_padding} = this\n    const legend_spacing = this.model.spacing\n    const {label_standoff} = this.model\n    let xoffset = legend_padding\n    let yoffset = legend_padding\n    const vertical = this.model.orientation == \"vertical\"\n\n    for (const item of this.model.items) {\n      const labels = item.get_labels_list_from_label_prop()\n      const field = item.get_field_from_label_prop()\n\n      if (labels.length == 0)\n        continue\n\n      const active = (() => { switch (this.model.click_policy) {\n        case \"none\": return true\n        case \"hide\": return all(item.renderers, r => r.visible)\n        case \"mute\": return all(item.renderers, r => !r.muted)\n      } })()\n\n      for (const label of labels) {\n        const x1 = bbox.x + xoffset\n        const y1 = bbox.y + yoffset\n        const x2 = x1 + glyph_width\n        const y2 = y1 + glyph_height\n\n        if (vertical)\n          yoffset += this.max_label_height + legend_spacing\n        else\n          xoffset += this.text_widths[label] + glyph_width + label_standoff + legend_spacing\n\n        this.visuals.label_text.set_value(ctx)\n        ctx.fillText(label, x2 + label_standoff, y1 + this.max_label_height/2.0)\n        for (const r of item.renderers) {\n          const view = this.plot_view.renderer_views[r.id] as GlyphRendererView\n          view.draw_legend(ctx, x1, x2, y1, y2, field, label)\n        }\n\n        if (!active) {\n          let w: number, h: number\n          if (vertical)\n            [w, h] = [bbox.width - 2*legend_padding, this.max_label_height]\n          else\n            [w, h] = [this.text_widths[label] + glyph_width + label_standoff, this.max_label_height]\n\n          ctx.beginPath()\n          ctx.rect(x1, y1, w, h)\n          this.visuals.inactive_fill.set_value(ctx)\n          ctx.fill()\n        }\n      }\n    }\n  }\n\n  protected _get_size(): number {\n    const bbox = this.compute_legend_bbox()\n    switch (this.model.panel!.side) {\n      case \"above\":\n      case \"below\":\n        return bbox.height + 2*this.model.margin\n      case \"left\":\n      case \"right\":\n        return bbox.width + 2*this.model.margin\n    }\n  }\n}\n\nexport namespace Legend {\n  // text:label_\n  export interface LabelText {\n    label_text_font: string\n    label_text_font_size: string\n    label_text_font_style: FontStyle\n    label_text_color: Color\n    label_text_alpha: number\n    label_text_align: TextAlign\n    label_text_baseline: TextBaseline\n    label_text_line_height: number\n  }\n\n  // fill:inactive_\n  export interface InactiveFill {\n    inactive_fill_color: Color\n    inactive_fill_alpha: number\n  }\n\n  // line:border_\n  export interface BorderLine {\n    border_line_color: Color\n    border_line_width: number\n    border_line_alpha: number\n    border_line_join: LineJoin\n    border_line_cap: LineCap\n    border_line_dash: number[]\n    border_line_dash_offset: number\n  }\n\n  // fill:background_\n  export interface BackgroundFill {\n    background_fill_color: Color\n    background_fill_alpha: number\n  }\n\n  export interface Mixins extends LabelText, InactiveFill, BorderLine, BackgroundFill {}\n\n  export interface Attrs extends Annotation.Attrs, Mixins {\n    orientation: Orientation\n    location: LegendLocation | [number, number]\n    label_standoff: number\n    glyph_height: number\n    glyph_width: number\n    label_height: number\n    label_width: number\n    margin: number\n    padding: number\n    spacing: number\n    items: LegendItem[]\n    click_policy: LegendClickPolicy\n  }\n\n  export interface Props extends Annotation.Props {}\n\n  export type Visuals = Annotation.Visuals & {\n    label_text: Text\n    inactive_fill: Fill\n    border_line: Line\n    background_fill: Fill\n  }\n}\n\nexport interface Legend extends Legend.Attrs {}\n\nexport class Legend extends Annotation {\n\n  properties: Legend.Props\n\n  constructor(attrs?: Partial<Legend.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = 'Legend'\n    this.prototype.default_view = LegendView\n\n    this.mixins(['text:label_', 'fill:inactive_', 'line:border_', 'fill:background_'])\n\n    this.define({\n      orientation:      [ p.Orientation,    'vertical'  ],\n      location:         [ p.Any,            'top_right' ], // TODO (bev)\n      label_standoff:   [ p.Number,         5           ],\n      glyph_height:     [ p.Number,         20          ],\n      glyph_width:      [ p.Number,         20          ],\n      label_height:     [ p.Number,         20          ],\n      label_width:      [ p.Number,         20          ],\n      margin:           [ p.Number,         10          ],\n      padding:          [ p.Number,         10          ],\n      spacing:          [ p.Number,         3           ],\n      items:            [ p.Array,          []          ],\n      click_policy:     [ p.Any,            \"none\"      ],\n    })\n\n    this.override({\n      border_line_color: \"#e5e5e5\",\n      border_line_alpha: 0.5,\n      border_line_width: 1,\n      background_fill_color: \"#ffffff\",\n      background_fill_alpha: 0.95,\n      inactive_fill_color: \"white\",\n      inactive_fill_alpha: 0.7,\n      label_text_font_size: \"10pt\",\n      label_text_baseline: \"middle\",\n    })\n  }\n\n  get_legend_names(): string[] {\n    const legend_names: string[] = []\n    for (const item of this.items) {\n      const labels = item.get_labels_list_from_label_prop()\n      legend_names.push(...labels)\n    }\n    return legend_names\n  }\n}\nLegend.initClass()\n"]}