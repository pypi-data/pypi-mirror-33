{"version":3,"sources":["models/glyphs/image_url.ts"],"names":[],"mappings":"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","file":"image_url.js","sourcesContent":["import {XYGlyph, XYGlyphView, XYGlyphData} from \"./xy_glyph\"\nimport {DistanceSpec, AngleSpec, StringSpec} from \"core/vectorization\"\nimport {Arrayable} from \"core/types\"\nimport {Anchor} from \"core/enums\"\nimport {logger} from \"core/logging\"\nimport * as p from \"core/properties\"\nimport {map} from \"core/util/arrayable\"\nimport {Context2d} from \"core/util/canvas\"\nimport {SpatialIndex} from \"core/util/spatial\"\n\nexport type CanvasImage = HTMLImageElement\nexport const CanvasImage = Image\n\nexport interface ImageURLData extends XYGlyphData {\n  _url: Arrayable<string>\n  _angle: Arrayable<number>\n  _w: Arrayable<number>\n  _h: Arrayable<number>\n\n  sx: Arrayable<number>\n  sy: Arrayable<number>\n  sw: Arrayable<number>\n  sh: Arrayable<number>\n\n  max_w: number\n  max_h: number\n\n  image: Arrayable<CanvasImage | null>\n}\n\nexport interface ImageURLView extends ImageURLData {}\n\nexport class ImageURLView extends XYGlyphView {\n  model: ImageURL\n  visuals: ImageURL.Visuals\n\n  protected retries: Arrayable<number>\n  protected _images_rendered = false\n\n  initialize(options: any): void {\n    super.initialize(options)\n    this.connect(this.model.properties.global_alpha.change, () => this.renderer.request_render())\n  }\n\n  protected _index_data(): SpatialIndex {\n    return new SpatialIndex([])\n  }\n\n  protected _set_data(): void {\n    if (this.image == null || this.image.length != this._url.length)\n      this.image = map(this._url, () => null)\n\n    const {retry_attempts, retry_timeout} = this.model\n\n    this.retries = map(this._url, () => retry_attempts)\n\n    for (let i = 0, end = this._url.length; i < end; i++) {\n      if (this._url[i] == null)\n        continue\n\n      const img = new CanvasImage()\n      img.onerror = () => {\n        if (this.retries[i] > 0) {\n          logger.trace(`ImageURL failed to load ${this._url[i]} image, retrying in ${retry_timeout} ms`)\n          setTimeout(() => img.src = this._url[i], retry_timeout)\n        } else\n          logger.warn(`ImageURL unable to load ${this._url[i]} image after ${retry_attempts} retries`)\n\n        this.retries[i] -= 1\n      }\n      img.onload = () => {\n        this.image[i] = img\n        this.renderer.request_render()\n      }\n      img.src = this._url[i]\n    }\n  }\n\n  has_finished(): boolean {\n    return super.has_finished() && this._images_rendered == true\n  }\n\n  protected _map_data(): void {\n    // Better to check this.model.w and this.model.h for null since the set_data\n    // machinery will have converted this._w and this._w to lists of null\n    const ws = this.model.w != null ? this._w : map(this._x, () => NaN)\n    const hs = this.model.h != null ? this._h : map(this._x, () => NaN)\n\n    switch (this.model.properties.w.units) {\n      case \"data\": {\n        this.sw = this.sdist(this.renderer.xscale, this._x, ws, \"edge\", this.model.dilate)\n        break\n      }\n      case \"screen\": {\n        this.sw = ws\n        break\n      }\n    }\n\n    switch (this.model.properties.h.units) {\n      case \"data\": {\n        this.sh = this.sdist(this.renderer.yscale, this._y, hs, \"edge\", this.model.dilate)\n        break\n      }\n      case \"screen\": {\n        this.sh = hs\n        break\n      }\n    }\n  }\n\n  protected _render(ctx: Context2d, indices: number[],\n                    {_url, image, sx, sy, sw, sh, _angle}: ImageURLData): void {\n\n    // TODO (bev): take actual border width into account when clipping\n    const {frame} = this.renderer.plot_view\n    ctx.rect(\n      frame._left.value+1, frame._top.value+1,\n      frame._width.value-2, frame._height.value-2,\n    )\n    ctx.clip()\n\n    let finished = true\n\n    for (const i of indices) {\n      if (isNaN(sx[i] + sy[i] + _angle[i]))\n        continue\n\n      if (this.retries[i] == -1)\n        continue\n\n      const img = image[i]\n\n      if (img == null) {\n        finished = false\n        continue\n      }\n\n      this._render_image(ctx, i, img, sx, sy, sw, sh, _angle)\n    }\n\n    if (finished && !this._images_rendered) {\n      this._images_rendered = true\n      this.notify_finished()\n    }\n  }\n\n  protected _final_sx_sy(anchor: Anchor, sx: number, sy: number, sw: number, sh: number): [number, number] {\n    switch (anchor) {\n      case 'top_left':      return [sx         , sy         ]\n      case 'top_center':    return [sx - (sw/2), sy         ]\n      case 'top_right':     return [sx - sw    , sy         ]\n      case 'center_right':  return [sx - sw    , sy - (sh/2)]\n      case 'bottom_right':  return [sx - sw    , sy - sh    ]\n      case 'bottom_center': return [sx - (sw/2), sy - sh    ]\n      case 'bottom_left':   return [sx         , sy - sh    ]\n      case 'center_left':   return [sx         , sy - (sh/2)]\n      case 'center':        return [sx - (sw/2), sy - (sh/2)]\n    }\n  }\n\n  protected _render_image(ctx: Context2d, i: number, image: CanvasImage,\n                          sx: Arrayable<number>, sy: Arrayable<number>,\n                          sw: Arrayable<number>, sh: Arrayable<number>,\n                          angle: Arrayable<number>): void {\n    if (isNaN(sw[i])) sw[i] = image.width\n    if (isNaN(sh[i])) sh[i] = image.height\n\n    const {anchor} = this.model\n    const [sxi, syi] = this._final_sx_sy(anchor, sx[i], sy[i], sw[i], sh[i])\n\n    ctx.save()\n    ctx.globalAlpha = this.model.global_alpha\n\n    if (angle[i]) {\n      ctx.translate(sxi, syi)\n      ctx.rotate(angle[i])\n      ctx.drawImage(image, 0, 0, sw[i], sh[i])\n      ctx.rotate(-angle[i])\n      ctx.translate(-sxi, -syi)\n    } else\n      ctx.drawImage(image, sxi, syi, sw[i], sh[i])\n\n    ctx.restore()\n  }\n}\n\nexport namespace ImageURL {\n  export interface Attrs extends XYGlyph.Attrs {\n    url: StringSpec\n    anchor: Anchor\n    global_alpha: number\n    angle: AngleSpec\n    w: DistanceSpec\n    h: DistanceSpec\n    dilate: boolean\n    retry_attempts: number\n    retry_timeout: number\n  }\n\n  export interface Props extends XYGlyph.Props {\n    url: p.StringSpec\n    anchor: p.Property<Anchor>\n    global_alpha: p.Property<number>\n    angle: p.AngleSpec\n    w: p.DistanceSpec\n    h: p.DistanceSpec\n    dilate: p.Property<boolean>\n    retry_attempts: p.Property<number>\n    retry_timeout: p.Property<number>\n  }\n\n  export interface Visuals extends XYGlyph.Visuals {}\n}\n\nexport interface ImageURL extends ImageURL.Attrs {}\n\nexport class ImageURL extends XYGlyph {\n\n  properties: ImageURL.Props\n\n  constructor(attrs?: Partial<ImageURL.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = 'ImageURL'\n    this.prototype.default_view = ImageURLView\n\n    this.define({\n      url:            [ p.StringSpec            ],\n      anchor:         [ p.Anchor,    'top_left' ],\n      global_alpha:   [ p.Number,    1.0        ],\n      angle:          [ p.AngleSpec, 0          ],\n      w:              [ p.DistanceSpec          ],\n      h:              [ p.DistanceSpec          ],\n      dilate:         [ p.Bool,      false      ],\n      retry_attempts: [ p.Number,    0          ],\n      retry_timeout:  [ p.Number,    0          ],\n    })\n  }\n}\nImageURL.initClass()\n"]}