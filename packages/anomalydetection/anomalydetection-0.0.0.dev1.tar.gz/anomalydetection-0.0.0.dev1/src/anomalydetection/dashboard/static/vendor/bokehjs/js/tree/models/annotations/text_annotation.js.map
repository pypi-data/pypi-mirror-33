{"version":3,"sources":["models/annotations/text_annotation.ts"],"names":[],"mappings":"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","file":"text_annotation.js","sourcesContent":["import {Annotation, AnnotationView} from \"./annotation\"\nimport {Text, Line, Fill} from \"core/visuals\"\nimport {show, hide} from \"core/dom\"\nimport {RenderMode} from \"core/enums\"\nimport * as p from \"core/properties\"\nimport {get_text_height} from \"core/util/text\"\nimport {Context2d} from \"core/util/canvas\"\n\nexport abstract class TextAnnotationView extends AnnotationView {\n  model: TextAnnotation\n  visuals: TextAnnotation.Visuals\n\n  initialize(options: any): void {\n    super.initialize(options)\n\n    if (this.model.render_mode == 'css') {\n      this.el.classList.add('bk-annotation')\n      this.plot_view.canvas_overlays.appendChild(this.el)\n    }\n  }\n\n  connect_signals(): void {\n    super.connect_signals()\n    if (this.model.render_mode == 'css') {\n      // dispatch CSS update immediately\n      this.connect(this.model.change, () => this.render())\n    } else {\n      this.connect(this.model.change, () => this.plot_view.request_render())\n    }\n  }\n\n  protected _calculate_text_dimensions(ctx: Context2d, text: string): [number, number] {\n    const {width} = ctx.measureText(text)\n    const {height} = get_text_height(this.visuals.text.font_value())\n    return [width, height]\n  }\n\n  protected _calculate_bounding_box_dimensions(ctx: Context2d, text: string): [number, number, number, number] {\n    const [width, height] = this._calculate_text_dimensions(ctx, text)\n\n    let x_offset: number\n    switch (ctx.textAlign) {\n      case 'left':   x_offset = 0;          break\n      case 'center': x_offset = -width / 2; break\n      case 'right':  x_offset = -width;     break\n      default:\n        throw new Error(\"unreachable code\")\n    }\n\n    // guestimated from https://www.w3.org/TR/2dcontext/#dom-context-2d-textbaseline\n    let y_offset: number\n    switch (ctx.textBaseline) {\n      case 'top':         y_offset =  0.0;           break\n      case 'middle':      y_offset = -0.5  * height; break\n      case 'bottom':      y_offset = -1.0  * height; break\n      case 'alphabetic':  y_offset = -0.8  * height; break\n      case 'hanging':     y_offset = -0.17 * height; break\n      case 'ideographic': y_offset = -0.83 * height; break\n      default:\n        throw new Error(\"unreachable code\")\n    }\n\n    return [x_offset, y_offset, width, height]\n  }\n\n  abstract render(): void\n\n  protected _canvas_text(ctx: Context2d, text: string, sx: number, sy: number, angle: number): void {\n    this.visuals.text.set_value(ctx)\n    const bbox_dims = this._calculate_bounding_box_dimensions(ctx, text)\n\n    ctx.save()\n\n    ctx.beginPath()\n    ctx.translate(sx, sy)\n\n    if (angle)\n      ctx.rotate(angle)\n\n    ctx.rect(bbox_dims[0], bbox_dims[1], bbox_dims[2], bbox_dims[3])\n\n    if (this.visuals.background_fill.doit) {\n      this.visuals.background_fill.set_value(ctx)\n      ctx.fill()\n    }\n\n    if (this.visuals.border_line.doit) {\n      this.visuals.border_line.set_value(ctx)\n      ctx.stroke()\n    }\n\n    if (this.visuals.text.doit) {\n      this.visuals.text.set_value(ctx)\n      ctx.fillText(text, 0, 0)\n    }\n\n    ctx.restore()\n  }\n\n  protected _css_text(ctx: Context2d, text: string, sx: number, sy: number, angle: number): void {\n    hide(this.el)\n\n    this.visuals.text.set_value(ctx)\n    const bbox_dims = this._calculate_bounding_box_dimensions(ctx, text)\n\n    // attempt to support vector string-style (\"8 4 8\") line dashing for css mode\n    const ld = this.visuals.border_line.line_dash.value()\n    const line_dash = ld.length < 2 ? \"solid\" : \"dashed\"\n\n    this.visuals.border_line.set_value(ctx)\n    this.visuals.background_fill.set_value(ctx)\n\n    this.el.style.position = 'absolute'\n    this.el.style.left = `${sx + bbox_dims[0]}px`\n    this.el.style.top = `${sy + bbox_dims[1]}px`\n    this.el.style.color = `${this.visuals.text.text_color.value()}`\n    this.el.style.opacity = `${this.visuals.text.text_alpha.value()}`\n    this.el.style.font = `${this.visuals.text.font_value()}`\n    this.el.style.lineHeight = \"normal\"; // needed to prevent ipynb css override\n\n    if (angle) {\n      this.el.style.transform = `rotate(${angle}rad)`\n    }\n\n    if (this.visuals.background_fill.doit) {\n      this.el.style.backgroundColor = `${this.visuals.background_fill.color_value()}`\n    }\n\n    if (this.visuals.border_line.doit) {\n      this.el.style.borderStyle = `${line_dash}`\n      this.el.style.borderWidth = `${this.visuals.border_line.line_width.value()}px`\n      this.el.style.borderColor = `${this.visuals.border_line.color_value()}`\n    }\n\n    this.el.textContent = text\n    show(this.el)\n  }\n}\n\nexport namespace TextAnnotation {\n  export interface Attrs extends Annotation.Attrs {\n    render_mode: RenderMode\n  }\n\n  export interface Props extends Annotation.Props {}\n\n  export type Visuals = Annotation.Visuals & {\n    text: Text\n    border_line: Line\n    background_fill: Fill\n  }\n}\n\nexport interface TextAnnotation extends TextAnnotation.Attrs {}\n\nexport abstract class TextAnnotation extends Annotation {\n\n  properties: TextAnnotation.Props\n\n  constructor(attrs?: Partial<TextAnnotation.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = \"TextAnnotation\"\n\n    this.define({\n      render_mode: [ p.RenderMode, \"canvas\" ],\n    })\n  }\n}\nTextAnnotation.initClass()\n"]}