{"version":3,"sources":["core/util/arrayable.ts"],"names":[],"mappings":"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","file":"arrayable.js","sourcesContent":["import {Arrayable} from \"../types\"\n\nexport function splice<T>(array: Arrayable<T>, start: number, k?: number, ...items: T[]): Arrayable<T> {\n  const len = array.length\n\n  if (start < 0)\n    start += len\n\n  if (start < 0)\n    start = 0\n  else if (start > len)\n    start = len\n\n  if (k == null || k > len - start)\n    k = len - start\n  else if (k < 0)\n    k = 0\n\n  const n = len - k + items.length\n\n  const result = new (array.constructor as any)(n) as Arrayable<T>\n\n  let i = 0\n  for (; i < start; i++) {\n    result[i] = array[i]\n  }\n\n  for (const item of items) {\n    result[i++] = item\n  }\n\n  for (let j = start + k; j < len; j++) {\n    result[i++] = array[j]\n  }\n\n  return result\n}\n\nexport function insert<T>(array: Arrayable<T>, item: T, i: number): Arrayable<T> {\n  return splice(array, i, 0, item)\n}\n\nexport function append<T>(array: Arrayable<T>, item: T): Arrayable<T> {\n  return splice(array, array.length, 0, item)\n}\n\nexport function prepend<T>(array: Arrayable<T>, item: T): Arrayable<T> {\n  return splice(array, 0, 0, item)\n}\n\nexport function indexOf<T>(array: Arrayable<T>, item: T): number {\n  for (let i = 0, n = array.length; i < n; i++) {\n    if (array[i] === item)\n      return i\n  }\n\n  return -1\n}\n\nexport function map<T, U>(array: Arrayable<T>, fn: (item: T, i: number, array: Arrayable<T>) => U): Arrayable<U> {\n  const n = array.length\n  const result: Arrayable<U> = new (array.constructor as any)(n)\n  for (let i = 0; i < n; i++) {\n    result[i] = fn(array[i], i, array)\n  }\n  return result\n}\n\nexport function min(array: Arrayable<number>): number {\n  let value: number\n  let result = Infinity\n\n  for (let i = 0, length = array.length; i < length; i++) {\n    value = array[i]\n    if (value < result) {\n      result = value\n    }\n  }\n\n  return result\n}\n\nexport function minBy<T>(array: Arrayable<T>, key: (item: T) => number): T {\n  if (array.length == 0)\n    throw new Error(\"minBy() called with an empty array\")\n\n  let result = array[0]\n  let resultComputed = key(result)\n\n  for (let i = 1, length = array.length; i < length; i++) {\n    const value = array[i]\n    const computed = key(value)\n    if (computed < resultComputed) {\n      result = value\n      resultComputed = computed\n    }\n  }\n\n  return result\n}\n\nexport function max(array: Arrayable<number>): number {\n  let value: number\n  let result = -Infinity\n\n  for (let i = 0, length = array.length; i < length; i++) {\n    value = array[i]\n    if (value > result) {\n      result = value\n    }\n  }\n\n  return result\n}\n\nexport function maxBy<T>(array: Arrayable<T>, key: (item: T) => number): T {\n  if (array.length == 0)\n    throw new Error(\"maxBy() called with an empty array\")\n\n  let result = array[0]\n  let resultComputed = key(result)\n\n  for (let i = 1, length = array.length; i < length; i++) {\n    const value = array[i]\n    const computed = key(value)\n    if (computed > resultComputed) {\n      result = value\n      resultComputed = computed\n    }\n  }\n\n  return result\n}\n\nexport function sum(array: Arrayable<number>): number {\n  let result = 0\n  for (let i = 0, n = array.length; i < n; i++) {\n    result += array[i]\n  }\n  return result\n}\n"]}