{"version":3,"sources":["models/sources/ajax_data_source.ts"],"names":[],"mappings":"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","file":"ajax_data_source.js","sourcesContent":["import {RemoteDataSource} from \"./remote_data_source\"\nimport {UpdateMode, HTTPMethod} from \"core/enums\"\nimport {logger} from \"core/logging\"\nimport * as p from \"core/properties\"\n\nexport namespace AjaxDataSource {\n  export interface Attrs extends RemoteDataSource.Attrs {\n    mode: UpdateMode\n    content_type: string\n    http_headers: {[key: string]: string}\n    max_size: number\n    method: HTTPMethod\n    if_modified: boolean\n  }\n\n  export interface Props extends RemoteDataSource.Props {}\n}\n\nexport interface AjaxDataSource extends AjaxDataSource.Attrs {}\n\nexport class AjaxDataSource extends RemoteDataSource {\n\n  properties: AjaxDataSource.Props\n\n  constructor(attrs?: Partial<AjaxDataSource.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = 'AjaxDataSource'\n\n    this.define({\n      mode:         [ p.String, 'replace'          ],\n      content_type: [ p.String, 'application/json' ],\n      http_headers: [ p.Any,    {}                 ],\n      max_size:     [ p.Number                     ],\n      method:       [ p.String, 'POST'             ], // TODO (bev)  enum?\n      if_modified:  [ p.Bool,   false              ],\n    })\n  }\n\n  protected interval: number\n  protected initialized: boolean = false\n\n  destroy(): void {\n    if (this.interval != null)\n      clearInterval(this.interval)\n    super.destroy()\n  }\n\n  setup(): void {\n    if (!this.initialized) {\n      this.initialized = true\n      this.get_data(this.mode)\n      if (this.polling_interval) {\n        const callback = () => this.get_data(this.mode, this.max_size, this.if_modified)\n        this.interval = setInterval(callback, this.polling_interval)\n      }\n    }\n  }\n\n  get_data(mode: UpdateMode, max_size: number = 0, _if_modified: boolean = false): void {\n    const xhr = this.prepare_request()\n\n    // TODO: if_modified\n    xhr.addEventListener(\"load\", () => this.do_load(xhr, mode, max_size))\n    xhr.addEventListener(\"error\", () => this.do_error(xhr))\n\n    xhr.send()\n  }\n\n  prepare_request(): XMLHttpRequest {\n    const xhr = new XMLHttpRequest()\n    xhr.open(this.method, this.data_url, true)\n    xhr.withCredentials = false\n    xhr.setRequestHeader(\"Content-Type\", this.content_type)\n\n    const http_headers = this.http_headers\n    for (const name in http_headers) {\n      const value = http_headers[name]\n      xhr.setRequestHeader(name, value)\n    }\n\n    return xhr\n  }\n\n  do_load(xhr: XMLHttpRequest, mode: UpdateMode, max_size: number): void {\n    if (xhr.status === 200) {\n      const data = JSON.parse(xhr.responseText)\n      switch (mode) {\n        case \"replace\": {\n          this.data = data\n          break\n        }\n        case \"append\": {\n          const original_data = this.data\n          for (const column of this.columns()) {\n            // XXX: support typed arrays\n            const old_col = Array.from(original_data[column])\n            const new_col = Array.from(data[column])\n            data[column] = old_col.concat(new_col).slice(-max_size)\n          }\n          this.data = data\n          break\n        }\n      }\n    }\n  }\n\n  do_error(xhr: XMLHttpRequest): void {\n    logger.error(`Failed to fetch JSON from ${this.data_url} with code ${xhr.status}`)\n  }\n}\nAjaxDataSource.initClass()\n"]}