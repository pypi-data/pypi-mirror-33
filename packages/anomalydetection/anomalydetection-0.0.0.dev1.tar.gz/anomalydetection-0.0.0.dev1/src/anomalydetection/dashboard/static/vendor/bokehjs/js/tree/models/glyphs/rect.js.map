{"version":3,"sources":["models/glyphs/rect.ts"],"names":[],"mappings":"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","file":"rect.js","sourcesContent":["import {XYGlyph, XYGlyphView, XYGlyphData} from \"./xy_glyph\"\nimport {generic_area_legend} from \"./utils\"\nimport {PointGeometry, RectGeometry} from \"core/geometry\"\nimport {DistanceSpec, AngleSpec} from \"core/vectorization\"\nimport {LineMixinVector, FillMixinVector} from \"core/property_mixins\"\nimport {Line, Fill} from \"core/visuals\"\nimport {Arrayable} from \"core/types\"\nimport * as hittest from \"core/hittest\"\nimport * as p from \"core/properties\"\nimport * as spatial from \"core/util/spatial\"\nimport {IBBox} from \"core/util/bbox\"\nimport {max} from \"core/util/arrayable\"\nimport {Context2d} from \"core/util/canvas\"\nimport {Selection} from \"../selections/selection\"\nimport {Scale} from \"../scales/scale\"\n\nexport interface RectData extends XYGlyphData {\n  _angle: Arrayable<number>\n  _width: Arrayable<number>\n  _height: Arrayable<number>\n\n  sw: Arrayable<number>\n  sx0: Arrayable<number>\n  sh: Arrayable<number>\n  sy1: Arrayable<number>\n  ssemi_diag: Arrayable<number>\n\n  max_width: number\n  max_height: number\n\n  max_w2: number\n  max_h2: number\n}\n\nexport interface RectView extends RectData {}\n\nexport class RectView extends XYGlyphView {\n  model: Rect\n  visuals: Rect.Visuals\n\n  protected _set_data(): void {\n    this.max_w2 = 0\n    if (this.model.properties.width.units == \"data\")\n      this.max_w2 = this.max_width/2\n\n    this.max_h2 = 0\n    if (this.model.properties.height.units == \"data\")\n      this.max_h2 = this.max_height/2\n  }\n\n  protected _map_data(): void {\n    if (this.model.properties.width.units == \"data\")\n      [this.sw, this.sx0] = this._map_dist_corner_for_data_side_length(this._x, this._width, this.renderer.xscale)\n    else {\n      this.sw = this._width\n\n      const n = this.sx.length\n      this.sx0 = new Float64Array(n)\n      for (let i = 0; i < n; i++)\n        this.sx0[i] = this.sx[i] - this.sw[i]/2\n    }\n\n    if (this.model.properties.height.units == \"data\")\n      [this.sh, this.sy1] = this._map_dist_corner_for_data_side_length(this._y, this._height, this.renderer.yscale)\n    else {\n      this.sh = this._height\n\n      const n =  this.sy.length\n      this.sy1 = new Float64Array(n)\n      for (let i = 0; i < n; i++)\n        this.sy1[i] = this.sy[i] - this.sh[i]/2\n    }\n\n    const n = this.sw.length\n    this.ssemi_diag = new Float64Array(n)\n    for (let i = 0; i < n; i++)\n      this.ssemi_diag[i] = Math.sqrt((this.sw[i]/2 * this.sw[i])/2 + (this.sh[i]/2 * this.sh[i])/2)\n  }\n\n  protected _render(ctx: Context2d, indices: number[], {sx, sy, sx0, sy1, sw, sh, _angle}: RectData): void {\n    if (this.visuals.fill.doit) {\n      for (const i of indices) {\n        if (isNaN(sx[i] + sy[i] + sx0[i] + sy1[i] + sw[i] + sh[i] + _angle[i]))\n          continue\n\n        //no need to test the return value, we call fillRect for every glyph anyway\n        this.visuals.fill.set_vectorize(ctx, i)\n\n        if (_angle[i]) {\n          ctx.translate(sx[i], sy[i])\n          ctx.rotate(_angle[i])\n          ctx.fillRect(-sw[i]/2, -sh[i]/2, sw[i], sh[i])\n          ctx.rotate(-_angle[i])\n          ctx.translate(-sx[i], -sy[i])\n        } else\n          ctx.fillRect(sx0[i], sy1[i], sw[i], sh[i])\n      }\n    }\n\n    if (this.visuals.line.doit) {\n      ctx.beginPath()\n\n      for (const i of indices) {\n        if (isNaN(sx[i] + sy[i] + sx0[i] + sy1[i] + sw[i] + sh[i] + _angle[i]))\n          continue\n\n        // fillRect does not fill zero-height or -width rects, but rect(...)\n        // does seem to stroke them (1px wide or tall). Explicitly ignore rects\n        // with zero width or height to be consistent\n        if (sw[i] == 0 || sh[i] == 0)\n          continue\n\n        if (_angle[i]) {\n          ctx.translate(sx[i], sy[i])\n          ctx.rotate(_angle[i])\n          ctx.rect(-sw[i]/2, -sh[i]/2, sw[i], sh[i])\n          ctx.rotate(-_angle[i])\n          ctx.translate(-sx[i], -sy[i])\n        } else\n          ctx.rect(sx0[i], sy1[i], sw[i], sh[i])\n\n        this.visuals.line.set_vectorize(ctx, i)\n        ctx.stroke()\n        ctx.beginPath()\n      }\n\n      ctx.stroke()\n    }\n  }\n\n  protected _hit_rect(geometry: RectGeometry): Selection {\n    return this._hit_rect_against_index(geometry)\n  }\n\n  protected _hit_point(geometry: PointGeometry): Selection {\n    let {sx, sy} = geometry\n\n    const x = this.renderer.xscale.invert(sx)\n    const y = this.renderer.yscale.invert(sy)\n\n    const scenter_x = []\n    for (let i = 0, end = this.sx0.length; i < end; i++) {\n      scenter_x.push(this.sx0[i] + this.sw[i]/2)\n    }\n\n    const scenter_y = []\n    for (let i = 0, end = this.sy1.length; i < end; i++) {\n      scenter_y.push(this.sy1[i] + this.sh[i]/2)\n    }\n\n    const max_x2_ddist = max(this._ddist(0, scenter_x, this.ssemi_diag))\n    const max_y2_ddist = max(this._ddist(1, scenter_y, this.ssemi_diag))\n\n    const x0 = x - max_x2_ddist\n    const x1 = x + max_x2_ddist\n    const y0 = y - max_y2_ddist\n    const y1 = y + max_y2_ddist\n\n    const hits = []\n\n    const bbox = hittest.validate_bbox_coords([x0, x1], [y0, y1])\n    for (const i of this.index.indices(bbox)) {\n      let height_in: boolean, width_in: boolean\n      if (this._angle[i]) {\n        const s = Math.sin(-this._angle[i])\n        const c = Math.cos(-this._angle[i])\n        const px = c*(sx - this.sx[i]) - s*(sy - this.sy[i]) + this.sx[i]\n        const py = s*(sx - this.sx[i]) + c*(sy - this.sy[i]) + this.sy[i]\n        sx = px\n        sy = py\n        width_in = Math.abs(this.sx[i] - sx) <= this.sw[i]/2\n        height_in = Math.abs(this.sy[i] - sy) <= this.sh[i]/2\n      } else {\n        width_in = (sx - this.sx0[i] <= this.sw[i]) && (sx - this.sx0[i] >= 0)\n        height_in = (sy - this.sy1[i] <= this.sh[i]) && (sy - this.sy1[i] >= 0)\n      }\n\n      if (height_in && width_in)\n        hits.push(i)\n    }\n\n    const result = hittest.create_empty_hit_test_result()\n    result.indices = hits\n    return result\n  }\n\n  protected _map_dist_corner_for_data_side_length(coord: Arrayable<number>, side_length: Arrayable<number>,\n                                                  scale: Scale): [Arrayable<number>, Arrayable<number>] {\n    const n = coord.length\n\n    const pt0 = new Float64Array(n)\n    const pt1 = new Float64Array(n)\n\n    for (let i = 0; i < n; i++) {\n      pt0[i] = Number(coord[i]) - side_length[i]/2\n      pt1[i] = Number(coord[i]) + side_length[i]/2\n    }\n\n    const spt0 = scale.v_compute(pt0)\n    const spt1 = scale.v_compute(pt1)\n\n    const sside_length = this.sdist(scale, pt0, side_length, 'edge', this.model.dilate)\n\n    let spt_corner = spt0\n    for (let i = 0, end = spt0.length; i < end; i++) {\n      if (spt0[i] != spt1[i]) {\n        spt_corner = spt0[i] < spt1[i] ? spt0 : spt1\n        break\n      }\n    }\n\n    return [sside_length, spt_corner]\n  }\n\n  protected _ddist(dim: 0 | 1, spts: Arrayable<number>, spans: Arrayable<number>): Arrayable<number> {\n    const scale = dim == 0 ? this.renderer.xscale : this.renderer.yscale\n\n    const spt0 = spts\n\n    const m = spt0.length\n    const spt1 = new Float64Array(m)\n    for (let i = 0; i < m; i++)\n      spt1[i] = spt0[i] + spans[i]\n\n    const pt0 = scale.v_invert(spt0)\n    const pt1 = scale.v_invert(spt1)\n\n    const n = pt0.length\n    const ddist = new Float64Array(n)\n    for (let i = 0; i < n; i++)\n      ddist[i] = Math.abs(pt1[i] - pt0[i])\n    return ddist\n  }\n\n  draw_legend_for_index(ctx: Context2d, bbox: IBBox, index: number): void {\n    generic_area_legend(this.visuals, ctx, bbox, index)\n  }\n\n  protected _bounds({minX, maxX, minY, maxY}: spatial.Rect): spatial.Rect {\n    return {\n      minX: minX - this.max_w2,\n      maxX: maxX + this.max_w2,\n      minY: minY - this.max_h2,\n      maxY: maxY + this.max_h2,\n    }\n  }\n}\n\nexport namespace Rect {\n  export interface Mixins extends LineMixinVector, FillMixinVector {}\n\n  export interface Attrs extends XYGlyph.Attrs, Mixins {\n    angle: AngleSpec\n    width: DistanceSpec\n    height: DistanceSpec\n    dilate: boolean\n  }\n\n  export interface Props extends XYGlyph.Props {\n    angle: p.AngleSpec\n    width: p.DistanceSpec\n    height: p.DistanceSpec\n    dilate: p.Property<boolean>\n  }\n\n  export interface Visuals extends XYGlyph.Visuals {\n    line: Line\n    fill: Fill\n  }\n}\n\nexport interface Rect extends Rect.Attrs {}\n\nexport class Rect extends XYGlyph {\n\n  properties: Rect.Props\n\n  constructor(attrs?: Partial<Rect.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = 'Rect'\n    this.prototype.default_view = RectView\n\n    this.mixins(['line', 'fill'])\n    this.define({\n      angle:  [ p.AngleSpec,   0     ],\n      width:  [ p.DistanceSpec       ],\n      height: [ p.DistanceSpec       ],\n      dilate: [ p.Bool,        false ],\n    })\n  }\n}\nRect.initClass()\n"]}