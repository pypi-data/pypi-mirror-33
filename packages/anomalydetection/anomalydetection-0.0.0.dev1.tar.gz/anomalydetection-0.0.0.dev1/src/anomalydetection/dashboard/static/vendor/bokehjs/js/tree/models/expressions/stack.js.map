{"version":3,"sources":["models/expressions/stack.ts"],"names":[],"mappings":";;;AACA,2CAAuC;AAEvC,mCAAoC;AAYpC;IAA2B,iCAAU;IAInC,eAAY,KAA4B;eACtC,kBAAM,KAAK,CAAC;IACd,CAAC;IAEM,eAAS,GAAhB;QACE,IAAI,CAAC,SAAS,CAAC,IAAI,GAAG,OAAO,CAAA;QAE7B,IAAI,CAAC,MAAM,CAAC;YACV,MAAM,EAAE,CAAE,CAAC,CAAC,KAAK,EAAE,EAAE,CAAE;SACxB,CAAC,CAAA;IACJ,CAAC;IAED,0BAAU,GAAV,UAAW,MAA0B;QACnC,IAAM,MAAM,GAAG,IAAI,YAAY,CAAC,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC,CAAA;QACzD,KAAgB,UAAW,EAAX,KAAA,IAAI,CAAC,MAAM,EAAX,cAAW,EAAX,IAAW;YAAtB,IAAM,CAAC,SAAA;YACV,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBAC9C,IAAM,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;gBAC3B,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAA;aACf;SACF;QACD,OAAO,MAAM,CAAA;IACf,CAAC;IACH,YAAC;AAAD,CA1BA,AA0BC,CA1B0B,uBAAU,GA0BpC;AA1BY,sBAAK;AA2BlB,KAAK,CAAC,SAAS,EAAE,CAAA","file":"stack.js","sourcesContent":["import {ColumnarDataSource} from \"../sources/columnar_data_source\"\nimport {Expression} from \"./expression\"\nimport {Arrayable} from \"core/types\"\nimport * as p from \"core/properties\"\n\nexport namespace Stack {\n  export interface Attrs extends Expression.Attrs {\n    fields: string[]\n  }\n\n  export interface Props extends Expression.Props {}\n}\n\nexport interface Stack extends Stack.Attrs {}\n\nexport class Stack extends Expression {\n\n  properties: Stack.Props\n\n  constructor(attrs?: Partial<Stack.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = \"Stack\"\n\n    this.define({\n      fields: [ p.Array, [] ],\n    })\n  }\n\n  _v_compute(source: ColumnarDataSource): Arrayable<number> {\n    const result = new Float64Array(source.get_length() || 0)\n    for (const f of this.fields) {\n      for (let i = 0; i < source.data[f].length; i++) {\n        const x = source.data[f][i]\n        result[i] += x\n      }\n    }\n    return result\n  }\n}\nStack.initClass()\n"]}