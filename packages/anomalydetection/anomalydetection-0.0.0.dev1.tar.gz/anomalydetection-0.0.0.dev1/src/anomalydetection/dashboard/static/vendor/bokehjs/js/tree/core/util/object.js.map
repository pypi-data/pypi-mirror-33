{"version":3,"sources":["core/util/object.ts"],"names":[],"mappings":";;AAAA,iCAAqC;AAExB,QAAA,IAAI,GAAG,MAAM,CAAC,IAAI,CAAA;AAE/B,gBAA0B,MAA0B;IAClD,IAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;IAChC,IAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAA;IAC1B,IAAM,MAAM,GAAG,IAAI,KAAK,CAAI,MAAM,CAAC,CAAA;IACnC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE;QAC/B,MAAM,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAA;KAC5B;IACD,OAAO,MAAM,CAAA;AACf,CAAC;AARD,wBAQC;AAKD,gBAA0B,IAAS;IAAE,iBAAiB;SAAjB,UAAiB,EAAjB,qBAAiB,EAAjB,IAAiB;QAAjB,gCAAiB;;IACpD,KAAqB,UAAO,EAAP,mBAAO,EAAP,qBAAO,EAAP,IAAO;QAAvB,IAAM,MAAM,gBAAA;QACf,KAAK,IAAM,GAAG,IAAI,MAAM,EAAE;YACxB,IAAI,MAAM,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE;gBAC9B,IAAI,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,CAAA;aACxB;SACF;KACF;IAED,OAAO,IAAI,CAAA;AACb,CAAC;AAVD,wBAUC;AAED,eAAyB,GAAM;IAC7B,OAAO,MAAM,CAAC,EAAE,EAAE,GAAG,CAAC,CAAA;AACxB,CAAC;AAFD,sBAEC;AAED,eAAyB,IAA2B,EAAE,IAA0B;IAC9E;;OAEG;IACH,IAAM,MAAM,GAAyB,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;IAErE,IAAM,IAAI,GAAG,cAAM,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;IAE3D,KAAkB,UAAI,EAAJ,aAAI,EAAJ,kBAAI,EAAJ,IAAI;QAAjB,IAAM,GAAG,aAAA;QACZ,IAAM,IAAI,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAA;QACtD,IAAM,IAAI,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAA;QACtD,MAAM,CAAC,GAAG,CAAC,GAAG,aAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAA;KAChC;IAED,OAAO,MAAM,CAAA;AACf,CAAC;AAfD,sBAeC;AAED,cAAwB,GAAM;IAC5B,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,CAAA;AAChC,CAAC;AAFD,oBAEC;AAED,iBAA2B,GAAM;IAC/B,OAAO,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAA;AACxB,CAAC;AAFD,0BAEC","file":"object.js","sourcesContent":["import {concat, union} from \"./array\"\n\nexport const keys = Object.keys\n\nexport function values<T>(object: {[key: string]: T}): T[] {\n  const keys = Object.keys(object)\n  const length = keys.length\n  const values = new Array<T>(length)\n  for (let i = 0; i < length; i++) {\n    values[i] = object[keys[i]]\n  }\n  return values\n}\n\nexport function extend<T, T1>(dest: T, src: T1): T & T1;\nexport function extend<T, T1, T2>(dest: T, src1: T1, src2: T2): T & T1 & T2;\nexport function extend<T, T1, T2, T3>(dest: T, src1: T1, src2: T2, src3: T3): T & T1 & T2 & T3;\nexport function extend<R>(dest: any, ...sources: any[]): R {\n  for (const source of sources) {\n    for (const key in source) {\n      if (source.hasOwnProperty(key)) {\n        dest[key] = source[key]\n      }\n    }\n  }\n\n  return dest\n}\n\nexport function clone<T>(obj: T): T {\n  return extend({}, obj)\n}\n\nexport function merge<T>(obj1: {[key: string] : T[]}, obj2: {[key: string]: T[]}): {[key: string]: T[]} {\n  /*\n   * Returns an object with the array values for obj1 and obj2 unioned by key.\n   */\n  const result: {[key: string]: T[]} = Object.create(Object.prototype);\n\n  const keys = concat([Object.keys(obj1), Object.keys(obj2)])\n\n  for (const key of keys){\n    const arr1 = obj1.hasOwnProperty(key) ? obj1[key] : []\n    const arr2 = obj2.hasOwnProperty(key) ? obj2[key] : []\n    result[key] = union(arr1, arr2)\n  }\n\n  return result\n}\n\nexport function size<T>(obj: T): number {\n  return Object.keys(obj).length\n}\n\nexport function isEmpty<T>(obj: T): boolean {\n  return size(obj) === 0\n}\n"]}