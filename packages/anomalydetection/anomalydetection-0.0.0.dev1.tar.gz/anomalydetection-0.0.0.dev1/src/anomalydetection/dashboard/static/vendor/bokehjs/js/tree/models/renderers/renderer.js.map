{"version":3,"sources":["models/renderers/renderer.ts"],"names":[],"mappings":";;;AAAA,0CAAqC;AACrC,sCAAuC;AAGvC,mCAAoC;AAEpC,qCAAiC;AAIjC,8DAA8D;AAC9D;IAA2C,wCAAO;IAAlD;;IA8BA,CAAC;IAxBC,iCAAU,GAAV,UAAW,OAAY;QACrB,iBAAM,UAAU,YAAC,OAAO,CAAC,CAAA;QACzB,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,CAAA;QAClC,IAAI,CAAC,OAAO,GAAG,IAAI,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;QAC9C,IAAI,CAAC,aAAa,GAAG,IAAI,CAAA,CAAC,kEAAkE;IAC9F,CAAC;IAED,sBAAI,oCAAU;aAAd;YACE,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,CAAA;QAC7B,CAAC;;;OAAA;IAED,qCAAc,GAAd;QACE,IAAI,CAAC,SAAS,CAAC,cAAc,EAAE,CAAA;IACjC,CAAC;IAED,oCAAa,GAAb,UAAc,CAAoB,EAAE,CAAoB;QACtD,OAAO,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC,EAAG,IAAI,CAAC,KAAa,CAAC,YAAY,EAAG,IAAI,CAAC,KAAa,CAAC,YAAY,CAAC,CAAA;IAC/G,CAAC;IAID,sBAAI,oCAAU;aAAd;YACE,OAAO,KAAK,CAAA;QACd,CAAC;;;OAAA;IACH,mBAAC;AAAD,CA9BA,AA8BC,CA9B0C,kBAAO,GA8BjD;AA9BqB,oCAAY;AAgDlC;IAAuC,oCAAK;IAI1C,kBAAY,KAA+B;eACzC,kBAAM,KAAK,CAAC;IACd,CAAC;IAEM,kBAAS,GAAhB;QACE,IAAI,CAAC,SAAS,CAAC,IAAI,GAAG,UAAU,CAAA;QAEhC,IAAI,CAAC,MAAM,CAAC;YACV,KAAK,EAAE,CAAE,CAAC,CAAC,WAAW,CAAE;YACxB,OAAO,EAAE,CAAE,CAAC,CAAC,IAAI,EAAE,IAAI,CAAE;SAC1B,CAAC,CAAA;IACJ,CAAC;IACH,eAAC;AAAD,CAhBA,AAgBC,CAhBsC,aAAK,GAgB3C;AAhBqB,4BAAQ;AAiB9B,QAAQ,CAAC,SAAS,EAAE,CAAA","file":"renderer.js","sourcesContent":["import {DOMView} from \"core/dom_view\"\nimport * as visuals from \"core/visuals\"\nimport {RenderLevel} from \"core/enums\"\nimport {Arrayable} from \"core/types\"\nimport * as p from \"core/properties\"\nimport {BBox} from \"core/util/bbox\"\nimport {Model} from \"../../model\"\n\nimport {PlotCanvas, PlotCanvasView} from \"../plots/plot_canvas\"\n\n// This shouldn't be a DOMView, but annotations create a mess.\nexport abstract class RendererView extends DOMView {\n  model: Renderer\n  visuals: Renderer.Visuals\n\n  plot_view: PlotCanvasView\n\n  initialize(options: any): void {\n    super.initialize(options)\n    this.plot_view = options.plot_view\n    this.visuals = new visuals.Visuals(this.model)\n    this._has_finished = true // XXX: should be in render() but subclasses don't respect super()\n  }\n\n  get plot_model(): PlotCanvas {\n    return this.plot_view.model\n  }\n\n  request_render(): void {\n    this.plot_view.request_render()\n  }\n\n  map_to_screen(x: Arrayable<number>, y: Arrayable<number>): [Arrayable<number>, Arrayable<number>] {\n    return this.plot_view.map_to_screen(x, y, (this.model as any).x_range_name, (this.model as any).y_range_name)\n  }\n\n  bbox?(): BBox\n\n  get needs_clip(): boolean {\n    return false\n  }\n}\n\nexport namespace Renderer {\n  export interface Attrs extends Model.Attrs {\n    level: RenderLevel\n    visible: boolean\n  }\n\n  export interface Props extends Model.Props {\n    level: p.Property<RenderLevel>\n    visible: p.Property<boolean>\n  }\n\n  export type Visuals = visuals.Visuals\n}\n\nexport interface Renderer extends Renderer.Attrs {}\n\nexport abstract class Renderer extends Model {\n\n  properties: Renderer.Props\n\n  constructor(attrs?: Partial<Renderer.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = \"Renderer\"\n\n    this.define({\n      level: [ p.RenderLevel ],\n      visible: [ p.Bool, true ],\n    })\n  }\n}\nRenderer.initClass()\n"]}