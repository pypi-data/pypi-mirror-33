{"version":3,"sources":["models/tickers/days_ticker.ts"],"names":[],"mappings":"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","file":"days_ticker.js","sourcesContent":["import {TickSpec} from \"./ticker\"\nimport {SingleIntervalTicker} from \"./single_interval_ticker\"\nimport {copy_date,last_month_no_later_than,ONE_DAY} from \"./util\"\nimport * as p from \"core/properties\"\nimport {concat} from \"core/util/array\"\n\n// Given a start and end time in millis, returns the shortest array of\n// consecutive months (as Dates) that surrounds both times.\nfunction date_range_by_month(start_time: number, end_time: number): Date[] {\n  const start_date = last_month_no_later_than(new Date(start_time))\n  const end_date = last_month_no_later_than(new Date(end_time))\n\n  // XXX This is not a reliable technique in general, but it should be\n  // safe when the day of the month is 1.  (The problem case is this:\n  // Mar 31 -> Apr 31, which becomes May 1.)\n  end_date.setUTCMonth(end_date.getUTCMonth() + 1)\n\n  const dates = []\n  const date = start_date\n  while (true) {\n    dates.push(copy_date(date))\n\n    date.setUTCMonth(date.getUTCMonth() + 1)\n    if (date > end_date)\n      break\n  }\n\n  return dates\n}\n\n// A DaysTicker produces ticks from a fixed subset of calendar days.\n// E.g., DaysTicker([1, 15]) produces ticks on the 1st and 15th days of each\n// month.\n\nexport namespace DaysTicker {\n  export interface Attrs extends SingleIntervalTicker.Attrs {\n    days: number[]\n  }\n\n  export interface Props extends SingleIntervalTicker.Props {}\n}\n\nexport interface DaysTicker extends DaysTicker.Attrs {}\n\nexport class DaysTicker extends SingleIntervalTicker {\n\n  properties: DaysTicker.Props\n\n  constructor(attrs?: Partial<DaysTicker.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = \"DaysTicker\"\n\n    this.define({\n      days: [ p.Array, [] ],\n    })\n\n    this.override({\n      num_minor_ticks: 0,\n    })\n  }\n\n  initialize(): void {\n    super.initialize()\n    const days = this.days\n    if (days.length > 1)\n      this.interval = (days[1] - days[0])*ONE_DAY\n    else\n      this.interval = 31*ONE_DAY\n  }\n\n  get_ticks_no_defaults(data_low: number, data_high: number, _cross_loc: any, _desired_n_ticks: number): TickSpec<number> {\n    const month_dates = date_range_by_month(data_low, data_high)\n\n    const days = this.days\n    const days_of_month = (month_date: Date, interval: number) => {\n      const dates = []\n      for (const day of days) {\n        const day_date = copy_date(month_date)\n        day_date.setUTCDate(day)\n        // We can't use all of the values in this.days, because they may not\n        // fall within the current month.  In fact, if, e.g., our month is 28 days\n        // and we're marking every third day, we don't want day 28 to show up\n        // because it'll be right next to the 1st of the next month.  So we\n        // make sure we have a bit of room before we include a day.\n        const future_date = new Date(day_date.getTime() + (interval / 2))\n        if (future_date.getUTCMonth() == month_date.getUTCMonth())\n          dates.push(day_date)\n      }\n      return dates\n    }\n\n    const interval = this.interval\n    const day_dates = concat(month_dates.map((date) => days_of_month(date, interval)))\n\n    const all_ticks = day_dates.map((day_date) => day_date.getTime())\n    // FIXME Since the ticks are sorted, this could be done more efficiently.\n    const ticks_in_range = all_ticks.filter((tick) => data_low <= tick && tick <= data_high)\n\n    return {\n      major: ticks_in_range,\n      minor: [],\n    }\n  }\n}\n\nDaysTicker.initClass()\n"]}