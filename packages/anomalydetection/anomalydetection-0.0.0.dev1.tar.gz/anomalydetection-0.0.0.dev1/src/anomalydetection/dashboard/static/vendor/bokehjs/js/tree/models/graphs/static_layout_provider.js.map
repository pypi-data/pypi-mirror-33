{"version":3,"sources":["models/graphs/static_layout_provider.ts"],"names":[],"mappings":"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","file":"static_layout_provider.js","sourcesContent":["import {LayoutProvider} from \"./layout_provider\"\nimport {ColumnarDataSource} from \"../sources/columnar_data_source\"\nimport * as p from \"../../core/properties\"\n\nexport namespace StaticLayoutProvider {\n  export interface Attrs extends LayoutProvider.Attrs {\n    graph_layout: {[key: string]: [number, number]}\n  }\n\n  export interface Props extends LayoutProvider.Props {}\n}\n\nexport interface StaticLayoutProvider extends StaticLayoutProvider.Attrs {}\n\nexport class StaticLayoutProvider extends LayoutProvider {\n\n  properties: StaticLayoutProvider.Props\n\n  constructor(attrs?: Partial<StaticLayoutProvider.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = \"StaticLayoutProvider\"\n\n    this.define({\n      graph_layout: [ p.Any, {} ],\n    })\n  }\n\n  get_node_coordinates(node_source: ColumnarDataSource): [number[], number[]] {\n    const xs: number[] = []\n    const ys: number[] = []\n    const index = node_source.data.index\n    for (let i = 0, end = index.length; i < end; i++) {\n      const point = this.graph_layout[index[i]]\n      const [x, y] = point != null ? point : [NaN, NaN]\n      xs.push(x)\n      ys.push(y)\n    }\n    return [xs, ys]\n  }\n\n  get_edge_coordinates(edge_source: ColumnarDataSource): [[number, number][], [number, number][]] {\n    const xs: [number, number][] = []\n    const ys: [number, number][] = []\n    const starts = edge_source.data.start\n    const ends = edge_source.data.end\n    const has_paths = (edge_source.data.xs != null) && (edge_source.data.ys != null)\n    for (let i = 0, endi = starts.length; i < endi; i++) {\n      const in_layout = (this.graph_layout[starts[i]] != null) && (this.graph_layout[ends[i]] != null)\n      if (has_paths && in_layout) {\n        xs.push(edge_source.data.xs[i])\n        ys.push(edge_source.data.ys[i])\n      } else {\n        let end, start\n        if (in_layout)\n          [start, end] = [this.graph_layout[starts[i]], this.graph_layout[ends[i]]]\n        else\n          [start, end] = [[NaN, NaN], [NaN, NaN]]\n        xs.push([start[0], end[0]])\n        ys.push([start[1], end[1]])\n      }\n    }\n    return [xs, ys]\n  }\n}\nStaticLayoutProvider.initClass()\n"]}