{"version":3,"sources":["core/logging.ts"],"names":[],"mappings":"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","file":"logging.js","sourcesContent":["// This is based on https://github.com/pimterry/loglevel\n\nimport {isString} from \"./util/types\"\n\nconst _loggers: {[key: string]: Logger} = {}\n\nexport class LogLevel {\n  constructor(readonly name: string, readonly level: number) {}\n}\n\nexport class Logger {\n\n  static TRACE = new LogLevel(\"trace\", 0)\n  static DEBUG = new LogLevel(\"debug\", 1)\n  static INFO  = new LogLevel(\"info\",  2)\n  static WARN  = new LogLevel(\"warn\",  6)\n  static ERROR = new LogLevel(\"error\", 7)\n  static FATAL = new LogLevel(\"fatal\", 8)\n  static OFF   = new LogLevel(\"off\",   9)\n\n  static log_levels: {[key: string]: LogLevel} = {\n    trace: Logger.TRACE,\n    debug: Logger.DEBUG,\n    info:  Logger.INFO,\n    warn:  Logger.WARN,\n    error: Logger.ERROR,\n    fatal: Logger.FATAL,\n    off:   Logger.OFF,\n  }\n\n  static get levels(): string[] {\n    return Object.keys(Logger.log_levels)\n  }\n\n  static get(name: string, level: LogLevel = Logger.INFO): Logger {\n    if (name.length > 0) {\n      let logger = _loggers[name]\n      if (logger == null)\n        _loggers[name] = logger = new Logger(name, level)\n      return logger\n    } else\n      throw new TypeError(\"Logger.get() expects a non-empty string name and an optional log-level\")\n  }\n\n  _name: string\n  _log_level: LogLevel\n\n  constructor(name: string, level: LogLevel = Logger.INFO) {\n    this._name = name\n    this.set_level(level)\n  }\n\n  get level(): LogLevel {\n    return this.get_level()\n  }\n\n  get_level(): LogLevel {\n    return this._log_level\n  }\n\n  set_level(log_level: LogLevel | string): void {\n    if (log_level instanceof LogLevel)\n      this._log_level = log_level\n    else if (isString(log_level) && Logger.log_levels[log_level] != null)\n      this._log_level = Logger.log_levels[log_level]\n    else\n      throw new Error(\"Logger.set_level() expects a log-level object or a string name of a log-level\")\n\n    const logger_name = `[${this._name}]`\n\n    for (const name in Logger.log_levels) {\n      const log_level = Logger.log_levels[name]\n\n      if (log_level.level < this._log_level.level || this._log_level.level === Logger.OFF.level)\n        (this as any)[name] = function() {}\n      else\n        (this as any)[name] = _method_factory(name, logger_name)\n    }\n  }\n\n  trace(..._args: any[]): void {}\n\n  debug(..._args: any[]): void {}\n\n  info(..._args: any[]): void {}\n\n  warn(..._args: any[]): void {}\n\n  error(..._args: any[]): void {}\n}\n\nfunction _method_factory(method_name: string, logger_name: string): (...args: any[]) => void  {\n  if ((console as any)[method_name] != null)\n    return (console as any)[method_name].bind(console, logger_name)\n  else if (console.log != null)\n    return console.log.bind(console, logger_name)\n  else\n    return function() {}\n}\n\nexport const logger = Logger.get(\"bokeh\")\n\nexport function set_log_level(level: string): void {\n  if (Logger.log_levels[level] == null) {\n    console.log(`[bokeh] unrecognized logging level '${level}' passed to Bokeh.set_log_level(), ignoring`)\n    console.log(`[bokeh] valid log levels are: ${Logger.levels.join(', ')}`)\n  } else {\n    console.log(`[bokeh] setting log level to: '${level}'`)\n    logger.set_level(level)\n  }\n}\n"]}