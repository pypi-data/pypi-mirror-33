{"version":3,"sources":["models/tools/gestures/select_tool.ts"],"names":[],"mappings":"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","file":"select_tool.js","sourcesContent":["import {GestureTool, GestureToolView} from \"./gesture_tool\"\nimport {GraphRenderer} from \"../../renderers/graph_renderer\"\nimport {compute_renderers, DataRenderer, RendererSpec} from \"../util\"\nimport * as p from \"core/properties\"\nimport {extend} from \"core/util/object\"\nimport {KeyEvent} from \"core/ui_events\"\nimport {Keys} from \"core/dom\"\nimport {SelectionGeometry} from \"core/bokeh_events\"\nimport {Geometry} from \"core/geometry\"\n\nexport abstract class SelectToolView extends GestureToolView {\n  model: SelectTool\n\n  get computed_renderers(): DataRenderer[] {\n    const renderers = this.model.renderers\n    const all_renderers = this.plot_model.plot.renderers\n    const names = this.model.names\n    return compute_renderers(renderers, all_renderers, names)\n  }\n\n  _computed_renderers_by_data_source(): {[key: string]: DataRenderer[]} {\n    const renderers_by_source: {[key: string]: DataRenderer[]} = {}\n    for (const r of this.computed_renderers) {\n      let source_id: string\n      // XXX: needs typings for renderers\n      if (r instanceof GraphRenderer)\n        source_id = (r as any).node_renderer.data_source.id\n      else\n        source_id = (r as any).data_source.id\n\n      if (!(source_id in renderers_by_source))\n        renderers_by_source[source_id] = []\n\n      renderers_by_source[source_id].push(r)\n    }\n\n    return renderers_by_source\n  }\n\n  _keyup(ev: KeyEvent): void {\n    if (ev.keyCode == Keys.Esc) {\n      for (const r of this.computed_renderers) {\n        // XXX: needs typings for renderers\n        const ds = (r as any).data_source\n        const sm = ds.selection_manager\n        sm.clear()\n      }\n    }\n  }\n\n  _select(geometry: Geometry, final: boolean, append: boolean): void {\n    const renderers_by_source = this._computed_renderers_by_data_source()\n\n    for (const id in renderers_by_source) {\n      const renderers = renderers_by_source[id]\n      const sm = renderers[0].get_selection_manager()\n\n      const r_views = []\n      for (const r of renderers) {\n        if (r.id in this.plot_view.renderer_views)\n          r_views.push(this.plot_view.renderer_views[r.id])\n      }\n      sm.select(r_views, geometry, final, append)\n    }\n\n    // XXX: messed up class structure\n    if ((this.model as any).callback != null)\n      (this as any)._emit_callback(geometry)\n\n    this._emit_selection_event(geometry, final)\n  }\n\n  _emit_selection_event(geometry: Geometry, final: boolean = true): void {\n    const xm = this.plot_model.frame.xscales['default']\n    const ym = this.plot_model.frame.yscales['default']\n    let g: any // XXX: Geometry & something\n    switch (geometry.type) {\n      case 'point': {\n        const {sx, sy} = geometry\n        const x = xm.invert(sx)\n        const y = ym.invert(sy)\n        g = extend({}, geometry, {x, y})\n        break\n      }\n      case 'rect': {\n        const {sx0, sx1, sy0, sy1} = geometry\n        const [x0, x1] = xm.r_invert(sx0, sx1)\n        const [y0, y1] = ym.r_invert(sy0, sy1)\n        g = extend({}, geometry, {x0, y0, x1, y1})\n        break\n      }\n      case 'poly': {\n        const {sx, sy} = geometry\n        const x = xm.v_invert(sx)\n        const y = ym.v_invert(sy)\n        g = extend({}, geometry, {x, y})\n        break\n      }\n      default:\n        throw new Error(`Unrecognized selection geometry type: '${geometry.type}'`)\n    }\n\n    this.plot_model.plot.trigger_event(new SelectionGeometry({geometry: g, final: final}))\n  }\n}\n\nexport namespace SelectTool {\n  export interface Attrs extends GestureTool.Attrs {\n    renderers: RendererSpec\n    names: string[]\n  }\n\n  export interface Props extends GestureTool.Props {}\n}\n\nexport interface SelectTool extends SelectTool.Attrs {}\n\nexport abstract class SelectTool extends GestureTool {\n\n  properties: SelectTool.Props\n\n  constructor(attrs?: Partial<SelectTool.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = \"SelectTool\"\n\n    this.define({\n      renderers: [ p.Any,   'auto' ],\n      names:     [ p.Array, []     ],\n    })\n  }\n}\n\nSelectTool.initClass()\n"]}