{"version":3,"sources":["models/sources/geojson_data_source.ts"],"names":[],"mappings":";;;AAKA,+DAAyD;AACzD,wCAAmC;AACnC,mCAAoC;AAEpC,yCAAqC;AA0BrC;IAAuC,6CAAkB;IAIvD,2BAAY,KAAwC;eAClD,kBAAM,KAAK,CAAC;IACd,CAAC;IAEM,2BAAS,GAAhB;QACE,IAAI,CAAC,SAAS,CAAC,IAAI,GAAG,mBAAmB,CAAA;QAEzC,IAAI,CAAC,MAAM,CAAC;YACV,OAAO,EAAE,CAAE,CAAC,CAAC,GAAG,CAAE;SACnB,CAAC,CAAA;QAEF,IAAI,CAAC,QAAQ,CAAC;YACZ,IAAI,EAAK,CAAE,CAAC,CAAC,GAAG,EAAE,EAAE,CAAE;SACvB,CAAC,CAAA;IACJ,CAAC;IAED,sCAAU,GAAV;QACE,iBAAM,UAAU,WAAE,CAAA;QAClB,IAAI,CAAC,YAAY,EAAE,CAAA;IACrB,CAAC;IAED,2CAAe,GAAf;QAAA,iBAGC;QAFC,iBAAM,eAAe,WAAE,CAAA;QACvB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,MAAM,EAAE,cAAM,OAAA,KAAI,CAAC,YAAY,EAAE,EAAnB,CAAmB,CAAC,CAAA;IACzE,CAAC;IAES,wCAAY,GAAtB;QACE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,sBAAsB,EAAE,CAAA;IAC3C,CAAC;IAES,+CAAmB,GAA7B,UAA8B,MAAc;QAC1C,OAAO,aAAK,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,GAAG,CAAC,UAAC,EAAE,IAAK,OAAA,EAAE,EAAF,CAAE,CAAC,CAAA;IACzC,CAAC;IAES,8CAAkB,GAA5B,UAA6B,MAAc;QACzC,OAAO,aAAK,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,GAAG,CAAC,UAAC,EAAE,IAAK,OAAA,GAAG,EAAH,CAAG,CAAC,CAAA;IAC1C,CAAC;IAES,2CAAe,GAAzB,UAA0B,IAAsB,EAAE,IAAa,EAAE,CAAS,EAAE,UAAkB;QAC5F,IAAM,UAAU,GAAG,IAAI,CAAC,UAAU,IAAI,EAAE,CAAA;QACxC,KAAK,IAAM,QAAQ,IAAI,UAAU,EAAE;YACjC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC;gBAChC,IAAI,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAA;YACtD,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC,QAAQ,CAAC,CAAA;SACzC;IACH,CAAC;IAES,yCAAa,GAAvB,UAAwB,QAAiB,EAAE,IAAa,EAAE,CAAS;QAEjE,eAAe,CAAqB;YAClC,OAAO,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAA;QAC5B,CAAC;QAED,iBAAiB,GAAe,EAAE,IAAgB;YAChD,OAAO,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;QACnD,CAAC;QAED,QAAQ,QAAQ,CAAC,IAAI,EAAE;YACrB,KAAK,OAAO,CAAC,CAAC;gBACN,IAAA,yBAAgC,EAA/B,SAAC,EAAE,SAAC,EAAE,SAAC,CAAwB;gBACtC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;gBACb,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;gBACb,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAA;gBACpB,MAAK;aACN;YACD,KAAK,YAAY,CAAC,CAAC;gBACV,IAAA,kCAAW,CAAY;gBAC9B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBACrC,IAAA,mBAA0B,EAAzB,SAAC,EAAE,SAAC,EAAE,SAAC,CAAkB;oBAChC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;oBACjB,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;oBACjB,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAA;iBACzB;gBACD,MAAK;aACN;YACD,KAAK,SAAS,CAAC,CAAC;gBACd,IAAI,QAAQ,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC;oBACjC,gBAAM,CAAC,IAAI,CAAC,yEAAyE,CAAC,CAAA;gBAExF,IAAM,aAAa,GAAG,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,CAAA;gBAC7C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBACvC,IAAA,qBAA4B,EAA3B,SAAC,EAAE,SAAC,EAAE,SAAC,CAAoB;oBAClC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;oBACjB,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;oBACjB,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAA;iBACzB;gBACD,MAAK;aACN;YACD,KAAK,YAAY,CAAC,CAAC;gBACjB,gBAAM,CAAC,IAAI,CAAC,mCAAmC,CAAC,CAAA;gBAChD,MAAK;aACN;YACD,KAAK,iBAAiB,CAAC,CAAC;gBACtB,IAAM,WAAW,GAAG,QAAQ,CAAC,WAAW,CAAC,MAAM,CAAC,OAAO,CAAC,CAAA;gBACxD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBACrC,IAAA,mBAA0B,EAAzB,SAAC,EAAE,SAAC,EAAE,SAAC,CAAkB;oBAChC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;oBACjB,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;oBACjB,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAA;iBACzB;gBACD,MAAK;aACN;YACD,KAAK,cAAc,CAAC,CAAC;gBACnB,IAAM,cAAc,GAAG,EAAE,CAAA;gBACzB,KAAsB,UAAoB,EAApB,KAAA,QAAQ,CAAC,WAAW,EAApB,cAAoB,EAApB,IAAoB;oBAArC,IAAM,OAAO,SAAA;oBAChB,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC;wBACpB,gBAAM,CAAC,IAAI,CAAC,yEAAyE,CAAC,CAAA;oBACxF,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAA;iBAChC;gBAED,IAAM,WAAW,GAAG,cAAc,CAAC,MAAM,CAAC,OAAO,CAAC,CAAA;gBAClD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBACrC,IAAA,mBAA0B,EAAzB,SAAC,EAAE,SAAC,EAAE,SAAC,CAAkB;oBAChC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;oBACjB,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;oBACjB,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAA;iBACzB;gBACD,MAAK;aACN;YACD;gBACE,MAAM,IAAI,KAAK,CAAC,oCAAkC,QAAQ,CAAC,IAAM,CAAC,CAAA;SACrE;IACH,CAAC;IAED,kDAAsB,GAAtB;QACE,IAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAoD,CAAA;QAE3F,IAAI,KAAqC,CAAA;QACzC,QAAQ,OAAO,CAAC,IAAI,EAAE;YACpB,KAAK,oBAAoB,CAAC,CAAC;gBACzB,IAAI,OAAO,CAAC,UAAU,IAAI,IAAI;oBAC5B,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAA;gBAE9D,IAAI,OAAO,CAAC,UAAU,CAAC,MAAM,KAAK,CAAC;oBACjC,MAAM,IAAI,KAAK,CAAC,gDAAgD,CAAC,CAAA;gBAEnE,KAAK,GAAG,OAAO,CAAC,UAAU,CAAA;gBAC1B,MAAK;aACN;YACD,KAAK,mBAAmB,CAAC,CAAC;gBACxB,IAAI,OAAO,CAAC,QAAQ,IAAI,IAAI;oBAC1B,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAA;gBAE5D,IAAI,OAAO,CAAC,QAAQ,CAAC,MAAM,IAAI,CAAC;oBAC9B,MAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAA;gBAEjE,KAAK,GAAG,OAAO,CAAC,QAAQ,CAAA;gBACxB,MAAK;aACN;YACD;gBACE,MAAM,IAAI,KAAK,CAAC,gFAAgF,CAAC,CAAA;SACpG;QAED,IAAI,UAAU,GAAG,CAAC,CAAA;QAClB,KAAmB,UAAK,EAAL,eAAK,EAAL,mBAAK,EAAL,IAAK;YAAnB,IAAM,IAAI,cAAA;YACb,IAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,KAAK,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,QAAS,CAAC,CAAC,CAAC,IAAI,CAAA;YAChE,IAAI,QAAQ,CAAC,IAAI,IAAI,oBAAoB;gBACvC,UAAU,IAAI,QAAQ,CAAC,UAAU,CAAC,MAAM,CAAA;;gBAExC,UAAU,IAAI,CAAC,CAAA;SAClB;QAED,IAAM,IAAI,GAAY;YACpB,CAAC,EAAE,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC;YACtC,CAAC,EAAE,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC;YACtC,CAAC,EAAE,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC;YACtC,EAAE,EAAE,IAAI,CAAC,mBAAmB,CAAC,UAAU,CAAC;YACxC,EAAE,EAAE,IAAI,CAAC,mBAAmB,CAAC,UAAU,CAAC;YACxC,EAAE,EAAE,IAAI,CAAC,mBAAmB,CAAC,UAAU,CAAC;SACzC,CAAA;QAED,IAAI,SAAS,GAAG,CAAC,CAAA;QACjB,KAAmB,UAAK,EAAL,eAAK,EAAL,mBAAK,EAAL,IAAK;YAAnB,IAAM,IAAI,cAAA;YACb,IAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,IAAI,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,QAAS,CAAC,CAAC,CAAC,IAAI,CAAA;YAE/D,IAAI,QAAQ,CAAC,IAAI,IAAI,oBAAoB,EAAE;gBACzC,KAAgB,UAAmB,EAAnB,KAAA,QAAQ,CAAC,UAAU,EAAnB,cAAmB,EAAnB,IAAmB;oBAA9B,IAAM,CAAC,SAAA;oBACV,IAAI,CAAC,aAAa,CAAC,CAAC,EAAE,IAAI,EAAE,SAAS,CAAC,CAAA;oBACtC,IAAI,IAAI,CAAC,IAAI,KAAK,SAAS;wBACzB,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,UAAU,CAAC,CAAA;oBACzD,SAAS,IAAI,CAAC,CAAA;iBACf;aACF;iBAAM;gBACL,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,IAAI,EAAE,SAAS,CAAC,CAAA;gBAC7C,IAAI,IAAI,CAAC,IAAI,KAAK,SAAS;oBACzB,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,UAAU,CAAC,CAAA;gBACzD,SAAS,IAAI,CAAC,CAAA;aACf;SACF;QAED,OAAO,IAAI,CAAA;IACb,CAAC;IACH,wBAAC;AAAD,CApMA,AAoMC,CApMsC,yCAAkB,GAoMxD;AApMY,8CAAiB;AAqM9B,iBAAiB,CAAC,SAAS,EAAE,CAAA","file":"geojson_data_source.js","sourcesContent":["import {\n  FeatureCollection, GeometryCollection, Feature, Position,\n  Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon,\n} from \"geojson\"\n\nimport {ColumnarDataSource} from \"./columnar_data_source\"\nimport {logger} from \"core/logging\"\nimport * as p from \"core/properties\"\nimport {Arrayable} from \"core/types\"\nimport {range} from \"core/util/array\"\n\nexport type GeoItem = Point | MultiPoint | LineString | MultiLineString | Polygon | MultiPolygon | GeometryCollection\n\nexport type GeoData = {\n  x: Arrayable<number>\n  y: Arrayable<number>\n  z: Arrayable<number>\n  xs: Arrayable<Arrayable<number>>\n  ys: Arrayable<Arrayable<number>>\n  zs: Arrayable<Arrayable<number>>\n  [key: string]: Arrayable\n}\n\nexport namespace GeoJSONDataSource {\n  export interface Attrs extends ColumnarDataSource.Attrs {\n    geojson: string\n  }\n\n  export interface Props extends ColumnarDataSource.Props {\n    geojson: p.Property<string>\n  }\n}\n\nexport interface GeoJSONDataSource extends GeoJSONDataSource.Attrs {}\n\nexport class GeoJSONDataSource extends ColumnarDataSource {\n\n  properties: GeoJSONDataSource.Props\n\n  constructor(attrs?: Partial<GeoJSONDataSource.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = 'GeoJSONDataSource'\n\n    this.define({\n      geojson: [ p.Any ], // TODO (bev)\n    })\n\n    this.internal({\n      data:    [ p.Any, {} ],\n    })\n  }\n\n  initialize(): void {\n    super.initialize()\n    this._update_data()\n  }\n\n  connect_signals(): void {\n    super.connect_signals()\n    this.connect(this.properties.geojson.change, () => this._update_data())\n  }\n\n  protected _update_data(): void {\n    this.data = this.geojson_to_column_data()\n  }\n\n  protected _get_new_list_array(length: number): number[][] {\n    return range(0, length).map((_i) => [])\n  }\n\n  protected _get_new_nan_array(length: number): number[] {\n    return range(0, length).map((_i) => NaN)\n  }\n\n  protected _add_properties(item: Feature<GeoItem>, data: GeoData, i: number, item_count: number): void {\n    const properties = item.properties || {}\n    for (const property in properties) {\n      if (!data.hasOwnProperty(property))\n        data[property] = this._get_new_nan_array(item_count)\n      data[property][i] = properties[property]\n    }\n  }\n\n  protected _add_geometry(geometry: GeoItem, data: GeoData, i: number): void {\n\n    function orNaN(v: number | undefined) {\n      return v != null ? v : NaN\n    }\n\n    function flatten(acc: Position[], item: Position[]) {\n      return acc.concat([[NaN, NaN, NaN]]).concat(item)\n    }\n\n    switch (geometry.type) {\n      case \"Point\": {\n        const [x, y, z] = geometry.coordinates\n        data.x[i] = x\n        data.y[i] = y\n        data.z[i] = orNaN(z)\n        break\n      }\n      case \"LineString\": {\n        const {coordinates} = geometry\n        for (let j = 0; j < coordinates.length; j++) {\n          const [x, y, z] = coordinates[j]\n          data.xs[i][j] = x\n          data.ys[i][j] = y\n          data.zs[i][j] = orNaN(z)\n        }\n        break\n      }\n      case \"Polygon\": {\n        if (geometry.coordinates.length > 1)\n          logger.warn('Bokeh does not support Polygons with holes in, only exterior ring used.')\n\n        const exterior_ring = geometry.coordinates[0]\n        for (let j = 0; j < exterior_ring.length; j++) {\n          const [x, y, z] = exterior_ring[j]\n          data.xs[i][j] = x\n          data.ys[i][j] = y\n          data.zs[i][j] = orNaN(z)\n        }\n        break\n      }\n      case \"MultiPoint\": {\n        logger.warn('MultiPoint not supported in Bokeh')\n        break\n      }\n      case \"MultiLineString\": {\n        const coordinates = geometry.coordinates.reduce(flatten)\n        for (let j = 0; j < coordinates.length; j++) {\n          const [x, y, z] = coordinates[j]\n          data.xs[i][j] = x\n          data.ys[i][j] = y\n          data.zs[i][j] = orNaN(z)\n        }\n        break\n      }\n      case \"MultiPolygon\": {\n        const exterior_rings = []\n        for (const polygon of geometry.coordinates) {\n          if (polygon.length > 1)\n            logger.warn('Bokeh does not support Polygons with holes in, only exterior ring used.')\n          exterior_rings.push(polygon[0])\n        }\n\n        const coordinates = exterior_rings.reduce(flatten)\n        for (let j = 0; j < coordinates.length; j++) {\n          const [x, y, z] = coordinates[j]\n          data.xs[i][j] = x\n          data.ys[i][j] = y\n          data.zs[i][j] = orNaN(z)\n        }\n        break\n      }\n      default:\n        throw new Error(`Invalid GeoJSON geometry type: ${geometry.type}`)\n    }\n  }\n\n  geojson_to_column_data(): GeoData {\n    const geojson = JSON.parse(this.geojson) as FeatureCollection<GeoItem> | GeometryCollection\n\n    let items: (Feature<GeoItem> | GeoItem)[]\n    switch (geojson.type) {\n      case \"GeometryCollection\": {\n        if (geojson.geometries == null)\n          throw new Error('No geometries found in GeometryCollection')\n\n        if (geojson.geometries.length === 0)\n          throw new Error('geojson.geometries must have one or more items')\n\n        items = geojson.geometries\n        break\n      }\n      case \"FeatureCollection\": {\n        if (geojson.features == null)\n          throw new Error('No features found in FeaturesCollection')\n\n        if (geojson.features.length == 0)\n          throw new Error('geojson.features must have one or more items')\n\n        items = geojson.features\n        break\n      }\n      default:\n        throw new Error('Bokeh only supports type GeometryCollection and FeatureCollection at top level')\n    }\n\n    let item_count = 0\n    for (const item of items) {\n      const geometry = item.type === 'Feature' ? item.geometry! : item\n      if (geometry.type == 'GeometryCollection')\n        item_count += geometry.geometries.length\n      else\n        item_count += 1\n    }\n\n    const data: GeoData = {\n      x: this._get_new_nan_array(item_count),\n      y: this._get_new_nan_array(item_count),\n      z: this._get_new_nan_array(item_count),\n      xs: this._get_new_list_array(item_count),\n      ys: this._get_new_list_array(item_count),\n      zs: this._get_new_list_array(item_count),\n    }\n\n    let arr_index = 0\n    for (const item of items) {\n      const geometry = item.type == 'Feature' ? item.geometry! : item\n\n      if (geometry.type == \"GeometryCollection\") {\n        for (const g of geometry.geometries) {\n          this._add_geometry(g, data, arr_index)\n          if (item.type === 'Feature')\n            this._add_properties(item, data, arr_index, item_count)\n          arr_index += 1\n        }\n      } else {\n        this._add_geometry(geometry, data, arr_index)\n        if (item.type === 'Feature')\n          this._add_properties(item, data, arr_index, item_count)\n        arr_index += 1\n      }\n    }\n\n    return data\n  }\n}\nGeoJSONDataSource.initClass()\n"]}