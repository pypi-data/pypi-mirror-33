{"version":3,"sources":["models/widgets/range_slider.ts"],"names":[],"mappings":";;;AAAA,+BAAgC;AAEhC,qDAAgF;AAEhF;IAAqC,2CAAkB;IAAvD;;IAeA,CAAC;IAZW,kCAAQ,GAAlB;QACE,OAAO;YACL,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK;YACvB,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG;YACnB,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK;YACvB,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI;SACtB,CAAA;IACH,CAAC;IAES,oCAAU,GAApB,UAAqB,MAAgB;QACnC,OAAO,MAAM,CAAA;IACf,CAAC;IACH,sBAAC;AAAD,CAfA,AAeC,CAfoC,oCAAkB,GAetD;AAfY,0CAAe;AAyB5B;IAAiC,uCAAc;IAI7C,qBAAY,KAAkC;QAA9C,YACE,kBAAM,KAAK,CAAC,SACb;QAWD,eAAS,GAAG,MAAgB,CAAA;QAC5B,eAAS,GAAG,CAAC,KAAK,EAAE,IAAI,EAAE,KAAK,CAAC,CAAA;;IAZhC,CAAC;IAEM,qBAAS,GAAhB;QACE,IAAI,CAAC,SAAS,CAAC,IAAI,GAAG,aAAa,CAAA;QACnC,IAAI,CAAC,SAAS,CAAC,YAAY,GAAG,eAAe,CAAA;QAE7C,IAAI,CAAC,QAAQ,CAAC;YACZ,MAAM,EAAE,QAAQ;SACjB,CAAC,CAAA;IACJ,CAAC;IAKS,gCAAU,GAApB,UAAqB,KAAa,EAAE,MAAc;QAChD,OAAO,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,CAAA;IACrC,CAAC;IACH,kBAAC;AAAD,CAvBA,AAuBC,CAvBgC,gCAAc,GAuB9C;AAvBY,kCAAW;AAyBxB,WAAW,CAAC,SAAS,EAAE,CAAA","file":"range_slider.js","sourcesContent":["import * as numbro from \"numbro\"\n\nimport {AbstractSlider, AbstractSliderView, SliderSpec} from \"./abstract_slider\"\n\nexport class RangeSliderView extends AbstractSliderView {\n  model: RangeSlider\n\n  protected _calc_to(): SliderSpec {\n    return {\n      start: this.model.start,\n      end: this.model.end,\n      value: this.model.value,\n      step: this.model.step,\n    }\n  }\n\n  protected _calc_from(values: number[]): number[] {\n    return values\n  }\n}\n\nexport namespace RangeSlider {\n  export interface Attrs extends AbstractSlider.Attrs {}\n\n  export interface Props extends AbstractSlider.Props {}\n}\n\nexport interface RangeSlider extends RangeSlider.Attrs {}\n\nexport class RangeSlider extends AbstractSlider {\n\n  properties: RangeSlider.Props\n\n  constructor(attrs?: Partial<RangeSlider.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = \"RangeSlider\"\n    this.prototype.default_view = RangeSliderView\n\n    this.override({\n      format: \"0[.]00\",\n    })\n  }\n\n  behaviour = \"drag\" as \"drag\"\n  connected = [false, true, false]\n\n  protected _formatter(value: number, format: string): string {\n    return numbro.format(value, format)\n  }\n}\n\nRangeSlider.initClass()\n"]}