{"version":3,"sources":["models/glyphs/patches.ts"],"names":[],"mappings":"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","file":"patches.js","sourcesContent":["import {IBBox} from \"core/util/bbox\"\nimport {SpatialIndex} from \"core/util/spatial\"\nimport {Glyph, GlyphView, GlyphData} from \"./glyph\"\nimport {generic_area_legend} from \"./utils\"\nimport {min, max, copy, findLastIndex} from \"core/util/array\"\nimport {sum} from \"core/util/arrayable\"\nimport {isStrictNaN} from \"core/util/types\"\nimport {Arrayable} from \"core/types\"\nimport {PointGeometry} from \"core/geometry\"\nimport {Context2d} from \"core/util/canvas\"\nimport {NumberSpec} from \"core/vectorization\"\nimport {LineMixinVector, FillMixinVector} from \"core/property_mixins\"\nimport {Line, Fill} from \"core/visuals\"\nimport * as hittest from \"core/hittest\"\nimport {Selection} from \"../selections/selection\"\n\nexport interface PatchesData extends GlyphData {\n  _xs: Arrayable<Arrayable<number>>\n  _ys: Arrayable<Arrayable<number>>\n\n  sxs: Arrayable<Arrayable<number>>\n  sys: Arrayable<Arrayable<number>>\n\n  sxss: number[][][]\n  syss: number[][][]\n}\n\nexport interface PatchesView extends PatchesData {}\n\nexport class PatchesView extends GlyphView {\n  model: Patches\n  visuals: Patches.Visuals\n\n  private _build_discontinuous_object(nanned_qs: number[][]): number[][][] {\n    // _s is this.xs, this.ys, this.sxs, this.sys\n    // an object of n 1-d arrays in either data or screen units\n    //\n    // Each 1-d array gets broken to an array of arrays split\n    // on any NaNs\n    //\n    // So:\n    // { 0: [x11, x12],\n    //   1: [x21, x22, x23],\n    //   2: [x31, NaN, x32]\n    // }\n    // becomes\n    // { 0: [[x11, x12]],\n    //   1: [[x21, x22, x23]],\n    //   2: [[x31],[x32]]\n    // }\n    const ds: number[][][] = []\n    for (let i = 0, end = nanned_qs.length; i < end; i++) {\n      ds[i] = []\n      let qs = copy(nanned_qs[i])\n      while (qs.length > 0) {\n        const nan_index = findLastIndex(qs, (q) => isStrictNaN(q))\n\n        let qs_part\n        if (nan_index >= 0)\n          qs_part = qs.splice(nan_index)\n        else {\n          qs_part = qs\n          qs = []\n        }\n\n        const denanned = qs_part.filter((q) => !isStrictNaN(q))\n        ds[i].push(denanned)\n      }\n    }\n    return ds\n  }\n\n\n  protected _index_data(): SpatialIndex {\n    const xss = this._build_discontinuous_object(this._xs as any) // XXX\n    const yss = this._build_discontinuous_object(this._ys as any) // XXX\n\n    const points = []\n    for (let i = 0, end = this._xs.length; i < end; i++) {\n      for (let j = 0, endj = xss[i].length; j < endj; j++) {\n        const xs = xss[i][j]\n        const ys = yss[i][j]\n\n        if (xs.length == 0)\n          continue\n\n        points.push({\n          minX: min(xs),\n          minY: min(ys),\n          maxX: max(xs),\n          maxY: max(ys),\n          i,\n        })\n      }\n    }\n\n    return new SpatialIndex(points)\n  }\n\n  protected _mask_data(): number[] {\n    const xr = this.renderer.plot_view.frame.x_ranges[\"default\"]\n    const [x0, x1] = [xr.min, xr.max]\n\n    const yr = this.renderer.plot_view.frame.y_ranges[\"default\"]\n    const [y0, y1] = [yr.min, yr.max]\n\n    const bbox = hittest.validate_bbox_coords([x0, x1], [y0, y1])\n    const indices = this.index.indices(bbox)\n\n    // TODO (bev) this should be under test\n    return indices.sort((a, b) => a - b)\n  }\n\n  protected _render(ctx: Context2d, indices: number[], {sxs, sys}: PatchesData): void {\n    // this.sxss and this.syss are used by _hit_point and sxc, syc\n    // This is the earliest we can build them, and only build them once\n    this.sxss = this._build_discontinuous_object(sxs as any) // XXX\n    this.syss = this._build_discontinuous_object(sys as any) // XXX\n\n    for (const i of indices) {\n      const [sx, sy] = [sxs[i], sys[i]]\n\n      if (this.visuals.fill.doit) {\n        this.visuals.fill.set_vectorize(ctx, i)\n\n        for (let j = 0, end = sx.length; j < end; j++) {\n          if (j == 0) {\n            ctx.beginPath()\n            ctx.moveTo(sx[j], sy[j])\n            continue\n          } else if (isNaN(sx[j] + sy[j])) {\n            ctx.closePath()\n            ctx.fill()\n            ctx.beginPath()\n            continue\n          } else\n            ctx.lineTo(sx[j], sy[j])\n        }\n\n        ctx.closePath()\n        ctx.fill()\n      }\n\n      if (this.visuals.line.doit) {\n        this.visuals.line.set_vectorize(ctx, i)\n\n        for (let j = 0, end = sx.length; j < end; j++) {\n          if (j == 0) {\n            ctx.beginPath()\n            ctx.moveTo(sx[j], sy[j])\n            continue\n          } else if (isNaN(sx[j] + sy[j])) {\n            ctx.closePath()\n            ctx.stroke()\n            ctx.beginPath()\n            continue\n          } else\n            ctx.lineTo(sx[j], sy[j])\n        }\n\n        ctx.closePath()\n        ctx.stroke()\n      }\n    }\n  }\n\n  protected _hit_point(geometry: PointGeometry): Selection {\n    const {sx, sy} = geometry\n\n    const x = this.renderer.xscale.invert(sx)\n    const y = this.renderer.yscale.invert(sy)\n\n    const candidates = this.index.indices({minX: x, minY: y, maxX: x, maxY: y})\n\n    const hits = []\n    for (let i = 0, end = candidates.length; i < end; i++) {\n      const idx = candidates[i]\n      const sxs = this.sxss[idx]\n      const sys = this.syss[idx]\n      for (let j = 0, endj = sxs.length; j < endj; j++) {\n        if (hittest.point_in_poly(sx, sy, sxs[j], sys[j])) {\n          hits.push(idx)\n        }\n      }\n    }\n\n    const result = hittest.create_empty_hit_test_result()\n    result.indices = hits\n    return result\n  }\n\n  private _get_snap_coord(array: Arrayable<number>): number {\n    return sum(array) / array.length\n  }\n\n  scenterx(i: number, sx: number, sy: number): number {\n    if (this.sxss[i].length == 1) {\n      // We don't have discontinuous objects so we're ok\n      return this._get_snap_coord(this.sxs[i])\n    } else {\n      // We have discontinuous objects, so we need to find which\n      // one we're in, we can use point_in_poly again\n      const sxs = this.sxss[i]\n      const sys = this.syss[i]\n      for (let j = 0, end = sxs.length; j < end; j++) {\n        if (hittest.point_in_poly(sx, sy, sxs[j], sys[j]))\n          return this._get_snap_coord(sxs[j])\n      }\n    }\n\n    throw new Error(\"unreachable code\")\n  }\n\n  scentery(i: number, sx: number, sy: number): number {\n    if (this.syss[i].length == 1) {\n      // We don't have discontinuous objects so we're ok\n      return this._get_snap_coord(this.sys[i])\n    } else {\n      // We have discontinuous objects, so we need to find which\n      // one we're in, we can use point_in_poly again\n      const sxs = this.sxss[i]\n      const sys = this.syss[i]\n      for (let j = 0, end = sxs.length; j < end; j++) {\n        if (hittest.point_in_poly(sx, sy, sxs[j], sys[j]))\n          return this._get_snap_coord(sys[j])\n      }\n    }\n\n    throw new Error(\"unreachable code\")\n  }\n\n  draw_legend_for_index(ctx: Context2d, bbox: IBBox, index: number): void {\n    generic_area_legend(this.visuals, ctx, bbox, index)\n  }\n}\n\nexport namespace Patches {\n  export interface Mixins extends LineMixinVector, FillMixinVector {}\n\n  export interface Attrs extends Glyph.Attrs, Mixins {\n    xs: NumberSpec\n    ys: NumberSpec\n  }\n\n  export interface Props extends Glyph.Props {}\n\n  export interface Visuals extends Glyph.Visuals {\n    line: Line\n    fill: Fill\n  }\n}\n\nexport interface Patches extends Patches.Attrs {}\n\nexport class Patches extends Glyph {\n\n  properties: Patches.Props\n\n  constructor(attrs?: Partial<Patches.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = 'Patches'\n    this.prototype.default_view = PatchesView\n\n    this.coords([['xs', 'ys']])\n    this.mixins(['line', 'fill'])\n  }\n}\nPatches.initClass()\n"]}