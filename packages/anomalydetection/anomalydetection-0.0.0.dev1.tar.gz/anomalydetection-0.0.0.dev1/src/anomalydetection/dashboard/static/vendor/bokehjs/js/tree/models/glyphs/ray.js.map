{"version":3,"sources":["models/glyphs/ray.ts"],"names":[],"mappings":";;;AAAA,uCAA4D;AAC5D,iCAA2C;AAK3C,mCAAoC;AAapC;IAA6B,mCAAW;IAAxC;;IA6CA,CAAC;IAzCW,2BAAS,GAAnB;QACE,IAAI,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,KAAK,IAAI,MAAM;YAC9C,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC,CAAA;;YAEtE,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAA;IAC/B,CAAC;IAES,yBAAO,GAAjB,UAAkB,GAAc,EAAE,OAAiB,EAAE,EAAkC;YAAjC,UAAE,EAAE,UAAE,EAAE,oBAAO,EAAE,kBAAM;QAC3E,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE;YAC1B,IAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAA;YACxD,IAAM,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAA;YAC1D,IAAM,OAAO,GAAG,CAAC,GAAG,CAAC,KAAK,GAAG,MAAM,CAAC,CAAA;YAEpC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;gBAClD,IAAI,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC;oBACjB,OAAO,CAAC,CAAC,CAAC,GAAG,OAAO,CAAA;aACvB;YAED,KAAgB,UAAO,EAAP,mBAAO,EAAP,qBAAO,EAAP,IAAO;gBAAlB,IAAM,CAAC,gBAAA;gBACV,IAAI,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;oBAC/C,SAAQ;gBAEV,GAAG,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAA;gBAC3B,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAA;gBAErB,GAAG,CAAC,SAAS,EAAE,CAAA;gBACf,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;gBAChB,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;gBAEzB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC,CAAC,CAAA;gBACvC,GAAG,CAAC,MAAM,EAAE,CAAA;gBAEZ,GAAG,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAA;gBACtB,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAA;aAC9B;SACF;IACH,CAAC;IAED,uCAAqB,GAArB,UAAsB,GAAc,EAAE,IAAW,EAAE,KAAa;QAC9D,2BAAmB,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,EAAE,IAAI,EAAE,KAAK,CAAC,CAAA;IACrD,CAAC;IACH,cAAC;AAAD,CA7CA,AA6CC,CA7C4B,sBAAW,GA6CvC;AA7CY,0BAAO;AAmEpB;IAAyB,+BAAO;IAI9B,aAAY,KAA0B;eACpC,kBAAM,KAAK,CAAC;IACd,CAAC;IAEM,aAAS,GAAhB;QACE,IAAI,CAAC,SAAS,CAAC,IAAI,GAAG,KAAK,CAAA;QAC3B,IAAI,CAAC,SAAS,CAAC,YAAY,GAAG,OAAO,CAAA;QAErC,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC,CAAA;QACrB,IAAI,CAAC,MAAM,CAAC;YACV,MAAM,EAAE,CAAE,CAAC,CAAC,YAAY,CAAE;YAC1B,KAAK,EAAG,CAAE,CAAC,CAAC,SAAS,CAAK;SAC3B,CAAC,CAAA;IACJ,CAAC;IACH,UAAC;AAAD,CAlBA,AAkBC,CAlBwB,kBAAO,GAkB/B;AAlBY,kBAAG;AAmBhB,GAAG,CAAC,SAAS,EAAE,CAAA","file":"ray.js","sourcesContent":["import {XYGlyph, XYGlyphView, XYGlyphData} from \"./xy_glyph\"\nimport {generic_line_legend} from \"./utils\"\nimport {DistanceSpec, AngleSpec} from \"core/vectorization\"\nimport {LineMixinVector} from \"core/property_mixins\"\nimport {Line} from \"core/visuals\"\nimport {Arrayable} from \"core/types\"\nimport * as p from \"core/properties\"\nimport {IBBox} from \"core/util/bbox\"\nimport {Context2d} from \"core/util/canvas\"\n\nexport interface RayData extends XYGlyphData {\n  _length: Arrayable<number>\n  _angle: Arrayable<number>\n\n  slength: Arrayable<number>\n}\n\nexport interface RayView extends RayData {}\n\nexport class RayView extends XYGlyphView {\n  model: Ray\n  visuals: Ray.Visuals\n\n  protected _map_data(): void {\n    if (this.model.properties.length.units == \"data\")\n      this.slength = this.sdist(this.renderer.xscale, this._x, this._length)\n    else\n      this.slength = this._length\n  }\n\n  protected _render(ctx: Context2d, indices: number[], {sx, sy, slength, _angle}: RayData): void {\n    if (this.visuals.line.doit) {\n      const width = this.renderer.plot_view.frame._width.value\n      const height = this.renderer.plot_view.frame._height.value\n      const inf_len = 2 * (width + height)\n\n      for (let i = 0, end = slength.length; i < end; i++) {\n        if (slength[i] == 0)\n          slength[i] = inf_len\n      }\n\n      for (const i of indices) {\n        if (isNaN(sx[i] + sy[i] + _angle[i] + slength[i]))\n          continue\n\n        ctx.translate(sx[i], sy[i])\n        ctx.rotate(_angle[i])\n\n        ctx.beginPath()\n        ctx.moveTo(0, 0)\n        ctx.lineTo(slength[i], 0)\n\n        this.visuals.line.set_vectorize(ctx, i)\n        ctx.stroke()\n\n        ctx.rotate(-_angle[i])\n        ctx.translate(-sx[i], -sy[i])\n      }\n    }\n  }\n\n  draw_legend_for_index(ctx: Context2d, bbox: IBBox, index: number): void {\n    generic_line_legend(this.visuals, ctx, bbox, index)\n  }\n}\n\nexport namespace Ray {\n  export interface Mixins extends LineMixinVector {}\n\n  export interface Attrs extends XYGlyph.Attrs, Mixins {\n    length: DistanceSpec\n    angle: AngleSpec\n  }\n\n  export interface Props extends XYGlyph.Props {\n    length: p.DistanceSpec\n    angle: p.AngleSpec\n  }\n\n  export interface Visuals extends XYGlyph.Visuals {\n    line: Line\n  }\n}\n\nexport interface Ray extends Ray.Attrs {}\n\nexport class Ray extends XYGlyph {\n\n  properties: Ray.Props\n\n  constructor(attrs?: Partial<Ray.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = 'Ray'\n    this.prototype.default_view = RayView\n\n    this.mixins(['line'])\n    this.define({\n      length: [ p.DistanceSpec ],\n      angle:  [ p.AngleSpec    ],\n    })\n  }\n}\nRay.initClass()\n"]}