{"version":3,"sources":["models/grids/grid.ts"],"names":[],"mappings":"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","file":"grid.js","sourcesContent":["import {Axis} from \"../axes/axis\"\nimport {GuideRenderer, GuideRendererView} from \"../renderers/guide_renderer\"\nimport {Range} from \"../ranges/range\"\nimport {Ticker} from \"../tickers/ticker\"\nimport {Line, Fill} from \"core/visuals\"\nimport {Color} from \"core/types\"\nimport {LineJoin, LineCap} from \"core/enums\"\nimport * as p from \"core/properties\"\nimport {Context2d} from \"core/util/canvas\"\nimport {isArray} from \"core/util/types\"\n\nexport class GridView extends GuideRendererView {\n  model: Grid\n  visuals: Grid.Visuals\n\n  protected get _x_range_name(): string {\n    return this.model.x_range_name\n  }\n\n  protected get _y_range_name(): string {\n    return this.model.y_range_name\n  }\n\n  render(): void {\n    if (!this.model.visible)\n      return\n\n    const ctx = this.plot_view.canvas_view.ctx\n    ctx.save()\n    this._draw_regions(ctx)\n    this._draw_minor_grids(ctx)\n    this._draw_grids(ctx)\n    ctx.restore()\n  }\n\n  connect_signals(): void {\n    super.connect_signals()\n    this.connect(this.model.change, () => this.request_render())\n  }\n\n  protected _draw_regions(ctx: Context2d): void {\n    if (!this.visuals.band_fill.doit)\n      return\n    const [xs, ys] = this.model.grid_coords('major', false)\n    this.visuals.band_fill.set_value(ctx)\n    for (let i = 0; i < xs.length-1; i++) {\n      if (i % 2 == 1) {\n        const [sx0, sy0] = this.plot_view.map_to_screen(xs[i],   ys[i],   this._x_range_name, this._y_range_name)\n        const [sx1, sy1] = this.plot_view.map_to_screen(xs[i+1], ys[i+1], this._x_range_name, this._y_range_name)\n        ctx.fillRect(sx0[0], sy0[0], sx1[1] - sx0[0], sy1[1] - sy0[0])\n        ctx.fill()\n      }\n    }\n  }\n\n  protected _draw_grids(ctx: Context2d): void {\n    if (!this.visuals.grid_line.doit)\n      return\n    const [xs, ys] = this.model.grid_coords('major')\n    this._draw_grid_helper(ctx, this.visuals.grid_line, xs, ys)\n  }\n\n  protected _draw_minor_grids(ctx: Context2d): void {\n    if (!this.visuals.minor_grid_line.doit)\n      return\n    const [xs, ys] = this.model.grid_coords('minor')\n    this._draw_grid_helper(ctx, this.visuals.minor_grid_line, xs, ys)\n  }\n\n  protected _draw_grid_helper(ctx: Context2d, visuals: Line, xs: number[][], ys: number[][]): void {\n    visuals.set_value(ctx)\n    for (let i = 0; i < xs.length; i++) {\n      const [sx, sy] = this.plot_view.map_to_screen(xs[i], ys[i], this._x_range_name, this._y_range_name)\n      ctx.beginPath()\n      ctx.moveTo(Math.round(sx[0]), Math.round(sy[0]))\n      for (let i = 1; i < sx.length; i++)\n        ctx.lineTo(Math.round(sx[i]), Math.round(sy[i]))\n      ctx.stroke()\n    }\n  }\n}\n\nexport namespace Grid {\n  // line:grid_\n  export interface GridLine {\n    grid_line_color: Color\n    grid_line_width: number\n    grid_line_alpha: number\n    grid_line_join: LineJoin\n    grid_line_cap: LineCap\n    grid_line_dash: number[]\n    grid_line_dash_offset: number\n  }\n\n  // line:minor_grid_\n  export interface MinorGridLine {\n    minor_grid_line_color: Color\n    minor_grid_line_width: number\n    minor_grid_line_alpha: number\n    minor_grid_line_join: LineJoin\n    minor_grid_line_cap: LineCap\n    minor_grid_line_dash: number[]\n    minor_grid_line_dash_offset: number\n  }\n\n  // fill:band_\n  export interface BandFill {\n    fill_color: Color\n    fill_alpha: number\n  }\n\n  export interface Mixins extends GridLine, MinorGridLine, BandFill {}\n\n  export interface Attrs extends GuideRenderer.Attrs, Mixins {\n    bounds: [number, number] | \"auto\"\n    dimension: 0 | 1\n    ticker: Ticker<any>\n    x_range_name: string\n    y_range_name: string\n  }\n\n  export interface Props extends GuideRenderer.Props {}\n\n  export type Visuals = GuideRenderer.Visuals & {\n    grid_line: Line\n    minor_grid_line: Line\n    band_fill: Fill\n  }\n}\n\nexport interface Grid extends Grid.Attrs {}\n\nexport class Grid extends GuideRenderer {\n\n  properties: Grid.Props\n\n  constructor(attrs?: Partial<Grid.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = \"Grid\"\n    this.prototype.default_view = GridView\n\n    this.mixins(['line:grid_', 'line:minor_grid_', 'fill:band_'])\n\n    this.define({\n      bounds:       [ p.Any,     'auto'    ], // TODO (bev)\n      dimension:    [ p.Number,  0         ],\n      ticker:       [ p.Instance           ],\n      x_range_name: [ p.String,  'default' ],\n      y_range_name: [ p.String,  'default' ],\n    })\n\n    this.override({\n      level: \"underlay\",\n      band_fill_color: null,\n      band_fill_alpha: 0,\n      grid_line_color: '#e5e5e5',\n      minor_grid_line_color: null,\n    })\n  }\n\n  ranges(): [Range, Range] {\n    const i = this.dimension\n    const j = (i + 1) % 2\n    const frame = this.plot.plot_canvas.frame\n    const ranges = [\n      frame.x_ranges[this.x_range_name],\n      frame.y_ranges[this.y_range_name],\n    ]\n    return [ranges[i], ranges[j]]\n  }\n\n  computed_bounds(): [number, number] {\n    const [range,] = this.ranges()\n\n    const user_bounds = this.bounds\n    const range_bounds = [range.min, range.max]\n\n    let start: number\n    let end: number\n    if (isArray(user_bounds)) {\n      start = Math.min(user_bounds[0], user_bounds[1])\n      end = Math.max(user_bounds[0], user_bounds[1])\n\n      if (start < range_bounds[0])\n        start = range_bounds[0]\n      // XXX:\n      //else if (start > range_bounds[1])\n      //  start = null\n\n      if (end > range_bounds[1])\n        end = range_bounds[1]\n      // XXX:\n      //else if (end < range_bounds[0])\n      //  end = null\n    } else {\n      [start, end] = range_bounds\n      for (const axis of this.plot.select(Axis)) {\n        if (axis.dimension == this.dimension && axis.x_range_name == this.x_range_name\n                                             && axis.y_range_name == this.y_range_name) {\n          [start, end] = axis.computed_bounds\n        }\n      }\n    }\n\n    return [start, end]\n  }\n\n  grid_coords(location: \"major\" | \"minor\", exclude_ends: boolean = true): [number[][], number[][]] {\n    const i = this.dimension\n    const j = (i + 1) % 2\n    const [range, cross_range] = this.ranges()\n\n    let [start, end] = this.computed_bounds();\n    [start, end] = [Math.min(start, end), Math.max(start, end)]\n\n    // TODO: (bev) using cross_range.min for cross_loc is a bit of a cheat. Since we\n    // currently only support \"straight line\" grids, this should be OK for now. If\n    // we ever want to support \"curved\" grids, e.g. for some projections, we may\n    // have to communicate more than just a single cross location.\n    const ticks = this.ticker.get_ticks(start, end, range, cross_range.min, {})[location]\n\n    const min = range.min\n    const max = range.max\n\n    const cmin = cross_range.min\n    const cmax = cross_range.max\n\n    const coords: [number[][], number[][]] = [[], []]\n\n    if (!exclude_ends) {\n      if (ticks[0] != min)\n        ticks.splice(0, 0, min)\n      if (ticks[ticks.length-1] != max)\n        ticks.push(max)\n    }\n\n    for (let ii = 0; ii < ticks.length; ii++) {\n      if ((ticks[ii] == min || ticks[ii] == max) && exclude_ends)\n        continue\n      const dim_i: number[] = []\n      const dim_j: number[] = []\n      const N = 2\n      for (let n = 0; n < N; n++) {\n        const loc = cmin + (cmax-cmin)/(N-1)*n\n        dim_i.push(ticks[ii])\n        dim_j.push(loc)\n      }\n      coords[i].push(dim_i)\n      coords[j].push(dim_j)\n    }\n\n    return coords\n  }\n}\nGrid.initClass()\n"]}