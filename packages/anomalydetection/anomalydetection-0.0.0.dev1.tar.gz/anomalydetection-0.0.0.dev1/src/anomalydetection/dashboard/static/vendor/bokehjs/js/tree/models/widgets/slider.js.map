{"version":3,"sources":["models/widgets/slider.ts"],"names":[],"mappings":";;;AAAA,+BAAgC;AAEhC,qDAAgF;AAEhF;IAAgC,sCAAkB;IAAlD;;IAkBA,CAAC;IAfW,6BAAQ,GAAlB;QACE,OAAO;YACL,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK;YACvB,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG;YACnB,KAAK,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;YACzB,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI;SACtB,CAAA;IACH,CAAC;IAES,+BAAU,GAApB,UAAqB,EAAiB;YAAhB,aAAK;QACzB,IAAI,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;YAC7G,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAA;;YAExB,OAAO,KAAK,CAAA;IAChB,CAAC;IACH,iBAAC;AAAD,CAlBA,AAkBC,CAlB+B,oCAAkB,GAkBjD;AAlBY,gCAAU;AA4BvB;IAA4B,kCAAc;IAIxC,gBAAY,KAA6B;QAAzC,YACE,kBAAM,KAAK,CAAC,SACb;QAWD,eAAS,GAAG,KAAc,CAAA;QAC1B,eAAS,GAAG,CAAC,IAAI,EAAE,KAAK,CAAC,CAAA;;IAZzB,CAAC;IAEM,gBAAS,GAAhB;QACE,IAAI,CAAC,SAAS,CAAC,IAAI,GAAG,QAAQ,CAAA;QAC9B,IAAI,CAAC,SAAS,CAAC,YAAY,GAAG,UAAU,CAAA;QAExC,IAAI,CAAC,QAAQ,CAAC;YACZ,MAAM,EAAE,QAAQ;SACjB,CAAC,CAAA;IACJ,CAAC;IAKS,2BAAU,GAApB,UAAqB,KAAa,EAAE,MAAc;QAChD,OAAO,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,CAAA;IACrC,CAAC;IACH,aAAC;AAAD,CAvBA,AAuBC,CAvB2B,gCAAc,GAuBzC;AAvBY,wBAAM;AAyBnB,MAAM,CAAC,SAAS,EAAE,CAAA","file":"slider.js","sourcesContent":["import * as numbro from \"numbro\"\n\nimport {AbstractSlider, AbstractSliderView, SliderSpec} from \"./abstract_slider\"\n\nexport class SliderView extends AbstractSliderView {\n  model: Slider\n\n  protected _calc_to(): SliderSpec {\n    return {\n      start: this.model.start,\n      end: this.model.end,\n      value: [this.model.value],\n      step: this.model.step,\n    }\n  }\n\n  protected _calc_from([value]: number[]): number {\n    if (Number.isInteger(this.model.start) && Number.isInteger(this.model.end) && Number.isInteger(this.model.step))\n      return Math.round(value)\n    else\n      return value\n  }\n}\n\nexport namespace Slider {\n  export interface Attrs extends AbstractSlider.Attrs {}\n\n  export interface Props extends AbstractSlider.Props {}\n}\n\nexport interface Slider extends Slider.Attrs {}\n\nexport class Slider extends AbstractSlider {\n\n  properties: Slider.Props\n\n  constructor(attrs?: Partial<Slider.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = \"Slider\"\n    this.prototype.default_view = SliderView\n\n    this.override({\n      format: \"0[.]00\",\n    })\n  }\n\n  behaviour = \"tap\" as \"tap\"\n  connected = [true, false]\n\n  protected _formatter(value: number, format: string): string {\n    return numbro.format(value, format)\n  }\n}\n\nSlider.initClass()\n"]}