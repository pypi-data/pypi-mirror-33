import { min, minBy, max, maxBy, sum } from "./arrayable";
export { min, minBy, max, maxBy, sum };
export declare function head<T>(array: T[]): T;
export declare function tail<T>(array: T[]): T;
export declare function last<T>(array: T[]): T | undefined;
export declare function copy<T>(array: T[]): T[];
export declare function concat<T>(arrays: T[][]): T[];
export declare function includes<T>(array: T[], value: T): boolean;
export declare const contains: typeof includes;
export declare function nth<T>(array: T[], index: number): T;
export declare function zip<A, B>(As: A[], Bs: B[]): [A, B][];
export declare function unzip<A, B>(ABs: [A, B][]): [A[], B[]];
export declare function range(start: number, stop?: number, step?: number): number[];
export declare function linspace(start: number, stop: number, num?: number): number[];
export declare function transpose<T>(array: T[][]): T[][];
export declare function cumsum(array: number[]): number[];
export declare function argmin(array: number[]): number;
export declare function argmax(array: number[]): number;
export declare function all<T>(array: T[], predicate: (item: T) => boolean): boolean;
export declare function any<T>(array: T[], predicate: (item: T) => boolean): boolean;
export declare const findIndex: <T>(array: T[], predicate: (item: T) => boolean) => number;
export declare const findLastIndex: <T>(array: T[], predicate: (item: T) => boolean) => number;
export declare function find<T>(array: T[], predicate: (item: T) => boolean): T | undefined;
export declare function findLast<T>(array: T[], predicate: (item: T) => boolean): T | undefined;
export declare function sortedIndex<T>(array: T[], value: T): number;
export declare function sortBy<T>(array: T[], key: (item: T) => number): T[];
export declare function uniq<T>(array: T[]): T[];
export declare function uniqBy<T, U>(array: T[], key: (item: T) => U): T[];
export declare function union<T>(...arrays: T[][]): T[];
export declare function intersection<T>(array: T[], ...arrays: T[][]): T[];
export declare function difference<T>(array: T[], ...arrays: T[][]): T[];
export declare function removeBy<T>(array: T[], key: (item: T) => boolean): void;
export declare function shuffle<T>(array: T[]): T[];
export declare function pairwise<T, U>(array: T[], fn: (prev: T, next: T) => U): U[];
export declare function reversed<T>(array: T[]): T[];
export declare function repeat<T>(value: T, n: number): T[];
