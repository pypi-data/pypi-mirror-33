{"version":3,"sources":["models/tools/gestures/wheel_pan_tool.ts"],"names":[],"mappings":"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","file":"wheel_pan_tool.js","sourcesContent":["import {GestureTool, GestureToolView} from \"./gesture_tool\"\nimport * as p from \"core/properties\"\nimport {ScrollEvent} from \"core/ui_events\"\nimport {Dimension} from \"core/enums\"\n\nexport class WheelPanToolView extends GestureToolView {\n  model: WheelPanTool\n\n  _scroll(ev: ScrollEvent): void {\n    let factor = this.model.speed*ev.delta\n\n    // clamp the magnitude of factor, if it is > 1 bad things happen\n    if (factor > 0.9)\n      factor = 0.9\n    else if (factor < -0.9)\n      factor = -0.9\n\n    this._update_ranges(factor)\n  }\n\n  _update_ranges(factor: number): void {\n    const frame = this.plot_model.frame\n\n    const hr = frame.bbox.h_range\n    const vr = frame.bbox.v_range\n\n    const [sx_low, sx_high] = [hr.start, hr.end]\n    const [sy_low, sy_high] = [vr.start, vr.end]\n\n    let sx0: number\n    let sx1: number\n    let sy0: number\n    let sy1: number\n\n    switch (this.model.dimension) {\n      case \"height\": {\n        const sy_range = Math.abs(sy_high - sy_low)\n        sx0 = sx_low\n        sx1 = sx_high\n        sy0 = sy_low - sy_range * factor\n        sy1 = sy_high - sy_range * factor\n        break\n      }\n      case \"width\": {\n        const sx_range = Math.abs(sx_high - sx_low)\n        sx0 = sx_low - sx_range * factor\n        sx1 = sx_high - sx_range * factor\n        sy0 = sy_low\n        sy1 = sy_high\n        break\n      }\n      default:\n        throw new Error(\"this shouldn't have happened\")\n    }\n\n    const {xscales, yscales} = frame\n\n    const xrs: {[key: string]: {start: number, end: number}} = {}\n    for (const name in xscales) {\n      const scale = xscales[name]\n      const [start, end] = scale.r_invert(sx0, sx1)\n      xrs[name] = {start: start, end: end}\n    }\n\n    const yrs: {[key: string]: {start: number, end: number}} = {}\n    for (const name in yscales) {\n      const scale = yscales[name]\n      const [start, end] = scale.r_invert(sy0, sy1)\n      yrs[name] = {start: start, end: end}\n    }\n\n    // OK this sucks we can't set factor independently in each direction. It is used\n    // for GMap plots, and GMap plots always preserve aspect, so effective the value\n    // of 'dimensions' is ignored.\n    const pan_info = {\n      xrs: xrs,\n      yrs: yrs,\n      factor: factor,\n    }\n    this.plot_view.push_state('wheel_pan', {range: pan_info})\n    this.plot_view.update_range(pan_info, false, true)\n\n    if (this.model.document != null)\n      this.model.document.interactive_start(this.plot_model.plot)\n  }\n}\n\nexport namespace WheelPanTool {\n  export interface Attrs extends GestureTool.Attrs {\n    dimension: Dimension\n    speed: number\n  }\n\n  export interface Props extends GestureTool.Props {}\n}\n\nexport interface WheelPanTool extends WheelPanTool.Attrs {}\n\nexport class WheelPanTool extends GestureTool {\n\n  properties: WheelPanTool.Props\n\n  constructor(attrs?: Partial<WheelPanTool.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = 'WheelPanTool'\n    this.prototype.default_view = WheelPanToolView\n\n    this.define({\n      dimension: [ p.Dimension, \"width\" ],\n    })\n\n    this.internal({\n      speed: [ p.Number, 1/1000 ],\n    })\n  }\n\n  tool_name = \"Wheel Pan\"\n  icon = \"bk-tool-icon-wheel-pan\"\n  event_type = \"scroll\" as \"scroll\"\n  default_order = 12\n\n  get tooltip(): string {\n    return this._get_dim_tooltip(this.tool_name, this.dimension)\n  }\n}\n\nWheelPanTool.initClass()\n"]}