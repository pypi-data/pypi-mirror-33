{"version":3,"sources":["models/glyphs/arc.ts"],"names":[],"mappings":";;;AAAA,uCAA4D;AAC5D,iCAA2C;AAM3C,mCAAoC;AAgBpC;IAA6B,mCAAW;IAAxC;;IAgCA,CAAC;IA5BW,2BAAS,GAAnB;QACE,IAAI,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,KAAK,IAAI,MAAM;YAC9C,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC,CAAA;;YAEtE,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAA;IAC/B,CAAC;IAES,yBAAO,GAAjB,UAAkB,GAAc,EAAE,OAAiB,EACjC,EAAoD;YAAnD,UAAE,EAAE,UAAE,EAAE,oBAAO,EAAE,8BAAY,EAAE,0BAAU;QAC1D,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE;YAC1B,IAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,KAAK,EAAE,CAAA;YAEzD,KAAgB,UAAO,EAAP,mBAAO,EAAP,qBAAO,EAAP,IAAO;gBAAlB,IAAM,CAAC,gBAAA;gBACV,IAAI,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,GAAG,YAAY,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;oBACrE,SAAQ;gBAEV,GAAG,CAAC,SAAS,EAAE,CAAA;gBACf,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,EAAE,YAAY,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC,CAAA;gBAE5E,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC,CAAC,CAAA;gBACvC,GAAG,CAAC,MAAM,EAAE,CAAA;aACb;SACF;IACH,CAAC;IAED,uCAAqB,GAArB,UAAsB,GAAc,EAAE,IAAW,EAAE,KAAa;QAC9D,2BAAmB,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,EAAE,IAAI,EAAE,KAAK,CAAC,CAAA;IACrD,CAAC;IACH,cAAC;AAAD,CAhCA,AAgCC,CAhC4B,sBAAW,GAgCvC;AAhCY,0BAAO;AA0DpB;IAAyB,+BAAO;IAI9B,aAAY,KAA0B;eACpC,kBAAM,KAAK,CAAC;IACd,CAAC;IAEM,aAAS,GAAhB;QACE,IAAI,CAAC,SAAS,CAAC,IAAI,GAAG,KAAK,CAAA;QAC3B,IAAI,CAAC,SAAS,CAAC,YAAY,GAAG,OAAO,CAAA;QAErC,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC,CAAA;QACrB,IAAI,CAAC,MAAM,CAAC;YACV,SAAS,EAAI,CAAE,CAAC,CAAC,SAAS,EAAI,WAAW,CAAE;YAC3C,MAAM,EAAO,CAAE,CAAC,CAAC,YAAY,CAAc;YAC3C,WAAW,EAAE,CAAE,CAAC,CAAC,SAAS,CAAiB;YAC3C,SAAS,EAAI,CAAE,CAAC,CAAC,SAAS,CAAiB;SAC5C,CAAC,CAAA;IACJ,CAAC;IACH,UAAC;AAAD,CApBA,AAoBC,CApBwB,kBAAO,GAoB/B;AApBY,kBAAG;AAqBhB,GAAG,CAAC,SAAS,EAAE,CAAA","file":"arc.js","sourcesContent":["import {XYGlyph, XYGlyphView, XYGlyphData} from \"./xy_glyph\"\nimport {generic_line_legend} from \"./utils\"\nimport {DistanceSpec, AngleSpec} from \"core/vectorization\"\nimport {LineMixinVector} from \"core/property_mixins\"\nimport {Line} from \"core/visuals\"\nimport {Arrayable} from \"core/types\"\nimport {Direction} from \"core/enums\"\nimport * as p from \"core/properties\"\nimport {IBBox} from \"core/util/bbox\"\nimport {Context2d} from \"core/util/canvas\"\n\nexport interface ArcData extends XYGlyphData {\n  _radius: Arrayable<number>\n  _start_angle: Arrayable<number>\n  _end_angle: Arrayable<number>\n\n  sradius: Arrayable<number>\n\n  max_radius: number\n}\n\nexport interface ArcView extends ArcData {}\n\nexport class ArcView extends XYGlyphView {\n  model: Arc\n  visuals: Arc.Visuals\n\n  protected _map_data(): void {\n    if (this.model.properties.radius.units == \"data\")\n      this.sradius = this.sdist(this.renderer.xscale, this._x, this._radius)\n    else\n      this.sradius = this._radius\n  }\n\n  protected _render(ctx: Context2d, indices: number[],\n                    {sx, sy, sradius, _start_angle, _end_angle}: ArcData): void {\n    if (this.visuals.line.doit) {\n      const direction = this.model.properties.direction.value()\n\n      for (const i of indices) {\n        if (isNaN(sx[i] + sy[i] + sradius[i] + _start_angle[i] + _end_angle[i]))\n          continue\n\n        ctx.beginPath()\n        ctx.arc(sx[i], sy[i], sradius[i], _start_angle[i], _end_angle[i], direction)\n\n        this.visuals.line.set_vectorize(ctx, i)\n        ctx.stroke()\n      }\n    }\n  }\n\n  draw_legend_for_index(ctx: Context2d, bbox: IBBox, index: number): void {\n    generic_line_legend(this.visuals, ctx, bbox, index)\n  }\n}\n\nexport namespace Arc {\n  export interface Mixins extends LineMixinVector {}\n\n  export interface Attrs extends XYGlyph.Attrs, Mixins {\n    direction: Direction\n    radius: DistanceSpec\n    start_angle: AngleSpec\n    end_angle: AngleSpec\n  }\n\n  export interface Props extends XYGlyph.Props {\n    direction: p.Property<Direction>\n    radius: p.DistanceSpec\n    start_angle: p.AngleSpec\n    end_angle: p.AngleSpec\n  }\n\n  export interface Visuals extends XYGlyph.Visuals {\n    line: Line\n  }\n}\n\nexport interface Arc extends Arc.Attrs {}\n\nexport class Arc extends XYGlyph {\n\n  properties: Arc.Props\n\n  constructor(attrs?: Partial<Arc.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = 'Arc'\n    this.prototype.default_view = ArcView\n\n    this.mixins(['line'])\n    this.define({\n      direction:   [ p.Direction,   'anticlock' ],\n      radius:      [ p.DistanceSpec             ],\n      start_angle: [ p.AngleSpec                ],\n      end_angle:   [ p.AngleSpec                ],\n    })\n  }\n}\nArc.initClass()\n"]}