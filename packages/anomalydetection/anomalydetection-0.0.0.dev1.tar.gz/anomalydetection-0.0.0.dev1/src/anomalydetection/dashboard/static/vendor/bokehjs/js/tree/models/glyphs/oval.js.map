{"version":3,"sources":["models/glyphs/oval.ts"],"names":[],"mappings":"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","file":"oval.js","sourcesContent":["import {XYGlyph, XYGlyphView, XYGlyphData} from \"./xy_glyph\"\nimport {DistanceSpec, AngleSpec} from \"core/vectorization\"\nimport {LineMixinVector, FillMixinVector} from \"core/property_mixins\"\nimport {Line, Fill} from \"core/visuals\"\nimport {Arrayable} from \"core/types\"\nimport * as p from \"core/properties\"\nimport {Rect} from \"core/util/spatial\"\nimport {IBBox} from \"core/util/bbox\"\nimport {Context2d} from \"core/util/canvas\"\n\nexport interface OvalData extends XYGlyphData {\n  _angle: Arrayable<number>\n  _width: Arrayable<number>\n  _height: Arrayable<number>\n\n  sw: Arrayable<number>\n  sh: Arrayable<number>\n\n  max_width: number\n  max_height: number\n\n  max_w2: number\n  max_h2: number\n}\n\nexport interface OvalView extends OvalData {}\n\nexport class OvalView extends XYGlyphView {\n  model: Oval\n  visuals: Oval.Visuals\n\n  _set_data(): void {\n    this.max_w2 = 0\n    if (this.model.properties.width.units == \"data\")\n      this.max_w2 = this.max_width/2\n\n    this.max_h2 = 0\n    if (this.model.properties.height.units == \"data\")\n      this.max_h2 = this.max_height/2\n  }\n\n  protected _map_data(): void {\n    if (this.model.properties.width.units == \"data\")\n      this.sw = this.sdist(this.renderer.xscale, this._x, this._width, 'center')\n    else\n      this.sw = this._width\n\n    if (this.model.properties.height.units == \"data\")\n      this.sh = this.sdist(this.renderer.yscale, this._y, this._height, 'center')\n    else\n      this.sh = this._height\n  }\n\n  protected _render(ctx: Context2d, indices: number[], {sx, sy, sw, sh, _angle}: OvalData): void {\n    for (const i of indices) {\n      if (isNaN(sx[i] + sy[i] + sw[i] + sh[i] + _angle[i]))\n        continue\n\n      ctx.translate(sx[i], sy[i])\n      ctx.rotate(_angle[i])\n\n      ctx.beginPath()\n      ctx.moveTo(0, -sh[i]/2)\n      ctx.bezierCurveTo( sw[i]/2, -sh[i]/2,  sw[i]/2,  sh[i]/2, 0,  sh[i]/2)\n      ctx.bezierCurveTo(-sw[i]/2,  sh[i]/2, -sw[i]/2, -sh[i]/2, 0, -sh[i]/2)\n      ctx.closePath()\n\n      if (this.visuals.fill.doit) {\n        this.visuals.fill.set_vectorize(ctx, i)\n        ctx.fill()\n      }\n\n      if (this.visuals.line.doit) {\n        this.visuals.line.set_vectorize(ctx, i)\n        ctx.stroke()\n      }\n\n      ctx.rotate(-_angle[i])\n      ctx.translate(-sx[i], -sy[i])\n    }\n  }\n\n  draw_legend_for_index(ctx: Context2d, {x0, y0, x1, y1}: IBBox, index: number): void {\n    const len = index + 1\n\n    const sx: number[] = new Array(len)\n    sx[index] = (x0 + x1)/2\n    const sy: number[] = new Array(len)\n    sy[index] = (y0 + y1)/2\n\n    const scale = this.sw[index]/this.sh[index]\n    const d = Math.min(Math.abs(x1 - x0), Math.abs(y1 - y0))*0.8\n\n    const sw: number[] = new Array(len)\n    const sh: number[] = new Array(len)\n    if (scale > 1) {\n      sw[index] = d\n      sh[index] = d/scale\n    } else {\n      sw[index] = d*scale\n      sh[index] = d\n    }\n\n    this._render(ctx, [index], {sx, sy, sw, sh} as any) // XXX\n  }\n\n  protected _bounds({minX, maxX, minY, maxY}: Rect): Rect {\n    return {\n      minX: minX - this.max_w2,\n      maxX: maxX + this.max_w2,\n      minY: minY - this.max_h2,\n      maxY: maxY + this.max_h2,\n    }\n  }\n}\n\nexport namespace Oval {\n  export interface Mixins extends LineMixinVector, FillMixinVector {}\n\n  export interface Attrs extends XYGlyph.Attrs, Mixins {\n    angle: AngleSpec\n    width: DistanceSpec\n    height: DistanceSpec\n  }\n\n  export interface Props extends XYGlyph.Props {\n    angle: p.AngleSpec\n    width: p.DistanceSpec\n    height: p.DistanceSpec\n  }\n\n  export interface Visuals extends XYGlyph.Visuals {\n    line: Line\n    fill: Fill\n  }\n}\n\nexport interface Oval extends Oval.Attrs {}\n\nexport class Oval extends XYGlyph {\n\n  properties: Oval.Props\n\n  constructor(attrs?: Partial<Oval.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = 'Oval'\n    this.prototype.default_view = OvalView\n\n    this.mixins(['line', 'fill'])\n    this.define({\n      angle:  [ p.AngleSpec,   0.0 ],\n      width:  [ p.DistanceSpec     ],\n      height: [ p.DistanceSpec     ],\n    })\n  }\n}\nOval.initClass()\n"]}