{"version":3,"sources":["models/tickers/months_ticker.ts"],"names":[],"mappings":";;;AACA,mEAA6D;AAC7D,+BAAoE;AACpE,mCAAoC;AACpC,yCAAsC;AAEtC,sEAAsE;AACtE,0DAA0D;AAC1D,4BAA4B,UAAkB,EAAE,QAAgB;IAC9D,IAAM,UAAU,GAAG,8BAAuB,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC,CAAC,CAAA;IAEhE,IAAM,QAAQ,GAAG,8BAAuB,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAA;IAC5D,QAAQ,CAAC,cAAc,CAAC,QAAQ,CAAC,cAAc,EAAE,GAAG,CAAC,CAAC,CAAA;IAEtD,IAAM,KAAK,GAAG,EAAE,CAAA;IAChB,IAAM,IAAI,GAAG,UAAU,CAAA;IACvB,OAAO,IAAI,EAAE;QACX,KAAK,CAAC,IAAI,CAAC,gBAAS,CAAC,IAAI,CAAC,CAAC,CAAA;QAE3B,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,cAAc,EAAE,GAAG,CAAC,CAAC,CAAA;QAC9C,IAAI,IAAI,GAAG,QAAQ;YACjB,MAAK;KACR;IAED,OAAO,KAAK,CAAA;AACd,CAAC;AAgBD;IAAkC,wCAAoB;IAIpD,sBAAY,KAAmC;eAC7C,kBAAM,KAAK,CAAC;IACd,CAAC;IAEM,sBAAS,GAAhB;QACE,IAAI,CAAC,SAAS,CAAC,IAAI,GAAG,cAAc,CAAA;QAEpC,IAAI,CAAC,MAAM,CAAC;YACV,MAAM,EAAE,CAAE,CAAC,CAAC,KAAK,EAAE,EAAE,CAAE;SACxB,CAAC,CAAA;IACJ,CAAC;IAED,iCAAU,GAAV;QACE,iBAAM,UAAU,WAAE,CAAA;QAClB,IAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAA;QAC1B,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC;YACnB,IAAI,CAAC,QAAQ,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,GAAC,gBAAS,CAAA;;YAEjD,IAAI,CAAC,QAAQ,GAAG,EAAE,GAAC,gBAAS,CAAA;IAChC,CAAC;IAED,4CAAqB,GAArB,UAAsB,QAAgB,EAAE,SAAiB,EAAE,UAAe,EAAE,gBAAwB;QAClG,IAAM,UAAU,GAAG,kBAAkB,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAA;QAE1D,IAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAA;QAC1B,IAAM,cAAc,GAAG,UAAC,SAAe;YACrC,OAAO,MAAM,CAAC,GAAG,CAAC,UAAC,KAAK;gBACtB,IAAM,UAAU,GAAG,gBAAS,CAAC,SAAS,CAAC,CAAA;gBACvC,UAAU,CAAC,WAAW,CAAC,KAAK,CAAC,CAAA;gBAC7B,OAAO,UAAU,CAAA;YACnB,CAAC,CAAC,CAAA;QACJ,CAAC,CAAA;QAED,IAAM,WAAW,GAAG,cAAM,CAAC,UAAU,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,CAAA;QAE1D,IAAM,SAAS,GAAG,WAAW,CAAC,GAAG,CAAC,UAAC,UAAU,IAAK,OAAA,UAAU,CAAC,OAAO,EAAE,EAApB,CAAoB,CAAC,CAAA;QACvE,IAAM,cAAc,GAAG,SAAS,CAAC,MAAM,CAAC,UAAC,IAAI,IAAK,OAAA,QAAQ,IAAI,IAAI,IAAI,IAAI,IAAI,SAAS,EAArC,CAAqC,CAAC,CAAA;QAExF,OAAO;YACL,KAAK,EAAE,cAAc;YACrB,KAAK,EAAE,EAAE;SACV,CAAA;IACH,CAAC;IACH,mBAAC;AAAD,CA/CA,AA+CC,CA/CiC,6CAAoB,GA+CrD;AA/CY,oCAAY;AAiDzB,YAAY,CAAC,SAAS,EAAE,CAAA","file":"months_ticker.js","sourcesContent":["import {TickSpec} from \"./ticker\"\nimport {SingleIntervalTicker} from \"./single_interval_ticker\"\nimport {copy_date, last_year_no_later_than, ONE_MONTH} from \"./util\"\nimport * as p from \"core/properties\"\nimport {concat} from \"core/util/array\"\n\n// Given a start and end time in millis, returns the shortest array of\n// consecutive years (as Dates) that surrounds both times.\nfunction date_range_by_year(start_time: number, end_time: number): Date[] {\n  const start_date = last_year_no_later_than(new Date(start_time))\n\n  const end_date = last_year_no_later_than(new Date(end_time))\n  end_date.setUTCFullYear(end_date.getUTCFullYear() + 1)\n\n  const dates = []\n  const date = start_date\n  while (true) {\n    dates.push(copy_date(date))\n\n    date.setUTCFullYear(date.getUTCFullYear() + 1)\n    if (date > end_date)\n      break\n  }\n\n  return dates\n}\n\n// A MonthsTicker produces ticks from a fixed subset of months of the year.\n// E.g., MonthsTicker([0, 3, 6, 9]) produces ticks of the 1st of January,\n// April, July, and October of each year.\n\nexport namespace MonthsTicker {\n  export interface Attrs extends SingleIntervalTicker.Attrs {\n    months: number[]\n  }\n\n  export interface Props extends SingleIntervalTicker.Props {}\n}\n\nexport interface MonthsTicker extends MonthsTicker.Attrs {}\n\nexport class MonthsTicker extends SingleIntervalTicker {\n\n  properties: MonthsTicker.Props\n\n  constructor(attrs?: Partial<MonthsTicker.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = \"MonthsTicker\"\n\n    this.define({\n      months: [ p.Array, [] ],\n    })\n  }\n\n  initialize(): void {\n    super.initialize()\n    const months = this.months\n    if (months.length > 1)\n      this.interval = (months[1] - months[0])*ONE_MONTH\n    else\n      this.interval = 12*ONE_MONTH\n  }\n\n  get_ticks_no_defaults(data_low: number, data_high: number, _cross_loc: any, _desired_n_ticks: number): TickSpec<number> {\n    const year_dates = date_range_by_year(data_low, data_high)\n\n    const months = this.months\n    const months_of_year = (year_date: Date) => {\n      return months.map((month) => {\n        const month_date = copy_date(year_date)\n        month_date.setUTCMonth(month)\n        return month_date\n      })\n    }\n\n    const month_dates = concat(year_dates.map(months_of_year))\n\n    const all_ticks = month_dates.map((month_date) => month_date.getTime())\n    const ticks_in_range = all_ticks.filter((tick) => data_low <= tick && tick <= data_high)\n\n    return {\n      major: ticks_in_range,\n      minor: [],\n    }\n  }\n}\n\nMonthsTicker.initClass()\n"]}