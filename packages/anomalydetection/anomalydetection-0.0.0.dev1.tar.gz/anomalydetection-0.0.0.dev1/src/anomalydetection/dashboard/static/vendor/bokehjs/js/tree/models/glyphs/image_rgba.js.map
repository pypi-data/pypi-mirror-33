{"version":3,"sources":["models/glyphs/image_rgba.ts"],"names":[],"mappings":"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","file":"image_rgba.js","sourcesContent":["import {XYGlyph, XYGlyphView, XYGlyphData} from \"./xy_glyph\"\nimport {DistanceSpec, NumberSpec} from \"core/vectorization\"\nimport {Arrayable, TypedArray} from \"core/types\"\nimport * as p from \"core/properties\"\nimport {max, concat} from \"core/util/array\"\nimport {Context2d} from \"core/util/canvas\"\nimport {Rect} from \"core/util/spatial\"\n\nexport interface ImageRGBAData extends XYGlyphData {\n  image_data: Arrayable<HTMLCanvasElement>\n\n  _image: Arrayable<TypedArray | number[][]>\n  _dw: Arrayable<number>\n  _dh: Arrayable<number>\n\n  _image_shape?: Arrayable<[number, number]>\n\n  sw: Arrayable<number>\n  sh: Arrayable<number>\n\n  max_dw: number\n  max_dh: number\n}\n\nexport interface ImageRGBAView extends ImageRGBAData {}\n\nexport class ImageRGBAView extends XYGlyphView {\n  model: ImageRGBA\n  visuals: ImageRGBA.Visuals\n\n  protected _width: Arrayable<number>\n  protected _height: Arrayable<number>\n\n  initialize(options: any): void {\n    super.initialize(options)\n    this.connect(this.model.properties.global_alpha.change, () => this.renderer.request_render())\n  }\n\n  protected _set_data(indices: number[] | null): void {\n    if (this.image_data == null || this.image_data.length != this._image.length)\n      this.image_data = new Array(this._image.length)\n\n    if (this._width == null || this._width.length != this._image.length)\n      this._width = new Array(this._image.length)\n\n    if (this._height == null || this._height.length != this._image.length)\n      this._height = new Array(this._image.length)\n\n    for (let i = 0, end = this._image.length; i < end; i++) {\n      if (indices != null && indices.indexOf(i) < 0)\n        continue\n\n      let buf: ArrayBuffer\n      if (this._image_shape != null && this._image_shape[i].length > 0) {\n        buf = (this._image[i] as TypedArray).buffer\n        const shape = this._image_shape[i]\n        this._height[i] = shape[0]\n        this._width[i] = shape[1]\n      } else {\n        const _image = this._image[i] as number[][]\n        const flat = concat(_image)\n        buf = new ArrayBuffer(flat.length * 4)\n        const color = new Uint32Array(buf)\n        for (let j = 0, endj = flat.length; j < endj; j++) {\n          color[j] = flat[j]\n        }\n        this._height[i] = _image.length\n        this._width[i] = _image[0].length\n      }\n\n      const _image_data = this.image_data[i]\n      let canvas: HTMLCanvasElement\n      if (_image_data != null && _image_data.width == this._width[i] &&\n                                 _image_data.height == this._height[i])\n        canvas = _image_data\n      else {\n        canvas = document.createElement('canvas')\n        canvas.width = this._width[i]\n        canvas.height = this._height[i]\n      }\n\n      const ctx = canvas.getContext('2d')!\n      const image_data = ctx.getImageData(0, 0, this._width[i], this._height[i])\n      const buf8 = new Uint8Array(buf)\n      image_data.data.set(buf8)\n      ctx.putImageData(image_data, 0, 0)\n      this.image_data[i] = canvas\n\n      this.max_dw = 0\n      if (this.model.properties.dw.units == \"data\")\n        this.max_dw = max(this._dw)\n\n      this.max_dh = 0\n      if (this.model.properties.dh.units == \"data\")\n        this.max_dh = max(this._dh)\n    }\n  }\n\n  protected _map_data(): void {\n    switch (this.model.properties.dw.units) {\n      case \"data\": {\n        this.sw = this.sdist(this.renderer.xscale, this._x, this._dw, \"edge\", this.model.dilate)\n        break\n      }\n      case \"screen\": {\n        this.sw = this._dw\n        break\n      }\n    }\n\n    switch (this.model.properties.dh.units) {\n      case \"data\": {\n        this.sh = this.sdist(this.renderer.yscale, this._y, this._dh, \"edge\", this.model.dilate)\n        break\n      }\n      case \"screen\": {\n        this.sh = this._dh\n        break\n      }\n    }\n  }\n\n  protected _render(ctx: Context2d, indices: number[], {image_data, sx, sy, sw, sh}: ImageRGBAData): void {\n    const old_smoothing = ctx.getImageSmoothingEnabled()\n    ctx.setImageSmoothingEnabled(false)\n\n    ctx.globalAlpha = this.model.global_alpha\n\n    for (const i of indices) {\n      if (isNaN(sx[i] + sy[i] + sw[i] + sh[i]))\n        continue\n\n      const y_offset = sy[i]\n\n      ctx.translate(0, y_offset)\n      ctx.scale(1, -1)\n      ctx.translate(0, -y_offset)\n      ctx.drawImage(image_data[i], sx[i]|0, sy[i]|0, sw[i], sh[i])\n      ctx.translate(0, y_offset)\n      ctx.scale(1, -1)\n      ctx.translate(0, -y_offset)\n    }\n\n    ctx.setImageSmoothingEnabled(old_smoothing)\n  }\n\n  bounds(): Rect {\n    const {bbox} = this.index\n    bbox.maxX += this.max_dw\n    bbox.maxY += this.max_dh\n    return bbox\n  }\n}\n\nexport namespace ImageRGBA {\n  export interface Attrs extends XYGlyph.Attrs {\n    image: NumberSpec\n    dw: DistanceSpec\n    dh: DistanceSpec\n    global_alpha: number\n    dilate: boolean\n  }\n\n  export interface Props extends XYGlyph.Props {\n    image: p.NumberSpec\n    dw: p.DistanceSpec\n    dh: p.DistanceSpec\n    global_alpha: p.Property<number>\n    dilate: p.Property<boolean>\n  }\n\n  export interface Visuals extends XYGlyph.Visuals {}\n}\n\nexport interface ImageRGBA extends ImageRGBA.Attrs {}\n\nexport class ImageRGBA extends XYGlyph {\n\n  properties: ImageRGBA.Props\n\n  constructor(attrs?: Partial<ImageRGBA.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = 'ImageRGBA'\n    this.prototype.default_view = ImageRGBAView\n\n    this.define({\n      image:        [ p.NumberSpec         ], // TODO (bev) array spec?\n      dw:           [ p.DistanceSpec       ],\n      dh:           [ p.DistanceSpec       ],\n      global_alpha: [ p.Number,      1.0   ],\n      dilate:       [ p.Bool,        false ],\n    })\n  }\n}\nImageRGBA.initClass()\n"]}