{"version":3,"sources":["models/widgets/checkbox_button_group.ts"],"names":[],"mappings":"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","file":"checkbox_button_group.js","sourcesContent":["import {empty, input, label, div} from \"core/dom\"\nimport * as p from \"core/properties\"\nimport {copy, includes, removeBy} from \"core/util/array\"\n\nimport {Widget, WidgetView} from \"./widget\"\nimport {ButtonType} from \"./abstract_button\"\n\nexport class CheckboxButtonGroupView extends WidgetView {\n  model: CheckboxButtonGroup\n\n  initialize(options: any): void {\n    super.initialize(options)\n    this.render()\n  }\n\n  connect_signals(): void {\n    super.connect_signals()\n    this.connect(this.model.change, () => this.render())\n  }\n\n  render(): void {\n    super.render()\n\n    empty(this.el)\n    const divEl = div({class: \"bk-bs-btn-group\"})\n    this.el.appendChild(divEl)\n\n    const active = this.model.active\n    const labels = this.model.labels\n\n    for (let i = 0; i < labels.length; i++) {\n      const inputEl = input({type: `checkbox`, value: `${i}`, checked: i in active})\n      inputEl.addEventListener(\"change\", () => this.model.change_input(i))\n      const labelEl = label({class: [`bk-bs-btn`, `bk-bs-btn-${this.model.button_type}`]}, inputEl, labels[i])\n      if (includes(active, i))\n        labelEl.classList.add(\"bk-bs-active\")\n      divEl.appendChild(labelEl)\n    }\n  }\n\n}\n\nexport namespace CheckboxButtonGroup {\n  export interface Attrs extends Widget.Attrs {\n    active: number[]\n    labels: string[]\n    button_type: ButtonType\n    callback: any // XXX\n  }\n\n  export interface Props extends Widget.Props {}\n}\n\nexport interface CheckboxButtonGroup extends CheckboxButtonGroup.Attrs {}\n\nexport class CheckboxButtonGroup extends Widget {\n\n  properties: CheckboxButtonGroup.Props\n\n  constructor(attrs?: Partial<CheckboxButtonGroup.Attrs>) {\n    super(attrs)\n  }\n\n  change_input(i: number): void {\n    const active = copy(this.active)\n\n    if (includes(active, i))\n      removeBy(active, (j) => i == j)\n    else\n      active.push(i)\n\n    active.sort()\n\n    this.active = active\n\n    if (this.callback != null)\n      this.callback.execute(this)\n  }\n\n  static initClass(): void {\n    this.prototype.type = \"CheckboxButtonGroup\"\n    this.prototype.default_view = CheckboxButtonGroupView\n\n    this.define({\n      active:      [ p.Array,  []        ],\n      labels:      [ p.Array,  []        ],\n      button_type: [ p.String, \"default\" ],\n      callback:    [ p.Instance          ],\n    })\n  }\n}\n\nCheckboxButtonGroup.initClass()\n"]}