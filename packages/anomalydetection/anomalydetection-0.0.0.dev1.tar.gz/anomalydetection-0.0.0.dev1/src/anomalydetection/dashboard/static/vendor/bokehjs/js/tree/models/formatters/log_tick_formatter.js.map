{"version":3,"sources":["models/formatters/log_tick_formatter.ts"],"names":[],"mappings":";;;AAAA,mDAA8C;AAC9C,+DAAyD;AAGzD,wCAAmC;AACnC,mCAAoC;AAYpC;IAAsC,4CAAa;IAIjD,0BAAY,KAAuC;eACjD,kBAAM,KAAK,CAAC;IACd,CAAC;IAEM,0BAAS,GAAhB;QACE,IAAI,CAAC,SAAS,CAAC,IAAI,GAAG,kBAAkB,CAAA;QAExC,IAAI,CAAC,MAAM,CAAC;YACV,MAAM,EAAE,CAAE,CAAC,CAAC,QAAQ,EAAE,IAAI,CAAE;SAC7B,CAAC,CAAA;IACJ,CAAC;IAID,qCAAU,GAAV;QACE,iBAAM,UAAU,WAAE,CAAA;QAClB,IAAI,CAAC,eAAe,GAAG,IAAI,yCAAkB,EAAE,CAAA;QAC/C,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI;YACrB,gBAAM,CAAC,IAAI,CAAC,6HAA6H,CAAC,CAAA;IAC9I,CAAC;IAED,mCAAQ,GAAR,UAAS,KAAe,EAAE,IAAU;QAClC,IAAI,KAAK,CAAC,MAAM,IAAI,CAAC;YACnB,OAAO,EAAE,CAAA;QAEX,IAAM,IAAI,GAAG,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAA;QAExD,IAAI,cAAc,GAAG,KAAK,CAAA;QAC1B,IAAM,MAAM,GAAa,IAAI,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAA;QAChD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;YAChD,MAAM,CAAC,CAAC,CAAC,GAAM,IAAI,SAAK,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAI,CAAA;YAC1E,IAAI,CAAC,GAAG,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,IAAI,MAAM,CAAC,CAAC,GAAC,CAAC,CAAC,EAAE;gBACrC,cAAc,GAAG,IAAI,CAAA;gBACrB,MAAK;aACN;SACF;QAED,IAAI,cAAc;YAChB,OAAO,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,CAAA;;YAEjD,OAAO,MAAM,CAAA;IACjB,CAAC;IACH,uBAAC;AAAD,CA9CA,AA8CC,CA9CqC,8BAAa,GA8ClD;AA9CY,4CAAgB;AA+C7B,gBAAgB,CAAC,SAAS,EAAE,CAAA","file":"log_tick_formatter.js","sourcesContent":["import {TickFormatter} from \"./tick_formatter\"\nimport {BasicTickFormatter} from \"./basic_tick_formatter\"\nimport {LogTicker} from \"../tickers/log_ticker\"\nimport {Axis} from \"../axes/axis\"\nimport {logger} from \"core/logging\"\nimport * as p from \"core/properties\"\n\nexport namespace LogTickFormatter {\n  export interface Attrs extends TickFormatter.Attrs {\n    ticker: LogTicker | null\n  }\n\n  export interface Props extends TickFormatter.Props {}\n}\n\nexport interface LogTickFormatter extends LogTickFormatter.Attrs {}\n\nexport class LogTickFormatter extends TickFormatter {\n\n  properties: LogTickFormatter.Props\n\n  constructor(attrs?: Partial<LogTickFormatter.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = 'LogTickFormatter'\n\n    this.define({\n      ticker: [ p.Instance, null ],\n    })\n  }\n\n  protected basic_formatter: BasicTickFormatter\n\n  initialize(): void {\n    super.initialize()\n    this.basic_formatter = new BasicTickFormatter()\n    if (this.ticker == null)\n      logger.warn(\"LogTickFormatter not configured with a ticker, using default base of 10 (labels will be incorrect if ticker base is not 10)\")\n  }\n\n  doFormat(ticks: number[], axis: Axis): string[] {\n    if (ticks.length == 0)\n      return []\n\n    const base = this.ticker != null ? this.ticker.base : 10\n\n    let small_interval = false\n    const labels: string[] = new Array(ticks.length)\n    for (let i = 0, end = ticks.length; i < end; i++) {\n      labels[i] = `${base}^${ Math.round(Math.log(ticks[i]) / Math.log(base)) }`\n      if (i > 0 && labels[i] == labels[i-1]) {\n        small_interval = true\n        break\n      }\n    }\n\n    if (small_interval)\n      return this.basic_formatter.doFormat(ticks, axis)\n    else\n      return labels\n  }\n}\nLogTickFormatter.initClass()\n"]}