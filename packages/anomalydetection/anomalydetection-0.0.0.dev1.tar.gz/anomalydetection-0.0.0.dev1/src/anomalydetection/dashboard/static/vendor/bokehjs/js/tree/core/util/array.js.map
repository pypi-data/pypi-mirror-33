{"version":3,"sources":["core/util/array.ts"],"names":[],"mappings":";AAAA,0BAA0B;AAC1B,8BAA8B;AAC9B,yFAAyF;AACzF,kEAAkE;;AAElE,+BAA+B;AAC/B,mCAA+B;AAE/B,yCAAuD;AAC/C,cADA,eAAG,CACA;AAAE,gBADA,iBAAK,CACA;AAAE,cADA,eAAG,CACA;AAAE,gBADA,iBAAK,CACA;AAAE,cADA,eAAG,CACA;AAEnC,IAAM,KAAK,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,CAAA;AAEnC,cAAwB,KAAU;IAChC,OAAO,KAAK,CAAC,CAAC,CAAC,CAAA;AACjB,CAAC;AAFD,oBAEC;AAED,cAAwB,KAAU;IAChC,OAAO,KAAK,CAAC,KAAK,CAAC,MAAM,GAAC,CAAC,CAAC,CAAA;AAC9B,CAAC;AAFD,oBAEC;AAED,cAAwB,KAAU;IAChC,OAAO,KAAK,CAAC,KAAK,CAAC,MAAM,GAAC,CAAC,CAAC,CAAA;AAC9B,CAAC;AAFD,oBAEC;AAED,cAAwB,KAAU;IAChC,OAAO,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;AAC1B,CAAC;AAFD,oBAEC;AAED,gBAA0B,MAAa;IACrC,OAAO,CAAA,KAAC,EAAU,CAAA,CAAC,MAAM,WAAI,MAAM,EAAC;;AACtC,CAAC;AAFD,wBAEC;AAED,kBAA4B,KAAU,EAAE,KAAQ;IAC9C,OAAO,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAA;AACpC,CAAC;AAFD,4BAEC;AAEY,QAAA,QAAQ,GAAG,QAAQ,CAAA;AAEhC,aAAuB,KAAU,EAAE,KAAa;IAC9C,OAAO,KAAK,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,GAAG,KAAK,CAAC,CAAA;AACzD,CAAC;AAFD,kBAEC;AAED,aAA0B,EAAO,EAAE,EAAO;IACxC,IAAM,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,CAAA;IACxC,IAAM,GAAG,GAAa,IAAI,KAAK,CAAC,CAAC,CAAC,CAAA;IAClC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;QAC1B,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAA;KACxB;IACD,OAAO,GAAG,CAAA;AACZ,CAAC;AAPD,kBAOC;AAED,eAA4B,GAAa;IACvC,IAAM,CAAC,GAAG,GAAG,CAAC,MAAM,CAAA;IACpB,IAAM,EAAE,GAAQ,IAAI,KAAK,CAAC,CAAC,CAAC,CAAA;IAC5B,IAAM,EAAE,GAAQ,IAAI,KAAK,CAAC,CAAC,CAAC,CAAA;IAC5B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;QAC1B,WAAuB,EAAtB,aAAK,EAAE,aAAK,CAAU;KACxB;IACD,OAAO,CAAC,EAAE,EAAE,EAAE,CAAC,CAAA;;AACjB,CAAC;AARD,sBAQC;AAED,eAAsB,KAAa,EAAE,IAAa,EAAE,IAAgB;IAAhB,qBAAA,EAAA,QAAgB;IAClE,eAAM,CAAC,IAAI,GAAG,CAAC,EAAE,kCAAkC,CAAC,CAAA;IAEpD,IAAI,IAAI,IAAI,IAAI,EAAE;QAChB,IAAI,GAAG,KAAK,CAAA;QACZ,KAAK,GAAG,CAAC,CAAA;KACV;IAEM,IAAA,cAAG,EAAE,gBAAI,EAAE,cAAG,CAAQ;IAE7B,IAAM,KAAK,GAAG,KAAK,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAA;IAC1C,IAAM,MAAM,GAAG,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,GAAG,KAAK,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC,CAAA;IACrD,IAAM,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,CAAA;IAE3B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE,KAAK,IAAI,KAAK,EAAE;QAC/C,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,CAAA;KACjB;IAED,OAAO,KAAK,CAAA;AACd,CAAC;AAnBD,sBAmBC;AAED,kBAAyB,KAAa,EAAE,IAAY,EAAE,GAAiB;IAAjB,oBAAA,EAAA,SAAiB;IACrE,IAAM,IAAI,GAAG,CAAC,IAAI,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAA;IACvC,IAAM,KAAK,GAAG,IAAI,KAAK,CAAC,GAAG,CAAC,CAAA;IAE5B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;QAC5B,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,IAAI,GAAC,CAAC,CAAA;KAC1B;IAED,OAAO,KAAK,CAAA;AACd,CAAC;AATD,4BASC;AAED,mBAA6B,KAAY;IACvC,IAAM,IAAI,GAAG,KAAK,CAAC,MAAM,CAAA;IACzB,IAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAA;IAE5B,IAAM,UAAU,GAAU,EAAE,CAAA;IAE5B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,EAAE,EAAE;QAC7B,UAAU,CAAC,CAAC,CAAC,GAAG,EAAE,CAAA;QAElB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,EAAE,EAAE;YAC7B,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;SAC/B;KACF;IAED,OAAO,UAAU,CAAA;AACnB,CAAC;AAfD,8BAeC;AAED,gBAAuB,KAAe;IACpC,IAAM,MAAM,GAAa,EAAE,CAAA;IAC3B,KAAK,CAAC,MAAM,CAAC,UAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAK,OAAA,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAjB,CAAiB,EAAE,CAAC,CAAC,CAAA;IAC/C,OAAO,MAAM,CAAA;AACf,CAAC;AAJD,wBAIC;AAED,gBAAuB,KAAe;IACpC,OAAO,iBAAK,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,UAAC,CAAC,IAAK,OAAA,KAAK,CAAC,CAAC,CAAC,EAAR,CAAQ,CAAC,CAAA;AACpD,CAAC;AAFD,wBAEC;AAED,gBAAuB,KAAe;IACpC,OAAO,iBAAK,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,UAAC,CAAC,IAAK,OAAA,KAAK,CAAC,CAAC,CAAC,EAAR,CAAQ,CAAC,CAAA;AACpD,CAAC;AAFD,wBAEC;AAED,aAAuB,KAAU,EAAE,SAA+B;IAChE,KAAmB,UAAK,EAAL,eAAK,EAAL,mBAAK,EAAL,IAAK;QAAnB,IAAM,IAAI,cAAA;QACb,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;YAClB,OAAO,KAAK,CAAA;KACf;IACD,OAAO,IAAI,CAAA;AACb,CAAC;AAND,kBAMC;AAED,aAAuB,KAAU,EAAE,SAA+B;IAChE,KAAmB,UAAK,EAAL,eAAK,EAAL,mBAAK,EAAL,IAAK;QAAnB,IAAM,IAAI,cAAA;QACb,IAAI,SAAS,CAAC,IAAI,CAAC;YACjB,OAAO,IAAI,CAAA;KACd;IACD,OAAO,KAAK,CAAA;AACd,CAAC;AAND,kBAMC;AAED,0BAA0B,GAAW;IACnC,OAAO,UAAY,KAAU,EAAE,SAA+B;QAC5D,IAAM,MAAM,GAAG,KAAK,CAAC,MAAM,CAAA;QAC3B,IAAI,KAAK,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAA;QACpC,OAAO,KAAK,IAAI,CAAC,IAAI,KAAK,GAAG,MAAM,EAAE,KAAK,IAAI,GAAG,EAAE;YACjD,IAAI,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;gBACzB,OAAO,KAAK,CAAA;SACf;QACD,OAAO,CAAC,CAAC,CAAA;IACX,CAAC,CAAA;AACH,CAAC;AAEY,QAAA,SAAS,GAAG,gBAAgB,CAAC,CAAC,CAAC,CAAA;AAC/B,QAAA,aAAa,GAAG,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAA;AAEjD,cAAwB,KAAU,EAAE,SAA+B;IACjE,IAAM,KAAK,GAAG,iBAAS,CAAC,KAAK,EAAE,SAAS,CAAC,CAAA;IACzC,OAAO,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAA;AAC/C,CAAC;AAHD,oBAGC;AAED,kBAA4B,KAAU,EAAE,SAA+B;IACrE,IAAM,KAAK,GAAG,qBAAa,CAAC,KAAK,EAAE,SAAS,CAAC,CAAA;IAC7C,OAAO,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAA;AAC/C,CAAC;AAHD,4BAGC;AAED,qBAA+B,KAAU,EAAE,KAAQ;IACjD,IAAI,GAAG,GAAG,CAAC,CAAA;IACX,IAAI,IAAI,GAAG,KAAK,CAAC,MAAM,CAAA;IACvB,OAAO,GAAG,GAAG,IAAI,EAAE;QACjB,IAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAA;QACxC,IAAI,KAAK,CAAC,GAAG,CAAC,GAAG,KAAK;YACpB,GAAG,GAAG,GAAG,GAAG,CAAC,CAAA;;YAEb,IAAI,GAAG,GAAG,CAAA;KACb;IACD,OAAO,GAAG,CAAA;AACZ,CAAC;AAXD,kCAWC;AAED,gBAA0B,KAAU,EAAE,GAAwB;IAC5D,IAAM,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,UAAC,KAAK,EAAE,KAAK;QACjC,OAAO,EAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,CAAC,KAAK,CAAC,EAAE,CAAA;IACvD,CAAC,CAAC,CAAA;IACF,GAAG,CAAC,IAAI,CAAC,UAAC,IAAI,EAAE,KAAK;QACnB,IAAM,CAAC,GAAG,IAAI,CAAC,GAAG,CAAA;QAClB,IAAM,CAAC,GAAG,KAAK,CAAC,GAAG,CAAA;QACnB,IAAI,CAAC,KAAK,CAAC,EAAE;YACX,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,SAAS;gBAAE,OAAQ,CAAC,CAAA;YACvC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,SAAS;gBAAE,OAAO,CAAC,CAAC,CAAA;SACxC;QACD,OAAO,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAA;IACjC,CAAC,CAAC,CAAA;IACF,OAAO,GAAG,CAAC,GAAG,CAAC,UAAC,IAAI,IAAK,OAAA,IAAI,CAAC,KAAK,EAAV,CAAU,CAAC,CAAA;AACtC,CAAC;AAdD,wBAcC;AAED,cAAwB,KAAU;IAChC,IAAM,MAAM,GAAG,EAAE,CAAA;IACjB,KAAoB,UAAK,EAAL,eAAK,EAAL,mBAAK,EAAL,IAAK;QAApB,IAAM,KAAK,cAAA;QACd,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,KAAK,CAAC,EAAE;YAC5B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;SACnB;KACF;IACD,OAAO,MAAM,CAAA;AACf,CAAC;AARD,oBAQC;AAED,gBAA6B,KAAU,EAAE,GAAmB;IAC1D,IAAM,MAAM,GAAQ,EAAE,CAAA;IACtB,IAAM,IAAI,GAAQ,EAAE,CAAA;IACpB,KAAoB,UAAK,EAAL,eAAK,EAAL,mBAAK,EAAL,IAAK;QAApB,IAAM,KAAK,cAAA;QACd,IAAM,QAAQ,GAAG,GAAG,CAAC,KAAK,CAAC,CAAA;QAC3B,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,EAAE;YAC7B,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;YACnB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;SACnB;KACF;IACD,OAAO,MAAM,CAAA;AACf,CAAC;AAXD,wBAWC;AAED;IAAyB,gBAAgB;SAAhB,UAAgB,EAAhB,qBAAgB,EAAhB,IAAgB;QAAhB,2BAAgB;;IACvC,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAA;AAC7B,CAAC;AAFD,sBAEC;AAED,sBAAgC,KAAU;IAAE,gBAAgB;SAAhB,UAAgB,EAAhB,qBAAgB,EAAhB,IAAgB;QAAhB,+BAAgB;;IAC1D,IAAM,MAAM,GAAQ,EAAE,CAAA;IACtB,GAAG,EAAE,KAAmB,UAAK,EAAL,eAAK,EAAL,mBAAK,EAAL,IAAK;QAAnB,IAAM,IAAI,cAAA;QAClB,IAAI,QAAQ,CAAC,MAAM,EAAE,IAAI,CAAC;YACxB,SAAQ;QACV,KAAoB,UAAM,EAAN,iBAAM,EAAN,oBAAM,EAAN,IAAM;YAArB,IAAM,KAAK,eAAA;YACd,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC;gBACxB,SAAS,GAAG,CAAA;SACf;QACD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;KAClB;IACD,OAAO,MAAM,CAAA;AACf,CAAC;AAZD,oCAYC;AAED,oBAA8B,KAAU;IAAE,gBAAgB;SAAhB,UAAgB,EAAhB,qBAAgB,EAAhB,IAAgB;QAAhB,+BAAgB;;IACxD,IAAM,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,CAAA;IAC3B,OAAO,KAAK,CAAC,MAAM,CAAC,UAAC,KAAK,IAAK,OAAA,CAAC,QAAQ,CAAC,IAAI,EAAE,KAAK,CAAC,EAAtB,CAAsB,CAAC,CAAA;AACxD,CAAC;AAHD,gCAGC;AAED,kBAA4B,KAAU,EAAE,GAAyB;IAC/D,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,GAAG;QACjC,IAAI,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACf,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;;YAElB,CAAC,EAAE,CAAA;KACN;AACH,CAAC;AAPD,4BAOC;AAED,wDAAwD;AACxD,6EAA6E;AAC7E,iBAA2B,KAAU;IACnC,IAAM,MAAM,GAAG,KAAK,CAAC,MAAM,CAAA;IAC3B,IAAM,QAAQ,GAAG,IAAI,KAAK,CAAC,MAAM,CAAC,CAAA;IAClC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE;QAC/B,IAAM,IAAI,GAAG,eAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;QAC3B,IAAI,IAAI,KAAK,CAAC;YACZ,QAAQ,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAA;QAC9B,QAAQ,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAA;KAC1B;IACD,OAAO,QAAQ,CAAA;AACjB,CAAC;AAVD,0BAUC;AAED,kBAA+B,KAAU,EAAE,EAA2B;IACpE,IAAM,CAAC,GAAG,KAAK,CAAC,MAAM,CAAA;IACtB,IAAM,MAAM,GAAQ,IAAI,KAAK,CAAC,CAAC,GAAC,CAAC,CAAC,CAAA;IAElC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;QAC9B,MAAM,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,GAAC,CAAC,CAAC,CAAC,CAAA;KACrC;IAED,OAAO,MAAM,CAAA;AACf,CAAC;AATD,4BASC;AAED,kBAA4B,KAAU;IACpC,IAAM,CAAC,GAAG,KAAK,CAAC,MAAM,CAAA;IACtB,IAAM,MAAM,GAAQ,IAAI,KAAK,CAAC,CAAC,CAAC,CAAA;IAEhC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;QAC1B,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAA;KAC7B;IAED,OAAO,MAAM,CAAA;AACf,CAAC;AATD,4BASC;AAED,gBAA0B,KAAQ,EAAE,CAAS;IAC3C,IAAM,MAAM,GAAQ,IAAI,KAAK,CAAC,CAAC,CAAC,CAAA;IAChC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;QAC1B,MAAM,CAAC,CAAC,CAAC,GAAG,KAAK,CAAA;KAClB;IACD,OAAO,MAAM,CAAA;AACf,CAAC;AAND,wBAMC","file":"array.js","sourcesContent":["//     Underscore.js 1.8.3\n//     http://underscorejs.org\n//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n//     Underscore may be freely distributed under the MIT license.\n\nimport {randomIn} from \"./math\"\nimport {assert} from \"./assert\"\n\nimport {min, minBy, max, maxBy, sum} from \"./arrayable\"\nexport {min, minBy, max, maxBy, sum}\n\nconst slice = Array.prototype.slice\n\nexport function head<T>(array: T[]): T {\n  return array[0]\n}\n\nexport function tail<T>(array: T[]): T {\n  return array[array.length-1]\n}\n\nexport function last<T>(array: T[]): T | undefined {\n  return array[array.length-1]\n}\n\nexport function copy<T>(array: T[]): T[] {\n  return slice.call(array)\n}\n\nexport function concat<T>(arrays: T[][]): T[] {\n  return ([] as T[]).concat(...arrays)\n}\n\nexport function includes<T>(array: T[], value: T): boolean {\n  return array.indexOf(value) !== -1\n}\n\nexport const contains = includes\n\nexport function nth<T>(array: T[], index: number): T {\n  return array[index >= 0 ? index : array.length + index]\n}\n\nexport function zip<A, B>(As: A[], Bs: B[]): [A, B][] {\n  const n = Math.min(As.length, Bs.length)\n  const ABs: [A, B][] = new Array(n)\n  for (let i = 0; i < n; i++) {\n    ABs[i] = [As[i], Bs[i]]\n  }\n  return ABs\n}\n\nexport function unzip<A, B>(ABs: [A, B][]): [A[], B[]] {\n  const n = ABs.length\n  const As: A[] = new Array(n)\n  const Bs: B[] = new Array(n)\n  for (let i = 0; i < n; i++) {\n    [As[i], Bs[i]] = ABs[i]\n  }\n  return [As, Bs]\n}\n\nexport function range(start: number, stop?: number, step: number = 1): number[] {\n  assert(step > 0, \"'step' must be a positive number\")\n\n  if (stop == null) {\n    stop = start\n    start = 0\n  }\n\n  const {max, ceil, abs} = Math\n\n  const delta = start <= stop ? step : -step\n  const length = max(ceil(abs(stop - start) / step), 0)\n  const range = Array(length)\n\n  for (let i = 0; i < length; i++, start += delta) {\n    range[i] = start\n  }\n\n  return range\n}\n\nexport function linspace(start: number, stop: number, num: number = 100): number[] {\n  const step = (stop - start) / (num - 1)\n  const array = new Array(num)\n\n  for (let i = 0; i < num; i++) {\n    array[i] = start + step*i\n  }\n\n  return array\n}\n\nexport function transpose<T>(array: T[][]): T[][] {\n  const rows = array.length\n  const cols = array[0].length\n\n  const transposed: T[][] = []\n\n  for (let j = 0; j < cols; j++) {\n    transposed[j] = []\n\n    for (let i = 0; i < rows; i++) {\n      transposed[j][i] = array[i][j]\n    }\n  }\n\n  return transposed\n}\n\nexport function cumsum(array: number[]): number[] {\n  const result: number[] = []\n  array.reduce((a, b, i) => result[i] = a + b, 0)\n  return result\n}\n\nexport function argmin(array: number[]): number {\n  return minBy(range(array.length), (i) => array[i])\n}\n\nexport function argmax(array: number[]): number {\n  return maxBy(range(array.length), (i) => array[i])\n}\n\nexport function all<T>(array: T[], predicate: (item: T) => boolean): boolean {\n  for (const item of array) {\n    if (!predicate(item))\n      return false\n  }\n  return true\n}\n\nexport function any<T>(array: T[], predicate: (item: T) => boolean): boolean {\n  for (const item of array) {\n    if (predicate(item))\n      return true\n  }\n  return false\n}\n\nfunction findIndexFactory(dir: number) {\n  return function<T>(array: T[], predicate: (item: T) => boolean): number {\n    const length = array.length\n    let index = dir > 0 ? 0 : length - 1\n    for (; index >= 0 && index < length; index += dir) {\n      if (predicate(array[index]))\n        return index\n    }\n    return -1\n  }\n}\n\nexport const findIndex = findIndexFactory(1)\nexport const findLastIndex = findIndexFactory(-1)\n\nexport function find<T>(array: T[], predicate: (item: T) => boolean): T | undefined {\n  const index = findIndex(array, predicate)\n  return index == -1 ? undefined : array[index]\n}\n\nexport function findLast<T>(array: T[], predicate: (item: T) => boolean): T | undefined {\n  const index = findLastIndex(array, predicate)\n  return index == -1 ? undefined : array[index]\n}\n\nexport function sortedIndex<T>(array: T[], value: T): number {\n  let low = 0\n  let high = array.length\n  while (low < high) {\n    const mid = Math.floor((low + high) / 2)\n    if (array[mid] < value)\n      low = mid + 1\n    else\n      high = mid\n  }\n  return low\n}\n\nexport function sortBy<T>(array: T[], key: (item: T) => number): T[] {\n  const tmp = array.map((value, index) => {\n    return {value: value, index: index, key: key(value) }\n  })\n  tmp.sort((left, right) => {\n    const a = left.key\n    const b = right.key\n    if (a !== b) {\n      if (a > b || a === undefined) return  1\n      if (a < b || b === undefined) return -1\n    }\n    return left.index - right.index\n  })\n  return tmp.map((item) => item.value)\n}\n\nexport function uniq<T>(array: T[]): T[] {\n  const result = []\n  for (const value of array) {\n    if (!includes(result, value)) {\n      result.push(value)\n    }\n  }\n  return result\n}\n\nexport function uniqBy<T, U>(array: T[], key: (item: T) => U): T[] {\n  const result: T[] = []\n  const seen: U[] = []\n  for (const value of array) {\n    const computed = key(value)\n    if (!includes(seen, computed)) {\n      seen.push(computed)\n      result.push(value)\n    }\n  }\n  return result\n}\n\nexport function union<T>(...arrays: T[][]): T[] {\n  return uniq(concat(arrays))\n}\n\nexport function intersection<T>(array: T[], ...arrays: T[][]): T[] {\n  const result: T[] = []\n  top: for (const item of array) {\n    if (includes(result, item))\n      continue\n    for (const other of arrays) {\n      if (!includes(other, item))\n        continue top\n    }\n    result.push(item)\n  }\n  return result\n}\n\nexport function difference<T>(array: T[], ...arrays: T[][]): T[] {\n  const rest = concat(arrays)\n  return array.filter((value) => !includes(rest, value))\n}\n\nexport function removeBy<T>(array: T[], key: (item: T) => boolean): void {\n  for (let i = 0; i < array.length;) {\n    if (key(array[i]))\n      array.splice(i, 1)\n    else\n      i++\n  }\n}\n\n// Shuffle a collection, using the modern version of the\n// [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).\nexport function shuffle<T>(array: T[]): T[] {\n  const length = array.length\n  const shuffled = new Array(length)\n  for (let i = 0; i < length; i++) {\n    const rand = randomIn(0, i)\n    if (rand !== i)\n      shuffled[i] = shuffled[rand]\n    shuffled[rand] = array[i]\n  }\n  return shuffled\n}\n\nexport function pairwise<T, U>(array: T[], fn: (prev: T, next: T) => U): U[] {\n  const n = array.length\n  const result: U[] = new Array(n-1)\n\n  for (let i = 0; i < n - 1; i++) {\n    result[i] = fn(array[i], array[i+1])\n  }\n\n  return result\n}\n\nexport function reversed<T>(array: T[]): T[] {\n  const n = array.length\n  const result: T[] = new Array(n)\n\n  for (let i = 0; i < n; i++) {\n    result[n - i - 1] = array[i]\n  }\n\n  return result\n}\n\nexport function repeat<T>(value: T, n: number): T[] {\n  const result: T[] = new Array(n)\n  for (let i = 0; i < n; i++) {\n    result[i] = value\n  }\n  return result\n}\n"]}