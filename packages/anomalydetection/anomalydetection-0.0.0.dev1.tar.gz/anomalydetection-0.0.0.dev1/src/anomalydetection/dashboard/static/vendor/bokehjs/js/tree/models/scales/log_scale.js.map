{"version":3,"sources":["models/scales/log_scale.ts"],"names":[],"mappings":"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","file":"log_scale.js","sourcesContent":["import {Scale} from \"./scale\"\nimport {Arrayable} from \"core/types\"\n\nexport namespace LogScale {\n  export interface Attrs extends Scale.Attrs {}\n\n  export interface Props extends Scale.Props {}\n}\n\nexport interface LogScale extends LogScale.Attrs {}\n\nexport class LogScale extends Scale {\n\n  properties: LogScale.Props\n\n  constructor(attrs?: Partial<LogScale.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = \"LogScale\"\n  }\n\n  compute(x: number): number {\n    const [factor, offset, inter_factor, inter_offset] = this._compute_state()\n\n    let value: number\n    if (inter_factor == 0)\n      value = 0\n    else {\n      const _x = (Math.log(x) - inter_offset) / inter_factor\n      if (isFinite(_x))\n        value = _x*factor + offset\n      else\n        value = NaN\n    }\n\n    return value\n  }\n\n  v_compute(xs: Arrayable<number>): Arrayable<number> {\n    const [factor, offset, inter_factor, inter_offset] = this._compute_state()\n\n    const result = new Float64Array(xs.length)\n\n    if (inter_factor == 0) {\n      for (let i = 0; i < xs.length; i++)\n        result[i] = 0\n    } else {\n      for (let i = 0; i < xs.length; i++) {\n        const _x = (Math.log(xs[i]) - inter_offset) / inter_factor\n        let value: number\n        if (isFinite(_x))\n          value = _x*factor + offset\n        else\n          value = NaN\n        result[i] = value\n      }\n    }\n\n    return result\n  }\n\n  invert(xprime: number): number {\n    const [factor, offset, inter_factor, inter_offset] = this._compute_state()\n    const value = (xprime - offset) / factor\n    return Math.exp(inter_factor*value + inter_offset)\n  }\n\n  v_invert(xprimes: Arrayable<number>): Arrayable<number> {\n    const [factor, offset, inter_factor, inter_offset] = this._compute_state()\n    const result = new Float64Array(xprimes.length)\n    for (let i = 0; i < xprimes.length; i++) {\n      const value = (xprimes[i] - offset) / factor\n      result[i] = Math.exp(inter_factor*value + inter_offset)\n    }\n    return result\n  }\n\n  protected _get_safe_factor(orig_start: number, orig_end: number): [number, number] {\n    let start = orig_start < 0 ? 0 : orig_start\n    let end = orig_end < 0 ? 0 :  orig_end\n\n    if (start == end) {\n      if (start == 0)\n        [start, end] = [1, 10]\n      else {\n        const log_val = Math.log(start) / Math.log(10)\n        start = Math.pow(10, Math.floor(log_val))\n\n        if (Math.ceil(log_val) != Math.floor(log_val))\n          end = Math.pow(10, Math.ceil(log_val))\n        else\n          end = Math.pow(10, Math.ceil(log_val) + 1)\n      }\n    }\n\n    return [start, end]\n  }\n\n  protected _compute_state(): [number, number, number, number] {\n    const source_start = this.source_range.start\n    const source_end   = this.source_range.end\n    const target_start = this.target_range.start\n    const target_end   = this.target_range.end\n\n    const screen_range = target_end - target_start\n    const [start, end] = this._get_safe_factor(source_start, source_end)\n\n    let inter_factor: number\n    let inter_offset: number\n    if (start == 0) {\n      inter_factor = Math.log(end)\n      inter_offset = 0\n    } else {\n      inter_factor = Math.log(end) - Math.log(start)\n      inter_offset = Math.log(start)\n    }\n\n    const factor = screen_range\n    const offset = target_start\n\n    return [factor, offset, inter_factor, inter_offset]\n  }\n}\n\nLogScale.initClass()\n"]}