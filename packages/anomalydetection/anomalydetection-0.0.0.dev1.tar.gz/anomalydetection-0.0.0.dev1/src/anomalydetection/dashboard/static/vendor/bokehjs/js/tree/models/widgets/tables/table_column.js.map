{"version":3,"sources":["models/widgets/tables/table_column.ts"],"names":[],"mappings":";;;AAAA,qDAAgE;AAChE,+CAAuD;AAEvD,mCAAoC;AACpC,2CAAyC;AAEzC,wCAAoC;AAoCpC;IAAiC,uCAAK;IAIpC,qBAAY,KAAkC;eAC5C,kBAAM,KAAK,CAAC;IACd,CAAC;IAEM,qBAAS,GAAhB;QACE,IAAI,CAAC,SAAS,CAAC,IAAI,GAAG,aAAa,CAAA;QAEnC,IAAI,CAAC,MAAM,CAAC;YACV,KAAK,EAAS,CAAE,CAAC,CAAC,MAAM,CAAiC;YACzD,KAAK,EAAS,CAAE,CAAC,CAAC,MAAM,CAAiC;YACzD,KAAK,EAAS,CAAE,CAAC,CAAC,MAAM,EAAI,GAAG,CAA0B;YACzD,SAAS,EAAK,CAAE,CAAC,CAAC,QAAQ,EAAE,cAAM,OAAA,IAAI,iCAAe,EAAE,EAArB,CAAqB,CAAE;YACzD,MAAM,EAAQ,CAAE,CAAC,CAAC,QAAQ,EAAE,cAAM,OAAA,IAAI,2BAAY,EAAE,EAAlB,CAAkB,CAAK;YACzD,QAAQ,EAAM,CAAE,CAAC,CAAC,IAAI,EAAM,IAAI,CAAyB;YACzD,YAAY,EAAE,CAAE,CAAC,CAAC,MAAM,EAAI,WAAW,CAAkB;SAC1D,CAAC,CAAA;IACJ,CAAC;IAED,8BAAQ,GAAR;QACE,OAAO;YACL,EAAE,EAAE,iBAAQ,EAAE;YACd,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,IAAI,EAAE,IAAI,CAAC,KAAK;YAChB,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,SAAS,EAAE,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS;YAC5F,KAAK,EAAE,IAAI,CAAC,MAAM;YAClB,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,YAAY;YAChC,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,cAAc,EAAE,IAAI,CAAC,YAAY,IAAI,WAAW;SACjD,CAAA;IACH,CAAC;IACH,kBAAC;AAAD,CAnCA,AAmCC,CAnCgC,aAAK,GAmCrC;AAnCY,kCAAW;AAoCxB,WAAW,CAAC,SAAS,EAAE,CAAA","file":"table_column.js","sourcesContent":["import {CellFormatter, StringFormatter} from \"./cell_formatters\"\nimport {CellEditor, StringEditor} from \"./cell_editors\"\nimport {Class} from \"core/class\"\nimport * as p from \"core/properties\"\nimport {uniqueId} from \"core/util/string\"\nimport {View} from \"core/view\"\nimport {Model} from \"../../../model\"\n\nexport type Column = {\n  id: string\n  field: string\n  name: string\n  width?: number\n  formatter?: (...args: any[]) => HTMLElement\n  model?: CellEditor\n  editor?: Class<View>\n  sortable?: boolean\n  resizable?: boolean\n  selectable?: boolean\n  defaultSortAsc?: boolean\n  behavior?: \"select\" | \"selectAndMove\"\n  cannotTriggerInsert?: boolean\n  cssClass?: string\n  headerCssClass?: string\n}\n\nexport namespace TableColumn {\n  export interface Attrs extends Model.Attrs {\n    field: string\n    title: string\n    width: number\n    formatter: CellFormatter\n    editor: CellEditor\n    sortable: boolean\n    default_sort: \"ascending\" | \"descending\"\n  }\n\n  export interface Props extends Model.Props {}\n}\n\nexport interface TableColumn extends TableColumn.Attrs {}\n\nexport class TableColumn extends Model {\n\n  properties: TableColumn.Props\n\n  constructor(attrs?: Partial<TableColumn.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = 'TableColumn'\n\n    this.define({\n      field:        [ p.String                                ],\n      title:        [ p.String                                ],\n      width:        [ p.Number,   300                         ],\n      formatter:    [ p.Instance, () => new StringFormatter() ],\n      editor:       [ p.Instance, () => new StringEditor()    ],\n      sortable:     [ p.Bool,     true                        ],\n      default_sort: [ p.String,   \"ascending\"                 ],\n    })\n  }\n\n  toColumn(): Column {\n    return {\n      id: uniqueId(),\n      field: this.field,\n      name: this.title,\n      width: this.width,\n      formatter: this.formatter != null ? this.formatter.doFormat.bind(this.formatter) : undefined,\n      model: this.editor,\n      editor: this.editor.default_view,\n      sortable: this.sortable,\n      defaultSortAsc: this.default_sort == \"ascending\",\n    }\n  }\n}\nTableColumn.initClass()\n"]}