{"version":3,"sources":["models/glyphs/patch.ts"],"names":[],"mappings":"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","file":"patch.js","sourcesContent":["import {XYGlyph, XYGlyphView, XYGlyphData} from \"./xy_glyph\"\nimport {generic_area_legend} from \"./utils\"\nimport {LineMixinVector, FillMixinVector} from \"core/property_mixins\"\nimport {Line, Fill} from \"core/visuals\"\nimport {IBBox} from \"core/util/bbox\"\nimport {Context2d} from \"core/util/canvas\"\n\nexport interface PatchData extends XYGlyphData {}\n\nexport interface PatchView extends PatchData {}\n\nexport class PatchView extends XYGlyphView {\n  model: Patch\n  visuals: Patch.Visuals\n\n  protected _render(ctx: Context2d, indices: number[], {sx, sy}: PatchData): void {\n    if (this.visuals.fill.doit) {\n      this.visuals.fill.set_value(ctx)\n\n      for (const i of indices) {\n        if (i == 0) {\n          ctx.beginPath()\n          ctx.moveTo(sx[i], sy[i])\n          continue\n        } else if (isNaN(sx[i] + sy[i])) {\n          ctx.closePath()\n          ctx.fill()\n          ctx.beginPath()\n          continue\n        } else\n          ctx.lineTo(sx[i], sy[i])\n      }\n\n      ctx.closePath()\n      ctx.fill()\n    }\n\n    if (this.visuals.line.doit) {\n      this.visuals.line.set_value(ctx)\n\n      for (const i of indices) {\n        if (i == 0) {\n          ctx.beginPath()\n          ctx.moveTo(sx[i], sy[i])\n          continue\n        } else if (isNaN(sx[i] + sy[i])) {\n          ctx.closePath()\n          ctx.stroke()\n          ctx.beginPath()\n          continue\n        } else\n          ctx.lineTo(sx[i], sy[i])\n      }\n\n      ctx.closePath()\n      return ctx.stroke()\n    }\n  }\n\n  draw_legend_for_index(ctx: Context2d, bbox: IBBox, index: number): void {\n    generic_area_legend(this.visuals, ctx, bbox, index)\n  }\n}\n\nexport namespace Patch {\n  export interface Mixins extends LineMixinVector, FillMixinVector {}\n\n  export interface Attrs extends XYGlyph.Attrs, Mixins {}\n\n  export interface Props extends XYGlyph.Props {}\n\n  export interface Visuals extends XYGlyph.Visuals {\n    line: Line\n    fill: Fill\n  }\n}\n\nexport interface Patch extends Patch.Attrs {}\n\nexport class Patch extends XYGlyph {\n\n  properties: Patch.Props\n\n  constructor(attrs?: Partial<Patch.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = 'Patch'\n    this.prototype.default_view = PatchView\n\n    this.mixins(['line', 'fill'])\n  }\n}\nPatch.initClass()\n"]}