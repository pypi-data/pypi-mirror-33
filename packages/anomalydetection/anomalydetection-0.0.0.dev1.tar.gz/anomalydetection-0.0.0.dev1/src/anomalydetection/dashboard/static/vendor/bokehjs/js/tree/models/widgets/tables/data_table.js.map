{"version":3,"sources":["models/widgets/tables/data_table.ts"],"names":[],"mappings":"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","file":"data_table.js","sourcesContent":["const {Grid: SlickGrid} = require(\"slickgrid\")\ntype SlickGrid = typeof SlickGrid\n\nconst {RowSelectionModel} = require(\"slickgrid/plugins/slick.rowselectionmodel\")\nconst {CheckboxSelectColumn} = require(\"slickgrid/plugins/slick.checkboxselectcolumn\")\n\nimport * as hittest from \"core/hittest\"\nimport * as p from \"core/properties\"\nimport {uniqueId} from \"core/util/string\"\nimport {any, range} from \"core/util/array\"\nimport {keys} from \"core/util/object\"\nimport {logger} from \"core/logging\"\n\nimport {TableWidget} from \"./table_widget\"\nimport {Column, TableColumn} from \"./table_column\"\nimport {WidgetView} from \"../widget\"\nimport {ColumnarDataSource} from \"../../sources/columnar_data_source\"\nimport {CDSView} from \"../../sources/cds_view\"\n\nexport const DTINDEX_NAME = \"__bkdt_internal_index__\"\n\ndeclare var $: any\n\nexport type Item = {[key: string]: any}\n\nexport class DataProvider {\n\n  readonly index: number[]\n\n  constructor(readonly source: ColumnarDataSource, readonly view: CDSView) {\n    if (DTINDEX_NAME in this.source.data)\n      throw new Error(`special name ${DTINDEX_NAME} cannot be used as a data table column`)\n\n    this.index = this.view.indices\n  }\n\n  getLength(): number {\n    return this.index.length\n  }\n\n  getItem(offset: number): Item {\n    const item: Item = {}\n    for (const field of keys(this.source.data)) {\n      item[field] = this.source.data[field][this.index[offset]]\n    }\n    item[DTINDEX_NAME] = this.index[offset]\n    return item\n  }\n\n  setItem(offset: number, item: Item): void {\n    for (const field in item) {\n      // internal index is maintained independently, ignore\n      const value = item[field]\n      if (field != DTINDEX_NAME) {\n        this.source.data[field][this.index[offset]] = value\n      }\n    }\n    this._update_source_inplace()\n  }\n\n  getField(offset: number, field: string): any {\n    if (field == DTINDEX_NAME) {\n      return this.index[offset]\n    }\n    return this.source.data[field][this.index[offset]]\n  }\n\n  setField(offset: number, field: string, value: any): void {\n    // field assumed never to be internal index name (ctor would throw)\n    this.source.data[field][this.index[offset]] = value\n    this._update_source_inplace()\n  }\n\n  getItemMetadata(_index: number): any {\n    return null\n  }\n\n  getRecords(): Item[] {\n    return range(0, this.getLength()).map((i) => this.getItem(i))\n  }\n\n  sort(columns: any[]): void {\n    let cols = columns.map((column) => [column.sortCol.field, column.sortAsc ? 1 : -1])\n\n    if (cols.length == 0) {\n      cols = [[DTINDEX_NAME, 1]]\n    }\n\n    const records = this.getRecords()\n    const old_index = this.index.slice()\n\n    // TODO (bev) this sort is unstable, which is not great\n    this.index.sort(function(i1, i2) {\n      for (const [field, sign] of cols) {\n        const value1 = records[old_index.indexOf(i1)][field]\n        const value2 = records[old_index.indexOf(i2)][field]\n        const result = value1 == value2 ? 0 : value1 > value2 ? sign : -sign\n        if (result != 0)\n          return result\n      }\n      return 0\n    })\n  }\n\n  protected _update_source_inplace(): void {\n    this.source.properties.data.change.emit()\n  }\n}\n\nexport class DataTableView extends WidgetView {\n  model: DataTable\n\n  private data: DataProvider\n  private grid: SlickGrid\n\n  protected _in_selection_update = false\n  protected _warned_not_reorderable = false\n\n  connect_signals(): void {\n    super.connect_signals()\n    this.connect(this.model.change, () => this.render())\n    this.connect(this.model.source.streaming, () => this.updateGrid())\n    this.connect(this.model.source.patching, () => this.updateGrid())\n    this.connect(this.model.source.change, () => this.updateGrid(true))\n    this.connect(this.model.source.properties.data.change, () => this.updateGrid())\n    this.connect(this.model.source.selected.change, () => this.updateSelection())\n  }\n\n  updateGrid(from_source_change=false): void {\n    // TODO (bev) This is to enure that CDSView indices are properly computed\n    // before passing to the DataProvider. This will result in extra calls to\n    // compute_indices. This \"over execution\" will be addressed in a more\n    // general look at events\n    this.model.view.compute_indices()\n\n    this.data.constructor(this.model.source, this.model.view)\n    this.grid.invalidate()\n    this.grid.render()\n\n    if (!from_source_change) {\n      // This is only needed to call @_tell_document_about_change()\n      this.model.source.data = this.model.source.data\n      this.model.source.change.emit()\n    }\n  }\n\n  updateSelection(): void {\n    if (this._in_selection_update)\n      return\n\n    const {selected} = this.model.source\n    const selected_indices = selected['1d'].indices\n\n    const permuted_indices = selected_indices.map((x: number) => this.data.index.indexOf(x))\n\n    this._in_selection_update = true\n    this.grid.setSelectedRows(permuted_indices)\n    this._in_selection_update = false\n    // If the selection is not in the current slickgrid viewport, scroll the\n    // datatable to start at the row before the first selected row, so that\n    // the selection is immediately brought into view. We don't scroll when\n    // the selection is already in the viewport so that selecting from the\n    // datatable itself does not re-scroll.\n    const cur_grid_range = this.grid.getViewport()\n\n    const scroll_index = this.model.get_scroll_index(cur_grid_range, permuted_indices)\n    if (scroll_index != null)\n      this.grid.scrollRowToTop(scroll_index)\n  }\n\n  newIndexColumn(): Column {\n    return {\n      id: uniqueId(),\n      name: this.model.index_header,\n      field: DTINDEX_NAME,\n      width: this.model.index_width,\n      behavior: \"select\",\n      cannotTriggerInsert: true,\n      resizable: false,\n      selectable: false,\n      sortable: true,\n      cssClass: \"bk-cell-index\",\n      headerCssClass: \"bk-header-index\",\n    }\n  }\n\n  css_classes(): string[] {\n    return super.css_classes().concat(\"bk-data-table\")\n  }\n\n  render(): void {\n    let checkboxSelector\n    let columns = this.model.columns.map((column) => column.toColumn())\n\n    if (this.model.selectable == \"checkbox\") {\n      checkboxSelector = new CheckboxSelectColumn({cssClass: \"bk-cell-select\"})\n      columns.unshift(checkboxSelector.getColumnDefinition())\n    }\n\n    if (this.model.index_position != null) {\n      const index_position = this.model.index_position\n      const index = this.newIndexColumn()\n      // This is to be able to provide negative index behaviour that\n      // matches what python users will expect\n      if (index_position == -1) {\n        columns.push(index)\n      }\n      else if (index_position < -1) {\n        columns.splice(index_position+1, 0, index)\n      }\n      else {\n        columns.splice(index_position, 0, index)\n      }\n    }\n\n    let { reorderable } = this.model\n\n    if (reorderable && !(typeof $ !== \"undefined\" && $.fn != null && $.fn.sortable != null)) {\n      if (!this._warned_not_reorderable) {\n        logger.warn(\"jquery-ui is required to enable DataTable.reorderable\")\n        this._warned_not_reorderable = true\n      }\n      reorderable = false\n    }\n\n    const options = {\n      enableCellNavigation: this.model.selectable !== false,\n      enableColumnReorder: reorderable,\n      forceFitColumns: this.model.fit_columns,\n      autoHeight: (this.model.height as any) == \"auto\",\n      multiColumnSort: this.model.sortable,\n      editable: this.model.editable,\n      autoEdit: false,\n    }\n\n    if (this.model.width != null)\n      this.el.style.width = `${this.model.width}px`\n    else\n      this.el.style.width = `${this.model.default_width}px`\n\n    if (this.model.height != null && (this.model.height as any) != \"auto\")\n      this.el.style.height = `${this.model.height}px`\n\n    this.data = new DataProvider(this.model.source, this.model.view)\n    this.grid = new SlickGrid(this.el, this.data, columns, options)\n\n    this.grid.onSort.subscribe((_event: any, args: any) => {\n      columns = args.sortCols\n      this.data.sort(columns)\n      this.grid.invalidate()\n      this.updateSelection()\n      this.grid.render()\n    })\n\n    if (this.model.selectable !== false) {\n      this.grid.setSelectionModel(new RowSelectionModel({selectActiveRow: checkboxSelector == null}))\n      if (checkboxSelector != null)\n        this.grid.registerPlugin(checkboxSelector)\n\n      this.grid.onSelectedRowsChanged.subscribe((_event: any, args: any) => {\n        if (this._in_selection_update) {\n          return\n        }\n\n        const selected = hittest.create_empty_hit_test_result()\n        selected.indices = args.rows.map((i: number) => this.data.index[i])\n        this.model.source.selected = selected\n      })\n\n      this.updateSelection()\n    }\n  }\n}\n\nexport namespace DataTable {\n  export interface Attrs extends TableWidget.Attrs {\n    columns: TableColumn[]\n    fit_columns: boolean\n    sortable: boolean\n    reorderable: boolean\n    editable: boolean\n    selectable: boolean | \"checkbox\"\n    index_position: number | null\n    index_header: string\n    index_width: number\n    scroll_to_selection: boolean\n  }\n\n  export interface Props extends TableWidget.Props {}\n}\n\nexport interface DataTable extends DataTable.Attrs {}\n\nexport class DataTable extends TableWidget {\n\n  properties: DataTable.Props\n\n  constructor(attrs?: Partial<DataTable.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = 'DataTable'\n    this.prototype.default_view = DataTableView\n\n    this.define({\n      columns:             [ p.Array,  []    ],\n      fit_columns:         [ p.Bool,   true  ],\n      sortable:            [ p.Bool,   true  ],\n      reorderable:         [ p.Bool,   true  ],\n      editable:            [ p.Bool,   false ],\n      selectable:          [ p.Bool,   true  ],\n      index_position:      [ p.Int,    0     ],\n      index_header:        [ p.String, \"#\"   ],\n      index_width:         [ p.Int,    40    ],\n      scroll_to_selection: [ p.Bool,   true  ],\n    })\n\n    this.override({\n      height: 400,\n    })\n  }\n\n  readonly default_width = 600\n\n  get_scroll_index(grid_range: {top: number, bottom: number}, selected_indices: number[]): number | null {\n    if (!this.scroll_to_selection || (selected_indices.length == 0))\n      return null\n\n    if (!any(selected_indices, i => grid_range.top <= i && i <= grid_range.bottom)) {\n      return Math.max(0, Math.min(...selected_indices) - 1)\n    }\n\n    return null\n  }\n}\nDataTable.initClass()\n"]}