{"version":3,"sources":["models/scales/scale.ts"],"names":[],"mappings":";;;AAAA,4CAAuC;AAIvC,mCAAoC;AAapC;IAAoC,iCAAS;IAI3C,eAAY,KAA4B;eACtC,kBAAM,KAAK,CAAC;IACd,CAAC;IAEM,eAAS,GAAhB;QACE,IAAI,CAAC,SAAS,CAAC,IAAI,GAAG,OAAO,CAAA;QAE7B,IAAI,CAAC,QAAQ,CAAC;YACZ,YAAY,EAAE,CAAE,CAAC,CAAC,GAAG,CAAE;YACvB,YAAY,EAAE,CAAE,CAAC,CAAC,GAAG,CAAE;SACxB,CAAC,CAAA;IACJ,CAAC;IAUD,yBAAS,GAAT,UAAU,EAAU,EAAE,EAAU;QAC9B,IAAI,IAAI,CAAC,YAAY,CAAC,WAAW;YAC/B,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAA;;YAE3C,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAA;IAC/C,CAAC;IAED,wBAAQ,GAAR,UAAS,GAAW,EAAE,GAAW;QAC/B,IAAI,IAAI,CAAC,YAAY,CAAC,WAAW;YAC/B,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAA;;YAE3C,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAA;IAC/C,CAAC;IACH,YAAC;AAAD,CAtCA,AAsCC,CAtCmC,sBAAS,GAsC5C;AAtCqB,sBAAK;AAwC3B,KAAK,CAAC,SAAS,EAAE,CAAA","file":"scale.js","sourcesContent":["import {Transform} from \"../transforms\"\nimport {Range} from \"../ranges/range\"\nimport {Range1d} from \"../ranges/range1d\"\nimport {Arrayable} from \"core/types\"\nimport * as p from \"core/properties\"\n\nexport namespace Scale {\n  export interface Attrs extends Transform.Attrs {\n    source_range: Range\n    target_range: Range1d\n  }\n\n  export interface Props extends Transform.Props {}\n}\n\nexport interface Scale extends Scale.Attrs {}\n\nexport abstract class Scale extends Transform {\n\n  properties: Scale.Props\n\n  constructor(attrs?: Partial<Scale.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = \"Scale\"\n\n    this.internal({\n      source_range: [ p.Any ],\n      target_range: [ p.Any ], // p.Instance(Range1d)\n    })\n  }\n\n  abstract compute(x: number): number\n\n  abstract v_compute(xs: Arrayable<number>): Arrayable<number>\n\n  abstract invert(sx: number): number\n\n  abstract v_invert(sxs: Arrayable<number>): Arrayable<number>\n\n  r_compute(x0: number, x1: number): [number, number] {\n    if (this.target_range.is_reversed)\n      return [this.compute(x1), this.compute(x0)]\n    else\n      return [this.compute(x0), this.compute(x1)]\n  }\n\n  r_invert(sx0: number, sx1: number): [number, number] {\n    if (this.target_range.is_reversed)\n      return [this.invert(sx1), this.invert(sx0)]\n    else\n      return [this.invert(sx0), this.invert(sx1)]\n  }\n}\n\nScale.initClass()\n"]}