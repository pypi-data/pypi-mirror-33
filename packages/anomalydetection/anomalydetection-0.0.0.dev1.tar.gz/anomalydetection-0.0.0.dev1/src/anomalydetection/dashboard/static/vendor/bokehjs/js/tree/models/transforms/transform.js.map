{"version":3,"sources":["models/transforms/transform.ts"],"names":[],"mappings":";;;AAAA,qCAAiC;AAWjC;IAAqD,qCAAK;IAIxD,mBAAY,KAAgC;eAC1C,kBAAM,KAAK,CAAC;IACd,CAAC;IAEM,mBAAS,GAAhB;QACE,IAAI,CAAC,SAAS,CAAC,IAAI,GAAG,WAAW,CAAA;IACnC,CAAC;IAKH,gBAAC;AAAD,CAfA,AAeC,CAfoD,aAAK,GAezD;AAfqB,8BAAS;AAgB/B,SAAS,CAAC,SAAS,EAAE,CAAA","file":"transform.js","sourcesContent":["import {Model} from \"../../model\"\nimport {Arrayable} from \"core/types\"\n\nexport namespace Transform {\n  export interface Attrs extends Model.Attrs {}\n\n  export interface Props extends Model.Props {}\n}\n\nexport interface Transform<To = number> extends Transform.Attrs {}\n\nexport abstract class Transform<To = number> extends Model {\n\n  properties: Transform.Props\n\n  constructor(attrs?: Partial<Transform.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = \"Transform\"\n  }\n\n  abstract compute(x: number): To\n\n  abstract v_compute(xs: Arrayable<number>): Arrayable<To>\n}\nTransform.initClass()\n"]}