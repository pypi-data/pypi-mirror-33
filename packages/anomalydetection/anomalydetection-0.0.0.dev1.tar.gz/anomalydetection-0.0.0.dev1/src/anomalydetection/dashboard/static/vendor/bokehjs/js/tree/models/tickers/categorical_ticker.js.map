{"version":3,"sources":["models/tickers/categorical_ticker.ts"],"names":[],"mappings":";;;AAAA,mCAAyC;AAgBzC;IAAuC,6CAAc;IAInD,2BAAY,KAAwC;eAClD,kBAAM,KAAK,CAAC;IACd,CAAC;IAEM,2BAAS,GAAhB;QACE,IAAI,CAAC,SAAS,CAAC,IAAI,GAAG,mBAAmB,CAAA;IAC3C,CAAC;IAED,qCAAS,GAAT,UAAU,KAAa,EAAE,GAAW,EAAE,KAAkB,EAAE,UAAe,EAAE,CAAM;QAC/E,IAAM,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,CAAC,CAAA;QAE9D,IAAM,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,IAAI,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,CAAC,CAAA;QAC/D,IAAM,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,IAAI,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,CAAC,CAAA;QAE/D,OAAO;YACL,KAAK,EAAE,MAAM;YACb,KAAK,EAAE,EAAE;YACT,IAAI,EAAG,IAAI;YACX,IAAI,EAAG,IAAI;SACZ,CAAA;IACH,CAAC;IAEO,oCAAQ,GAAhB,UAAiB,OAAiB,EAAE,KAAkB,EAAE,KAAa,EAAE,GAAW;QAChF,IAAM,MAAM,GAAa,EAAE,CAAA;QAE3B,KAAqB,UAAO,EAAP,mBAAO,EAAP,qBAAO,EAAP,IAAO;YAAvB,IAAM,MAAM,gBAAA;YACf,IAAM,KAAK,GAAG,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,CAAA;YACrC,IAAI,KAAK,GAAG,KAAK,IAAI,KAAK,GAAG,GAAG;gBAC9B,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;SACtB;QAED,OAAO,MAAM,CAAA;IACf,CAAC;IACH,wBAAC;AAAD,CArCA,AAqCC,CArCsC,eAAM,GAqC5C;AArCY,8CAAiB;AAuC9B,iBAAiB,CAAC,SAAS,EAAE,CAAA","file":"categorical_ticker.js","sourcesContent":["import {Ticker, TickSpec} from \"./ticker\"\nimport {FactorRange, Factor} from \"../ranges/factor_range\"\n\nexport interface FactorTickSpec extends TickSpec<Factor> {\n  tops: Factor[]\n  mids: Factor[]\n}\n\nexport namespace CategoricalTicker {\n  export interface Attrs extends Ticker.Attrs {}\n\n  export interface Props extends Ticker.Props {}\n}\n\nexport interface CategoricalTicker extends CategoricalTicker.Attrs {}\n\nexport class CategoricalTicker extends Ticker<Factor> {\n\n  properties: CategoricalTicker.Props\n\n  constructor(attrs?: Partial<CategoricalTicker.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = \"CategoricalTicker\"\n  }\n\n  get_ticks(start: number, end: number, range: FactorRange, _cross_loc: any, _: any): FactorTickSpec {\n    const majors = this._collect(range.factors, range, start, end)\n\n    const tops = this._collect(range.tops || [], range, start, end)\n    const mids = this._collect(range.mids || [], range, start, end)\n\n    return {\n      major: majors,\n      minor: [],\n      tops : tops,\n      mids : mids,\n    }\n  }\n\n  private _collect(factors: Factor[], range: FactorRange, start: number, end: number): Factor[] {\n    const result: Factor[] = []\n\n    for (const factor of factors) {\n      const coord = range.synthetic(factor)\n      if (coord > start && coord < end)\n        result.push(factor)\n    }\n\n    return result\n  }\n}\n\nCategoricalTicker.initClass()\n"]}