{"version":3,"sources":["models/tools/gestures/box_select_tool.ts"],"names":[],"mappings":"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","file":"box_select_tool.js","sourcesContent":["import {SelectTool, SelectToolView} from \"./select_tool\"\nimport {BoxAnnotation} from \"../../annotations/box_annotation\"\nimport * as p from \"core/properties\"\nimport {Dimensions} from \"core/enums\"\nimport {GestureEvent} from \"core/ui_events\"\nimport {RectGeometry} from \"core/geometry\"\nimport {extend} from \"core/util/object\"\n\nexport class BoxSelectToolView extends SelectToolView {\n  model: BoxSelectTool\n\n  protected _base_point: [number, number] | null\n\n  protected _compute_limits(curpoint: [number, number]): [[number, number], [number, number]] {\n    const frame = this.plot_model.frame\n    const dims = this.model.dimensions\n\n    let base_point = this._base_point!\n    if (this.model.origin == \"center\") {\n      const [cx, cy] = base_point\n      const [dx, dy] = curpoint\n      base_point = [cx - (dx - cx), cy - (dy - cy)]\n    }\n\n    return this.model._get_dim_limits(base_point, curpoint, frame, dims)\n  }\n\n  _pan_start(ev: GestureEvent): void {\n    const {sx, sy} = ev\n    this._base_point = [sx, sy]\n  }\n\n  _pan(ev: GestureEvent): void {\n    const {sx, sy} = ev\n    const curpoint: [number, number] = [sx, sy]\n\n    const [sxlim, sylim] = this._compute_limits(curpoint)\n    this.model.overlay.update({left: sxlim[0], right: sxlim[1], top: sylim[0], bottom: sylim[1]})\n\n    if (this.model.select_every_mousemove) {\n      const append = ev.shiftKey\n      this._do_select(sxlim, sylim, false, append)\n    }\n  }\n\n  _pan_end(ev: GestureEvent): void {\n    const {sx, sy} = ev\n    const curpoint: [number, number] = [sx, sy]\n\n    const [sxlim, sylim] = this._compute_limits(curpoint)\n    const append = ev.shiftKey\n    this._do_select(sxlim, sylim, true, append)\n\n    this.model.overlay.update({left: null, right: null, top: null, bottom: null})\n\n    this._base_point = null\n\n    this.plot_view.push_state('box_select', {selection: this.plot_view.get_selection()})\n  }\n\n  _do_select([sx0, sx1]: [number, number], [sy0, sy1]: [number, number], final: boolean, append: boolean = false): void {\n    const geometry: RectGeometry = {\n      type: 'rect',\n      sx0: sx0,\n      sx1: sx1,\n      sy0: sy0,\n      sy1: sy1,\n    }\n    this._select(geometry, final, append)\n  }\n\n  _emit_callback(geometry: RectGeometry): void {\n    const r = this.computed_renderers[0]\n    const frame = this.plot_model.frame\n\n    const xscale = frame.xscales[r.x_range_name]\n    const yscale = frame.yscales[r.y_range_name]\n\n    const {sx0, sx1, sy0, sy1} = geometry\n    const [x0, x1] = xscale.r_invert(sx0, sx1)\n    const [y0, y1] = yscale.r_invert(sy0, sy1)\n\n    const g = extend({x0, y0, x1, y1}, geometry)\n    this.model.callback.execute(this.model, {geometry: g})\n  }\n}\n\nconst DEFAULT_BOX_OVERLAY = () => {\n  return new BoxAnnotation({\n    level: \"overlay\",\n    render_mode: \"css\",\n    top_units: \"screen\",\n    left_units: \"screen\",\n    bottom_units: \"screen\",\n    right_units: \"screen\",\n    fill_color: {value: \"lightgrey\"},\n    fill_alpha: {value: 0.5},\n    line_color: {value: \"black\"},\n    line_alpha: {value: 1.0},\n    line_width: {value: 2},\n    line_dash: {value: [4, 4]},\n  })\n}\n\nexport namespace BoxSelectTool {\n  export interface Attrs extends SelectTool.Attrs {\n    dimensions: Dimensions\n    select_every_mousemove: boolean\n    callback: any // XXX\n    overlay: BoxAnnotation\n    origin: \"corner\" | \"center\"\n  }\n\n  export interface Props extends SelectTool.Props {}\n}\n\nexport interface BoxSelectTool extends BoxSelectTool.Attrs {}\n\nexport class BoxSelectTool extends SelectTool {\n\n  properties: BoxSelectTool.Props\n\n  constructor(attrs?: Partial<BoxSelectTool.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = \"BoxSelectTool\"\n\n    this.prototype.default_view = BoxSelectToolView\n\n    this.define({\n      dimensions:             [ p.Dimensions, \"both\"              ],\n      select_every_mousemove: [ p.Bool,       false               ],\n      callback:               [ p.Instance                        ],\n      overlay:                [ p.Instance,   DEFAULT_BOX_OVERLAY ],\n      origin:                 [ p.String,     \"corner\"            ], // Enum\n    })\n  }\n\n  tool_name = \"Box Select\"\n  icon = \"bk-tool-icon-box-select\"\n  event_type = \"pan\" as \"pan\"\n  default_order = 30\n\n  get tooltip(): string {\n    return this._get_dim_tooltip(this.tool_name, this.dimensions)\n  }\n}\n\nBoxSelectTool.initClass()\n"]}