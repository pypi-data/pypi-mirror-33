{"version":3,"sources":["models/annotations/annotation.ts"],"names":[],"mappings":";;;AAAA,qDAAiD;AAEjD,mCAAqC;AACrC,4CAA6C;AAC7C,2CAAuC;AAEvC,kDAA4D;AAI5D;IAA6C,0CAAY;IAAzD;;IAuBA,CAAC;IApBW,kCAAS,GAAnB;QACE,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAA;IACpC,CAAC;IAED,iCAAQ,GAAR;QACE,OAAO,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;IAC9D,CAAC;IAED,iCAAQ,GAAR,UAAS,MAA0B;QACjC,IAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,qBAAqB,CAAC,MAAM,CAAC,CAAA;QACrD,eAAM,CAAC,IAAW,EAAE,IAAI,CAAC,CAAA;QAEzB,IAAI,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE;YAC3B,IAAM,MAAI,GAAG,IAAW,CAAA;YACxB,IAAI,MAAI,CAAC,EAAE,IAAI,IAAI;gBACjB,0CAAsD,EAArD,iBAAO,EAAE,iBAAO,CAAqC;YACxD,IAAI,MAAI,CAAC,GAAG,IAAI,IAAI;gBAClB,8CAA4D,EAA3D,kBAAQ,EAAE,kBAAQ,CAAyC;SAC/D;;IACH,CAAC;IACH,qBAAC;AAAD,CAvBA,AAuBC,CAvB4C,uBAAY,GAuBxD;AAvBqB,wCAAc;AAyCpC;IAAyC,sCAAQ;IAI/C,oBAAY,KAAiC;eAC3C,kBAAM,KAAK,CAAC;IACd,CAAC;IAEM,oBAAS,GAAhB;QACE,IAAI,CAAC,SAAS,CAAC,IAAI,GAAG,YAAY,CAAC;QAEnC,IAAI,CAAC,MAAM,CAAC;YACV,IAAI,EAAG,CAAE,CAAC,CAAC,QAAQ,CAAE;SACtB,CAAC,CAAC;QAEH,IAAI,CAAC,QAAQ,CAAC;YACZ,KAAK,EAAE,YAAY;SACpB,CAAC,CAAC;IACL,CAAC;IAED,8BAAS,GAAT,UAAU,IAAU;QAClB,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,IAAI,IAAI,KAAK,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE;YAClD,IAAM,KAAK,GAAG,IAAI,sBAAS,CAAC,EAAC,IAAI,MAAA,EAAC,CAAC,CAAC;YACpC,KAAK,CAAC,eAAe,CAAC,IAAI,CAAC,QAAS,CAAC,CAAC;YACtC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;SACvB;IACH,CAAC;IAED,8BAAS,GAAT,UAAU,KAAgB;QACxB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,2FAA2F;QAC3F,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;IACzB,CAAC;IACH,iBAAC;AAAD,CAjCA,AAiCC,CAjCwC,mBAAQ,GAiChD;AAjCqB,gCAAU;AAkChC,UAAU,CAAC,SAAS,EAAE,CAAC","file":"annotation.js","sourcesContent":["import {SidePanel} from \"core/layout/side_panel\";\nimport {Side} from \"core/enums\"\nimport * as p from \"core/properties\";\nimport * as proj from \"core/util/projections\"\nimport {extend} from \"core/util/object\"\n\nimport {Renderer, RendererView} from \"../renderers/renderer\"\nimport {ColumnarDataSource} from \"../sources/columnar_data_source\"\nimport {Plot} from \"../plots/plot\"\n\nexport abstract class AnnotationView extends RendererView {\n  model: Annotation\n\n  protected _get_size(): number {\n    throw new Error(\"not implemented\")\n  }\n\n  get_size(): number {\n    return this.model.visible ? Math.round(this._get_size()) : 0\n  }\n\n  set_data(source: ColumnarDataSource): void {\n    const data = this.model.materialize_dataspecs(source)\n    extend(this as any, data)\n\n    if (this.plot_model.use_map) {\n      const self = this as any\n      if (self._x != null)\n        [self._x, self._y] = proj.project_xy(self._x, self._y)\n      if (self._xs != null)\n        [self._xs, self._ys] = proj.project_xsys(self._xs, self._ys)\n    }\n  }\n}\n\nexport namespace Annotation {\n  export interface Attrs extends Renderer.Attrs {\n    plot: Plot\n  }\n\n  export interface Props extends Renderer.Props {\n    plot: p.Property<Plot>\n  }\n\n  export type Visuals = Renderer.Visuals\n}\n\nexport interface Annotation extends Annotation.Attrs {\n  panel?: SidePanel\n}\n\nexport abstract class Annotation extends Renderer {\n\n  properties: Annotation.Props\n\n  constructor(attrs?: Partial<Annotation.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = 'Annotation';\n\n    this.define({\n      plot:  [ p.Instance ],\n    });\n\n    this.override({\n      level: 'annotation',\n    });\n  }\n\n  add_panel(side: Side): void {\n    if (this.panel == null || side !== this.panel.side) {\n      const panel = new SidePanel({side});\n      panel.attach_document(this.document!);\n      this.set_panel(panel);\n    }\n  }\n\n  set_panel(panel: SidePanel): void {\n    this.panel = panel;\n    // If the annotation is in a side panel, we need to set level to overlay, so it is visible.\n    this.level = 'overlay';\n  }\n}\nAnnotation.initClass();\n"]}