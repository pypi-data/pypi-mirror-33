{"version":3,"sources":["core/selection_manager.ts"],"names":[],"mappings":"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","file":"selection_manager.js","sourcesContent":["import {HasProps} from \"./has_props\"\nimport {Geometry} from \"./geometry\"\nimport {Selection} from \"models/selections/selection\"\nimport {Renderer, RendererView} from \"models/renderers/renderer\"\nimport {GlyphRendererView} from \"models/renderers/glyph_renderer\"\nimport {GraphRendererView} from \"models/renderers/graph_renderer\"\nimport * as p from \"./properties\"\n\nimport {ColumnarDataSource} from \"models/sources/columnar_data_source\"\n\nexport class SelectionManager extends HasProps {\n\n  static initClass(): void {\n    this.prototype.type = \"SelectionManager\"\n\n    this.internal({\n      source: [ p.Any ],\n    })\n  }\n\n  source: ColumnarDataSource\n  inspectors: {[key: string]: Selection}\n\n  initialize(): void {\n    super.initialize()\n    this.inspectors = {}\n  }\n\n  select(renderer_views: RendererView[], geometry: Geometry, final: boolean, append: boolean = false): boolean {\n    // divide renderers into glyph_renderers or graph_renderers\n    const glyph_renderer_views: GlyphRendererView[] = []\n    const graph_renderer_views: GraphRendererView[] = []\n    for (const r of renderer_views) {\n      if (r instanceof GlyphRendererView)\n        glyph_renderer_views.push(r)\n      else if (r instanceof GraphRendererView)\n        graph_renderer_views.push(r)\n    }\n\n    let did_hit = false\n\n    // graph renderer case\n    for (const r of graph_renderer_views) {\n      const hit_test_result = r.model.selection_policy.hit_test(geometry, r)\n      did_hit = did_hit || r.model.selection_policy.do_selection(hit_test_result, r.model, final, append)\n    }\n    // glyph renderers\n    if (glyph_renderer_views.length > 0) {\n      const hit_test_result = this.source.selection_policy.hit_test(geometry, glyph_renderer_views)\n      did_hit = did_hit || this.source.selection_policy.do_selection(hit_test_result, this.source, final, append)\n    }\n\n    return did_hit\n  }\n\n  inspect(renderer_view: RendererView, geometry: Geometry): boolean {\n    let did_hit = false\n\n    if (renderer_view instanceof GlyphRendererView) {\n      const hit_test_result = renderer_view.hit_test(geometry)\n      if (hit_test_result != null) {\n        did_hit = !hit_test_result.is_empty()\n        const inspection = this.get_or_create_inspector(renderer_view.model)\n        inspection.update(hit_test_result, true, false)\n        this.source.setv({inspected: inspection}, {silent: true})\n        this.source.inspect.emit([renderer_view, {geometry: geometry}])\n      }\n    } else if (renderer_view instanceof GraphRendererView) {\n      const hit_test_result = renderer_view.model.inspection_policy.hit_test(geometry, renderer_view)\n      did_hit = did_hit || renderer_view.model.inspection_policy.do_inspection(hit_test_result, geometry, renderer_view, false, false)\n    }\n\n    return did_hit\n  }\n\n  clear(rview?: RendererView): void {\n    this.source.selected.clear()\n    if (rview != null)\n      this.get_or_create_inspector(rview.model).clear()\n  }\n\n  get_or_create_inspector(rmodel: Renderer): Selection {\n    if (this.inspectors[rmodel.id] == null)\n      this.inspectors[rmodel.id] = new Selection()\n    return this.inspectors[rmodel.id]\n  }\n}\n\nSelectionManager.initClass()\n"]}