{"version":3,"sources":["models/tools/button_tool.ts"],"names":[],"mappings":";;;AACA,0CAAqC;AACrC,+BAAqC;AACrC,gCAA8B;AAC9B,mCAAoC;AAEpC;IAAmD,gDAAO;IAA1D;;IAqBA,CAAC;IAlBC,yCAAU,GAAV,UAAW,OAAY;QAAvB,iBAKC;QAJC,iBAAM,UAAU,YAAC,OAAO,CAAC,CAAA;QACzB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,cAAM,OAAA,KAAI,CAAC,MAAM,EAAE,EAAb,CAAa,CAAC,CAAA;QACpD,IAAI,CAAC,EAAE,CAAC,gBAAgB,CAAC,OAAO,EAAE,cAAM,OAAA,KAAI,CAAC,QAAQ,EAAE,EAAf,CAAe,CAAC,CAAA;QACxD,IAAI,CAAC,MAAM,EAAE,CAAA;IACf,CAAC;IAED,0CAAW,GAAX;QACE,OAAO,iBAAM,WAAW,WAAE,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAA;IACxD,CAAC;IAED,qCAAM,GAAN;QACE,WAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;QACd,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;QACtC,IAAI,CAAC,EAAE,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAA;IACpC,CAAC;IAGH,2BAAC;AAAD,CArBA,AAqBC,CArBkD,kBAAO,GAqBzD;AArBqB,oDAAoB;AAuB1C;IAA6C,0CAAQ;IAArD;;IAEA,CAAC;IAAD,qBAAC;AAAD,CAFA,AAEC,CAF4C,eAAQ,GAEpD;AAFqB,wCAAc;AAcpC;IAAyC,sCAAI;IAI3C,oBAAY,KAAiC;eAC3C,kBAAM,KAAK,CAAC;IACd,CAAC;IAEM,oBAAS,GAAhB;QACE,IAAI,CAAC,SAAS,CAAC,IAAI,GAAG,YAAY,CAAA;QAElC,IAAI,CAAC,QAAQ,CAAC;YACZ,QAAQ,EAAE,CAAE,CAAC,CAAC,OAAO,EAAE,KAAK,CAAE;SAC/B,CAAC,CAAA;IACJ,CAAC;IAQD,sBAAI,+BAAO;aAAX;YACE,OAAO,IAAI,CAAC,SAAS,CAAA;QACvB,CAAC;;;OAAA;IACH,iBAAC;AAAD,CAzBA,AAyBC,CAzBwC,WAAI,GAyB5C;AAzBqB,gCAAU;AA2BhC,UAAU,CAAC,SAAS,EAAE,CAAA","file":"button_tool.js","sourcesContent":["import {Class} from \"core/class\"\nimport {DOMView} from \"core/dom_view\"\nimport {Tool, ToolView} from \"./tool\"\nimport {empty} from \"core/dom\"\nimport * as p from \"core/properties\"\n\nexport abstract class ButtonToolButtonView extends DOMView {\n  model: ButtonTool\n\n  initialize(options: any): void {\n    super.initialize(options)\n    this.connect(this.model.change, () => this.render())\n    this.el.addEventListener(\"click\", () => this._clicked())\n    this.render()\n  }\n\n  css_classes(): string[] {\n    return super.css_classes().concat(\"bk-toolbar-button\")\n  }\n\n  render(): void {\n    empty(this.el)\n    this.el.classList.add(this.model.icon)\n    this.el.title = this.model.tooltip\n  }\n\n  protected abstract _clicked(): void\n}\n\nexport abstract class ButtonToolView extends ToolView {\n  model: ButtonTool\n}\n\nexport namespace ButtonTool {\n  export interface Attrs extends Tool.Attrs {\n    disabled: boolean\n  }\n\n  export interface Props extends Tool.Props {}\n}\n\nexport interface ButtonTool extends ButtonTool.Attrs {}\n\nexport abstract class ButtonTool extends Tool {\n\n  properties: ButtonTool.Props\n\n  constructor(attrs?: Partial<ButtonTool.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = \"ButtonTool\"\n\n    this.internal({\n      disabled: [ p.Boolean, false ],\n    })\n  }\n\n  tool_name: string\n\n  icon: string\n\n  button_view: Class<ButtonToolButtonView>\n\n  get tooltip(): string {\n    return this.tool_name\n  }\n}\n\nButtonTool.initClass()\n"]}