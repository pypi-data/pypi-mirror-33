{"version":3,"sources":["models/glyphs/text.ts"],"names":[],"mappings":"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","file":"text.js","sourcesContent":["import {XYGlyph, XYGlyphView, XYGlyphData} from \"./xy_glyph\"\nimport {NumberSpec, StringSpec, AngleSpec} from \"core/vectorization\"\nimport {TextMixinVector} from \"core/property_mixins\"\nimport {Arrayable} from \"core/types\"\nimport * as visuals from \"core/visuals\"\nimport * as p from \"core/properties\"\nimport {get_text_height} from \"core/util/text\"\nimport {Context2d} from \"core/util/canvas\"\n\nexport interface TextData extends XYGlyphData {\n  _text: Arrayable<string>\n  _angle: Arrayable<number>\n  _x_offset: Arrayable<number>\n  _y_offset: Arrayable<number>\n}\n\nexport interface TextView extends TextData {}\n\nexport class TextView extends XYGlyphView {\n  model: Text\n  visuals: Text.Visuals\n\n  protected _render(ctx: Context2d, indices: number[], {sx, sy, _x_offset, _y_offset, _angle, _text}: TextData): void {\n    for (const i of indices) {\n      if (isNaN(sx[i] + sy[i] + _x_offset[i] + _y_offset[i] + _angle[i]) || _text[i] == null)\n        continue\n\n      if (this.visuals.text.doit) {\n        const text = `${_text[i]}`\n\n        ctx.save()\n        ctx.translate(sx[i] + _x_offset[i], sy[i] + _y_offset[i])\n        ctx.rotate(_angle[i])\n        this.visuals.text.set_vectorize(ctx, i)\n\n        if (text.indexOf(\"\\n\") == -1)\n          ctx.fillText(text, 0, 0)\n        else {\n          const lines = text.split(\"\\n\")\n\n          const font = this.visuals.text.cache_select(\"font\", i)\n          const {height} = get_text_height(font)\n          const line_height = this.visuals.text.text_line_height.value()*height\n          const block_height = line_height*lines.length\n\n          const baseline = this.visuals.text.cache_select(\"text_baseline\", i)\n          let y: number\n          switch (baseline) {\n            case \"top\": {\n              y = 0\n              break\n            }\n            case \"middle\": {\n              y = (-block_height/2) + (line_height/2)\n              break\n            }\n            case \"bottom\": {\n              y = -block_height + line_height\n              break\n            }\n            default: {\n              y = 0\n              console.warn(`'${baseline}' baseline not supported with multi line text`)\n            }\n          }\n\n          for (const line of lines) {\n            ctx.fillText(line, 0, y)\n            y += line_height\n          }\n        }\n\n        ctx.restore()\n      }\n    }\n  }\n}\n\nexport namespace Text {\n  export interface Mixins extends TextMixinVector {}\n\n  export interface Attrs extends XYGlyph.Attrs, Mixins {\n    text: StringSpec\n    angle: AngleSpec\n    x_offset: NumberSpec\n    y_offset: NumberSpec\n  }\n\n  export interface Props extends XYGlyph.Props {}\n\n  export interface Visuals extends XYGlyph.Visuals {\n    text: visuals.Text\n  }\n}\n\nexport interface Text extends Text.Attrs {}\n\nexport class Text extends XYGlyph {\n\n  properties: Text.Props\n\n  constructor(attrs?: Partial<Text.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = 'Text'\n    this.prototype.default_view = TextView\n\n    this.mixins(['text'])\n    this.define({\n      text:     [ p.StringSpec, {field: \"text\"} ],\n      angle:    [ p.AngleSpec,  0               ],\n      x_offset: [ p.NumberSpec, 0               ],\n      y_offset: [ p.NumberSpec, 0               ],\n    })\n  }\n}\nText.initClass()\n"]}