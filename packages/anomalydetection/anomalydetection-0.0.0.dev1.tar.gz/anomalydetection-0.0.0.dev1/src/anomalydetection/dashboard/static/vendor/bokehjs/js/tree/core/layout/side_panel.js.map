{"version":3,"sources":["core/layout/side_panel.ts"],"names":[],"mappings":";;;AAAA,mCAAiD;AACjD,iDAA4C;AAE5C,iCAAkC;AAClC,sCAAiC;AAIjC,uCAAsC;AAEtC,iFAAiF;AACjF,qDAAqD;AACrD,EAAE;AACF,iEAAiE;AACjE,iFAAiF;AACjF,4DAA4D;AAC5D,2DAA2D;AAC3D,4DAA4D;AAC5D,gFAAgF;AAChF,gFAAgF;AAChF,EAAE;AACF,4DAA4D;AAC5D,2DAA2D;AAC3D,4DAA4D;AAC5D,gFAAgF;AAChF,gFAAgF;AAChF,EAAE;AACF,4DAA4D;AAC5D,2DAA2D;AAC3D,2DAA2D;AAC3D,gFAAgF;AAChF,gFAAgF;AAChF,EAAE;AACF,4DAA4D;AAC5D,2DAA2D;AAC3D,2DAA2D;AAC3D,gFAAgF;AAChF,gFAAgF;AAEhF,IAAM,GAAG,GAAG,IAAI,CAAC,EAAE,GAAC,CAAC,CAAA;AACrB,IAAM,UAAU,GAAG,YAAY,CAAA;AAC/B,IAAM,GAAG,GAAG,KAAK,CAAA;AACjB,IAAM,MAAM,GAAG,QAAQ,CAAA;AACvB,IAAM,MAAM,GAAG,QAAQ,CAAA;AACvB,IAAM,OAAO,GAAG,SAAS,CAAA;AACzB,IAAM,IAAI,GAAG,MAAM,CAAA;AACnB,IAAM,KAAK,GAAG,OAAO,CAAA;AACrB,IAAM,MAAM,GAAG,QAAQ,CAAA;AAKvB,IAAM,aAAa,GAA+C;IAChE,KAAK,EAAE;QACL,QAAQ,EAAK,CAAC;QACd,MAAM,EAAO,CAAC,GAAG;QACjB,UAAU,EAAG,CAAC;QACd,QAAQ,EAAK,CAAC,GAAG;KAClB;IACD,KAAK,EAAE;QACL,QAAQ,EAAK,CAAC;QACd,MAAM,EAAO,GAAG;QAChB,UAAU,EAAG,CAAC;QACd,QAAQ,EAAK,GAAG;KACjB;IACD,IAAI,EAAE;QACJ,QAAQ,EAAK,CAAC,GAAG;QACjB,MAAM,EAAO,CAAC;QACd,UAAU,EAAG,CAAC;QACd,QAAQ,EAAK,CAAC,GAAG;KAClB;IACD,KAAK,EAAE;QACL,QAAQ,EAAK,GAAG;QAChB,MAAM,EAAO,CAAC;QACd,UAAU,EAAG,CAAC;QACd,QAAQ,EAAK,GAAG;KACjB;CACF,CAAA;AAED,IAAM,gBAAgB,GAAmD;IACvE,KAAK,EAAE;QACL,SAAS,EAAI,GAAG;QAChB,QAAQ,EAAK,UAAU;QACvB,MAAM,EAAO,MAAM;QACnB,UAAU,EAAG,UAAU;QACvB,QAAQ,EAAK,MAAM;KACpB;IACD,KAAK,EAAE;QACL,SAAS,EAAI,MAAM;QACnB,QAAQ,EAAK,OAAO;QACpB,MAAM,EAAO,MAAM;QACnB,UAAU,EAAG,OAAO;QACpB,QAAQ,EAAK,MAAM;KACpB;IACD,IAAI,EAAE;QACJ,SAAS,EAAI,GAAG;QAChB,QAAQ,EAAK,UAAU;QACvB,MAAM,EAAO,MAAM;QACnB,UAAU,EAAG,MAAM;QACnB,QAAQ,EAAK,UAAU;KACxB;IACD,KAAK,EAAE;QACL,SAAS,EAAI,GAAG;QAChB,QAAQ,EAAK,UAAU;QACvB,MAAM,EAAO,MAAM;QACnB,UAAU,EAAG,MAAM;QACnB,QAAQ,EAAK,UAAU;KACxB;CACF,CAAA;AAED,IAAM,aAAa,GAAmD;IACpE,KAAK,EAAE;QACL,SAAS,EAAI,MAAM;QACnB,QAAQ,EAAK,MAAM;QACnB,MAAM,EAAO,IAAI;QACjB,UAAU,EAAG,MAAM;QACnB,QAAQ,EAAK,IAAI;KAClB;IACD,KAAK,EAAE;QACL,SAAS,EAAI,MAAM;QACnB,QAAQ,EAAK,MAAM;QACnB,MAAM,EAAO,IAAI;QACjB,UAAU,EAAG,MAAM;QACnB,QAAQ,EAAK,IAAI;KAClB;IACD,IAAI,EAAE;QACJ,SAAS,EAAI,MAAM;QACnB,QAAQ,EAAK,MAAM;QACnB,MAAM,EAAO,KAAK;QAClB,UAAU,EAAG,KAAK;QAClB,QAAQ,EAAK,MAAM;KACpB;IACD,KAAK,EAAE;QACL,SAAS,EAAI,MAAM;QACnB,QAAQ,EAAK,MAAM;QACnB,MAAM,EAAO,IAAI;QACjB,UAAU,EAAG,IAAI;QACjB,QAAQ,EAAK,MAAM;KACpB;CACF,CAAA;AAED,IAAM,sBAAsB,GAA4B;IACtD,KAAK,EAAI,KAAK;IACd,KAAK,EAAI,IAAI;IACb,IAAI,EAAK,KAAK;IACd,KAAK,EAAI,IAAI;CACd,CAAA;AAED,IAAM,sBAAsB,GAA4B;IACtD,KAAK,EAAI,IAAI;IACb,KAAK,EAAI,KAAK;IACd,IAAI,EAAK,KAAK;IACd,KAAK,EAAI,IAAI;CACd,CAAA;AAWD,oBAA+C,KAAQ;IACrD,OAAO,OAAO,IAAI,KAAK,CAAA;AACzB,CAAC;AAFD,gCAEC;AAED,wBAAkD,IAAO;IACvD,OAAO,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,UAAU,IAAI,IAAI,CAAA;AACrD,CAAC;AAFD,wCAEC;AAEY,QAAA,WAAW,GAAG,IAAI,OAAO,EAAwB,CAAA;AACjD,QAAA,iBAAiB,GAAG,IAAI,OAAO,EAA4B,CAAA;AAExE,kCAAyC,IAAkB;IACzD,IAAM,CAAC,GAAG,IAAI,CAAC,MAAM,CAAA;IACrB,IAAM,IAAI,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAA;IAC5B,IAAI,UAAU,GAAG,yBAAiB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;IAE5C,IAAI,UAAU,IAAI,IAAI,IAAI,CAAC,CAAC,cAAc,CAAC,UAAU,CAAC,EAAE;QACtD,IAAI,mBAAW,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,IAAI;YAChC,OAAM;QACR,CAAC,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAA;KAChC;IAED,UAAU,GAAG,WAAE,CAAE,IAAI,CAAC,KAAa,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,CAAA;IACvD,CAAC,CAAC,cAAc,CAAC,UAAU,CAAC,CAAA;IAE5B,mBAAW,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAA;IAC3B,yBAAiB,CAAC,GAAG,CAAC,IAAI,EAAE,UAAU,CAAC,CAAA;AACzC,CAAC;AAhBD,4DAgBC;AAcD;IAA+B,qCAAY;IAIzC,mBAAY,KAAgC;eAC1C,kBAAM,KAAK,CAAC;IACd,CAAC;IAEM,mBAAS,GAAhB;QACE,IAAI,CAAC,SAAS,CAAC,IAAI,GAAG,WAAW,CAAA;QAEjC,IAAI,CAAC,QAAQ,CAAC;YACZ,IAAI,EAAE,CAAE,CAAC,CAAC,MAAM,CAAE;SACnB,CAAC,CAAA;IACJ,CAAC;IAMD,4BAAQ,GAAR;QACE,OAAU,IAAI,CAAC,IAAI,SAAI,IAAI,CAAC,EAAE,UAAK,IAAI,CAAC,IAAI,MAAG,CAAA;IACjD,CAAC;IAED,8BAAU,GAAV;QACE,iBAAM,UAAU,WAAE,CAAA;QAClB,QAAO,IAAI,CAAC,IAAI,EAAE;YAChB,KAAK,OAAO;gBACV,IAAI,CAAC,IAAI,GAAG,CAAC,CAAA;gBACb,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAA;gBACvB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAA;gBACzB,MAAM;YACR,KAAK,OAAO;gBACV,IAAI,CAAC,IAAI,GAAG,CAAC,CAAA;gBACb,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;gBACtB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAA;gBACzB,MAAM;YACR,KAAK,MAAM;gBACT,IAAI,CAAC,IAAI,GAAG,CAAC,CAAA;gBACb,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;gBACvB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAA;gBACxB,MAAM;YACR,KAAK,OAAO;gBACV,IAAI,CAAC,IAAI,GAAG,CAAC,CAAA;gBACb,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;gBACtB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAA;gBACxB,MAAM;YACR;gBACE,gBAAM,CAAC,KAAK,CAAC,yBAAuB,IAAI,CAAC,IAAI,MAAG,CAAC,CAAA;SACpD;IACH,CAAC;IAED,sBAAI,gCAAS;aAAb;YACE,OAAO,IAAI,CAAC,IAAI,CAAA;QAClB,CAAC;;;OAAA;IAED,sBAAI,8BAAO;aAAX;YACE,OAAO,IAAI,CAAC,QAAQ,CAAA;QACtB,CAAC;;;OAAA;IAED,sBAAI,oCAAa;aAAjB;YACE,OAAO,IAAI,CAAC,IAAI,IAAI,OAAO,IAAI,IAAI,CAAC,IAAI,IAAI,OAAO,CAAA;QACrD,CAAC;;;OAAA;IAED,sBAAI,kCAAW;aAAf;YACE,OAAO,IAAI,CAAC,IAAI,IAAI,MAAM,IAAI,IAAI,CAAC,IAAI,IAAI,OAAO,CAAA;QACpD,CAAC;;;OAAA;IAED,+CAA2B,GAA3B,UAA4B,GAA6B,EAAE,MAA2B;QACpF,IAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAA;QAEtB,IAAI,QAAgB,CAAA;QACpB,IAAI,KAAa,CAAA;QAEjB,IAAI,gBAAQ,CAAC,MAAM,CAAC,EAAE;YACpB,QAAQ,GAAG,gBAAgB,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,CAAA;YACzC,KAAK,GAAG,aAAa,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,CAAA;SACpC;aAAM;YACL,IAAI,MAAM,KAAK,CAAC,EAAE;gBAChB,QAAQ,GAAG,UAAU,CAAA,CAAC,sCAAsC;gBAC5D,KAAK,GAAG,UAAU,CAAA,CAAC,mCAAmC;aACvD;iBAAM,IAAI,MAAM,GAAG,CAAC,EAAE;gBACrB,QAAQ,GAAG,QAAQ,CAAA;gBACnB,KAAK,GAAG,sBAAsB,CAAC,IAAI,CAAC,CAAA;aACrC;iBAAM;gBACL,QAAQ,GAAG,QAAQ,CAAA;gBACnB,KAAK,GAAG,sBAAsB,CAAC,IAAI,CAAC,CAAA;aACrC;SACF;QAED,GAAG,CAAC,YAAY,GAAG,QAAQ,CAAA;QAC3B,GAAG,CAAC,SAAS,GAAG,KAAK,CAAA;IACvB,CAAC;IAED,6CAAyB,GAAzB,UAA0B,MAAc;QACtC,OAAO,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,CAAA;IACzC,CAAC;IACH,gBAAC;AAAD,CAjGA,AAiGC,CAjG8B,4BAAY,GAiG1C;AAjGY,8BAAS;AAmGtB,SAAS,CAAC,SAAS,EAAE,CAAA","file":"side_panel.js","sourcesContent":["import {GE, Variable, Constraint} from \"./solver\"\nimport {LayoutCanvas} from \"./layout_canvas\"\n\nimport * as p from \"../properties\"\nimport {logger} from \"../logging\"\nimport {HasProps} from \"../has_props\"\nimport {DOMView} from \"../dom_view\"\nimport {Side} from \"../enums\"\nimport {isString} from \"../util/types\"\n\n// This table lays out the rules for configuring the baseline, alignment, etc. of\n// title text, based on it's location and orientation\n//\n// side    orient        baseline   align     angle   normal-dist\n// ------------------------------------------------------------------------------\n// above   parallel      bottom     center    0       height\n//         normal        middle     left      -90     width\n//         horizontal    bottom     center    0       height\n//         [angle > 0]   middle     left              width * sin + height * cos\n//         [angle < 0]   middle     right             width * sin + height * cos\n//\n// below   parallel      top        center    0       height\n//         normal        middle     right     90      width\n//         horizontal    top        center    0       height\n//         [angle > 0]   middle     right             width * sin + height * cos\n//         [angle < 0]   middle     left              width * sin + height * cos\n//\n// left    parallel      bottom     center    90      height\n//         normal        middle     right     0       width\n//         horizontal    middle     right     0       width\n//         [angle > 0]   middle     right             width * cos + height * sin\n//         [angle < 0]   middle     right             width * cos + height + sin\n//\n// right   parallel      bottom     center   -90      height\n//         normal        middle     left     0        width\n//         horizontal    middle     left     0        width\n//         [angle > 0]   middle     left              width * cos + height * sin\n//         [angle < 0]   middle     left              width * cos + height + sin\n\nconst pi2 = Math.PI/2\nconst ALPHABETIC = 'alphabetic'\nconst TOP = 'top'\nconst BOTTOM = 'bottom'\nconst MIDDLE = 'middle'\nconst HANGING = 'hanging'\nconst LEFT = 'left'\nconst RIGHT = 'right'\nconst CENTER = 'center'\n\nexport type Orient = \"parallel\" | \"normal\" | \"horizontal\" | \"vertical\"\nexport type TextOrient = \"justified\" | Orient\n\nconst _angle_lookup: {[key in Side]: {[key in Orient]: number}} = {\n  above: {\n    parallel   : 0,\n    normal     : -pi2,\n    horizontal : 0,\n    vertical   : -pi2,\n  },\n  below: {\n    parallel   : 0,\n    normal     : pi2,\n    horizontal : 0,\n    vertical   : pi2,\n  },\n  left: {\n    parallel   : -pi2,\n    normal     : 0,\n    horizontal : 0,\n    vertical   : -pi2,\n  },\n  right: {\n    parallel   : pi2,\n    normal     : 0,\n    horizontal : 0,\n    vertical   : pi2,\n  },\n}\n\nconst _baseline_lookup: {[key in Side]: {[key in TextOrient]: string}} = {\n  above: {\n    justified  : TOP,\n    parallel   : ALPHABETIC,\n    normal     : MIDDLE,\n    horizontal : ALPHABETIC,\n    vertical   : MIDDLE,\n  },\n  below: {\n    justified  : BOTTOM,\n    parallel   : HANGING,\n    normal     : MIDDLE,\n    horizontal : HANGING,\n    vertical   : MIDDLE,\n  },\n  left: {\n    justified  : TOP,\n    parallel   : ALPHABETIC,\n    normal     : MIDDLE,\n    horizontal : MIDDLE,\n    vertical   : ALPHABETIC,\n  },\n  right: {\n    justified  : TOP,\n    parallel   : ALPHABETIC,\n    normal     : MIDDLE,\n    horizontal : MIDDLE,\n    vertical   : ALPHABETIC,\n  },\n}\n\nconst _align_lookup: {[key in Side]: {[key in TextOrient]: string}} = {\n  above: {\n    justified  : CENTER,\n    parallel   : CENTER,\n    normal     : LEFT,\n    horizontal : CENTER,\n    vertical   : LEFT,\n  },\n  below: {\n    justified  : CENTER,\n    parallel   : CENTER,\n    normal     : LEFT,\n    horizontal : CENTER,\n    vertical   : LEFT,\n  },\n  left: {\n    justified  : CENTER,\n    parallel   : CENTER,\n    normal     : RIGHT,\n    horizontal : RIGHT,\n    vertical   : CENTER,\n  },\n  right: {\n    justified  : CENTER,\n    parallel   : CENTER,\n    normal     : LEFT,\n    horizontal : LEFT,\n    vertical   : CENTER,\n  },\n}\n\nconst _align_lookup_negative: {[key in Side]: string} = {\n  above  : RIGHT,\n  below  : LEFT,\n  left   : RIGHT,\n  right  : LEFT,\n}\n\nconst _align_lookup_positive: {[key in Side]: string} = {\n  above  : LEFT,\n  below  : RIGHT,\n  left   : RIGHT,\n  right  : LEFT,\n}\n\nexport type Sizeable = {\n  panel: SidePanel\n}\n\nexport type SizeableView = DOMView & {\n  model: Sizeable\n  get_size(): number\n}\n\nexport function isSizeable<T extends HasProps>(model: T): model is T & Sizeable {\n  return \"panel\" in model\n}\n\nexport function isSizeableView<T extends DOMView>(view: T): view is T & SizeableView {\n  return isSizeable(view.model) && \"get_size\" in view\n}\n\nexport const _view_sizes = new WeakMap<SizeableView, number>()\nexport const _view_constraints = new WeakMap<SizeableView, Constraint>()\n\nexport function update_panel_constraints(view: SizeableView): void {\n  const s = view.solver\n  const size = view.get_size()\n  let constraint = _view_constraints.get(view)\n\n  if (constraint != null && s.has_constraint(constraint)) {\n    if (_view_sizes.get(view) === size)\n      return\n    s.remove_constraint(constraint)\n  }\n\n  constraint = GE((view.model as any).panel._size, -size)\n  s.add_constraint(constraint)\n\n  _view_sizes.set(view, size)\n  _view_constraints.set(view, constraint)\n}\n\nexport namespace SidePanel {\n  export interface Attrs extends LayoutCanvas.Attrs {\n    side: Side\n  }\n\n  export interface Props extends LayoutCanvas.Props {\n    side: p.Property<Side>\n  }\n}\n\nexport interface SidePanel extends SidePanel.Attrs {}\n\nexport class SidePanel extends LayoutCanvas {\n\n  properties: SidePanel.Props\n\n  constructor(attrs?: Partial<SidePanel.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = \"SidePanel\"\n\n    this.internal({\n      side: [ p.String ],\n    })\n  }\n\n  protected _dim: 0 | 1\n  protected _normals: [number, number]\n  protected _size: Variable\n\n  toString(): string {\n    return `${this.type}(${this.id}, ${this.side})`\n  }\n\n  initialize(): void {\n    super.initialize()\n    switch(this.side) {\n      case \"above\":\n        this._dim = 0\n        this._normals = [0, -1]\n        this._size = this._height\n        break;\n      case \"below\":\n        this._dim = 0\n        this._normals = [0, 1]\n        this._size = this._height\n        break;\n      case \"left\":\n        this._dim = 1\n        this._normals = [-1, 0]\n        this._size = this._width\n        break;\n      case \"right\":\n        this._dim = 1\n        this._normals = [1, 0]\n        this._size = this._width\n        break;\n      default:\n        logger.error(`unrecognized side: '${this.side}'`)\n    }\n  }\n\n  get dimension(): 0 | 1 {\n    return this._dim\n  }\n\n  get normals(): [number, number] {\n    return this._normals\n  }\n\n  get is_horizontal(): boolean {\n    return this.side == \"above\" || this.side == \"below\"\n  }\n\n  get is_vertical(): boolean {\n    return this.side == \"left\" || this.side == \"right\"\n  }\n\n  apply_label_text_heuristics(ctx: CanvasRenderingContext2D, orient: TextOrient | number): void {\n    const side = this.side\n\n    let baseline: string\n    let align: string\n\n    if (isString(orient)) {\n      baseline = _baseline_lookup[side][orient]\n      align = _align_lookup[side][orient]\n    } else {\n      if (orient === 0) {\n        baseline = \"whatever\" // XXX: _baseline_lookup[side][orient]\n        align = \"whatever\" // XXX: _align_lookup[side][orient]\n      } else if (orient < 0) {\n        baseline = 'middle'\n        align = _align_lookup_negative[side]\n      } else {\n        baseline = 'middle'\n        align = _align_lookup_positive[side]\n      }\n    }\n\n    ctx.textBaseline = baseline\n    ctx.textAlign = align\n  }\n\n  get_label_angle_heuristic(orient: Orient): number {\n    return _angle_lookup[this.side][orient]\n  }\n}\n\nSidePanel.initClass()\n"]}