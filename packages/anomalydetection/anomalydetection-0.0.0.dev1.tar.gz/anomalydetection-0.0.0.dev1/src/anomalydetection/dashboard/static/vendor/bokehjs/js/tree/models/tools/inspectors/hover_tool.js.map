{"version":3,"sources":["models/tools/inspectors/hover_tool.ts"],"names":[],"mappings":"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","file":"hover_tool.js","sourcesContent":["import {InspectTool, InspectToolView} from \"./inspect_tool\"\nimport {Tooltip, TooltipView} from \"../../annotations/tooltip\"\nimport {RendererView} from \"../../renderers/renderer\"\nimport {GlyphRenderer} from \"../../renderers/glyph_renderer\"\nimport {GraphRenderer} from \"../../renderers/graph_renderer\"\nimport {compute_renderers, DataRenderer, RendererSpec} from \"../util\"\nimport * as hittest from \"core/hittest\"\nimport {MoveEvent} from \"core/ui_events\"\nimport {replace_placeholders, Vars} from \"core/util/templating\"\nimport {div, span} from \"core/dom\"\nimport * as p from \"core/properties\"\nimport {color2hex} from \"core/util/color\"\nimport {values, isEmpty, extend} from \"core/util/object\"\nimport {isString, isFunction, isNumber} from \"core/util/types\"\nimport {build_views, remove_views} from \"core/build_views\"\nimport {Anchor, TooltipAttachment} from \"core/enums\"\nimport {Geometry, PointGeometry, SpanGeometry} from \"core/geometry\"\nimport {ColumnarDataSource} from \"../../sources/columnar_data_source\"\nimport {ImageIndex} from \"../../glyphs/image\"\n\nexport function _nearest_line_hit(i: number, geometry: Geometry,\n    sx: number, sy: number, dx: number[], dy: number[]): [[number, number], number] {\n  const d1 = {x: dx[i], y: dy[i]}\n  const d2 = {x: dx[i+1], y: dy[i+1]}\n\n  let dist1: number\n  let dist2: number\n  if (geometry.type == \"span\") {\n    if (geometry.direction == \"h\") {\n      dist1 = Math.abs(d1.x - sx)\n      dist2 = Math.abs(d2.x - sx)\n    } else {\n      dist1 = Math.abs(d1.y - sy)\n      dist2 = Math.abs(d2.y - sy)\n    }\n  } else {\n    const s = {x: sx, y: sy}\n    dist1 = hittest.dist_2_pts(d1, s)\n    dist2 = hittest.dist_2_pts(d2, s)\n  }\n\n  if (dist1 < dist2)\n    return [[d1.x, d1.y], i]\n  else\n    return [[d2.x, d2.y], i+1]\n}\n\nexport function _line_hit(xs: number[], ys: number[], ind: number): [[number, number], number] {\n  return [[xs[ind], ys[ind]], ind]\n}\n\nexport class HoverToolView extends InspectToolView {\n  model: HoverTool\n\n  protected ttviews: {[key: string]: TooltipView}\n\n  protected _ttmodels: {[key: string]: Tooltip} | null\n\n  protected _computed_renderers: DataRenderer[] | null\n\n  initialize(options: any): void {\n    super.initialize(options)\n    this.ttviews = {}\n  }\n\n  remove(): void {\n    remove_views(this.ttviews)\n    super.remove()\n  }\n\n  connect_signals(): void {\n    super.connect_signals()\n\n    for (const r of this.computed_renderers) {\n      // XXX: no typings\n      if (r instanceof GlyphRenderer) {\n        this.connect((r as any).data_source.inspect, this._update)\n      } else if (r instanceof GraphRenderer) {\n        this.connect((r as any).node_renderer.data_source.inspect, this._update)\n        this.connect((r as any).edge_renderer.data_source.inspect, this._update)\n      }\n    }\n\n    // TODO: this.connect(this.plot_model.plot.properties.renderers.change, () => this._computed_renderers = this._ttmodels = null)\n    this.connect(this.model.properties.renderers.change,      () => this._computed_renderers = this._ttmodels = null)\n    this.connect(this.model.properties.names.change,          () => this._computed_renderers = this._ttmodels = null)\n    this.connect(this.model.properties.tooltips.change,       () => this._ttmodels = null)\n  }\n\n  protected _compute_ttmodels(): {[key: string]: Tooltip} {\n    const ttmodels: {[key: string]: Tooltip} = {}\n    const tooltips = this.model.tooltips\n\n    if (tooltips != null) {\n      for (const r of this.computed_renderers) {\n        if (r instanceof GlyphRenderer) {\n          const tooltip = new Tooltip({\n            custom: isString(tooltips) || isFunction(tooltips),\n            attachment: this.model.attachment,\n            show_arrow: this.model.show_arrow,\n          })\n          ttmodels[r.id] = tooltip\n        } else if (r instanceof GraphRenderer) {\n          const tooltip = new Tooltip({\n            custom: isString(tooltips) || isFunction(tooltips),\n            attachment: this.model.attachment,\n            show_arrow: this.model.show_arrow,\n          })\n          /// XXX: no typings\n          ttmodels[(r as any).node_renderer.id] = tooltip\n          ttmodels[(r as any).edge_renderer.id] = tooltip\n        }\n      }\n    }\n\n    build_views(this.ttviews, values(ttmodels), {parent: this, plot_view: this.plot_view})\n\n    return ttmodels\n  }\n\n  get computed_renderers(): DataRenderer[] {\n    if (this._computed_renderers == null) {\n      const renderers = this.model.renderers\n      const all_renderers = this.plot_model.plot.renderers\n      const names = this.model.names\n      this._computed_renderers = compute_renderers(renderers, all_renderers, names)\n    }\n    return this._computed_renderers\n  }\n\n  get ttmodels(): {[key: string]: Tooltip} {\n    if (this._ttmodels == null)\n      this._ttmodels = this._compute_ttmodels()\n    return this._ttmodels\n  }\n\n  _clear(): void {\n    this._inspect(Infinity, Infinity)\n\n    for (const rid in this.ttmodels) {\n      const tt = this.ttmodels[rid]\n      tt.clear()\n    }\n  }\n\n  _move(ev: MoveEvent): void {\n    if (!this.model.active)\n      return\n    const {sx, sy} = ev\n    if (!this.plot_model.frame.bbox.contains(sx, sy))\n      this._clear()\n    else\n      this._inspect(sx, sy)\n  }\n\n  _move_exit(): void {\n    this._clear()\n  }\n\n  _inspect(sx: number, sy: number): void {\n    let geometry: PointGeometry | SpanGeometry\n    if (this.model.mode == 'mouse')\n      geometry = {type: 'point', sx, sy}\n    else {\n      const direction = this.model.mode == 'vline' ? 'h' : 'v'\n      geometry = {type: 'span', direction, sx, sy}\n    }\n\n    for (const r of this.computed_renderers) {\n      const sm = r.get_selection_manager()\n      sm.inspect(this.plot_view.renderer_views[r.id], geometry)\n    }\n\n    if (this.model.callback != null)\n      this._emit_callback(geometry)\n  }\n\n  _update([renderer_view, {geometry}]: [RendererView, {geometry: PointGeometry | SpanGeometry}]): void {\n    if (!this.model.active)\n      return\n\n    const tooltip = this.ttmodels[renderer_view.model.id]\n    if (tooltip == null)\n      return\n    tooltip.clear()\n\n    let indices = (renderer_view.model as any).get_selection_manager().inspectors[renderer_view.model.id]\n    if (renderer_view.model instanceof GlyphRenderer)\n      indices = (renderer_view.model as any).view.convert_selection_to_subset(indices)\n\n    const ds = (renderer_view.model as any).get_selection_manager().source\n\n    if (indices.is_empty())\n      return\n\n    const frame = this.plot_model.frame\n\n    const {sx, sy} = geometry\n\n    const xscale = frame.xscales[(renderer_view.model as any).x_range_name] // XXX: bad class structure\n    const yscale = frame.yscales[(renderer_view.model as any).y_range_name]\n    const x = xscale.invert(sx)\n    const y = yscale.invert(sy)\n\n    const glyph = (renderer_view as any).glyph // XXX\n\n    for (const i of indices.line_indices) {\n      let data_x = glyph._x[i+1]\n      let data_y = glyph._y[i+1]\n      let ii = i\n\n      let rx: number\n      let ry: number\n      switch (this.model.line_policy) {\n        case \"interp\": { // and renderer.get_interpolation_hit?\n          [data_x, data_y] = glyph.get_interpolation_hit(i, geometry)\n          rx = xscale.compute(data_x)\n          ry = yscale.compute(data_y)\n          break\n        }\n        case \"prev\": {\n          [[rx, ry], ii] = _line_hit(glyph.sx, glyph.sy, i)\n          break\n        }\n        case \"next\": {\n          [[rx, ry], ii] = _line_hit(glyph.sx, glyph.sy, i+1)\n          break\n        }\n        case \"nearest\": {\n          [[rx, ry], ii] = _nearest_line_hit(i, geometry, sx, sy, glyph.sx, glyph.sy)\n          data_x = glyph._x[ii]\n          data_y = glyph._y[ii]\n          break\n        }\n        default: {\n          [rx, ry] = [sx, sy]\n        }\n      }\n\n      const vars = {index: ii, x: x, y: y, sx: sx, sy: sy, data_x: data_x, data_y: data_y, rx: rx, ry: ry, indices: indices.line_indices}\n      tooltip.add(rx, ry, this._render_tooltips(ds, ii, vars))\n    }\n\n    for (const struct of indices.image_indices) {\n      const vars = {index: struct['index'], x, y, sx, sy}\n      const rendered = this._render_tooltips(ds, struct, vars)\n      tooltip.add(sx, sy, rendered)\n    }\n\n    for (const i of indices.indices) {\n      // multiglyphs set additional indices, e.g. multiline_indices for different tooltips\n      if (!isEmpty(indices.multiline_indices)) {\n        for (const j of indices.multiline_indices[i.toString()]) {\n          let data_x = glyph._xs[i][j]\n          let data_y = glyph._ys[i][j]\n          let jj = j\n\n          let rx: number\n          let ry: number\n          switch (this.model.line_policy) {\n            case \"interp\": { // and renderer.get_interpolation_hit?\n              [data_x, data_y] = glyph.get_interpolation_hit(i, j, geometry)\n              rx = xscale.compute(data_x)\n              ry = yscale.compute(data_y)\n              break\n            }\n            case \"prev\": {\n              [[rx, ry], jj] = _line_hit(glyph.sxs[i], glyph.sys[i], j)\n              break\n            }\n            case \"next\": {\n              [[rx, ry], jj] = _line_hit(glyph.sxs[i], glyph.sys[i], j+1)\n              break\n            }\n            case \"nearest\": {\n              [[rx, ry], jj] = _nearest_line_hit(j, geometry, sx, sy, glyph.sxs[i], glyph.sys[i])\n              data_x = glyph._xs[i][jj]\n              data_y = glyph._ys[i][jj]\n              break\n            }\n            default:\n              throw new Error(\"should't have happened\")\n          }\n\n          let index: number\n          if (renderer_view.model instanceof GlyphRenderer)\n            index = (renderer_view.model as any).view.convert_indices_from_subset([i])[0]\n          else\n            index = (i as any) as number // XXX: ???\n\n          const vars = {index: index, segment_index: jj, x: x, y: y, sx: sx, sy: sy, data_x: data_x, data_y: data_y, indices: indices.multiline_indices}\n          tooltip.add(rx, ry, this._render_tooltips(ds, index, vars))\n        }\n      } else {\n        // handle non-multiglyphs\n        const data_x = glyph._x != null ? glyph._x[i] : undefined\n        const data_y = glyph._y != null ? glyph._y[i] : undefined\n\n        let rx: number\n        let ry: number\n        if (this.model.point_policy == 'snap_to_data') { // and renderer.glyph.sx? and renderer.glyph.sy?\n          // Pass in our screen position so we can determine which patch we're\n          // over if there are discontinuous patches.\n          let pt = glyph.get_anchor_point(this.model.anchor, i, [sx, sy])\n          if (pt == null)\n            pt = glyph.get_anchor_point(\"center\", i, [sx, sy])\n\n          rx = pt.x\n          ry = pt.y\n        } else\n          [rx, ry] = [sx, sy]\n\n        let index: number\n        if (renderer_view.model instanceof GlyphRenderer)\n          index = (renderer_view.model as any).view.convert_indices_from_subset([i])[0]\n        else\n          index = i\n\n        const vars = {index: index, x: x, y: y, sx: sx, sy: sy, data_x: data_x, data_y: data_y, indices: indices.indices}\n        tooltip.add(rx, ry, this._render_tooltips(ds, index, vars))\n      }\n    }\n  }\n\n  _emit_callback(geometry: PointGeometry | SpanGeometry): void {\n    for (const r of this.computed_renderers) {\n      const index = (r as any).data_source.inspected\n      const frame = this.plot_model.frame\n\n      const xscale = frame.xscales[r.x_range_name]\n      const yscale = frame.yscales[r.y_range_name]\n      const x = xscale.invert(geometry.sx)\n      const y = yscale.invert(geometry.sy)\n\n      const g = extend({x, y}, geometry)\n\n      const callback = this.model.callback\n      const [obj, data] = [callback, {index: index, geometry: g, renderer: r}]\n\n      if (isFunction(callback))\n        callback(obj, data)\n      else\n        callback.execute(obj, data)\n    }\n  }\n\n  _render_tooltips(ds: ColumnarDataSource, i: number | ImageIndex, vars: Vars): HTMLElement {\n    const tooltips = this.model.tooltips\n    if (isString(tooltips)) {\n      const el = div()\n      el.innerHTML = replace_placeholders(tooltips, ds, i, this.model.formatters, vars)\n      return el\n    } else if (isFunction(tooltips)) {\n      return tooltips(ds, vars)\n    } else {\n      const rows = div({style: {display: \"table\", borderSpacing: \"2px\"}})\n\n      for (const [label, value] of tooltips) {\n        const row = div({style: {display: \"table-row\"}})\n        rows.appendChild(row)\n\n        let cell: HTMLElement\n\n        cell = div({style: {display: \"table-cell\"}, class: 'bk-tooltip-row-label'}, `${label}: `)\n        row.appendChild(cell)\n\n        cell = div({style: {display: \"table-cell\"}, class: 'bk-tooltip-row-value'})\n        row.appendChild(cell)\n\n        if (value.indexOf(\"$color\") >= 0) {\n          const [, opts=\"\", colname] = value.match(/\\$color(\\[.*\\])?:(\\w*)/)! // XXX!\n          const column = (ds as any).get_column(colname) // XXX: change to columnar ds\n          if (column == null) {\n            const el = span({}, `${colname} unknown`)\n            cell.appendChild(el)\n            continue\n          }\n          const hex = opts.indexOf(\"hex\") >= 0\n          const swatch = opts.indexOf(\"swatch\") >= 0\n          let color = isNumber(i) ? column[i] : null\n          if (color == null) {\n            const el = span({}, \"(null)\")\n            cell.appendChild(el)\n            continue\n          }\n          if (hex)\n            color = color2hex(color)\n          let el = span({}, color)\n          cell.appendChild(el)\n          if (swatch) {\n            el = span({class: 'bk-tooltip-color-block', style: {backgroundColor: color}}, \" \")\n            cell.appendChild(el)\n          }\n        } else {\n          const el = span()\n          el.innerHTML = replace_placeholders(value.replace(\"$~\", \"$data_\"), ds, i, this.model.formatters, vars)\n          cell.appendChild(el)\n        }\n      }\n\n      return rows\n    }\n  }\n}\n\nexport namespace HoverTool {\n  export interface Attrs extends InspectTool.Attrs {\n    tooltips: string | [string, string][] | ((source: ColumnarDataSource, vars: any) => HTMLElement)\n    formatters: any // XXX\n    renderers: RendererSpec\n    names: string[]\n    mode: \"mouse\" | \"hline\" | \"vline\"\n    point_policy: \"snap_to_data\" | \"follow_mouse\" | \"none\"\n    line_policy: \"prev\" | \"next\" | \"nearest\" | \"interp\" | \"none\"\n    show_arrow: boolean\n    anchor: Anchor\n    attachment: TooltipAttachment\n    callback: any // XXX\n  }\n\n  export interface Props extends InspectTool.Props {\n    tooltips: p.Property<string | [string, string][] | ((source: ColumnarDataSource, vars: any) => HTMLElement)>\n    renderers: p.Property<RendererSpec>\n    names: p.Property<string[]>\n  }\n}\n\nexport interface HoverTool extends HoverTool.Attrs {}\n\nexport class HoverTool extends InspectTool {\n\n  properties: HoverTool.Props\n\n  constructor(attrs?: Partial<HoverTool.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = \"HoverTool\"\n    this.prototype.default_view = HoverToolView\n\n    this.define({\n      tooltips: [ p.Any, [\n        [\"index\",         \"$index\"    ],\n        [\"data (x, y)\",   \"($x, $y)\"  ],\n        [\"screen (x, y)\", \"($sx, $sy)\"],\n      ]],\n      formatters:   [ p.Any,    {}             ],\n      renderers:    [ p.Any,    'auto'         ],\n      names:        [ p.Array,  []             ],\n      mode:         [ p.String, 'mouse'        ], // TODO (bev)\n      point_policy: [ p.String, 'snap_to_data' ], // TODO (bev) \"follow_mouse\", \"none\"\n      line_policy:  [ p.String, 'nearest'      ], // TODO (bev) \"next\", \"nearest\", \"interp\", \"none\"\n      show_arrow:   [ p.Boolean, true          ],\n      anchor:       [ p.String, 'center'       ], // TODO: enum\n      attachment:   [ p.String, 'horizontal'   ], // TODO: enum\n      callback:     [ p.Any                    ], // TODO: p.Either(p.Instance(Callback), p.Function) ]\n    })\n  }\n\n  tool_name = \"Hover\"\n  icon = \"bk-tool-icon-hover\"\n}\n\nHoverTool.initClass()\n"]}