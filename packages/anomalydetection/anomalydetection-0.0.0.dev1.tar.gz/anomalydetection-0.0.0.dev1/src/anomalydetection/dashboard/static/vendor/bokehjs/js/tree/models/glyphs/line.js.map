{"version":3,"sources":["models/glyphs/line.ts"],"names":[],"mappings":"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","file":"line.js","sourcesContent":["import {XYGlyph, XYGlyphView, XYGlyphData} from \"./xy_glyph\"\nimport {generic_line_legend} from \"./utils\"\nimport {PointGeometry, SpanGeometry} from \"core/geometry\"\nimport {LineMixinVector} from \"core/property_mixins\"\nimport {Arrayable} from \"core/types\"\nimport * as visuals from \"core/visuals\"\nimport * as hittest from \"core/hittest\"\nimport {IBBox} from \"core/util/bbox\"\nimport {Context2d} from \"core/util/canvas\"\nimport {Selection} from \"../selections/selection\"\n\nexport interface LineData extends XYGlyphData {}\n\nexport interface LineView extends LineData {}\n\nexport class LineView extends XYGlyphView {\n  model: Line\n  visuals: Line.Visuals\n\n  protected _render(ctx: Context2d, indices: number[], {sx, sy}: LineData): void {\n    let drawing = false\n    let last_index: number | null = null\n\n    this.visuals.line.set_value(ctx)\n    for (const i of indices) {\n      if (drawing) {\n        if (!isFinite(sx[i] + sy[i])) {\n          ctx.stroke()\n          ctx.beginPath()\n          drawing = false\n          last_index = i\n          continue\n        }\n\n        if (last_index != null && i - last_index > 1) {\n          ctx.stroke()\n          drawing = false\n        }\n      }\n\n      if (drawing)\n        ctx.lineTo(sx[i], sy[i])\n      else {\n        ctx.beginPath()\n        ctx.moveTo(sx[i], sy[i])\n        drawing = true\n      }\n\n      last_index = i\n    }\n\n    if (drawing)\n      ctx.stroke()\n  }\n\n  protected _hit_point(geometry: PointGeometry): Selection {\n    /* Check if the point geometry hits this line glyph and return an object\n    that describes the hit result:\n      Args:\n        * geometry (object): object with the following keys\n          * sx (float): screen x coordinate of the point\n          * sy (float): screen y coordinate of the point\n          * type (str): type of geometry (in this case it's a point)\n      Output:\n        Object with the following keys:\n          * 0d (bool): whether the point hits the glyph or not\n          * 1d (array(int)): array with the indices hit by the point\n    */\n    const result = hittest.create_empty_hit_test_result()\n    const point = {x: geometry.sx, y: geometry.sy}\n    let shortest = 9999\n    const threshold = Math.max(2, this.visuals.line.line_width.value() / 2)\n\n    for (let i = 0, end = this.sx.length-1; i < end; i++) {\n      const p0 = {x: this.sx[i],     y: this.sy[i]    }\n      const p1 = {x: this.sx[i + 1], y: this.sy[i + 1]}\n      const dist = hittest.dist_to_segment(point, p0, p1)\n\n      if (dist < threshold && dist < shortest) {\n        shortest = dist\n        result.add_to_selected_glyphs(this.model)\n        result.get_view = () => this\n        result.line_indices = [i]\n      }\n    }\n\n    return result\n  }\n\n  protected _hit_span(geometry: SpanGeometry): Selection {\n    const {sx, sy} = geometry\n    const result = hittest.create_empty_hit_test_result()\n\n    let val: number\n    let values: Arrayable<number>\n    if (geometry.direction == 'v') {\n      val = this.renderer.yscale.invert(sy)\n      values = this._y\n    } else {\n      val = this.renderer.xscale.invert(sx)\n      values = this._x\n    }\n\n    for (let i = 0, end = values.length-1; i < end; i++) {\n      if ((values[i] <= val && val <= values[i + 1]) || (values[i + 1] <= val && val <= values[i])) {\n        result.add_to_selected_glyphs(this.model)\n        result.get_view = () => this\n        result.line_indices.push(i)\n      }\n    }\n\n    return result\n  }\n\n  get_interpolation_hit(i: number, geometry: PointGeometry | SpanGeometry): [number, number] {\n    const {sx, sy} = geometry\n    const [x2, y2, x3, y3] = [this._x[i], this._y[i], this._x[i+1], this._y[i+1]]\n\n    let x0: number, x1: number\n    let y0: number, y1: number\n    if (geometry.type == 'point') {\n      ;[y0, y1] = this.renderer.yscale.r_invert(sy-1, sy+1)\n      ;[x0, x1] = this.renderer.xscale.r_invert(sx-1, sx+1)\n    } else {\n      if (geometry.direction == 'v') {\n        ;[y0, y1] = this.renderer.yscale.r_invert(sy, sy)\n        ;[x0, x1] = [x2, x3]\n      } else {\n        ;[x0, x1] = this.renderer.xscale.r_invert(sx, sx)\n        ;[y0, y1] = [y2, y3]\n      }\n    }\n\n    const {x, y} = hittest.check_2_segments_intersect(x0, y0, x1, y1, x2, y2, x3, y3)\n    return [x!, y!] // XXX: null is not handled at use sites\n  }\n\n  draw_legend_for_index(ctx: Context2d, bbox: IBBox, index: number): void {\n    generic_line_legend(this.visuals, ctx, bbox, index)\n  }\n}\n\nexport namespace Line {\n  export interface Mixins extends LineMixinVector {}\n\n  export interface Attrs extends XYGlyph.Attrs, Mixins {}\n\n  export interface Props extends XYGlyph.Props {}\n\n  export interface Visuals extends XYGlyph.Visuals {\n    line: visuals.Line\n  }\n}\n\nexport interface Line extends Line.Attrs {}\n\nexport class Line extends XYGlyph {\n\n  properties: Line.Props\n\n  constructor(attrs?: Partial<Line.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = 'Line'\n    this.prototype.default_view = LineView\n\n    this.mixins(['line'])\n  }\n}\nLine.initClass()\n"]}