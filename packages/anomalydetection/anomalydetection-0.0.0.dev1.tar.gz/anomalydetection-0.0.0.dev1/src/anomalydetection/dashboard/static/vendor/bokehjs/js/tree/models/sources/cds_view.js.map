{"version":3,"sources":["models/sources/cds_view.ts"],"names":[],"mappings":"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","file":"cds_view.js","sourcesContent":["import {Model} from \"../../model\"\nimport * as p from \"core/properties\"\nimport {Selection} from \"../selections/selection\"\nimport {intersection} from \"core/util/array\"\nimport {Filter} from \"../filters/filter\"\nimport {ColumnarDataSource} from \"./columnar_data_source\"\n\nexport namespace CDSView {\n  export interface Attrs extends Model.Attrs {\n    filters: Filter[]\n    source: ColumnarDataSource\n    indices: number[]\n    indices_map: {[key: string]: number}\n  }\n\n  export interface Props extends Model.Props {\n    filters: p.Property<Filter[]>\n    source: p.Property<ColumnarDataSource>\n    indices: p.Property<number[]>\n    indices_map: p.Property<{[key: string]: number}>\n  }\n}\n\nexport interface CDSView extends CDSView.Attrs {}\n\nexport class CDSView extends Model {\n\n  properties: CDSView.Props\n\n  constructor(attrs?: Partial<CDSView.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = 'CDSView'\n\n    this.define({\n      filters: [ p.Array, [] ],\n      source:  [ p.Instance  ],\n    })\n\n    this.internal({\n      indices:     [ p.Array, [] ],\n      indices_map: [ p.Any,   {} ],\n    })\n  }\n\n  initialize(): void {\n    super.initialize()\n    this.compute_indices()\n  }\n\n  connect_signals(): void {\n    super.connect_signals()\n    this.connect(this.properties.filters.change, () => {\n      this.compute_indices()\n      this.change.emit()\n    })\n    if (this.source != null) {\n      if (this.source.change != null)\n        this.connect(this.source.change, () => this.compute_indices())\n      if (this.source.streaming != null)\n        this.connect(this.source.streaming, () => this.compute_indices())\n      if (this.source.patching != null)\n        this.connect(this.source.patching, () => this.compute_indices())\n    }\n  }\n\n  compute_indices(): void {\n    let indices = (this.filters.map((filter) => filter.compute_indices(this.source)))\n    indices = ((() => {\n      const result = []\n      for (const inds of indices) {\n        if (inds != null) {\n          result.push(inds)\n        }\n      }\n      return result\n    })())\n    if (indices.length > 0) {\n      this.indices = intersection.apply(this, indices)\n    } else {\n      if (this.source instanceof ColumnarDataSource) {\n        this.indices = this.source.get_indices()\n      }\n    }\n\n    this.indices_map_to_subset()\n  }\n\n  indices_map_to_subset(): void {\n    this.indices_map = {}\n    for (let i = 0; i < this.indices.length; i++){\n      this.indices_map[this.indices[i]] = i\n    }\n  }\n\n  convert_selection_from_subset(selection_subset: Selection): Selection {\n    const selection_full = new Selection()\n    selection_full.update_through_union(selection_subset)\n    const indices_1d = (selection_subset.indices.map((i) => this.indices[i]))\n    selection_full.indices = indices_1d\n    selection_full.image_indices = selection_subset.image_indices\n    return selection_full\n  }\n\n  convert_selection_to_subset(selection_full: Selection): Selection {\n    const selection_subset = new Selection()\n    selection_subset.update_through_union(selection_full)\n    const indices_1d = (selection_full.indices.map((i) => this.indices_map[i]))\n    selection_subset.indices = indices_1d\n    selection_subset.image_indices = selection_full.image_indices\n    return selection_subset\n  }\n\n  convert_indices_from_subset(indices: number[]): number[] {\n    return indices.map((i) => this.indices[i])\n  }\n}\nCDSView.initClass()\n"]}