{"version":3,"sources":["protocol/receiver.ts"],"names":[],"mappings":";;AAAA,4CAAgD;AAIhD;IAAA;QAEE,YAAO,GAAmB,IAAI,CAAA;QAEpB,aAAQ,GAAmB,IAAI,CAAA;QAE/B,eAAU,GAAe,EAAE,CAAA;QAE3B,gBAAW,GAAkB,IAAI,CAAA;QAEjC,sBAAiB,GAAiC,IAAI,CAAC,OAAO,CAAA;IA2D1E,CAAC;IAzDC,0BAAO,GAAP,UAAQ,QAAkB;QACxB,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAA;IAClC,CAAC;IAED,0BAAO,GAAP,UAAQ,QAAkB;QACxB,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAA;QAC3B,IAAI,CAAC,OAAO,GAAG,IAAI,CAAA;QACnB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAA;QACpB,IAAI,CAAC,UAAU,GAAG,CAAC,QAAQ,CAAC,CAAA;QAC5B,IAAI,CAAC,WAAW,GAAG,IAAI,CAAA;QACvB,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,SAAS,CAAA;IACzC,CAAC;IAED,4BAAS,GAAT,UAAU,QAAkB;QAC1B,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAA;QAC3B,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;QAC9B,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,QAAQ,CAAA;IACxC,CAAC;IAED,2BAAQ,GAAR,UAAS,QAAkB;QACzB,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAA;QAC3B,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;QACxB,IAAA,gCACmD,EADlD,mBAAW,EAAE,qBAAa,EAAE,oBAAY,CACU;QACzD,IAAI,CAAC,QAAQ,GAAG,iBAAO,CAAC,QAAQ,CAAC,WAAW,EAAE,aAAa,EAAE,YAAY,CAAC,CAAA;QAC1E,IAAI,CAAC,eAAe,EAAE,CAAA;IACxB,CAAC;IAED,iCAAc,GAAd,UAAe,QAAkB;QAC/B,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAA;QAC3B,IAAI,CAAC,WAAW,GAAG,QAAe,CAAA,CAAC,0CAA0C;QAC7E,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,eAAe,CAAA;IAC/C,CAAC;IAED,kCAAe,GAAf,UAAgB,QAAkB;QAChC,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAA;QAC7B,IAAI,CAAC,QAAS,CAAC,eAAe,CAAC,IAAI,CAAC,WAAY,EAAE,QAAQ,CAAC,CAAA;QAC3D,IAAI,CAAC,eAAe,EAAE,CAAA;IACxB,CAAC;IAED,+BAAY,GAAZ,UAAa,QAAkB;QAC7B,IAAI,QAAQ,YAAY,WAAW;YACjC,MAAM,IAAI,KAAK,CAAC,qDAAqD,CAAC,CAAA;IAC1E,CAAC;IAED,iCAAc,GAAd,UAAe,QAAkB;QAC/B,IAAI,CAAC,CAAC,QAAQ,YAAY,WAAW,CAAC;YACpC,MAAM,IAAI,KAAK,CAAC,qDAAqD,CAAC,CAAA;IAC1E,CAAC;IAED,kCAAe,GAAf;QACE,IAAI,IAAI,CAAC,QAAS,CAAC,QAAQ,EAAE,EAAE;YAC7B,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAA;YAC5B,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,OAAO,CAAA;SACtC;;YACC,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,cAAc,CAAA;IAChD,CAAC;IACH,eAAC;AAAD,CArEA,AAqEC,IAAA;AArEY,4BAAQ","file":"receiver.js","sourcesContent":["import {Message, Header} from \"protocol/message\"\n\nexport type Fragment = string | ArrayBuffer\n\nexport class Receiver {\n\n  message: Message | null = null\n\n  protected _partial: Message | null = null\n\n  protected _fragments: Fragment[] = []\n\n  protected _buf_header: Header | null = null\n\n  protected _current_consumer: (fragment: Fragment) => void = this._HEADER\n\n  consume(fragment: Fragment): void {\n    this._current_consumer(fragment)\n  }\n\n  _HEADER(fragment: Fragment): void {\n    this._assume_text(fragment)\n    this.message = null\n    this._partial = null\n    this._fragments = [fragment]\n    this._buf_header = null\n    this._current_consumer = this._METADATA\n  }\n\n  _METADATA(fragment: Fragment): void {\n    this._assume_text(fragment)\n    this._fragments.push(fragment)\n    this._current_consumer = this._CONTENT\n  }\n\n  _CONTENT(fragment: Fragment): void {\n    this._assume_text(fragment)\n    this._fragments.push(fragment)\n    const [header_json, metadata_json, content_json] =\n      this._fragments.slice(0, 3) as [string, string, string]\n    this._partial = Message.assemble(header_json, metadata_json, content_json)\n    this._check_complete()\n  }\n\n  _BUFFER_HEADER(fragment: Fragment): void {\n    this._assume_text(fragment)\n    this._buf_header = fragment as any // XXX: assume text but Header is expected\n    this._current_consumer = this._BUFFER_PAYLOAD\n  }\n\n  _BUFFER_PAYLOAD(fragment: Fragment): void {\n    this._assume_binary(fragment)\n    this._partial!.assemble_buffer(this._buf_header!, fragment)\n    this._check_complete()\n  }\n\n  _assume_text(fragment: Fragment): void {\n    if (fragment instanceof ArrayBuffer)\n      throw new Error(\"Expected text fragment but received binary fragment\")\n  }\n\n  _assume_binary(fragment: Fragment): void {\n    if (!(fragment instanceof ArrayBuffer))\n      throw new Error(\"Expected binary fragment but received text fragment\")\n  }\n\n  _check_complete(): void {\n    if (this._partial!.complete()) {\n      this.message = this._partial\n      this._current_consumer = this._HEADER\n    } else\n      this._current_consumer = this._BUFFER_HEADER\n  }\n}\n"]}