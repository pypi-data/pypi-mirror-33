{"version":3,"sources":["models/tiles/tile_source.ts"],"names":[],"mappings":"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","file":"tile_source.js","sourcesContent":["import {Model} from \"../../model\"\nimport {ImagePool} from \"./image_pool\"\nimport {Extent, Bounds} from \"./tile_utils\"\nimport * as p from \"core/properties\"\n\nexport interface Tile {\n  tile_coords: [number, number, number]\n}\n\nexport namespace TileSource {\n  export interface Attrs extends Model.Attrs {\n    url: string\n    tile_size: number\n    max_zoom: number\n    min_zoom: number\n    extra_url_vars: {[key: string]: string}\n    attribution: string\n    x_origin_offset: number\n    y_origin_offset: number\n    initial_resolution: number\n  }\n\n  export interface Props extends Model.Props {}\n}\n\nexport interface TileSource extends TileSource.Attrs {}\n\nexport abstract class TileSource extends Model {\n\n  properties: TileSource.Props\n\n  constructor(attrs?: Partial<TileSource.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = 'TileSource'\n\n    this.define({\n      url:                [ p.String, ''  ],\n      tile_size:          [ p.Number, 256 ],\n      max_zoom:           [ p.Number, 30  ],\n      min_zoom:           [ p.Number, 0   ],\n      extra_url_vars:     [ p.Any,    {}  ],\n      attribution:        [ p.String, ''  ],\n      x_origin_offset:    [ p.Number      ],\n      y_origin_offset:    [ p.Number      ],\n      initial_resolution: [ p.Number      ],\n    })\n  }\n\n  tiles: {[key: string]: Tile}\n\n  protected pool: ImagePool\n\n  initialize(): void {\n    super.initialize()\n    this.tiles = {}\n    this.pool = new ImagePool()\n    this._normalize_case()\n  }\n\n  string_lookup_replace(str: string, lookup: {[key: string]: string}): string {\n    let result_str = str\n    for (const key in lookup) {\n      const value = lookup[key]\n      result_str = result_str.replace(`{${key}}`, value)\n    }\n    return result_str\n  }\n\n  protected _normalize_case(): void {\n    /*\n     * Note: should probably be refactored into subclasses.\n     */\n    const url = this.url\n      .replace('{x}','{X}')\n      .replace('{y}','{Y}')\n      .replace('{z}','{Z}')\n      .replace('{q}','{Q}')\n      .replace('{xmin}','{XMIN}')\n      .replace('{ymin}','{YMIN}')\n      .replace('{xmax}','{XMAX}')\n      .replace('{ymax}','{YMAX}')\n    this.url = url\n  }\n\n  tile_xyz_to_key(x: number, y: number, z: number): string {\n    return `${x}:${y}:${z}`\n  }\n\n  key_to_tile_xyz(key: string): [number, number, number] {\n    const [x, y, z] = key.split(':').map((c) => parseInt(c))\n    return [x, y, z]\n  }\n\n  sort_tiles_from_center(tiles: [number, number, number, Bounds][], tile_extent: Extent): void {\n    const [txmin, tymin, txmax, tymax] = tile_extent\n    const center_x = ((txmax - txmin) / 2) + txmin\n    const center_y = ((tymax - tymin) / 2) + tymin\n    tiles.sort(function(a, b) {\n      const a_distance = Math.sqrt(Math.pow(center_x - a[0], 2) + Math.pow(center_y - a[1], 2))\n      const b_distance = Math.sqrt(Math.pow(center_x - b[0], 2) + Math.pow(center_y - b[1], 2))\n      return a_distance - b_distance\n    })\n  }\n\n  get_image_url(x: number, y: number, z: number): string {\n    const image_url = this.string_lookup_replace(this.url, this.extra_url_vars)\n    return image_url.replace(\"{X}\", x.toString())\n                    .replace('{Y}', y.toString())\n                    .replace(\"{Z}\", z.toString())\n  }\n\n  abstract tile_xyz_to_quadkey(x: number, y: number, z: number): string\n\n  abstract quadkey_to_tile_xyz(quadkey: string): [number, number, number]\n\n  abstract children_by_tile_xyz(x: number, y: number, z: number): [number, number, number, Bounds][]\n\n  abstract get_closest_parent_by_tile_xyz(x: number, y: number, z: number): [number, number, number]\n\n  abstract get_tiles_by_extent(extent: Extent, level: number, tile_border?: number): [number, number, number, Bounds][]\n\n  abstract get_level_by_extent(extent: Extent, height: number, width: number): number\n\n  abstract snap_to_zoom_level(extent: Extent, height: number, width: number, level: number): Extent\n\n  abstract normalize_xyz(x: number, y: number, z: number): [number, number, number]\n}\nTileSource.initClass()\n"]}