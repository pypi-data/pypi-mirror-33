{"version":3,"sources":["api/charts.ts"],"names":[],"mappings":";;AAAA,yCAAkC;AAElC,qCAAsC;AACtC,4CAAgE;AAChE,4CAA0C;AAG1C,mCAUiB;AAIjB,sBAAsB,GAAW;IAC/B,OAAO,oBAAO,CAAC,OAAO,EAAE,GAAG,CAAC,CAAA;AAC9B,CAAC;AAED,sBAAsB,KAAa;IACjC,IAAM,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAA;IAC1C,IAAM,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAA;IAC1C,IAAM,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAA;IAC1C,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAA;AAClB,CAAC;AAED,iBAAiB,EAAc;QAAb,SAAC,EAAE,SAAC,EAAE,SAAC;IACvB,IAAM,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,GAAC,CAAC,GAAG,KAAK,GAAC,CAAC,GAAG,KAAK,GAAC,CAAC,CAAC,GAAC,GAAG,CAAA;IAC/C,OAAO,CAAC,IAAI,GAAG,CAAA;AACjB,CAAC;AAID,sBAAsB,OAAyC;IAAzC,wBAAA,EAAA,sBAAyC;IAC7D,IAAI,eAAO,CAAC,OAAO,CAAC;QAClB,OAAO,OAAO,CAAA;SACX;QAEH,OAAQ,QAAiB,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,YAAY,CAAC,CAAA;KACrD;AACH,CAAC;AAsBD,aAAoB,IAAkB,EAAE,IAAuB;IAAvB,qBAAA,EAAA,SAAuB;IAC7D,IAAM,MAAM,GAAa,EAAE,CAAA;IAC3B,IAAM,MAAM,GAAa,EAAE,CAAA;IAE3B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,EAAE;QACzE,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE;YACtB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAA;YAC3B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAA;SAC5B;KACF;IAED,IAAM,WAAW,GAAG,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAA;IACnE,IAAM,SAAS,GAAG,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,WAAW,GAAG,CAAC,GAAC,IAAI,CAAC,EAAE,CAAC,CAAA;IAErF,IAAM,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,GAAG,WAAW,CAAC,CAAA;IACpD,IAAM,UAAU,GAAG,UAAC,CAAS,IAAK,OAAA,UAAU,GAAC,CAAC,EAAZ,CAAY,CAAA;IAE9C,IAAM,WAAW,GAAG,WAAG,CAAC,MAAM,CAAC,CAAA;IAC/B,IAAM,iBAAiB,GAAG,MAAM,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,GAAC,WAAW,EAAb,CAAa,CAAC,CAAA;IAC1D,IAAM,iBAAiB,GAAG,cAAM,CAAC,iBAAiB,CAAC,CAAA;IAEnD,IAAM,UAAU,GAAG,iBAAiB,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,WAAW,GAAG,UAAU,CAAC,CAAC,CAAC,EAA3B,CAA2B,CAAC,CAAA;IAC5E,IAAM,YAAY,GAAG,CAAC,WAAW,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAA;IAClE,IAAM,WAAW,GAAG,WAAG,CAAC,YAAY,EAAE,UAAU,CAAC,CAAC,GAAG,CAAC,UAAC,EAAY;YAAX,aAAK,EAAE,WAAG;QAAM,OAAA,CAAC,KAAK,GAAG,GAAG,CAAC,GAAC,CAAC;IAAf,CAAe,CAAC,CAAA;IAExF,IAAI,EAAU,CAAA;IACd,IAAI,EAAU,CAAA;IACd,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,EAAE;QACvB,EAAE,GAAG,CAAC,CAAA;QACN,EAAE,GAAG,CAAC,CAAA;KACP;SAAM,IAAI,eAAO,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;QAC/B,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;QACnB,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;KACpB;SAAM;QACL,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAA;QAClB,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAA;KACnB;IAED,IAAM,YAAY,GAAG,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAA;IACtE,IAAM,YAAY,GAAG,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAA;IAEtE,IAAM,OAAO,GAAG,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;IAE1C,IAAM,MAAM,GAAY,EAAE,CAAA;IAC1B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,iBAAiB,CAAC,MAAM,EAAE,CAAC,EAAE;QAC/C,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,CAAA;IAC1C,IAAM,WAAW,GAAG,MAAM,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,EAA5C,CAA4C,CAAC,CAAA;IAEnF,sBAAsB,CAAS,EAAE,KAAa;QAC5C,OAAO,CAAC,CAAC,GAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,GAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAA;IAC/C,CAAC;IAED,IAAM,WAAW,GAAG,CAAC,YAAY,GAAC,YAAY,CAAC,GAAC,CAAC,CAAA;IAC7C,IAAA,4GAAkG,EAAjG,eAAO,EAAE,eAAO,CAAiF;IACtG,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,GAAG,EAAE,EAAN,CAAM,CAAC,CAAA;IACpC,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,GAAG,EAAE,EAAN,CAAM,CAAC,CAAA;IAEpC,IAAM,WAAW,GAAG,WAAW,CAAC,GAAG,CAAC,UAAC,CAAS;QAC5C,IAAI,CAAC,IAAI,IAAI,CAAC,EAAE,GAAC,CAAC,IAAI,CAAC,IAAI,CAAC,GAAC,IAAI,CAAC,EAAE,GAAC,CAAC;YACpC,OAAO,CAAC,GAAG,IAAI,CAAC,EAAE,CAAA;;YAElB,OAAO,CAAC,CAAA;IACZ,CAAC,CAAC,CAAA;IAEF,IAAM,MAAM,GAAG,IAAI,yBAAgB,CAAC;QAClC,IAAI,EAAE;YACJ,MAAM,EAAE,MAAM;YACd,MAAM,EAAE,MAAM;YACd,WAAW,EAAE,iBAAiB,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,oBAAO,CAAC,QAAQ,EAAE,CAAC,GAAC,GAAG,CAAC,EAAxB,CAAwB,CAAC;YACnE,YAAY,EAAE,YAAY;YAC1B,UAAU,EAAE,UAAU;YACtB,WAAW,EAAE,WAAW;YACxB,MAAM,EAAE,MAAM;YACd,WAAW,EAAE,WAAW;YACxB,OAAO,EAAE,OAAO;YAChB,OAAO,EAAE,OAAO;SACjB;KACF,CAAC,CAAA;IAEF,IAAM,EAAE,GAAG,IAAI,qBAAY,CAAC;QAC1B,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE;QACZ,YAAY,EAAE,YAAY,EAAE,YAAY,EAAE,YAAY;QACtD,WAAW,EAAE,EAAC,KAAK,EAAE,cAAc,EAAC,EAAE,SAAS,EAAE,EAAC,KAAK,EAAE,YAAY,EAAC;QACtE,UAAU,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC,EAAE,UAAU,EAAE,EAAC,KAAK,EAAE,QAAQ,EAAC;KAC/D,CAAC,CAAA;IACF,IAAM,EAAE,GAAG,IAAI,qBAAY,CAAC;QAC1B,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE;QACZ,YAAY,EAAE,YAAY,EAAE,YAAY,EAAE,YAAY;QACtD,WAAW,EAAE,EAAC,KAAK,EAAE,cAAc,EAAC,EAAE,SAAS,EAAE,EAAC,KAAK,EAAE,YAAY,EAAC;QACtE,UAAU,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC,EAAE,UAAU,EAAE,EAAC,KAAK,EAAE,QAAQ,EAAC,EAAE,UAAU,EAAE,GAAG;KAChF,CAAC,CAAA;IACF,IAAM,EAAE,GAAG,IAAI,sBAAa,CAAC;QAC3B,WAAW,EAAE,MAAM;QACnB,KAAK,EAAE,EAAE;QACT,WAAW,EAAE,EAAE;KAChB,CAAC,CAAA;IAEF,IAAM,EAAE,GAAG,IAAI,aAAI,CAAC;QAClB,CAAC,EAAE,EAAC,KAAK,EAAE,SAAS,EAAC,EAAE,CAAC,EAAE,EAAC,KAAK,EAAE,SAAS,EAAC;QAC5C,IAAI,EAAE,EAAC,KAAK,EAAE,IAAI,CAAC,YAAY,IAAI,QAAQ,EAAC;QAC5C,KAAK,EAAE,EAAC,KAAK,EAAE,aAAa,EAAC;QAC7B,UAAU,EAAE,QAAQ,EAAE,aAAa,EAAE,QAAQ;QAC7C,UAAU,EAAE,EAAC,KAAK,EAAE,aAAa,EAAC,EAAE,cAAc,EAAE,KAAK;KAC1D,CAAC,CAAA;IACF,IAAM,EAAE,GAAG,IAAI,sBAAa,CAAC;QAC3B,WAAW,EAAE,MAAM;QACnB,KAAK,EAAE,EAAE;KACV,CAAC,CAAA;IAEF,IAAM,GAAG,GAAG,IAAI,oBAAW,CAAC,EAAC,SAAS,EAAE,CAAC,EAAE,CAAC,EAAE,aAAa,EAAE,GAAG,EAAC,CAAC,CAAA;IAClE,IAAM,GAAG,GAAG,IAAI,oBAAW,CAAC,EAAC,SAAS,EAAE,CAAC,EAAE,CAAC,EAAE,aAAa,EAAE,GAAG,EAAC,CAAC,CAAA;IAClE,IAAM,IAAI,GAAG,IAAI,aAAI,CAAC,EAAC,OAAO,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,EAAC,CAAC,CAAA;IAEnD,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI;QAAE,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,KAAK,CAAA;IACpD,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI;QAAE,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,MAAM,CAAA;IAEvD,IAAI,CAAC,aAAa,CAAC,EAAE,EAAE,EAAE,CAAC,CAAA;IAE1B,IAAM,OAAO,GAAG,4DAA4D,CAAA;IAC5E,IAAM,KAAK,GAAG,IAAI,kBAAS,CAAC,EAAC,SAAS,EAAE,CAAC,EAAE,CAAC,EAAE,QAAQ,EAAE,OAAO,EAAC,CAAC,CAAA;IACjE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAA;IAErB,OAAO,IAAI,CAAA;AACb,CAAC;AA3HD,kBA2HC;AAYD,aAAoB,IAAkB,EAAE,IAAuB;IAAvB,qBAAA,EAAA,SAAuB;IAC7D,IAAM,YAAY,GAAG,IAAI,CAAC,CAAC,CAAC,CAAA;IAC5B,IAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;IAE1B,IAAI,OAAO,GAAe,YAAY,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,EAAE,EAAF,CAAE,CAAC,CAAA;IACrD,KAAkB,UAAI,EAAJ,aAAI,EAAJ,kBAAI,EAAJ,IAAI;QAAjB,IAAM,GAAG,aAAA;QACZ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACnC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;SACxB;KACF;IAED,IAAM,MAAM,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,CAAC,QAAQ,EAAE,EAAZ,CAAY,CAAC,CAAA;IAClD,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;IAE1B,IAAI,KAAK,GAAS,IAAI,wBAAe,EAAE,CAAA;IACvC,IAAI,GAAG,GAAU,IAAI,oBAAW,CAAC,EAAC,OAAO,EAAE,MAAM,EAAC,CAAC,CAAA;IACnD,IAAI,MAAM,GAAU,IAAI,yBAAgB,EAAE,CAAA;IAE1C,IAAI,UAAyB,CAAA;IAC7B,IAAI,IAAI,CAAC,kBAAkB,IAAI,IAAI;QACjC,UAAU,GAAG,IAAI,6BAAoB,CAAC,EAAC,MAAM,EAAE,IAAI,CAAC,kBAAkB,EAAC,CAAC,CAAA;;QAExE,UAAU,GAAG,IAAI,2BAAkB,EAAE,CAAA;IACvC,IAAI,KAAK,GAAS,IAAI,mBAAU,CAAC,EAAC,SAAS,EAAE,UAAU,EAAC,CAAC,CAAA;IACzD,IAAI,GAAG,GAAU,IAAI,oBAAW,CAAC,EAAC,KAAK,EAAE,CAAC,EAAC,CAAC,CAAA;IAC5C,IAAI,MAAM,GAAU,IAAI,oBAAW,EAAE,CAAA;IAErC,IAAM,OAAO,GAAG,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;IAE1C,IAAM,OAAO,GAAG,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAA;IAC3D,IAAM,WAAW,GAAG,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,YAAY,CAAA;IAE9E,IAAM,SAAS,GAAoB,EAAE,CAAA;IAErC,IAAI,OAAO,EAAE;QACX,IAAM,IAAI,GAAa,EAAE,CAAA;QACzB,IAAM,KAAK,GAAa,EAAE,CAAA;gCAEjB,CAAC;YACR,IAAM,MAAM,GAAuB,EAAE,CAAA;YACrC,IAAM,KAAG,GAAuB,EAAE,CAAA;YAElC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACtC,IAAM,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAA;gBACvB,IAAI,CAAC,IAAI,CAAC,EAAE;oBACV,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;oBACZ,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;iBAC1B;qBAAM;oBACL,IAAI,CAAC,CAAC,CAAC,IAAI,OAAO,CAAC,CAAC,GAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;oBAC1B,KAAK,CAAC,CAAC,CAAC,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;iBAC1B;gBACD,MAAM,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,CAAC,CAAA;gBAC1B,KAAG,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAA;aACvB;YAED,IAAM,MAAM,GAAG,IAAI,yBAAgB,CAAC;gBAClC,IAAI,EAAE;oBACJ,IAAI,EAAE,YAAI,CAAC,IAAI,CAAC;oBAChB,KAAK,EAAE,YAAI,CAAC,KAAK,CAAC;oBAClB,GAAG,EAAE,KAAG;oBACR,MAAM,EAAE,MAAM;oBACd,MAAM,EAAE,MAAM;oBACd,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC;oBAClB,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,YAAY,CAAC,CAAC,GAAC,CAAC,CAAC,EAAjB,CAAiB,CAAC;iBAClD;aACF,CAAC,CAAA;YAEF,IAAM,EAAE,GAAG,IAAI,aAAI,CAAC;gBAClB,IAAI,EAAE,EAAC,KAAK,EAAE,MAAM,EAAC,EAAE,MAAM,EAAE,EAAC,KAAK,EAAE,QAAQ,EAAC;gBAChD,KAAK,EAAE,EAAC,KAAK,EAAE,OAAO,EAAC,EAAE,GAAG,EAAE,EAAC,KAAK,EAAE,KAAK,EAAC;gBAC5C,UAAU,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC;aAC1D,CAAC,CAAA;YACF,IAAM,EAAE,GAAG,IAAI,sBAAa,CAAC,EAAC,WAAW,EAAE,MAAM,EAAE,KAAK,EAAE,EAAE,EAAC,CAAC,CAAA;YAC9D,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;QACpB,CAAC;QApCD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE;oBAA9B,CAAC;SAoCT;KACF;SAAM;QACL,IAAM,EAAE,GAAG,CAAC,GAAC,OAAO,CAAC,MAAM,CAAA;gCAElB,CAAC;YACR,IAAM,IAAI,GAAa,EAAE,CAAA;YACzB,IAAM,KAAK,GAAa,EAAE,CAAA;YAC1B,IAAM,MAAM,GAAuB,EAAE,CAAA;YACrC,IAAM,KAAG,GAAuB,EAAE,CAAA;YAElC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACtC,IAAM,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAA;gBACvB,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;gBACZ,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;gBACzB,MAAM,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,CAAC,GAAC,EAAE,GAAC,GAAG,CAAC,CAAC,CAAA;gBAC9B,KAAG,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,GAAC,CAAC,CAAC,GAAC,EAAE,GAAC,GAAG,CAAC,CAAC,CAAA;aAChC;YAED,IAAM,MAAM,GAAG,IAAI,yBAAgB,CAAC;gBAClC,IAAI,EAAE;oBACJ,IAAI,EAAE,IAAI;oBACV,KAAK,EAAE,KAAK;oBACZ,GAAG,EAAE,KAAG;oBACR,MAAM,EAAE,MAAM;oBACd,MAAM,EAAE,MAAM;oBACd,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC;oBAClB,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,YAAY,CAAC,CAAC,GAAC,CAAC,CAAC,EAAjB,CAAiB,CAAC;iBAClD;aACF,CAAC,CAAA;YAEF,IAAM,EAAE,GAAG,IAAI,aAAI,CAAC;gBAClB,IAAI,EAAE,EAAC,KAAK,EAAE,MAAM,EAAC,EAAE,MAAM,EAAE,EAAC,KAAK,EAAE,QAAQ,EAAC;gBAChD,KAAK,EAAE,EAAC,KAAK,EAAE,OAAO,EAAC,EAAE,GAAG,EAAE,EAAC,KAAK,EAAE,KAAK,EAAC;gBAC5C,UAAU,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC;aAC1D,CAAC,CAAA;YACF,IAAM,EAAE,GAAG,IAAI,sBAAa,CAAC,EAAC,WAAW,EAAE,MAAM,EAAE,KAAK,EAAE,EAAE,EAAC,CAAC,CAAA;YAC9D,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;QACpB,CAAC;QAjCD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE;oBAA9B,CAAC;SAiCT;KACF;IAED,IAAI,WAAW,IAAI,UAAU,EAAE;QAC7B,eAAuB,EAAtB,WAAG,EAAE,WAAG,CAAe;QACxB,mBAA+B,EAA9B,aAAK,EAAE,aAAK,CAAmB;QAChC,qBAAmC,EAAlC,cAAM,EAAE,cAAM,CAAqB;QAEpC,KAAgB,UAAS,EAAT,uBAAS,EAAT,uBAAS,EAAT,IAAS;YAApB,IAAM,CAAC,kBAAA;YACV,IAAM,MAAI,GAAI,CAAC,CAAC,WAAgC,CAAC,IAAI,CAAC;YACtD,iCAAmD,EAAlD,mBAAS,EAAE,qBAAW,CAA6B;YACpD,+BAA+C,EAA9C,oBAAU,EAAE,kBAAQ,CAA2B;SACjD;KACF;IAED,IAAM,IAAI,GAAG,IAAI,aAAI,CAAC,EAAC,OAAO,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,EAAE,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,EAAC,CAAC,CAAA;IAErF,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI;QAAE,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,KAAK,CAAA;IACpD,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI;QAAE,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,MAAM,CAAA;IAEvD,IAAI,CAAC,aAAa,OAAlB,IAAI,EAAkB,SAAS,EAAC;IAChC,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,MAAM,CAAC,CAAA;IAC9B,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,OAAO,CAAC,CAAA;IAE/B,IAAM,OAAO,GAAG,2DAA2D,CAAA;IAE3E,IAAI,MAAc,CAAA;IAClB,IAAI,UAA6B,CAAA;IACjC,IAAI,WAAW,IAAI,YAAY,EAAE;QAC/B,MAAM,GAAG,cAAc,CAAA;QACvB,UAAU,GAAG,YAAY,CAAA;KAC1B;SAAM;QACL,MAAM,GAAG,YAAY,CAAA;QACrB,UAAU,GAAG,UAAU,CAAA;KACxB;IAED,IAAM,KAAK,GAAG,IAAI,kBAAS,CAAC;QAC1B,SAAS,EAAE,SAAS;QACpB,QAAQ,EAAE,OAAO;QACjB,YAAY,EAAE,cAAc;QAC5B,MAAM,EAAE,MAAM;QACd,UAAU,EAAE,UAAU;KACvB,CAAC,CAAA;IACF,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAA;IAErB,OAAO,IAAI,CAAA;;AACb,CAAC;AA7JD,kBA6JC","file":"charts.js","sourcesContent":["import {sprintf} from \"sprintf-js\"\nimport {Palette} from \"./palettes\"\nimport * as palettes from \"./palettes\"\nimport {zip, unzip, sum, cumsum, copy} from \"../core/util/array\"\nimport {isArray} from \"../core/util/types\"\nimport {Anchor, TooltipAttachment} from \"../core/enums\"\n\nimport {\n  Plot,\n  ColumnDataSource,\n  GlyphRenderer,\n  HoverTool,\n  AnnularWedge, Quad, Text,\n  Range, DataRange1d, FactorRange,\n  Axis, LinearAxis, CategoricalAxis,\n  Scale, LinearScale, CategoricalScale,\n  TickFormatter, BasicTickFormatter, NumeralTickFormatter,\n} from \"./models\"\n\ntype RGB = [number, number, number]\n\nfunction num2hexcolor(num: number): string {\n  return sprintf(\"#%06x\", num)\n}\n\nfunction hexcolor2rgb(color: string): RGB {\n  const r = parseInt(color.substr(1, 2), 16)\n  const g = parseInt(color.substr(3, 2), 16)\n  const b = parseInt(color.substr(5, 2), 16)\n  return [r, g, b]\n}\n\nfunction is_dark([r, g, b]: RGB): boolean {\n  const l = 1 - (0.299*r + 0.587*g + 0.114*b)/255\n  return l >= 0.6\n}\n\nexport type Color = string\n\nfunction norm_palette(palette: Palette | Color[] = \"Spectral11\"): Color[] {\n  if (isArray(palette))\n    return palette\n  else {\n    type Pals = {[key in Palette]: number[]}\n    return (palettes as Pals)[palette].map(num2hexcolor)\n  }\n}\n\nexport interface ChartOpts {\n  width?: number\n  height?: number\n}\n\nexport interface PieChartData {\n  labels: number[]\n  values: number[]\n}\n\nexport interface PieChartOpts extends ChartOpts {\n  start_angle?: number\n  end_angle?: number\n  center?: [number, number] | {x: number, y: number}\n  inner_radius?: number\n  outer_radius?: number\n  palette?: Palette | Color[]\n  slice_labels?: \"labels\" | \"values\" | \"percentages\"\n}\n\nexport function pie(data: PieChartData, opts: PieChartOpts = {}): Plot {\n  const labels: number[] = []\n  const values: number[] = []\n\n  for (let i = 0; i < Math.min(data.labels.length, data.values.length); i++) {\n    if (data.values[i] > 0) {\n      labels.push(data.labels[i])\n      values.push(data.values[i])\n    }\n  }\n\n  const start_angle = opts.start_angle != null ? opts.start_angle : 0\n  const end_angle = opts.end_angle != null ? opts.end_angle : (start_angle + 2*Math.PI)\n\n  const angle_span = Math.abs(end_angle - start_angle)\n  const to_radians = (x: number) => angle_span*x\n\n  const total_value = sum(values)\n  const normalized_values = values.map((v) => v/total_value)\n  const cumulative_values = cumsum(normalized_values)\n\n  const end_angles = cumulative_values.map((v) => start_angle + to_radians(v))\n  const start_angles = [start_angle].concat(end_angles.slice(0, -1))\n  const half_angles = zip(start_angles, end_angles).map(([start, end]) => (start + end)/2)\n\n  let cx: number\n  let cy: number\n  if (opts.center == null) {\n    cx = 0\n    cy = 0\n  } else if (isArray(opts.center)) {\n    cx = opts.center[0]\n    cy = opts.center[1]\n  } else {\n    cx = opts.center.x\n    cy = opts.center.y\n  }\n\n  const inner_radius = opts.inner_radius != null ? opts.inner_radius : 0\n  const outer_radius = opts.outer_radius != null ? opts.outer_radius : 1\n\n  const palette = norm_palette(opts.palette)\n\n  const colors: Color[] = []\n  for (let i = 0; i < normalized_values.length; i++)\n    colors.push(palette[i % palette.length])\n  const text_colors = colors.map((c) => is_dark(hexcolor2rgb(c)) ? \"white\" : \"black\")\n\n  function to_cartesian(r: number, alpha: number): [number, number] {\n    return [r*Math.cos(alpha), r*Math.sin(alpha)]\n  }\n\n  const half_radius = (inner_radius+outer_radius)/2\n  let [text_cx, text_cy] = unzip(half_angles.map((half_angle) => to_cartesian(half_radius, half_angle)))\n  text_cx = text_cx.map((x) => x + cx)\n  text_cy = text_cy.map((y) => y + cy)\n\n  const text_angles = half_angles.map((a: number): number => {\n    if (a >= Math.PI/2 && a <= 3*Math.PI/2)\n      return a + Math.PI\n    else\n      return a\n  })\n\n  const source = new ColumnDataSource({\n    data: {\n      labels: labels,\n      values: values,\n      percentages: normalized_values.map((v) => sprintf(\"%.2f%%\", v*100)),\n      start_angles: start_angles,\n      end_angles: end_angles,\n      text_angles: text_angles,\n      colors: colors,\n      text_colors: text_colors,\n      text_cx: text_cx,\n      text_cy: text_cy,\n    },\n  })\n\n  const g1 = new AnnularWedge({\n    x: cx, y: cy,\n    inner_radius: inner_radius, outer_radius: outer_radius,\n    start_angle: {field: \"start_angles\"}, end_angle: {field: \"end_angles\"},\n    line_color: null, line_width: 1, fill_color: {field: \"colors\"},\n  })\n  const h1 = new AnnularWedge({\n    x: cx, y: cy,\n    inner_radius: inner_radius, outer_radius: outer_radius,\n    start_angle: {field: \"start_angles\"}, end_angle: {field: \"end_angles\"},\n    line_color: null, line_width: 1, fill_color: {field: \"colors\"}, fill_alpha: 0.8,\n  })\n  const r1 = new GlyphRenderer({\n    data_source: source,\n    glyph: g1,\n    hover_glyph: h1,\n  })\n\n  const g2 = new Text({\n    x: {field: \"text_cx\"}, y: {field: \"text_cy\"},\n    text: {field: opts.slice_labels || \"labels\"},\n    angle: {field: \"text_angles\"},\n    text_align: \"center\", text_baseline: \"middle\",\n    text_color: {field: \"text_colors\"}, text_font_size: \"9pt\",\n  })\n  const r2 = new GlyphRenderer({\n    data_source: source,\n    glyph: g2,\n  })\n\n  const xdr = new DataRange1d({renderers: [r1], range_padding: 0.2})\n  const ydr = new DataRange1d({renderers: [r1], range_padding: 0.2})\n  const plot = new Plot({x_range: xdr, y_range: ydr})\n\n  if (opts.width != null) plot.plot_width = opts.width\n  if (opts.height != null) plot.plot_height = opts.height\n\n  plot.add_renderers(r1, r2)\n\n  const tooltip = \"<div>@labels</div><div><b>@values</b> (@percentages)</div>\"\n  const hover = new HoverTool({renderers: [r1], tooltips: tooltip})\n  plot.add_tools(hover)\n\n  return plot\n}\n\nexport type BarChartData = number[][]\n\nexport interface BarChartOpts extends ChartOpts {\n  stacked?: boolean\n  orientation?: \"horizontal\" | \"vertical\"\n  bar_width?: number\n  palette?: Palette | Color[]\n  axis_number_format?: string\n}\n\nexport function bar(data: BarChartData, opts: BarChartOpts = {}): Plot {\n  const column_names = data[0]\n  const rows = data.slice(1)\n\n  let columns: number[][] = column_names.map((_) => [])\n  for (const row of rows) {\n    for (let i = 0; i < row.length; i++) {\n      columns[i].push(row[i])\n    }\n  }\n\n  const labels = columns[0].map((v) => v.toString())\n  columns = columns.slice(1)\n\n  let yaxis: Axis = new CategoricalAxis()\n  let ydr: Range = new FactorRange({factors: labels})\n  let yscale: Scale = new CategoricalScale()\n\n  let xformatter: TickFormatter\n  if (opts.axis_number_format != null)\n    xformatter = new NumeralTickFormatter({format: opts.axis_number_format})\n  else\n    xformatter = new BasicTickFormatter()\n  let xaxis: Axis = new LinearAxis({formatter: xformatter})\n  let xdr: Range = new DataRange1d({start: 0})\n  let xscale: Scale = new LinearScale()\n\n  const palette = norm_palette(opts.palette)\n\n  const stacked = opts.stacked != null ? opts.stacked : false\n  const orientation = opts.orientation != null ? opts.orientation : \"horizontal\"\n\n  const renderers: GlyphRenderer[] = []\n\n  if (stacked) {\n    const left: number[] = []\n    const right: number[] = []\n\n    for (let i = 0; i < columns.length; i++) {\n      const bottom: [string, number][] = []\n      const top: [string, number][] = []\n\n      for (let j = 0; j < labels.length; j++) {\n        const label = labels[j]\n        if (i == 0) {\n          left.push(0)\n          right.push(columns[i][j])\n        } else {\n          left[j] += columns[i-1][j]\n          right[j] += columns[i][j]\n        }\n        bottom.push([label, -0.5])\n        top.push([label, 0.5])\n      }\n\n      const source = new ColumnDataSource({\n        data: {\n          left: copy(left),\n          right: copy(right),\n          top: top,\n          bottom: bottom,\n          labels: labels,\n          values: columns[i],\n          columns: columns[i].map((_) => column_names[i+1]),\n        },\n      })\n\n      const g1 = new Quad({\n        left: {field: \"left\"}, bottom: {field: \"bottom\"},\n        right: {field: \"right\"}, top: {field: \"top\"},\n        line_color: null, fill_color: palette[i % palette.length],\n      })\n      const r1 = new GlyphRenderer({data_source: source, glyph: g1})\n      renderers.push(r1)\n    }\n  } else {\n    const dy = 1/columns.length\n\n    for (let i = 0; i < columns.length; i++) {\n      const left: number[] = []\n      const right: number[] = []\n      const bottom: [string, number][] = []\n      const top: [string, number][] = []\n\n      for (let j = 0; j < labels.length; j++) {\n        const label = labels[j]\n        left.push(0)\n        right.push(columns[i][j])\n        bottom.push([label, i*dy-0.5])\n        top.push([label, (i+1)*dy-0.5])\n      }\n\n      const source = new ColumnDataSource({\n        data: {\n          left: left,\n          right: right,\n          top: top,\n          bottom: bottom,\n          labels: labels,\n          values: columns[i],\n          columns: columns[i].map((_) => column_names[i+1]),\n        },\n      })\n\n      const g1 = new Quad({\n        left: {field: \"left\"}, bottom: {field: \"bottom\"},\n        right: {field: \"right\"}, top: {field: \"top\"},\n        line_color: null, fill_color: palette[i % palette.length],\n      })\n      const r1 = new GlyphRenderer({data_source: source, glyph: g1})\n      renderers.push(r1)\n    }\n  }\n\n  if (orientation == \"vertical\") {\n    [xdr, ydr] = [ydr, xdr];\n    [xaxis, yaxis] = [yaxis, xaxis];\n    [xscale, yscale] = [yscale, xscale];\n\n    for (const r of renderers) {\n      const data = (r.data_source as ColumnDataSource).data;\n      [data.left, data.bottom] = [data.bottom, data.left];\n      [data.right, data.top] = [data.top, data.right];\n    }\n  }\n\n  const plot = new Plot({x_range: xdr, y_range: ydr, x_scale: xscale, y_scale: yscale})\n\n  if (opts.width != null) plot.plot_width = opts.width\n  if (opts.height != null) plot.plot_height = opts.height\n\n  plot.add_renderers(...renderers)\n  plot.add_layout(yaxis, \"left\")\n  plot.add_layout(xaxis, \"below\")\n\n  const tooltip = \"<div>@labels</div><div>@columns:&nbsp<b>@values</b></div>\"\n\n  let anchor: Anchor\n  let attachment: TooltipAttachment\n  if (orientation == \"horizontal\") {\n    anchor = \"center_right\"\n    attachment = \"horizontal\"\n  } else {\n    anchor = \"top_center\"\n    attachment = \"vertical\"\n  }\n\n  const hover = new HoverTool({\n    renderers: renderers,\n    tooltips: tooltip,\n    point_policy: \"snap_to_data\",\n    anchor: anchor,\n    attachment: attachment,\n  })\n  plot.add_tools(hover)\n\n  return plot\n}\n"]}