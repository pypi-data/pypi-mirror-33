{"version":3,"sources":["models/tools/gestures/box_zoom_tool.ts"],"names":[],"mappings":"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","file":"box_zoom_tool.js","sourcesContent":["import {GestureTool, GestureToolView} from \"./gesture_tool\"\nimport {BoxAnnotation} from \"../../annotations/box_annotation\"\nimport {CartesianFrame} from \"../../canvas/cartesian_frame\"\nimport * as p from \"core/properties\"\nimport {GestureEvent} from \"core/ui_events\"\nimport {Dimensions} from \"core/enums\"\n\nexport class BoxZoomToolView extends GestureToolView {\n  model: BoxZoomTool\n\n  protected _base_point: [number, number] | null\n\n  _match_aspect(base_point: [number, number], curpoint: [number, number],\n                frame: CartesianFrame): [[number, number], [number, number]] {\n    // aspect ratio of plot frame\n    const a = frame.bbox.aspect\n    const hend = frame.bbox.h_range.end\n    const hstart = frame.bbox.h_range.start\n    const vend = frame.bbox.v_range.end\n    const vstart = frame.bbox.v_range.start\n\n    // current aspect of cursor-defined box\n    let vw = Math.abs(base_point[0]-curpoint[0])\n    let vh = Math.abs(base_point[1]-curpoint[1])\n\n    const va = vh == 0 ? 0 : vw/vh\n    const [xmod,] = va >= a ? [1, va/a] : [a/va, 1]\n\n    // OK the code blocks below merit some explanation. They do:\n    //\n    // compute left/right, pin to frame if necessary\n    // compute top/bottom (based on new left/right), pin to frame if necessary\n    // recompute left/right (based on top/bottom), in case top/bottom were pinned\n\n    // base_point[0] is left\n    let left: number\n    let right: number\n    if (base_point[0] <= curpoint[0]) {\n      left = base_point[0]\n      right = base_point[0] + vw * xmod\n      if (right > hend)\n        right = hend\n    // base_point[0] is right\n    } else {\n      right = base_point[0]\n      left = base_point[0] - vw * xmod\n      if (left < hstart)\n        left = hstart\n    }\n\n    vw = Math.abs(right - left)\n\n    // base_point[1] is bottom\n    let top: number\n    let bottom: number\n    if (base_point[1] <= curpoint[1]) {\n      bottom = base_point[1]\n      top = base_point[1] + vw/a\n      if (top > vend)\n        top = vend\n    // base_point[1] is top\n    } else {\n      top = base_point[1]\n      bottom = base_point[1] - vw/a\n      if (bottom < vstart)\n        bottom = vstart\n    }\n\n    vh = Math.abs(top - bottom)\n\n    // base_point[0] is left\n    if (base_point[0] <= curpoint[0])\n      right = base_point[0] + a*vh\n    // base_point[0] is right\n    else\n      left = base_point[0] - a*vh\n\n    return [[left, right], [bottom, top]]\n  }\n\n  protected _compute_limits(curpoint: [number, number]): [[number, number], [number, number]] {\n    const frame = this.plot_model.frame\n    const dims = this.model.dimensions\n\n    let base_point = this._base_point!\n    if (this.model.origin == \"center\") {\n      const [cx, cy] = base_point\n      const [dx, dy] = curpoint\n      base_point = [cx - (dx - cx), cy - (dy - cy)]\n    }\n\n    let sx: [number, number]\n    let sy: [number, number]\n    if (this.model.match_aspect && dims == 'both')\n      [sx, sy] = this._match_aspect(base_point, curpoint, frame)\n    else\n      [sx, sy] = this.model._get_dim_limits(base_point, curpoint, frame, dims)\n\n    return [sx, sy]\n  }\n\n  _pan_start(ev: GestureEvent): void {\n    this._base_point = [ev.sx, ev.sy]\n  }\n\n  _pan(ev: GestureEvent): void {\n    const curpoint: [number, number] = [ev.sx, ev.sy]\n    const [sx, sy] = this._compute_limits(curpoint)\n    this.model.overlay.update({left: sx[0], right: sx[1], top: sy[0], bottom: sy[1]})\n  }\n\n  _pan_end(ev: GestureEvent): void {\n    const curpoint: [number, number] = [ev.sx, ev.sy]\n    const [sx, sy] = this._compute_limits(curpoint)\n    this._update(sx, sy)\n\n    this.model.overlay.update({left: null, right: null, top: null, bottom: null})\n    this._base_point = null\n  }\n\n  _update([sx0, sx1]: [number, number], [sy0, sy1]: [number, number]): void {\n    // If the viewing window is too small, no-op: it is likely that the user did\n    // not intend to make this box zoom and instead was trying to cancel out of the\n    // zoom, a la matplotlib's ToolZoom. Like matplotlib, set the threshold at 5 pixels.\n    if (Math.abs(sx1 - sx0) <= 5 || Math.abs(sy1 - sy0) <= 5)\n      return\n\n    const {xscales, yscales} = this.plot_model.frame\n\n    const xrs: {[key: string]: {start: number, end: number}} = {}\n    for (const name in xscales) {\n      const scale = xscales[name]\n      const [start, end] = scale.r_invert(sx0, sx1)\n      xrs[name] = {start: start, end: end}\n    }\n\n    const yrs: {[key: string]: {start: number, end: number}} = {}\n    for (const name in yscales) {\n      const scale = yscales[name]\n      const [start, end] = scale.r_invert(sy0, sy1)\n      yrs[name] = {start: start, end: end}\n    }\n\n    const zoom_info = {\n      xrs: xrs,\n      yrs: yrs,\n    }\n\n    this.plot_view.push_state('box_zoom', {range: zoom_info})\n    this.plot_view.update_range(zoom_info)\n  }\n}\n\nconst DEFAULT_BOX_OVERLAY = () => {\n  return new BoxAnnotation({\n    level: \"overlay\",\n    render_mode: \"css\",\n    top_units: \"screen\",\n    left_units: \"screen\",\n    bottom_units: \"screen\",\n    right_units: \"screen\",\n    fill_color: {value: \"lightgrey\"},\n    fill_alpha: {value: 0.5},\n    line_color: {value: \"black\"},\n    line_alpha: {value: 1.0},\n    line_width: {value: 2},\n    line_dash: {value: [4, 4]},\n  })\n}\n\nexport namespace BoxZoomTool {\n  export interface Attrs extends GestureTool.Attrs {\n    dimensions: Dimensions\n    overlay: BoxAnnotation\n    match_aspect: boolean\n    origin: \"corner\" | \"center\"\n  }\n\n  export interface Props extends GestureTool.Props {}\n}\n\nexport interface BoxZoomTool extends BoxZoomTool.Attrs {}\n\nexport class BoxZoomTool extends GestureTool {\n\n  properties: BoxZoomTool.Props\n\n  constructor(attrs?: Partial<BoxZoomTool.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = \"BoxZoomTool\"\n    this.prototype.default_view = BoxZoomToolView\n\n    this.define({\n      dimensions:   [ p.Dimensions, \"both\"            ],\n      overlay:      [ p.Instance, DEFAULT_BOX_OVERLAY ],\n      match_aspect: [ p.Bool,     false               ],\n      origin:       [ p.String,   \"corner\"            ], // Enum\n    })\n  }\n\n  tool_name = \"Box Zoom\"\n  icon = \"bk-tool-icon-box-zoom\"\n  event_type = \"pan\" as \"pan\"\n  default_order = 20\n\n  get tooltip(): string {\n    return this._get_dim_tooltip(this.tool_name, this.dimensions)\n  }\n}\n\nBoxZoomTool.initClass()\n"]}