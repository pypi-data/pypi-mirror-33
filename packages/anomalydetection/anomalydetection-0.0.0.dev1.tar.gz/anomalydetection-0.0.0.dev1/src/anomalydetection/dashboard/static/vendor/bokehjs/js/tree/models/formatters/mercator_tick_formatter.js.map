{"version":3,"sources":["models/formatters/mercator_tick_formatter.ts"],"names":[],"mappings":";;;AAAA,+DAAyD;AAGzD,mCAAoC;AACpC,qDAAoD;AAYpD;IAA2C,iDAAkB;IAI3D,+BAAY,KAA4C;eACtD,kBAAM,KAAK,CAAC;IACd,CAAC;IAEM,+BAAS,GAAhB;QACE,IAAI,CAAC,SAAS,CAAC,IAAI,GAAG,uBAAuB,CAAA;QAE7C,IAAI,CAAC,MAAM,CAAC;YACV,SAAS,EAAE,CAAE,CAAC,CAAC,MAAM,CAAE;SACxB,CAAC,CAAA;IACJ,CAAC;IAED,wCAAQ,GAAR,UAAS,KAAe,EAAE,IAAU;QAClC,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI;YACxB,MAAM,IAAI,KAAK,CAAC,gDAAgD,CAAC,CAAA;QAEnE,IAAI,KAAK,CAAC,MAAM,IAAI,CAAC;YACnB,OAAO,EAAE,CAAA;QAEX,IAAM,CAAC,GAAG,KAAK,CAAC,MAAM,CAAA;QACtB,IAAM,UAAU,GAAG,IAAI,KAAK,CAAC,CAAC,CAAC,CAAA;QAE/B,IAAI,IAAI,CAAC,SAAS,IAAI,KAAK,EAAE;YAC3B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;gBACnB,IAAA,mEAAG,CAAiD;gBAC3D,UAAU,CAAC,CAAC,CAAC,GAAG,GAAG,CAAA;aACpB;SACF;aAAM;YACL,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;gBACpB,IAAA,+DAAsD,EAAnD,WAAG,CAAgD;gBAC5D,UAAU,CAAC,CAAC,CAAC,GAAG,GAAG,CAAA;aACpB;SACF;QAED,OAAO,iBAAM,QAAQ,YAAC,UAAU,EAAE,IAAI,CAAC,CAAA;IACzC,CAAC;IACH,4BAAC;AAAD,CAxCA,AAwCC,CAxC0C,yCAAkB,GAwC5D;AAxCY,sDAAqB;AAyClC,qBAAqB,CAAC,SAAS,EAAE,CAAA","file":"mercator_tick_formatter.js","sourcesContent":["import {BasicTickFormatter} from \"./basic_tick_formatter\"\nimport {Axis} from \"../axes/axis\"\nimport {LatLon} from \"core/enums\"\nimport * as p from \"core/properties\"\nimport {wgs84_mercator} from \"core/util/projections\"\n\nexport namespace MercatorTickFormatter {\n  export interface Attrs extends BasicTickFormatter.Attrs {\n    dimension: LatLon\n  }\n\n  export interface Props extends BasicTickFormatter.Props {}\n}\n\nexport interface MercatorTickFormatter extends MercatorTickFormatter.Attrs {}\n\nexport class MercatorTickFormatter extends BasicTickFormatter {\n\n  properties: MercatorTickFormatter.Props\n\n  constructor(attrs?: Partial<MercatorTickFormatter.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = 'MercatorTickFormatter'\n\n    this.define({\n      dimension: [ p.LatLon ],\n    })\n  }\n\n  doFormat(ticks: number[], axis: Axis): string[] {\n    if (this.dimension == null)\n      throw new Error(\"MercatorTickFormatter.dimension not configured\")\n\n    if (ticks.length == 0)\n      return []\n\n    const n = ticks.length\n    const proj_ticks = new Array(n)\n\n    if (this.dimension == \"lon\") {\n      for (let i = 0; i < n; i++) {\n        const [lon,] = wgs84_mercator.inverse([ticks[i], axis.loc])\n        proj_ticks[i] = lon\n      }\n    } else {\n      for (let i = 0; i < n; i++) {\n        const [, lat] = wgs84_mercator.inverse([axis.loc, ticks[i]])\n        proj_ticks[i] = lat\n      }\n    }\n\n    return super.doFormat(proj_ticks, axis)\n  }\n}\nMercatorTickFormatter.initClass()\n"]}