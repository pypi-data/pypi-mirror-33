{"version":3,"sources":["models/layouts/box.ts"],"names":[],"mappings":"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","file":"box.js","sourcesContent":["import {EQ, GE, WEAK_EQ, Constraint, Variable} from \"core/layout/solver\"\nimport * as p from \"core/properties\"\nimport {max, sum, includes} from \"core/util/array\"\nimport {extend} from \"core/util/object\"\n\nimport {LayoutDOM, LayoutDOMView} from \"./layout_dom\"\n\nexport interface Rect {\n  x: Variable,\n  y: Variable,\n  width: Variable,\n  height: Variable,\n}\n\nexport interface Span {\n  start: Variable,\n  size: Variable,\n}\n\nexport interface Info {\n  span: Span,\n  whitespace: {\n    before: Variable,\n    after: Variable,\n  },\n}\n\nexport class BoxView extends LayoutDOMView {\n  model: Box\n\n  connect_signals(): void {\n    super.connect_signals()\n    this.connect(this.model.properties.children.change, () => this.rebuild_child_views())\n  }\n\n  css_classes(): string[] {\n    return super.css_classes().concat(\"bk-grid\")\n  }\n\n  get_height(): number {\n    const children = this.model.get_layoutable_children()\n    const child_heights = children.map((child) => child._height.value)\n    let height: number\n    if (this.model._horizontal)\n      height = max(child_heights)\n    else\n      height = sum(child_heights)\n    return height\n  }\n\n  get_width(): number {\n    const children = this.model.get_layoutable_children()\n    const child_widths = children.map((child) => child._width.value)\n    let width: number\n    if (this.model._horizontal)\n      width = sum(child_widths)\n    else\n      width = max(child_widths)\n    return width\n  }\n}\n\nexport namespace Box {\n  export interface Attrs extends LayoutDOM.Attrs {\n    children: LayoutDOM[]\n    spacing: number\n  }\n\n  export interface Props extends LayoutDOM.Props {\n    children: p.Property<LayoutDOM[]>\n    spacing: p.Property<number>\n  }\n}\n\nexport interface Box extends Box.Attrs {}\n\nexport class Box extends LayoutDOM {\n\n  properties: Box.Props\n\n  constructor(attrs?: Partial<Box.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.type = \"Box\"\n    this.prototype.default_view = BoxView\n\n    this.define({\n      children: [ p.Array, [] ],\n    })\n\n    this.internal({\n      spacing: [ p.Number, 6 ],\n    })\n  }\n\n  _horizontal: boolean\n\n  // for children that want to be the same size\n  // as other children, make them all equal to these\n  protected _child_equal_size_width: Variable\n  protected _child_equal_size_height: Variable\n\n  // these are passed up to our parent after basing\n  // them on the child box_equal_size vars\n  protected _box_equal_size_top: Variable\n  protected _box_equal_size_bottom: Variable\n  protected _box_equal_size_left: Variable\n  protected _box_equal_size_right: Variable\n\n  // these are passed up to our parent after basing\n  // them on the child box_cell_align vars\n  protected _box_cell_align_top: Variable\n  protected _box_cell_align_bottom: Variable\n  protected _box_cell_align_left: Variable\n  protected _box_cell_align_right: Variable\n\n  initialize(): void {\n    super.initialize()\n\n    this._child_equal_size_width = new Variable(`${this.toString()}.child_equal_size_width`)\n    this._child_equal_size_height = new Variable(`${this.toString()}.child_equal_size_height`)\n\n    this._box_equal_size_top = new Variable(`${this.toString()}.box_equal_size_top`)\n    this._box_equal_size_bottom = new Variable(`${this.toString()}.box_equal_size_bottom`)\n    this._box_equal_size_left = new Variable(`${this.toString()}.box_equal_size_left`)\n    this._box_equal_size_right = new Variable(`${this.toString()}.box_equal_size_right`)\n\n    this._box_cell_align_top = new Variable(`${this.toString()}.box_cell_align_top`)\n    this._box_cell_align_bottom = new Variable(`${this.toString()}.box_cell_align_bottom`)\n    this._box_cell_align_left = new Variable(`${this.toString()}.box_cell_align_left`)\n    this._box_cell_align_right = new Variable(`${this.toString()}.box_cell_align_right`)\n  }\n\n  get_layoutable_children(): LayoutDOM[] {\n    return this.children\n  }\n\n  get_constrained_variables(): {[key: string]: Variable} {\n    return extend({}, super.get_constrained_variables(), {\n      box_equal_size_top   : this._box_equal_size_top,\n      box_equal_size_bottom: this._box_equal_size_bottom,\n      box_equal_size_left  : this._box_equal_size_left,\n      box_equal_size_right : this._box_equal_size_right,\n\n      box_cell_align_top   : this._box_cell_align_top,\n      box_cell_align_bottom: this._box_cell_align_bottom,\n      box_cell_align_left  : this._box_cell_align_left,\n      box_cell_align_right : this._box_cell_align_right,\n    })\n  }\n\n  get_constraints(): Constraint[] {\n    let constraints = super.get_constraints()\n\n    const add = (...new_constraints: Constraint[]): void => {\n      constraints.push(...new_constraints)\n    }\n\n    const children = this.get_layoutable_children()\n    if (children.length == 0)\n      // No need to continue further if there are no children. Children sure do\n      // make life a lot more complicated.\n      return constraints\n\n    for (const child of children) {\n      const vars = child.get_constrained_variables()\n\n      // Make total widget sizes fill the orthogonal direction\n      // TODO(bird) Can't we make this shorter by using span which has already picked a\n      // dominant direction (we'd just also need to set a doc_span)\n      const rect = this._child_rect(vars)\n      if (this._horizontal) {\n        if (vars.height != null)\n          add(EQ(rect.height, [-1, this._height]))\n      } else {\n        if (vars.width != null)\n          add(EQ(rect.width, [-1, this._width]))\n      }\n\n      // Add equal_size constraint\n      // - A child's \"interesting area\" (like the plot area) is the same size as the previous child\n      //   (a child can opt out of this by not returning the box_equal_size variables)\n      if (this._horizontal) {\n        if (vars.box_equal_size_left != null && vars.box_equal_size_right != null && vars.width != null)\n          add(EQ([-1, vars.box_equal_size_left], [-1, vars.box_equal_size_right], vars.width, this._child_equal_size_width))\n      } else {\n        if (vars.box_equal_size_top != null && vars.box_equal_size_bottom != null && vars.height != null)\n          add(EQ([-1, vars.box_equal_size_top], [-1, vars.box_equal_size_bottom], vars.height, this._child_equal_size_height))\n      }\n    }\n\n    // TODO(bird) - This is the second time we loop through children\n    let last = this._info(children[0].get_constrained_variables())\n    add(EQ(last.span.start, 0))\n    for (let i = 1; i < children.length; i++) {\n      const next = this._info(children[i].get_constrained_variables())\n\n      // Each child's start equals the previous child's end (unless we have a fixed layout\n      // in which case size may not be available)\n      if (last.span.size)\n        add(EQ(last.span.start, last.span.size, [-1, next.span.start]))\n\n      // The whitespace at end of one child + start of next must equal the box spacing.\n      // This must be a weak constraint because it can conflict with aligning the\n      // alignable edges in each child. Alignment is generally more important visually than spacing.\n      add(WEAK_EQ(last.whitespace.after, next.whitespace.before, 0 - this.spacing))\n\n      // If we can't satisfy the whitespace being equal to box spacing, we should fix\n      // it (align things) by increasing rather than decreasing the whitespace.\n      add(GE(last.whitespace.after, next.whitespace.before, 0 - this.spacing))\n      last = next\n    }\n\n    // Child's side has to stick to the end of the box\n    const vars = children[children.length-1].get_constrained_variables()\n    if (this._horizontal) {\n      if (vars.width != null)\n        add(EQ(last.span.start, last.span.size, [-1, this._width]))\n    } else {\n      if (vars.height != null)\n        add(EQ(last.span.start, last.span.size, [-1, this._height]))\n    }\n\n    constraints = constraints.concat(\n      // align outermost edges in both dimensions\n      this._align_outer_edges_constraints(true), // horizontal=true\n      this._align_outer_edges_constraints(false),\n\n      // line up edges in same_arity boxes\n      this._align_inner_cell_edges_constraints(),\n\n      // build our equal_size bounds from the child ones\n      this._box_equal_size_bounds(true), // horizontal=true\n      this._box_equal_size_bounds(false),\n\n      // propagate cell alignment (between same_arity boxes) up the hierarchy\n      this._box_cell_align_bounds(true), // horizontal=true\n      this._box_cell_align_bounds(false),\n\n      // build our whitespace from the child ones\n      this._box_whitespace(true), // horizontal=true\n      this._box_whitespace(false))\n\n    return constraints\n  }\n\n  protected _child_rect(vars: {[key: string]: Variable}): Rect {\n    return {\n      x: vars.origin_x,\n      y: vars.origin_y,\n      width: vars.width,\n      height: vars.height,\n    }\n  }\n\n  protected _span(rect: Rect): Span {\n    // return [coordinate, size] pair in box_aligned direction\n    if (this._horizontal)\n      return {start: rect.x, size: rect.width}\n    else\n      return {start: rect.y, size: rect.height}\n  }\n\n  protected _info(vars: {[key: string]: Variable}): Info {\n    let whitespace: {before: Variable, after: Variable}\n    if (this._horizontal)\n      whitespace = {before: vars.whitespace_left, after: vars.whitespace_right}\n    else\n      whitespace = {before: vars.whitespace_top, after: vars.whitespace_bottom}\n    const span = this._span(this._child_rect(vars))\n    return {span: span, whitespace: whitespace}\n  }\n\n  protected _flatten_cell_edge_variables(horizontal: boolean): {[key: string]: Variable[]} {\n    /*\n     * All alignment happens in terms of the\n     * box_cell_align_{left,right,top,bottom} variables. We add\n     * \"path\" information to variables so we know which ones align,\n     * where the \"path\" includes the box arity and box cell we went\n     * through.\n     *\n     * If we have a row of three plots, we should align the top and\n     * bottom variables between the three plots.\n     *\n     * The flattened dictionary in this case (for the top and left\n     * only) should be:\n     *\n     *   box_cell_align_top : [ 3 vars ]\n     *   box_cell_align_bottom : [ 3 vars ]\n     *\n     * We don't do left/right starting from a row, and left/right\n     * edges have nothing to align with here.\n     *\n     * Now say we have a row of three columns, each with three\n     * plots (3x3 = 9). We should align the top/bottom variables\n     * across the top three, middle three, and bottom three plots,\n     * as if those groupings were rows. We do this by flattening\n     * starting from the row first, which gets us a dictionary only\n     * of top/bottom variables.\n     *\n     *   box_cell_align_top col-3-0- : [ 3 plots from top of columns ]\n     *   box_cell_align_top col-3-1- : [ 3 plots from middle of columns ]\n     *   box_cell_align_top col-3-2- : [ 3 plots from bottom of columns ]\n     *\n     * \"col-3-1-\" = 3-cell column, cell index 1.\n     *\n     * In three later, separate calls to\n     * _align_inner_cell_edges_constraints() on each column, we'll\n     * get the left/right variables:\n     *\n     *   box_cell_align_left : [ 3 left-column plots ]\n     *   box_cell_align_left : [ 3 middle-column plots ]\n     *   box_cell_align_left : [ 3 right-column plots ]\n     *\n     * Now add another nesting - we have a row of three columns,\n     * each with three rows, each with three plots. This is\n     * arranged 3x9 = 27.\n     *\n     *   box_cell_align_top col-3-0- : [ 9 plots from top rows of columns ]\n     *   box_cell_align_top col-3-1- : [ 9 plots from middle rows of columns ]\n     *   box_cell_align_top col-3-2- : [ 9 plots from bottom rows of columns ]\n     *\n     * When we make the _align_inner_cell_edges_constraints() calls on each of the three\n     * columns, each column will return row-pathed values\n     *\n     *   box_cell_align_left row-3-0-: [  3 plots in left column of left column ]\n     *   box_cell_align_left row-3-1-: [  3 plots in middle column of left column ]\n     *   box_cell_align_left row-3-2-: [  3 plots in right column of left column ]\n     *   ... same for the middle and right columns\n     *\n     * Anyway in essence what we do is that we add only rows to the\n     * path to left/right variables, and only columns to the path\n     * to top/bottom variables.\n     *\n     * If we nest yet another level we would finally get paths with\n     * multiple rows or multiple columns in them.\n     */\n\n    let relevant_edges: string[]\n    if (horizontal)\n      relevant_edges = Box._top_bottom_inner_cell_edge_variables\n    else\n      relevant_edges = Box._left_right_inner_cell_edge_variables\n\n    const add_path = horizontal != this._horizontal\n\n    const children = this.get_layoutable_children()\n    const arity = children.length\n    const flattened: {[key: string]: Variable[]} = {}\n    let cell = 0\n    for (const child of children) {\n      let cell_vars: {[key: string]: Variable[]}\n      if (child instanceof Box)\n        cell_vars = child._flatten_cell_edge_variables(horizontal)\n      else\n        cell_vars = {}\n\n      const all_vars = child.get_constrained_variables()\n      for (const name of relevant_edges) {\n        if (name in all_vars)\n          cell_vars[name] = [all_vars[name]]\n      }\n\n      for (const key in cell_vars) {\n        const variables = cell_vars[key]\n        let new_key: string\n        if (add_path) {\n          const parsed = key.split(\" \")\n          const kind = parsed[0]\n          const path = parsed.length > 1 ? parsed[1] : \"\"\n          const direction = this._horizontal ?  \"row\" : \"col\"\n          // TODO should we \"ignore\" arity-1 boxes potentially by not adding a path suffix?\n          new_key = `${kind} ${direction}-${arity}-${cell}-${path}`\n        } else\n          new_key = key\n        if (new_key in flattened)\n          flattened[new_key] = flattened[new_key].concat(variables)\n        else\n          flattened[new_key] = variables\n      }\n\n      cell++\n    }\n    return flattened\n  }\n\n  // This should only be called on the toplevel box (twice,\n  // once with horizontal=true and once with horizontal=false)\n  protected _align_inner_cell_edges_constraints(): Constraint[] {\n    const constraints: Constraint[] = []\n\n    // XXX: checking for `this.document?` is a temporary hack, because document isn't always\n    // attached properly. However, if document is not attached then we know it can't be\n    // a root, because otherwise add_root() would attach it. All this layout logic should\n    // be part of views instead of models and use is_root, etc.\n    if (this.document != null && includes(this.document.roots(), this)) {\n      const flattened = this._flatten_cell_edge_variables(this._horizontal)\n\n      for (const key in flattened) {\n        const variables = flattened[key]\n\n        if (variables.length > 1) {\n          //console.log(\"constraining \", key, \" \", variables)\n          const last = variables[0]\n          for (let i = 1; i < variables.length; i++)\n            constraints.push(EQ(variables[i], [-1, last]))\n        }\n      }\n    }\n\n    return constraints\n  }\n\n  // returns a two-item array where each item is a list of edge\n  // children from the start and end respectively\n  protected _find_edge_leaves(horizontal: boolean): [LayoutDOM[], LayoutDOM[]] {\n    const children = this.get_layoutable_children()\n\n    // console.log(`  finding edge leaves in ${children.length}-${this.type}, ` +\n    //  `our orientation ${this._horizontal} finding ${horizontal} children `, children)\n\n    const leaves: [LayoutDOM[], LayoutDOM[]] = [[] , []]\n    if (children.length > 0) {\n      if (this._horizontal == horizontal) {\n        // note start and end may be the same\n        const start = children[0]\n        const end = children[children.length - 1]\n\n        if (start instanceof Box)\n          leaves[0] = leaves[0].concat(start._find_edge_leaves(horizontal)[0])\n        else\n          leaves[0].push(start)\n\n        if (end instanceof Box)\n          leaves[1] = leaves[1].concat(end._find_edge_leaves(horizontal)[1])\n        else\n          leaves[1].push(end)\n      } else {\n        // if we are a column and someone wants the horizontal edges,\n        // we return the horizontal edges from all of our children\n        for (const child of children) {\n          if (child instanceof Box) {\n            const child_leaves = child._find_edge_leaves(horizontal)\n            leaves[0] = leaves[0].concat(child_leaves[0])\n            leaves[1] = leaves[1].concat(child_leaves[1])\n          } else {\n            leaves[0].push(child)\n            leaves[1].push(child)\n          }\n        }\n      }\n    }\n\n    // console.log(\"  start leaves \", leaves[0].map((leaf) -> leaf.id)\n    // console.log(\"  end leaves \", leaves[1].map((leaf) -> leaf.id)\n\n    return leaves\n  }\n\n  protected _align_outer_edges_constraints(horizontal: boolean): Constraint[] {\n    // console.log(`${if horizontal then 'horizontal' else 'vertical'} outer edge constraints in ${this.get_layoutable_children().length}-${this.type}`)\n\n    const [start_leaves, end_leaves] = this._find_edge_leaves(horizontal)\n\n    let start_variable: string\n    let end_variable: string\n    if (horizontal) {\n      start_variable = 'on_edge_align_left'\n      end_variable = 'on_edge_align_right'\n    } else {\n      start_variable = 'on_edge_align_top'\n      end_variable = 'on_edge_align_bottom'\n    }\n\n    const collect_vars = (leaves: LayoutDOM[], name: string): Variable[] => {\n      //console.log(`collecting ${name} in `, leaves)\n      const edges: Variable[] = []\n      for (const leaf of leaves) {\n        const vars = leaf.get_constrained_variables()\n        if (name in vars)\n          edges.push(vars[name])\n          //vars[name]['_debug'] = `${name} from ${leaf.id}`\n      }\n      return edges\n    }\n\n    const start_edges = collect_vars(start_leaves, start_variable)\n    const end_edges = collect_vars(end_leaves, end_variable)\n\n    const result: Constraint[] = []\n    const add_all_equal = (edges: Variable[]): void => {\n      if (edges.length > 1) {\n        const [first] = edges\n        for (let i = 1; i < edges.length; i++) {\n          const edge = edges[i]\n          //console.log(`  constraining ${first._debug} == ${edge._debug}`)\n          result.push(EQ([-1, first], edge))\n        }\n      }\n    }\n\n    add_all_equal(start_edges)\n    add_all_equal(end_edges)\n\n    // console.log(\"computed constraints \", result)\n\n    return result\n  }\n\n  protected _box_insets_from_child_insets(horizontal: boolean,\n      child_variable_prefix: string, our_variable_prefix: string, minimum: boolean): Constraint[] {\n    const [start_leaves, end_leaves] = this._find_edge_leaves(horizontal)\n\n    let start_variable: string\n    let end_variable: string\n    let our_start: Variable\n    let our_end: Variable\n    if (horizontal) {\n      start_variable = `${child_variable_prefix}_left`\n      end_variable = `${child_variable_prefix}_right`\n      our_start = (this as any)[`${our_variable_prefix}_left`]\n      our_end = (this as any)[`${our_variable_prefix}_right`]\n    } else {\n      start_variable = `${child_variable_prefix}_top`\n      end_variable = `${child_variable_prefix}_bottom`\n      our_start = (this as any)[`${our_variable_prefix}_top`]\n      our_end = (this as any)[`${our_variable_prefix}_bottom`]\n    }\n\n    const result: Constraint[] = []\n    const add_constraints = (ours: Variable, leaves: LayoutDOM[], name: string): void => {\n      for (const leaf of leaves) {\n        const vars = leaf.get_constrained_variables()\n        if (name in vars) {\n          if (minimum)\n            result.push(GE([-1, ours], vars[name]))\n          else\n            result.push(EQ([-1, ours], vars[name]))\n        }\n      }\n    }\n\n    add_constraints(our_start, start_leaves, start_variable)\n    add_constraints(our_end, end_leaves, end_variable)\n\n    return result\n  }\n\n  protected _box_equal_size_bounds(horizontal: boolean): Constraint[] {\n    // false = box bounds equal all outer child bounds exactly\n    return this._box_insets_from_child_insets(horizontal, 'box_equal_size', '_box_equal_size', false)\n  }\n\n  protected _box_cell_align_bounds(horizontal: boolean): Constraint[] {\n    // false = box bounds equal all outer child bounds exactly\n    return this._box_insets_from_child_insets(horizontal, 'box_cell_align', '_box_cell_align', false)\n  }\n\n  protected _box_whitespace(horizontal: boolean): Constraint[] {\n    // true = box whitespace must be the minimum of child\n    // whitespaces (i.e. distance from box edge to the outermost\n    // child pixels)\n    return this._box_insets_from_child_insets(horizontal, 'whitespace', '_whitespace', true)\n  }\n\n  static _left_right_inner_cell_edge_variables = ['box_cell_align_left', 'box_cell_align_right']\n  static _top_bottom_inner_cell_edge_variables = ['box_cell_align_top', 'box_cell_align_bottom' ]\n}\n\nBox.initClass()\n"]}