{"version":3,"sources":["core/util/spatial.ts"],"names":[],"mappings":";;AAAA,mCAAqC;AACrC,+BAA4B;AAK5B;IAGE,sBAA6B,MAAqB;QAArB,WAAM,GAAN,MAAM,CAAe;QAFjC,UAAK,GAAoB,IAAI,CAAA;QAG5C,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;YACrB,IAAI,CAAC,KAAK,GAAG,IAAI,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAA;YAExC,KAAgB,UAAM,EAAN,iBAAM,EAAN,oBAAM,EAAN,IAAM;gBAAjB,IAAM,CAAC,eAAA;gBACH,IAAA,aAAI,EAAE,aAAI,EAAE,aAAI,EAAE,aAAI,CAAK;gBAClC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAA;aACvC;YAED,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAA;SACpB;IACH,CAAC;IAED,sBAAI,8BAAI;aAAR;YACE,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI;gBACpB,OAAO,YAAK,EAAE,CAAA;iBACX;gBACG,IAAA,eAAqC,EAApC,cAAI,EAAE,cAAI,EAAE,cAAI,EAAE,cAAI,CAAc;gBAC3C,OAAO,EAAC,IAAI,MAAA,EAAE,IAAI,MAAA,EAAE,IAAI,MAAA,EAAE,IAAI,MAAA,EAAC,CAAA;aAChC;QACH,CAAC;;;OAAA;IAED,6BAAM,GAAN,UAAO,IAAU;QAAjB,iBAQC;QAPC,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI;YACpB,OAAO,EAAE,CAAA;aACN;YACI,IAAA,gBAAI,EAAE,gBAAI,EAAE,gBAAI,EAAE,gBAAI,CAAQ;YACrC,IAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAA;YACzD,OAAO,OAAO,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,KAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAd,CAAc,CAAC,CAAA;SAC1C;IACH,CAAC;IAED,8BAAO,GAAP,UAAQ,IAAU;QAChB,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,UAAC,EAAG;gBAAF,QAAC;YAAM,OAAA,CAAC;QAAD,CAAC,CAAC,CAAA;IAC1C,CAAC;IACH,mBAAC;AAAD,CAtCA,AAsCC,IAAA;AAtCY,oCAAY","file":"spatial.js","sourcesContent":["import FlatBush = require(\"flatbush\")\nimport {empty} from \"./bbox\"\n\nexport type Rect = {minX: number, minY: number, maxX: number, maxY: number}\nexport type IndexedRect = Rect & {i: number}\n\nexport class SpatialIndex {\n  private readonly index: FlatBush | null = null\n\n  constructor(private readonly points: IndexedRect[]) {\n    if (points.length > 0) {\n      this.index = new FlatBush(points.length)\n\n      for (const p of points) {\n        const {minX, minY, maxX, maxY} = p\n        this.index.add(minX, minY, maxX, maxY)\n      }\n\n      this.index.finish()\n    }\n  }\n\n  get bbox(): Rect {\n    if (this.index == null)\n      return empty()\n    else {\n      const {minX, minY, maxX, maxY} = this.index\n      return {minX, minY, maxX, maxY}\n    }\n  }\n\n  search(rect: Rect): IndexedRect[] {\n    if (this.index == null)\n      return []\n    else {\n      const {minX, minY, maxX, maxY} = rect\n      const indices = this.index.search(minX, minY, maxX, maxY)\n      return indices.map((j) => this.points[j])\n    }\n  }\n\n  indices(rect: Rect): number[] {\n    return this.search(rect).map(({i}) => i)\n  }\n}\n"]}