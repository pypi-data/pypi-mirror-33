<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="formatted__io5__modelA_8m" kind="file" language="Objective-C">
    <compoundname>formatted_io5_modelA.m</compoundname>
      <sectiondef kind="var">
      <memberdef kind="variable" id="formatted__io5__modelA_8m_1a29435727577bcc013fffe67e966792fc" prot="public" static="no" mutable="no">
        <type>Initialize input output channels</type>
        <definition>Initialize input output channels in_channel</definition>
        <argsstring></argsstring>
        <name>in_channel</name>
        <initializer>= CisInterface(&apos;<ref refid="classCisPlyInput" kindref="compound">CisPlyInput</ref>&apos;, &apos;inputA&apos;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/cis_interface/cis_interface/cis_interface/examples/formatted_io5/src/formatted_io5_modelA.m" line="2" column="1" bodyfile="/root/cis_interface/cis_interface/cis_interface/examples/formatted_io5/src/formatted_io5_modelA.m" bodystart="2" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="formatted__io5__modelA_8m_1a068a6b811bb09fc325508725d98e1da0" prot="public" static="no" mutable="no">
        <type></type>
        <definition>out_channel</definition>
        <argsstring></argsstring>
        <name>out_channel</name>
        <initializer>= CisInterface(&apos;<ref refid="classCisPlyOutput" kindref="compound">CisPlyOutput</ref>&apos;, &apos;outputA&apos;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/cis_interface/cis_interface/cis_interface/examples/formatted_io5/src/formatted_io5_modelA.m" line="3" column="1" bodyfile="/root/cis_interface/cis_interface/cis_interface/examples/formatted_io5/src/formatted_io5_modelA.m" bodystart="3" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="formatted__io5__modelA_8m_1aa87f4ac2d0474d83e01f0dc7dd8edf1f" prot="public" static="no" mutable="no">
        <type></type>
        <definition>Send output to output channel If there is an the flag will be False flag</definition>
        <argsstring></argsstring>
        <name>flag</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/cis_interface/cis_interface/cis_interface/examples/formatted_io5/src/formatted_io5_modelA.m" line="5" column="1" bodyfile="/root/cis_interface/cis_interface/cis_interface/examples/formatted_io5/src/formatted_io5_modelA.m" bodystart="5" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="formatted__io5__modelA_8m_1a292d426c5cd5cf646fa05bc321d704a9" prot="public" static="no" mutable="no">
        <type>Loop until there is no longer input or the queues are closed while flag Receive input from input channel If there is an</type>
        <definition>Send output to output channel If there is an error</definition>
        <argsstring></argsstring>
        <name>error</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/cis_interface/cis_interface/cis_interface/examples/formatted_io5/src/formatted_io5_modelA.m" line="11" column="1" bodyfile="/root/cis_interface/cis_interface/cis_interface/examples/formatted_io5/src/formatted_io5_modelA.m" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="formatted__io5__modelA_8m_1aaef95610cc303ba06378b1f5b7a10cfd" prot="public" static="no" mutable="no">
        <type>Loop until there is no longer input or the queues are closed while flag Receive input from input channel If there is an the flag will be</type>
        <definition>Loop until there is no longer input or the queues are closed while flag Receive input from input channel If there is an the flag will be False[flag, ply]</definition>
        <argsstring>[flag, ply]</argsstring>
        <name>False</name>
        <initializer>= in_channel.recv()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/cis_interface/cis_interface/cis_interface/examples/formatted_io5/src/formatted_io5_modelA.m" line="11" column="1" bodyfile="/root/cis_interface/cis_interface/cis_interface/examples/formatted_io5/src/formatted_io5_modelA.m" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="formatted__io5__modelA_8m_1ad059b08b8ea1424fe0a60a9d54e13ef6" prot="public" static="no" mutable="no">
        <type>if(~flag) disp( &apos;Model A</type>
        <definition>if (~flag) disp(&apos;Model A break</definition>
        <argsstring></argsstring>
        <name>break</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/cis_interface/cis_interface/cis_interface/examples/formatted_io5/src/formatted_io5_modelA.m" line="15" column="1" bodyfile="/root/cis_interface/cis_interface/cis_interface/examples/formatted_io5/src/formatted_io5_modelA.m" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="formatted__io5__modelA_8m_1afb358f48b1646c750fb9da6c6585be2b" prot="public" static="no" mutable="no">
        <type></type>
        <definition>end</definition>
        <argsstring></argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/cis_interface/cis_interface/cis_interface/examples/formatted_io5/src/formatted_io5_modelA.m" line="16" column="1" bodyfile="/root/cis_interface/cis_interface/cis_interface/examples/formatted_io5/src/formatted_io5_modelA.m" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="formatted__io5__modelA_8m_1a6f6ccfcf58b31cb6412107d9d5281426" prot="public" static="no" mutable="no">
        <type>for</type>
        <definition>for i</definition>
        <argsstring></argsstring>
        <name>i</name>
        <initializer>= 1:ply.nvert
    fprintf(&apos;   %f, %f, %f\n&apos;, ...
	    ply[&apos;vertices&apos;][i][0], ply[&apos;vertices&apos;][i][1], ply[&apos;vertices&apos;][i][2])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/cis_interface/cis_interface/cis_interface/examples/formatted_io5/src/formatted_io5_modelA.m" line="21" column="1" bodyfile="/root/cis_interface/cis_interface/cis_interface/examples/formatted_io5/src/formatted_io5_modelA.m" bodystart="21" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="formatted__io5__modelA_8m_1af48321bd400bab24327f2c4d89462c6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Print received message</type>
        <definition>Print received message fprintf</definition>
        <argsstring>(&apos;Model A:(%d verts, %d faces)\n&apos;, ply.nvert, ply.nface)</argsstring>
        <name>fprintf</name>
        <param>
          <type>&apos;Model A:(%d verts, %d faces)\n&apos;</type>
        </param>
        <param>
          <type>ply.</type>
          <declname>nvert</declname>
        </param>
        <param>
          <type>ply.</type>
          <declname>nface</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/cis_interface/cis_interface/cis_interface/examples/formatted_io5/src/formatted_io5_modelA.m" line="19" column="1"/>
      </memberdef>
      <memberdef kind="function" id="formatted__io5__modelA_8m_1aa2579637c1da1ea7c57adc32ebca02e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fprintf</definition>
        <argsstring>(&apos; Vertices:\n&apos;)</argsstring>
        <name>fprintf</name>
        <param>
          <type>&apos; Vertices:\n&apos;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/cis_interface/cis_interface/cis_interface/examples/formatted_io5/src/formatted_io5_modelA.m" line="20" column="1"/>
      </memberdef>
      <memberdef kind="function" id="formatted__io5__modelA_8m_1a6186e9fb150839a767a65346e1732f88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fprintf</definition>
        <argsstring>(&apos; Faces:\n&apos;)</argsstring>
        <name>fprintf</name>
        <param>
          <type>&apos; Faces:\n&apos;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/cis_interface/cis_interface/cis_interface/examples/formatted_io5/src/formatted_io5_modelA.m" line="25" column="1"/>
      </memberdef>
      <memberdef kind="function" id="formatted__io5__modelA_8m_1adf5c804dfce7a70e36dda02995fad481" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>exit</definition>
        <argsstring>(0)</argsstring>
        <name>exit</name>
        <param>
          <type>0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/cis_interface/cis_interface/cis_interface/examples/formatted_io5/src/formatted_io5_modelA.m" line="41" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal">%<sp/>Initialize<sp/>input/output<sp/>channels<sp/></highlight></codeline>
<codeline lineno="2"><highlight class="normal">in_channel<sp/>=<sp/>CisInterface(</highlight><highlight class="stringliteral">&apos;CisPlyInput&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;inputA&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3"><highlight class="normal">out_channel<sp/>=<sp/>CisInterface(</highlight><highlight class="stringliteral">&apos;CisPlyOutput&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;outputA&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal">flag<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal">%<sp/>Loop<sp/>until<sp/>there<sp/>is<sp/>no<sp/>longer<sp/>input<sp/>or<sp/>the<sp/>queues<sp/>are<sp/>closed</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>flag</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/>%<sp/>Receive<sp/>input<sp/>from<sp/>input<sp/>channel</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/>%<sp/>If<sp/>there<sp/>is<sp/>an<sp/>error,<sp/>the<sp/>flag<sp/>will<sp/>be<sp/>False.</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/>[flag,<sp/>ply]<sp/>=<sp/>in_channel.recv();</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(~flag)</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>disp(</highlight><highlight class="stringliteral">&apos;Model<sp/>A:<sp/>No<sp/>more<sp/>input.&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/>end;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/>%<sp/>Print<sp/>received<sp/>message</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/>fprintf(</highlight><highlight class="stringliteral">&apos;Model<sp/>A:<sp/>(%d<sp/>verts,<sp/>%d<sp/>faces)\n&apos;</highlight><highlight class="normal">,<sp/>ply.nvert,<sp/>ply.nface);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/>fprintf(</highlight><highlight class="stringliteral">&apos;<sp/><sp/>Vertices:\n&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1:ply.nvert</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(</highlight><highlight class="stringliteral">&apos;<sp/><sp/><sp/>%f,<sp/>%f,<sp/>%f\n&apos;</highlight><highlight class="normal">,<sp/>...</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ply[</highlight><highlight class="stringliteral">&apos;vertices&apos;</highlight><highlight class="normal">][i][0],<sp/>ply[</highlight><highlight class="stringliteral">&apos;vertices&apos;</highlight><highlight class="normal">][i][1],<sp/>ply[</highlight><highlight class="stringliteral">&apos;vertices&apos;</highlight><highlight class="normal">][i][2]);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/>end;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>fprintf(</highlight><highlight class="stringliteral">&apos;<sp/><sp/>Faces:\n&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1:ply.nface</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(</highlight><highlight class="stringliteral">&apos;<sp/><sp/><sp/>%d,<sp/>%d,<sp/>%d\n&apos;</highlight><highlight class="normal">,<sp/>...</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ply[</highlight><highlight class="stringliteral">&apos;faces&apos;</highlight><highlight class="normal">][i][0],<sp/>ply[</highlight><highlight class="stringliteral">&apos;faces&apos;</highlight><highlight class="normal">][i][1],<sp/>ply[</highlight><highlight class="stringliteral">&apos;faces&apos;</highlight><highlight class="normal">][i][2]);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>end;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>%<sp/>Send<sp/>output<sp/>to<sp/>output<sp/>channel</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>%<sp/>If<sp/>there<sp/>is<sp/>an<sp/>error,<sp/>the<sp/>flag<sp/>will<sp/>be<sp/>False</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>flag<sp/>=<sp/>out_channel.send(ply);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(~flag)</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>disp(</highlight><highlight class="stringliteral">&apos;Model<sp/>A:<sp/>Error<sp/>sending<sp/>output.&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>end;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="39"><highlight class="normal">end;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal">exit(0);</highlight></codeline>
    </programlisting>
    <location file="/root/cis_interface/cis_interface/cis_interface/examples/formatted_io5/src/formatted_io5_modelA.m"/>
  </compounddef>
</doxygen>
