<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="AsciiFile_8h" kind="file" language="C++">
    <compoundname>AsciiFile.h</compoundname>
    <includes refid="tools_8h" local="no">../tools.h</includes>
    <includedby refid="AsciiFileComm_8h" local="no">/root/cis_interface/cis_interface/cis_interface/communication/AsciiFileComm.h</includedby>
    <includedby refid="AsciiTable_8h" local="yes">/root/cis_interface/cis_interface/cis_interface/dataio/AsciiTable.h</includedby>
    <includedby refid="CisInterface_8h" local="no">/root/cis_interface/cis_interface/cis_interface/interface/CisInterface.h</includedby>
    <includedby refid="PsiInterface_8h" local="no">/root/cis_interface/cis_interface/cis_interface/interface/PsiInterface.h</includedby>
    <incdepgraph>
      <node id="303">
        <label>stdint.h</label>
        <link refid="stdint_8h_source"/>
        <childnode refid="304" relation="include">
        </childnode>
        <childnode refid="305" relation="include">
        </childnode>
      </node>
      <node id="298">
        <label>stdarg.h</label>
      </node>
      <node id="297">
        <label>stdlib.h</label>
      </node>
      <node id="299">
        <label>errno.h</label>
      </node>
      <node id="305">
        <label>stddef.h</label>
      </node>
      <node id="294">
        <label>../tools.h</label>
        <link refid="tools_8h_source"/>
        <childnode refid="295" relation="include">
        </childnode>
        <childnode refid="296" relation="include">
        </childnode>
        <childnode refid="297" relation="include">
        </childnode>
        <childnode refid="298" relation="include">
        </childnode>
        <childnode refid="299" relation="include">
        </childnode>
        <childnode refid="300" relation="include">
        </childnode>
        <childnode refid="301" relation="include">
        </childnode>
        <childnode refid="303" relation="include">
        </childnode>
        <childnode refid="306" relation="include">
        </childnode>
      </node>
      <node id="293">
        <label>/root/cis_interface/cis_interface/cis_interface/dataio/AsciiFile.h</label>
        <link refid="AsciiFile_8h"/>
        <childnode refid="294" relation="include">
        </childnode>
      </node>
      <node id="304">
        <label>wchar.h</label>
      </node>
      <node id="295">
        <label>string.h</label>
      </node>
      <node id="306">
        <label>unistd.h</label>
      </node>
      <node id="301">
        <label>regex_posix.h</label>
        <link refid="regex__posix_8h_source"/>
        <childnode refid="302" relation="include">
        </childnode>
        <childnode refid="303" relation="include">
        </childnode>
      </node>
      <node id="300">
        <label>time.h</label>
      </node>
      <node id="302">
        <label>regex.h</label>
      </node>
      <node id="296">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="315">
        <label>/root/cis_interface/cis_interface/cis_interface/communication/AsciiTableComm.h</label>
        <link refid="AsciiTableComm_8h_source"/>
        <childnode refid="309" relation="include">
        </childnode>
      </node>
      <node id="314">
        <label>/root/cis_interface/cis_interface/cis_interface/dataio/AsciiTable.h</label>
        <link refid="AsciiTable_8h_source"/>
        <childnode refid="308" relation="include">
        </childnode>
        <childnode refid="315" relation="include">
        </childnode>
        <childnode refid="316" relation="include">
        </childnode>
        <childnode refid="310" relation="include">
        </childnode>
        <childnode refid="313" relation="include">
        </childnode>
        <childnode refid="322" relation="include">
        </childnode>
        <childnode refid="324" relation="include">
        </childnode>
      </node>
      <node id="308">
        <label>/root/cis_interface/cis_interface/cis_interface/communication/AsciiFileComm.h</label>
        <link refid="AsciiFileComm_8h_source"/>
        <childnode refid="309" relation="include">
        </childnode>
      </node>
      <node id="322">
        <label>/root/cis_interface/cis_interface/cis_interface/serialize/AsciiTableSerialize.h</label>
        <link refid="AsciiTableSerialize_8h_source"/>
        <childnode refid="323" relation="include">
        </childnode>
      </node>
      <node id="312">
        <label>/root/cis_interface/cis_interface/cis_interface/interface/PsiInterface.hpp</label>
        <link refid="PsiInterface_8hpp_source"/>
      </node>
      <node id="324">
        <label>/root/cis_interface/cis_interface/cis_interface/serialize/FormatSerialize.h</label>
        <link refid="FormatSerialize_8h_source"/>
        <childnode refid="323" relation="include">
        </childnode>
      </node>
      <node id="319">
        <label>/root/cis_interface/cis_interface/cis_interface/communication/ServerComm.h</label>
        <link refid="ServerComm_8h_source"/>
        <childnode refid="309" relation="include">
        </childnode>
      </node>
      <node id="310">
        <label>/root/cis_interface/cis_interface/cis_interface/interface/CisInterface.h</label>
        <link refid="CisInterface_8h_source"/>
        <childnode refid="311" relation="include">
        </childnode>
        <childnode refid="313" relation="include">
        </childnode>
      </node>
      <node id="323">
        <label>/root/cis_interface/cis_interface/cis_interface/serialize/serialize.h</label>
        <link refid="serialize_8h_source"/>
        <childnode refid="309" relation="include">
        </childnode>
      </node>
      <node id="307">
        <label>/root/cis_interface/cis_interface/cis_interface/dataio/AsciiFile.h</label>
        <link refid="AsciiFile_8h"/>
        <childnode refid="308" relation="include">
        </childnode>
        <childnode refid="314" relation="include">
        </childnode>
        <childnode refid="310" relation="include">
        </childnode>
        <childnode refid="313" relation="include">
        </childnode>
      </node>
      <node id="316">
        <label>/root/cis_interface/cis_interface/cis_interface/communication/comm_header.h</label>
        <link refid="comm__header_8h_source"/>
        <childnode refid="317" relation="include">
        </childnode>
        <childnode refid="309" relation="include">
        </childnode>
        <childnode refid="318" relation="include">
        </childnode>
        <childnode refid="319" relation="include">
        </childnode>
        <childnode refid="320" relation="include">
        </childnode>
      </node>
      <node id="318">
        <label>/root/cis_interface/cis_interface/cis_interface/communication/RPCComm.h</label>
        <link refid="RPCComm_8h_source"/>
        <childnode refid="309" relation="include">
        </childnode>
      </node>
      <node id="313">
        <label>/root/cis_interface/cis_interface/cis_interface/interface/PsiInterface.h</label>
        <link refid="PsiInterface_8h_source"/>
      </node>
      <node id="320">
        <label>/root/cis_interface/cis_interface/cis_interface/communication/ZMQComm.h</label>
        <link refid="ZMQComm_8h_source"/>
        <childnode refid="309" relation="include">
        </childnode>
        <childnode refid="321" relation="include">
        </childnode>
      </node>
      <node id="311">
        <label>/root/cis_interface/cis_interface/cis_interface/interface/CisInterface.hpp</label>
        <link refid="CisInterface_8hpp_source"/>
        <childnode refid="312" relation="include">
        </childnode>
      </node>
      <node id="321">
        <label>/root/cis_interface/cis_interface/cis_interface/communication/DefaultComm.h</label>
        <link refid="DefaultComm_8h_source"/>
        <childnode refid="317" relation="include">
        </childnode>
        <childnode refid="309" relation="include">
        </childnode>
        <childnode refid="318" relation="include">
        </childnode>
        <childnode refid="319" relation="include">
        </childnode>
      </node>
      <node id="317">
        <label>/root/cis_interface/cis_interface/cis_interface/communication/ClientComm.h</label>
        <link refid="ClientComm_8h_source"/>
        <childnode refid="309" relation="include">
        </childnode>
      </node>
      <node id="309">
        <label>/root/cis_interface/cis_interface/cis_interface/communication/communication.h</label>
        <link refid="communication_8h_source"/>
        <childnode refid="310" relation="include">
        </childnode>
        <childnode refid="313" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structasciiFile__t" prot="public">asciiFile_t</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="AsciiFile_8h_1ac68bae2984ae6cc400d0e6ca823dd28b" prot="public" static="no">
        <name>LINE_SIZE_MAX</name>
        <initializer>1024*2</initializer>
        <briefdescription>
<para>Flag for checking if <ref refid="AsciiFile_8h_source" kindref="compound">AsciiFile.h</ref> has already been included. </para>        </briefdescription>
        <detaileddescription>
<para>Maximum line size. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/cis_interface/cis_interface/cis_interface/dataio/AsciiFile.h" line="12" column="9" bodyfile="/root/cis_interface/cis_interface/cis_interface/dataio/AsciiFile.h" bodystart="12" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="AsciiFile_8h_1a731c3c1bfd9021ff410ee8398db8c8a4" prot="public" static="no">
        <type>struct <ref refid="structasciiFile__t" kindref="compound">asciiFile_t</ref></type>
        <definition>typedef struct asciiFile_t  asciiFile_t</definition>
        <argsstring></argsstring>
        <name>asciiFile_t</name>
        <briefdescription>
<para>Structure containing information about an ASCII text file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/cis_interface/cis_interface/cis_interface/dataio/AsciiFile.h" line="21" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="AsciiFile_8h_1a47a6fed432d1842f8da133abcc44a88c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int af_is_open</definition>
        <argsstring>(const asciiFile_t t)</argsstring>
        <name>af_is_open</name>
        <param>
          <type>const <ref refid="structasciiFile__t" kindref="compound">asciiFile_t</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Determine if the file is open. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para>constant <ref refid="structasciiFile__t" kindref="compound">asciiFile_t</ref> file structure. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int 1 if open, 0 if closed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/cis_interface/cis_interface/cis_interface/dataio/AsciiFile.h" line="29" column="1" bodyfile="/root/cis_interface/cis_interface/cis_interface/dataio/AsciiFile.h" bodystart="29" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="AsciiFile_8h_1a4c6f40e8e6773279180c65e89cede010" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int af_open</definition>
        <argsstring>(asciiFile_t *t)</argsstring>
        <name>af_open</name>
        <param>
          <type><ref refid="structasciiFile__t" kindref="compound">asciiFile_t</ref> *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Open the file. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para>constant <ref refid="structasciiFile__t" kindref="compound">asciiFile_t</ref> file structure. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int 0 if opened successfully, -1 otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/cis_interface/cis_interface/cis_interface/dataio/AsciiFile.h" line="42" column="1" bodyfile="/root/cis_interface/cis_interface/cis_interface/dataio/AsciiFile.h" bodystart="42" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="AsciiFile_8h_1a0527ea4a37b370f03fe6da956ff82051" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int af_close</definition>
        <argsstring>(asciiFile_t *t)</argsstring>
        <name>af_close</name>
        <param>
          <type><ref refid="structasciiFile__t" kindref="compound">asciiFile_t</ref> *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Close the file. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para>constant <ref refid="structasciiFile__t" kindref="compound">asciiFile_t</ref> file structure. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int 0 if closed successfully, -1 otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/cis_interface/cis_interface/cis_interface/dataio/AsciiFile.h" line="60" column="1" bodyfile="/root/cis_interface/cis_interface/cis_interface/dataio/AsciiFile.h" bodystart="60" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="AsciiFile_8h_1a2563193ae51f894e0c1c66c465b001c7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int af_is_comment</definition>
        <argsstring>(const asciiFile_t t, const char *line)</argsstring>
        <name>af_is_comment</name>
        <param>
          <type>const <ref refid="structasciiFile__t" kindref="compound">asciiFile_t</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Check if string starts with a comment. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para>constant <ref refid="structasciiFile__t" kindref="compound">asciiFile_t</ref> file structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">line</parametername>
</parameternamelist>
<parameterdescription>
<para>constant character pointer to string that should be checked. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int 1 if line starts with a comment, 0 otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/cis_interface/cis_interface/cis_interface/dataio/AsciiFile.h" line="79" column="1" bodyfile="/root/cis_interface/cis_interface/cis_interface/dataio/AsciiFile.h" bodystart="79" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="AsciiFile_8h_1a51e5de1c6872390470c3e66717477d83" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int af_readline_full_norealloc</definition>
        <argsstring>(const asciiFile_t t, char *line, size_t n)</argsstring>
        <name>af_readline_full_norealloc</name>
        <param>
          <type>const <ref refid="structasciiFile__t" kindref="compound">asciiFile_t</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>line</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Read a single line from the file without realloc. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para>constant <ref refid="structasciiFile__t" kindref="compound">asciiFile_t</ref> file structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">line</parametername>
</parameternamelist>
<parameterdescription>
<para>constant character pointer to buffer where the read line should be stored. If line is not large enough to hold the read line, an error will be returned. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">n</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of allocated buffer. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int On success, the number of characters read, -1 on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/cis_interface/cis_interface/cis_interface/dataio/AsciiFile.h" line="96" column="1" bodyfile="/root/cis_interface/cis_interface/cis_interface/dataio/AsciiFile.h" bodystart="96" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="AsciiFile_8h_1abe2de982da7e4bc735994b9b8c1925b1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int af_readline_full</definition>
        <argsstring>(const asciiFile_t t, char **line, size_t *n)</argsstring>
        <name>af_readline_full</name>
        <param>
          <type>const <ref refid="structasciiFile__t" kindref="compound">asciiFile_t</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>line</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Read a single line from the file with realloc. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para>constant <ref refid="structasciiFile__t" kindref="compound">asciiFile_t</ref> file structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">line</parametername>
</parameternamelist>
<parameterdescription>
<para>constant character pointer to pointer to buffer where the read line should be stored. If line is not large enough to hold the read line, it will be reallocated. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">n</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to size of allocated buffer. If line is not large enough to hold the read line and is reallocated, n will be changed to the new size. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int On success, the number of characters read, -1 on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/cis_interface/cis_interface/cis_interface/dataio/AsciiFile.h" line="119" column="1" bodyfile="/root/cis_interface/cis_interface/cis_interface/dataio/AsciiFile.h" bodystart="119" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="AsciiFile_8h_1ae1b11621aad35b3a39ebb6f36385cf94" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int af_writeline_full</definition>
        <argsstring>(const asciiFile_t t, const char *line)</argsstring>
        <name>af_writeline_full</name>
        <param>
          <type>const <ref refid="structasciiFile__t" kindref="compound">asciiFile_t</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Write a single line to the file. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para>constant <ref refid="structasciiFile__t" kindref="compound">asciiFile_t</ref> file structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">line</parametername>
</parameternamelist>
<parameterdescription>
<para>constant character pointer to string that should be written. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int On success, the number of characters written, -1 on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/cis_interface/cis_interface/cis_interface/dataio/AsciiFile.h" line="133" column="1" bodyfile="/root/cis_interface/cis_interface/cis_interface/dataio/AsciiFile.h" bodystart="133" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="AsciiFile_8h_1affb789e2968d0c952d24c8b5b64b5320" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int af_update</definition>
        <argsstring>(asciiFile_t *t, const char *filepath, const char *io_mode)</argsstring>
        <name>af_update</name>
        <param>
          <type><ref refid="structasciiFile__t" kindref="compound">asciiFile_t</ref> *</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>filepath</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>io_mode</declname>
        </param>
        <briefdescription>
<para>Update an existing <ref refid="structasciiFile__t" kindref="compound">asciiFile_t</ref> structure. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para>asciiFile_t* Address of file structure to update. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">filepath</parametername>
</parameternamelist>
<parameterdescription>
<para>constant character pointer to file path. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">io_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>constant character pointer to I/O mode. &quot;r&quot; for read, &quot;w&quot; for write. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int -1 if there is an error, 0 otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/cis_interface/cis_interface/cis_interface/dataio/AsciiFile.h" line="148" column="1" bodyfile="/root/cis_interface/cis_interface/cis_interface/dataio/AsciiFile.h" bodystart="148" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="AsciiFile_8h_1a90670937615370b08cd7dfafad8fbbba" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasciiFile__t" kindref="compound">asciiFile_t</ref></type>
        <definition>static asciiFile_t asciiFile</definition>
        <argsstring>(const char *filepath, const char *io_mode, const char *comment, const char *newline)</argsstring>
        <name>asciiFile</name>
        <param>
          <type>const char *</type>
          <declname>filepath</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>io_mode</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>comment</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>newline</declname>
        </param>
        <briefdescription>
<para>Constructor for <ref refid="structasciiFile__t" kindref="compound">asciiFile_t</ref> structure. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">filepath</parametername>
</parameternamelist>
<parameterdescription>
<para>constant character pointer to file path. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">io_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>const character pointer to I/O mode. &quot;r&quot; for read, &quot;w&quot; for write. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">comment</parametername>
</parameternamelist>
<parameterdescription>
<para>const character pointer to character(s) that should indicate a comment. If NULL, comment is set to &quot;# &quot;. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">newline</parametername>
</parameternamelist>
<parameterdescription>
<para>const character pointer to character(s) that should indicate a newline. If NULL, newline is set to &quot;\n&quot;. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structasciiFile__t" kindref="compound">asciiFile_t</ref> File structure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/cis_interface/cis_interface/cis_interface/dataio/AsciiFile.h" line="166" column="1" bodyfile="/root/cis_interface/cis_interface/cis_interface/dataio/AsciiFile.h" bodystart="166" bodyend="181"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="2"><highlight class="preprocessor">#ifndef<sp/>ASCIIFILE_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ASCIIFILE_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;../tools.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus<sp/></highlight><highlight class="comment">/*<sp/>If<sp/>this<sp/>is<sp/>a<sp/>C++<sp/>compiler,<sp/>use<sp/>C<sp/>linkage<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="preprocessor">#define<sp/>LINE_SIZE_MAX<sp/>1024*2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="15" refid="structasciiFile__t" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasciiFile__t" kindref="compound">asciiFile_t</ref><sp/>{</highlight></codeline>
<codeline lineno="16" refid="structasciiFile__t_1a9141b66096494327a32fa51c6b8281cc" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structasciiFile__t_1a9141b66096494327a32fa51c6b8281cc" kindref="member">filepath</ref>;<sp/></highlight></codeline>
<codeline lineno="17" refid="structasciiFile__t_1a89b8b86d814353fea003c9c54204d8af" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="structasciiFile__t_1a89b8b86d814353fea003c9c54204d8af" kindref="member">io_mode</ref>[64];<sp/></highlight></codeline>
<codeline lineno="18" refid="structasciiFile__t_1aa6b01ebf820bd2c7bc7003e7b0669092" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="structasciiFile__t_1aa6b01ebf820bd2c7bc7003e7b0669092" kindref="member">comment</ref>[64];<sp/></highlight></codeline>
<codeline lineno="19" refid="structasciiFile__t_1aa98795a5f431ada3d3548bc9b29c936f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="structasciiFile__t_1aa98795a5f431ada3d3548bc9b29c936f" kindref="member">newline</ref>[64];<sp/></highlight></codeline>
<codeline lineno="20" refid="structasciiFile__t_1a799e768ea6b00c3cdf49303950b015b6" refkind="member"><highlight class="normal"><sp/><sp/>FILE<sp/>*<ref refid="structasciiFile__t_1a799e768ea6b00c3cdf49303950b015b6" kindref="member">fd</ref>;<sp/></highlight></codeline>
<codeline lineno="21"><highlight class="normal">}<sp/><ref refid="structasciiFile__t" kindref="compound">asciiFile_t</ref>;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>af_is_open(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasciiFile__t" kindref="compound">asciiFile_t</ref><sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t.<ref refid="structasciiFile__t_1a799e768ea6b00c3cdf49303950b015b6" kindref="member">fd</ref><sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="34"><highlight class="normal">};</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>af_open(<ref refid="structasciiFile__t" kindref="compound">asciiFile_t</ref><sp/>*t)<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(af_is_open(*t)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>(*t).fd<sp/>=<sp/>fopen((*t).filepath,<sp/>(*t).io_mode);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*t).fd<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="52"><highlight class="normal">};</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>af_close(<ref refid="structasciiFile__t" kindref="compound">asciiFile_t</ref><sp/>*t)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(af_is_open(*t)<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>fclose((*t).fd);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>(*t).fd<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="70"><highlight class="normal">};</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>af_is_comment(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasciiFile__t" kindref="compound">asciiFile_t</ref><sp/>t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*line)<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strncmp(line,<sp/>t.<ref refid="structasciiFile__t_1aa6b01ebf820bd2c7bc7003e7b0669092" kindref="member">comment</ref>,<sp/>strlen(t.<ref refid="structasciiFile__t_1aa6b01ebf820bd2c7bc7003e7b0669092" kindref="member">comment</ref>))<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="84"><highlight class="normal">};</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>af_readline_full_norealloc(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasciiFile__t" kindref="compound">asciiFile_t</ref><sp/>t,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*line,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(af_is_open(t)<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fgets(line,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)n,<sp/>t.<ref refid="structasciiFile__t_1a799e768ea6b00c3cdf49303950b015b6" kindref="member">fd</ref>)<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nread<sp/>=<sp/>(int)strlen(line);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((nread<sp/>&lt;<sp/>((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)n<sp/>-<sp/>1))<sp/>||<sp/>(line[nread<sp/>-<sp/>1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)<sp/>||<sp/>(feof(t.<ref refid="structasciiFile__t_1a799e768ea6b00c3cdf49303950b015b6" kindref="member">fd</ref>)))</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nread;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="106"><highlight class="normal">};</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>af_readline_full(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasciiFile__t" kindref="compound">asciiFile_t</ref><sp/>t,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**line,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*n)<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(af_is_open(t)<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)getline(line,<sp/>n,<sp/>t.<ref refid="structasciiFile__t_1a799e768ea6b00c3cdf49303950b015b6" kindref="member">fd</ref>);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="124"><highlight class="normal">};</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>af_writeline_full(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasciiFile__t" kindref="compound">asciiFile_t</ref><sp/>t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*line)<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(af_is_open(t)<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)fwrite(line,<sp/>1,<sp/>strlen(line),<sp/>t.<ref refid="structasciiFile__t_1a799e768ea6b00c3cdf49303950b015b6" kindref="member">fd</ref>);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="137"><highlight class="normal">};</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>af_update(<ref refid="structasciiFile__t" kindref="compound">asciiFile_t</ref><sp/>*t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filepath,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*io_mode)<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>t-&gt;<ref refid="structasciiFile__t_1a9141b66096494327a32fa51c6b8281cc" kindref="member">filepath</ref><sp/>=<sp/>filepath;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>strcpy(t-&gt;<ref refid="structasciiFile__t_1a89b8b86d814353fea003c9c54204d8af" kindref="member">io_mode</ref>,<sp/>io_mode);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="152"><highlight class="normal">};</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><ref refid="structasciiFile__t" kindref="compound">asciiFile_t</ref><sp/>asciiFile(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filepath,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*io_mode,</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*comment,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*newline)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><ref refid="structasciiFile__t" kindref="compound">asciiFile_t</ref><sp/>t;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>t.<ref refid="structasciiFile__t_1a799e768ea6b00c3cdf49303950b015b6" kindref="member">fd</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>af_update(&amp;t,<sp/>filepath,<sp/>io_mode);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>defaults<sp/>for<sp/>optional<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comment<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>strcpy(t.<ref refid="structasciiFile__t_1aa6b01ebf820bd2c7bc7003e7b0669092" kindref="member">comment</ref>,<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>strcpy(t.<ref refid="structasciiFile__t_1aa6b01ebf820bd2c7bc7003e7b0669092" kindref="member">comment</ref>,<sp/>comment);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newline<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>strcpy(t.<ref refid="structasciiFile__t_1aa98795a5f431ada3d3548bc9b29c936f" kindref="member">newline</ref>,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>strcpy(t.<ref refid="structasciiFile__t_1aa98795a5f431ada3d3548bc9b29c936f" kindref="member">newline</ref>,<sp/>newline);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="181"><highlight class="normal">};</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus<sp/></highlight><highlight class="comment">/*<sp/>If<sp/>this<sp/>is<sp/>a<sp/>C++<sp/>compiler,<sp/>end<sp/>C<sp/>linkage<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal">}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*ASCIIFILE_H_*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/root/cis_interface/cis_interface/cis_interface/dataio/AsciiFile.h"/>
  </compounddef>
</doxygen>
