<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="gs__lesson3_8m" kind="file" language="Objective-C">
    <compoundname>gs_lesson3.m</compoundname>
      <sectiondef kind="var">
      <memberdef kind="variable" id="gs__lesson3_8m_1a29435727577bcc013fffe67e966792fc" prot="public" static="no" mutable="no">
        <type>Initialize input output channels</type>
        <definition>Initialize input output channels in_channel</definition>
        <argsstring></argsstring>
        <name>in_channel</name>
        <initializer>= CisInterface(&apos;<ref refid="classCisInput" kindref="compound">CisInput</ref>&apos;, &apos;input&apos;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/cis_interface/cis_interface/cis_interface/examples/gs_lesson3/src/gs_lesson3.m" line="2" column="1" bodyfile="/root/cis_interface/cis_interface/cis_interface/examples/gs_lesson3/src/gs_lesson3.m" bodystart="2" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gs__lesson3_8m_1a068a6b811bb09fc325508725d98e1da0" prot="public" static="no" mutable="no">
        <type></type>
        <definition>out_channel</definition>
        <argsstring></argsstring>
        <name>out_channel</name>
        <initializer>= CisInterface(&apos;<ref refid="classCisOutput" kindref="compound">CisOutput</ref>&apos;, &apos;output&apos;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/cis_interface/cis_interface/cis_interface/examples/gs_lesson3/src/gs_lesson3.m" line="3" column="1" bodyfile="/root/cis_interface/cis_interface/cis_interface/examples/gs_lesson3/src/gs_lesson3.m" bodystart="3" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gs__lesson3_8m_1aa87f4ac2d0474d83e01f0dc7dd8edf1f" prot="public" static="no" mutable="no">
        <type></type>
        <definition>Send output to output channel If there is an the flag will be False flag</definition>
        <argsstring></argsstring>
        <name>flag</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/cis_interface/cis_interface/cis_interface/examples/gs_lesson3/src/gs_lesson3.m" line="5" column="1" bodyfile="/root/cis_interface/cis_interface/cis_interface/examples/gs_lesson3/src/gs_lesson3.m" bodystart="5" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gs__lesson3_8m_1a292d426c5cd5cf646fa05bc321d704a9" prot="public" static="no" mutable="no">
        <type>Loop until there is no longer input or the queues are closed while flag Receive input from input channel If there is an</type>
        <definition>Send output to output channel If there is an error</definition>
        <argsstring></argsstring>
        <name>error</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/cis_interface/cis_interface/cis_interface/examples/gs_lesson3/src/gs_lesson3.m" line="11" column="1" bodyfile="/root/cis_interface/cis_interface/cis_interface/examples/gs_lesson3/src/gs_lesson3.m" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gs__lesson3_8m_1aa382613a4783c3ccf35e0f9d3a95245b" prot="public" static="no" mutable="no">
        <type>Loop until there is no longer input or the queues are closed while flag Receive input from input channel If there is an the flag will be</type>
        <definition>Loop until there is no longer input or the queues are closed while flag Receive input from input channel If there is an the flag will be False[flag, msg]</definition>
        <argsstring>[flag, msg]</argsstring>
        <name>False</name>
        <initializer>= in_channel.recv()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/cis_interface/cis_interface/cis_interface/examples/gs_lesson3/src/gs_lesson3.m" line="11" column="1" bodyfile="/root/cis_interface/cis_interface/cis_interface/examples/gs_lesson3/src/gs_lesson3.m" bodystart="12" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="gs__lesson3_8m_1ab643e8e8fdafdd1efddbbc86809db444" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>if</definition>
        <argsstring>(~flag) disp(&apos;No more input.&apos;)</argsstring>
        <name>if</name>
        <param>
          <type>~</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/cis_interface/cis_interface/cis_interface/examples/gs_lesson3/src/gs_lesson3.m" line="13" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gs__lesson3_8m_1a7ad9dedc20ff5267270021c1b4310606" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>break end Print received message</type>
        <definition>break end Print received message fprintf</definition>
        <argsstring>(&apos;%s\n&apos;, char(msg))</argsstring>
        <name>fprintf</name>
        <param>
          <type>&apos;%s\n&apos;</type>
        </param>
        <param>
          <type>char(msg)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/cis_interface/cis_interface/cis_interface/examples/gs_lesson3/src/gs_lesson3.m" line="19" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gs__lesson3_8m_1af0aa2de5546bfb5c4fb53d1fa453016e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>break end end</type>
        <definition>break end end exit</definition>
        <argsstring>(0)</argsstring>
        <name>exit</name>
        <param>
          <type>0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/cis_interface/cis_interface/cis_interface/examples/gs_lesson3/src/gs_lesson3.m" line="31" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal">%<sp/>Initialize<sp/>input/output<sp/>channels<sp/></highlight></codeline>
<codeline lineno="2"><highlight class="normal">in_channel<sp/>=<sp/>CisInterface(</highlight><highlight class="stringliteral">&apos;CisInput&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;input&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3"><highlight class="normal">out_channel<sp/>=<sp/>CisInterface(</highlight><highlight class="stringliteral">&apos;CisOutput&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;output&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal">flag<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal">%<sp/>Loop<sp/>until<sp/>there<sp/>is<sp/>no<sp/>longer<sp/>input<sp/>or<sp/>the<sp/>queues<sp/>are<sp/>closed</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>flag</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/>%<sp/>Receive<sp/>input<sp/>from<sp/>input<sp/>channel<sp/></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/>%<sp/>If<sp/>there<sp/>is<sp/>an<sp/>error,<sp/>the<sp/>flag<sp/>will<sp/>be<sp/>False.</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/>[flag,<sp/>msg]<sp/>=<sp/>in_channel.recv();</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(~flag)</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>disp(</highlight><highlight class="stringliteral">&apos;No<sp/>more<sp/>input.&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/>end</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/>%<sp/>Print<sp/>received<sp/>message</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/>fprintf(</highlight><highlight class="stringliteral">&apos;%s\n&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">(msg));</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/>%<sp/>Send<sp/>output<sp/>to<sp/>output<sp/>channel</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/>%<sp/>If<sp/>there<sp/>is<sp/>an<sp/>error,<sp/>the<sp/>flag<sp/>will<sp/>be<sp/>False</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/>flag<sp/>=<sp/>out_channel.send(msg);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(~flag)</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>disp(</highlight><highlight class="stringliteral">&apos;Error<sp/>sending<sp/>output.&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>end</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="29"><highlight class="normal">end</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal">exit(0);</highlight></codeline>
    </programlisting>
    <location file="/root/cis_interface/cis_interface/cis_interface/examples/gs_lesson3/src/gs_lesson3.m"/>
  </compounddef>
</doxygen>
